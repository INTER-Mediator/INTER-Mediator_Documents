[
    {
        "id": 1,
        "parent": null,
        "path": "/ja/",
        "title": "マニュアルトップページ",
        "breadcrumb": "トップ",
        "body": "\n    \n        \n            \n        \n        \n            \n            マニュアル検索\n        \n        \n            \n            \n            \n        \n        \n           \n           トレーニングコース\n           \n                チュートリアルHTML版目次|EPub版\n                INTER-Mediatorの基礎から応用までをチュートリアル形式で学習できるコンテンツです。前半は最新版に合わせて改訂済みで、後半はVer.5の内容になっています。\n                \n                Chapter 1　INTER-Mediatorの概要と演習の準備\n                Chapter 2　データベースへのクエリーと一覧表示\n                Chapter 3　データベースの更新を行うページ\n                Chapter 4　コンテキストに対する理解を深める\n                Chapter 5　さまざまなユーザーインターフェース構築\n                Chapter 6　JavaScriptでのプログラミング\n                Chapter 7　セキュリティと認証・アクセス権\n                Chapter 8　サーバーサイドでのプログラミング\n                Chapter 9　INTER-Mediatorの実環境での展開\n                索引\n                \n                Ver.5のTutorialは、こちらよりご覧いただけます。\n            \n           INTER-Mediatorをはじめよう\n           \n                ビデオで始めるINTER-Mediator\n                INTER-MediatorのVMを準備する手順や、ハンズオンでの作業を行なった様子をビデオでご覧いただけます。\n                トライアル版の利用方法\n                INTER-Mediatorの試用や学習用途として利用できるトライアルWebアプリケーションの利用方法について説明しています。\n                ダウンロードとインストール(Ver.6以降)\n                INTER-Mediatorの入手方法、開発時の利用法、運用時の利用方法をまとめました。\n                スタートアップガイド\n                データベースの基本から、宣言的な記述で可能な範囲での開発手法をまとめた文書です。 データベースエンジンに絡む設定については解説はしていませんが、 ページファイルや定義ファイルをどのように記述すればいいのかということを実例とともに概念を含めた説明をしています。 2013年にINTER-Mediatorの学習可能性を調査したときに使ったテキストを加筆訂正したものです。\n                ハンズオンセッション手順書\n                Virtual Machineを利用して、ハンズオンでINTER-Mediatorを学習するための手順書を作成しました。手順に従ってコードを入力して、どのような結果になるかを見ていただけます。\n            \n            Ver.10以前の情報\n           \n                 ダウンロードとインストール(Ver.5まで)\n                INTER-Mediatorの入手方法、開発時の利用法、運用時の利用方法をまとめました。\n               バーチャルマシンの利用(Ver.8まで)\n                INTER-Mediatorの試用や学習用途として利用できるバーチャルマシンの利用方法について説明しています。Ver.10以降はDockerでの試用を想定しています。トライアル版の利用方法をご覧ください\n                  メール送信(Ver.5)\n                         メール送信(Ver.6以降)\n        データベース処理を行ったときにメールを送る事ができます。\n                Dockerの利用\n                Dockerを利用してINTER-Mediatorを稼働させるための方法を解説します。（内容はVer.5時代のものです。Ver.10現在、トライアル版（トライアル版の利用方法）としてDocker環境を用意しています）\n                 変更結果の即時更新をマルチクライアントで実現する(Ver.5)\n                同一のエンティティを複数のクライアントで開いたとき、あるユーザの変更結果を即時に他のクライアントに反映する仕組みです。\n               サーバーサイドの拡張（Ver.5.3まで）\n              サーバーサイドの拡張（Ver.5.4以降のVer.5）\n                サーバーサイドの処理をPHPを利用して機能を拡張する方法とAPI\n           \n            \n            \n           開発者向けドキュメント\n            \n               INTER-MediatorによるWebアプリケーションの概要\n                定義ファイルやページファイルの作成方法に加えて、以下の文書に含まれていないことがこちらにあります。\n                定義ファイルの詳細\n                定義ファイルの記述方法を説明しています。\n                定義ファイルの記述方法\n                定義ファイルの記述方法を説明したリファレンスです。\n                バージョン移行ガイド\n                INTER-Mediatorのバージョンを移行する際にアプリケーション側を書き換える必要がある箇所を説明しています。\n                HTMLの属性に記述する書式を適用する機能\n                data-im-format属性などを利用した書式設定に関するリファレンスです。\n                データベース特有の設定\n                FileMaker ServerやPostgreSQLでの特有の情報についてまとめてあります。\n                計算式\n                計算式の記述方法をまとめてあります。\n                値をコピーするルックアップ\n                ルックアップによりマスターの値をコピーすることができる機能の説明です。\n                メール送信(Ver.10)\n                データベース処理を行ったときにメールを送る事ができます。\n                Slackにメッセージを送信する\n                データベース処理を行ったときにメッセージを送る事ができます。\n                ユーザー認証とアクセス権\n                ユーザー認証とアクセス権に関する設定について、まとめています。\n                サンプルファイル\n                配布ファイルに含まれているサンプルファイルについて説明します。\n                検索ページを作成するための機能\n                検索ページを一切JavaScriptのプログラムを書かないでもできる手法を説明します。\n                変更結果の即時更新をマルチクライアントで実現する(Ver.7以降)\n                同一のエンティティを複数のクライアントで開いたとき、あるユーザの変更結果を即時に他のクライアントに反映する仕組みです。\n                ローカライズ\n                ページ上のメッセージやデータベースから得た値をブラウザの言語に応じて切り替える仕組みです。\n                データベース処理のログ記録\n                クライアントから送られたデータベース処理をテーブルに記録しておき、監査情報を取り出すなどの処理ができます。\n            \n            \n            \n            プラクティス\n                        \n                検索をしてその結果を一覧表示する（プログラムなし版）\n                検索をしてその結果を一覧表示する（JavaScript版）\n                \n                    検索条件を与えて一覧に表示するという仕組みは多くのアプリケーションで見られます。 一覧と検索を連動させる手法を解説します。いちばん手軽に実装できるのは、プログラムなし版の方です。 もし、細かなユーザーインタフェースの機能の組み込みが必要なら、同様なページをJavaScriptで実装することもできます。\n                \n                一覧と詳細\n                \n                    一覧を表示し、その中の選択した項目の詳細情報を表示したり編集ページを表示するという手法はよく利用されます。「マスター/ディテール」方式とも呼ばれます。 INTER-Mediatorでは定義ファイルにキーワードで指定するだけで、2つのコンテキストの一方をマスター、もう一方をディテール領域として稼働できます。\n                \n                モバイルでよく見られるステップ動作のサイト\n                モバイルアプリケーションでは、画面全体を使って選択肢を提示し、選択すると次の画面に以降するという「ステップ動作」のユーザーインタフェースがよく見られます。INTER-Mediatorでそうしたサイトを作成する方法を説明します。\n                ティップス集\n                スタイルの値にフィールドの値を設定する、一覧ページから詳細ページに移動するボタンを設置する、URLの検索パラメータの値を検索条件にする、ページ移動時に「保存されない」場合の対処、「クリックを受け付けない場合がある」と感じた時の対処、条件に応じてページ生成を行わないようにする、Bootstrapのクラス名を自動生成されるボタンに適用する、デバッグ情報をページ上に出さない、検索機能をANDにする、マスター/ディテールページで新規レコード作成時に詳細ページに移動する、一覧と詳細が別々のページである場合に新規レコード作成時に詳細ページに移動する、disabled属性を条件に応じて設定する               \n           \n\n           プログラマ向けドキュメント\n                \n                JavaScriptのインタフェース\n                INTER-MediatorにおけるJavaScript向けのAPIを紹介します。\n                JavaScriptコンポーネントの使い方\n                ファイルのアップロード用コンポーネントの使用方法と、既存のJavaScriptのライブラリを元にしたコンポーネントを作る方法を説明しています。\n                MediaAccessクラスとその拡張点\n                画像やPDF生成などのHTMLの外部にデータがある場合の処理について説明しています。\n                エクスポート\n                テーブルあるいはコンテキストの内容をCSVファイル等で得る方法です。\n                サーバーサイドの拡張（Ver.6.0以降）\n                サーバーサイドの処理をPHPを利用して機能を拡張する方法とAPIをまとめておきました。\n                ソースコードの投稿\n                INTER-Mediatorへのソースコードを投稿する場合の手順です。INTER-Mediatorのコミッターや、あるいはバグレポートの1つの方法として、ソースコードの投稿を歓迎しています。\n            \n            \n        \n    \n\n\n\n"
    },
    {
        "id": 2,
        "parent": "/ja/",
        "path": "/ja/for-novices/",
        "title": "INTER-Mediatorをはじめよう",
        "breadcrumb": "はじめよう",
        "body": "\n            \n                これから始める方はこのページからご覧ください。ダウンロードとインストール方法、試用や学習用途として利用できるバーチャルマシンのダウンロードリンクと利用方法、スタートアップガイド、ハンズオンセッション手順書があります。\n            \n            \n                ビデオで始めるINTER-Mediator\n                INTER-MediatorのVMを準備する手順や、ハンズオンでの作業を行なった様子をビデオでご覧いただけます。\n                トライアル版の利用方法\n                INTER-Mediatorの試用や学習用途として利用できるトライアルWebアプリケーションの利用方法について説明しています。\n                ダウンロードとインストール(Ver.6以降)\n                INTER-Mediatorの入手方法、開発時の利用法、運用時の利用方法をまとめました。\n                スタートアップガイド\n                データベースの基本から、宣言的な記述で可能な範囲での開発手法をまとめた文書です。 データベースエンジンに絡む設定については解説はしていませんが、 ページファイルや定義ファイルをどのように記述すればいいのかということを実例とともに概念を含めた説明をしています。 2013年にINTER-Mediatorの学習可能性を調査したときに使ったテキストを加筆訂正したものです。\n                ハンズオンセッション手順書\n                Virtual Machineを利用して、ハンズオンでINTER-Mediatorを学習するための手順書を作成しました。手順に従ってコードを入力して、どのような結果になるかを見ていただけます。\n                ダウンロードとインストール(Ver.5まで)\n                INTER-Mediatorの入手方法、開発時の利用法、運用時の利用方法をまとめました。\n                バーチャルマシンの利用(Ver.8まで)\n                INTER-Mediatorの試用や学習用途として利用できるバーチャルマシンの利用方法について説明しています。\n            \n        "
    },
    {
        "id": 3,
        "parent": "/ja/",
        "path": "/ja/practices/",
        "title": "プラクティス",
        "breadcrumb": "プラクティス",
        "body": "\n            \n                「プラクティス」とは、実際の開発時に発生するニーズに近い形式のテーマをもとにしてサンプルプログムを作成し、その動作をみながら個別の機能をどのように実現しているかを示すものです。書籍で言えば「クックブック」といった名称で紹介されるような内容です。順次、充実させる予定です。\n            \n            \n                検索をしてその結果を一覧表示する（プログラムなし版）\n                検索をしてその結果を一覧表示する（JavaScript版）\n                \n                    検索条件を与えて一覧に表示するという仕組みは多くのアプリケーションで見られます。 一覧と検索を連動させる手法を解説します。いちばん手軽に実装できるのは、プログラムなし版の方です。 もし、細かなユーザーインタフェースの機能の組み込みが必要なら、同様なページをJavaScriptで実装することもできます。\n                \n                一覧と詳細\n                \n                    一覧を表示し、その中の選択した項目の詳細情報を表示したり編集ページを表示するという手法はよく利用されます。「マスター/ディテール」方式とも呼ばれます。 INTER-Mediatorでは定義ファイルにキーワードで指定するだけで、2つのコンテキストの一方をマスター、もう一方をディテール領域として稼働できます。\n                \n                モバイルでよく見られるステップ動作のサイト\n                モバイルアプリケーションでは、画面全体を使って選択肢を提示し、選択すると次の画面に以降するという「ステップ動作」のユーザーインタフェースがよく見られます。INTER-Mediatorでそうしたサイトを作成する方法を説明します。\n                ティップス集\n                スタイルの値にフィールドの値を設定する、一覧ページから詳細ページに移動するボタンを設置する、URLの検索パラメータの値を検索条件にする、ページ移動時に「保存されない」場合の対処、「クリックを受け付けない場合がある」と感じた時の対処、条件に応じてページ生成を行わないようにする、Bootstrapのクラス名を自動生成されるボタンに適用する、デバッグ情報をページ上に出さない、検索機能をANDにする、マスター/ディテールページで新規レコード作成時に詳細ページに移動する、一覧と詳細が別々のページである場合に新規レコード作成時に詳細ページに移動する、disabled属性を条件に応じて設定する               \n              \n        "
    },
    {
        "id": 4,
        "parent": "/ja/",
        "path": "/ja/for-developers/",
        "title": "開発ガイド",
        "breadcrumb": "開発ガイド",
        "body": "\n            \n                ここでは、定義ファイルの記述方法、Dockerの利用、データベースごとの固有の事情、計算式、メール送信、ユーザー認証とアクセス権、サンプルファイルについて、検索ページを作成するための機能など、実際に開発を行う際に必要な内容について説明しています。\n            \n            \n                INTER-MediatorによるWebアプリケーションの概要\n                定義ファイルやページファイルの作成方法に加えて、以下の文書に含まれていないことがこちらにあります。\n                定義ファイルの詳細\n                定義ファイルの記述方法を説明しています。\n                定義ファイルの記述方法\n                定義ファイルの記述方法を説明したリファレンスです。\n                バージョン移行ガイド\n                INTER-Mediatorのバージョンを移行する際にアプリケーション側を書き換える必要がある箇所を説明しています。\n                HTMLの属性に記述する書式を適用する機能\n                data-im-format属性などを利用した書式設定に関するリファレンスです。\n                データベース特有の設定\n                FileMaker ServerやPostgreSQLでの特有の情報についてまとめてあります。\n                計算式\n                計算式の記述方法をまとめてあります。\n                値をコピーするルックアップ\n                ルックアップによりマスターの値をコピーすることができる機能の説明です。\n                メール送信(Ver.10)\n                データベース処理を行ったときにメールを送る事ができます。\n                Slackにメッセージを送信する\n                データベース処理を行ったときにメッセージを送る事ができます。\n                ユーザー認証とアクセス権\n                ユーザー認証とアクセス権に関する設定について、まとめています。\n                サンプルファイル\n                配布ファイルに含まれているサンプルファイルについて説明します。\n                検索ページを作成するための機能\n                検索ページを一切JavaScriptのプログラムを書かないでもできる手法を説明します。\n                変更結果の即時更新をマルチクライアントで実現する(Ver.7)\n                同一のエンティティを複数のクライアントで開いたとき、あるユーザの変更結果を即時に他のクライアントに反映する仕組みです。\n                ローカライズ\n                ページ上のメッセージやデータベースから得た値をブラウザの言語に応じて切り替える仕組みです。\n                データベース処理のログ記録\n                クライアントから送られたデータベース処理をテーブルに記録しておき、監査情報を取り出すなどの処理ができます。\n            \n        "
    },
    {
        "id": 5,
        "parent": "/ja/",
        "path": "/ja/for-programmers/",
        "title": "プログラミングガイド",
        "breadcrumb": "プログラミングガイド",
        "body": "\n            \n                クライアント側で処理を行うJavaScriptの処理、INTERMediatorの各クラスのプロパティ、メディアの取り扱い、サーバーサイドの拡張等、より高度な使い方をされる場合にご覧ください。また、ソースコードの投稿についても説明しています。\n            \n            \n                JavaScriptのインタフェース\n                INTER-MediatorにおけるJavaScript向けのAPIを紹介します。\n                JavaScriptコンポーネントの使い方\n                ファイルのアップロード用コンポーネントの使用方法と、既存のJavaScriptのライブラリを元にしたコンポーネントを作る方法を説明しています。\n                MediaAccessクラスとその拡張点\n                画像やPDF生成などのHTMLの外部にデータがある場合の処理について説明しています。\n                エクスポート\n                テーブルあるいはコンテキストの内容をCSVファイル等で得る方法です。\n                サーバーサイドの拡張（Ver.6.0以降）\n                サーバーサイドの処理をPHPを利用して機能を拡張する方法とAPIをまとめておきました。なお、Ver.5.3までの手法はこちら、Ver.5.4以降のVer.5系列はこちらをご覧ください。\n                ソースコードの投稿\n                INTER-Mediatorへのソースコードを投稿する場合の手順です。INTER-Mediatorのコミッターや、あるいはバグレポートの1つの方法として、ソースコードの投稿を歓迎しています。\n            \n        "
    },
    {
        "id": 6,
        "parent": "/ja/",
        "path": "/ja/developers-blog/",
        "title": "開発者、コミッター、利用者によるブログ",
        "breadcrumb": "ブログ",
        "body": "\n            \n                INTER-Mediatorの記事を掲載している記事やブログのリンク集です。\n            \n            \n                \n                    開発者：新居雅行によるブログ\n                    \n                        INTER-Mediatorの開発者である新居雅行のブログのうち、INTER-Mediatorのカテゴリのものです。 一部はそのまま本サイトのドキュメントとして流用しています。\n                    \n                \n                \n                    FAMLog: INTER-Mediator\n                    \n                        INTER-Mediatorのコミッターであり、FMプランを提供しているエミックの松尾篤氏によるブログで、INTER-Mediatorのカテゴリの文書です。\n                    \n                \n                \n                    Unified Web Application Development - A Declarative Approach to Empower End-User Developers\n                    \n                        Dr.M.LaineのAalto Universityにおける博士論文において、INTER-Mediatorについてエンドユーザー開発を指向したソフトウェアの1つとして、言及されています。\n                    \n                \n                \n                    伊藤清徳の垂直落下式ムーンサルトプレス\n                    \n                        INTER-Mediatorと他のフレームワーク統合をいくつか行っている伊藤清徳氏によるブログで、INTER-Mediatorに関する文書です。（2022年3月10日現在、リンク先は全てエラーになります。）\n                    \n                    \n                        YiiでInter-Mediatorを使ってみる\n                        \n                        INTER-Mediatorのバリデーションを構築するクラスをつくったった\n                        \n                        INTER-Mediatorのページネーション機能を少し便利に – 1\n                        \n                        Inter-MediatorをCodeigniterから使ってみる\n                        \n                    \n                \n            \n        "
    },
    {
        "id": 7,
        "parent": "/ja/for-novices/",
        "path": "/ja/for-novices/deploy.html",
        "title": "ダウンロードとインストール(Ver.5まで)",
        "breadcrumb": "ダウンロードとインストール(Ver.5まで)",
        "body": "\n            \n                はじめに\n                この文書では、リリース版のダウンロード情報と、Ver.5.xまでのINTER-Mediatorを使って開発をする場合のINTER-Mediatorの準備方法と、さらに作成したWebアプリケーションで使用するINTER-Mediatorを作成する方法をまとめたものです（INTER-Mediator Ver.6以降はこちらの文書をご覧ください）。INTER-MediatorはGitHubでソースを公開しています。通常の開発時は、リポジトリにあるものをインストールしておくのがおすすめです。そして、アプリケーション完成後は、JavaScriptに圧縮をかけた実稼働用のINTER-Mediatorを利用するのが少しの事ですが、効率よくなります。これらの方法を説明します。\n                \n            \n            \n                ダウンロード\n                INTER-Mediatorのリリースバージョンは、こちらをご覧ください。日々、リポジトリはアップデートされていますが、一定の機能を組み込むごとにバージョン番号を付与して、リリース版として公開します。最新のリリースバージョンはVer.7、Ver.5.x系統の最新版はVer.5.12です。\n            \n            \n                リポジトリから取り出したバージョンを開発時に利用する\n                お勧めするのは、通常の開発は、リポジトリから取り出したもので進めておき、実際にアプリケーションを配備するときに、特定のバージョン向けにビルドしたものに置き換えるということになります。gitの使い方はいろいろ難しいですが、gitを全く知らない方も、ともかく以下のようにしてみてください。また、以下はコマンドラインによる汎用的な方法ですが、GitHubアプリケーションを使っても同様に可能です。\n                まず、あるフォルダに作成するWebアプリケーションのファイルをまとめておくとします。そのフォルダを作ります。以下は、Documentsの下にmywebappフォルダを作りました。\n                \n                    \n                \n                次に、GitHubのINTER-Mdiatorのページに行きます。アカウントを持ってサインインしていただくのがいいのですが、なくてもソースのダウンロードは可能です。ここで、中央右付近にあるbranchがmasterになっているのを確認してください。ブランチのmasterがその時点でのコンプリートなソースです。そして、右の方にあるHTTPS clone URLをコピーしておきます。URLが薄く見える右のボタンをクリックすれば、コピーできます。\n                \n                    \n                \n                そして、ターミナルを開いてください。次のように作業をします。#以降はコメントです。ファイルパスはもちろん、ご自分の作られているフォルダ構成に従って指定をしてください。ブランチの指定は「5.x」です。xは数字に指定しないで小文字のエックスにしてください。\n                \n                    cd ~/Documents/mywebapp  # Webアプリケーションのフォルダをカレントにする\ngit clone -b 5.x https://github.com/INTER-Mediator/INTER-Mediator.git  # サーバーからリポジトリを複製する\n                \n                これだけでOKです。すると、mywebappフォルダに、INTER-Mediatorフォルダが作られます。このINTER-Mediatorフォルダがフレームワーク本体となります。この階層に、たとえば、index.htmlファイルやら、アプリケーションのhtml/phpファイルを作って行けばOKです。後はこれをサーバーにコピーして稼働を確認します。\n                \n                \n                ここで、リポジトリからクローンしたINTER-Mediatorを参照するには、定義ファイルのcontext.phpはたとえば、次のように記述をします。\n                \n                    &lt;?php\nrequire_once('INTER-Mediator/INTER-Mediator.php');\nIM_Entry( .... );\n?&gt;\n                \n                なお、サンプルファイルは、INTER-Mediatorフォルダ内のSamplesフォルダにあります。\n                もし、リポジトリ側に新しいソースコードが加わっていれば、以下のようにコマンドを入れれば、最新版を取得できます。INTER-Mediatorフォルダをカレントにして、git pullとすればいいです。\n                \n                    cd ~/Documents/mywebapp/INTER-Mediator\ngit pull origin 5.x\n                \n                念のために説明しておきますが、pullは最新版に更新するという使い方は非常に稀で、正しくは別のリポジトリの修正を取り込むという意味合いがあります。ソースコードをメンテする上では単なる更新ではないのですが、ソースを利用する側の方から見れば更新コマンドと思っていただいて概ねいいかと思います。もし、自分でフレームワーク側のソースを修正された場合には、単純ではありませんので、ここではソースは参照だけでタッチしないという前提で、説明をここまでとします。\n                gitには実に多彩な機能があり、ここまでに説明した手順はほんとうにその一端でしかないのですが、これだけを知っていれば、とりあえず大丈夫かと思います。もし、フレームワーク側の修正結果をコミットしていただけるなら、それなりにコマンドを打ち込むか、あるいはアプリケーションを使うことになるかと思いますが、取り出すだけなら上記の手順以上はほとんどないと思います。\n                もし、開発中に、フレームワーク側のバグが見つかったなら、もちろん、報告をしてください。なるべく早く対処します。リポジトリのクローンを作って作業をしていれば、対処が終われば、git pullをするだけで済みます。\n                OS XでGitHubアプリケーションを使う場合\n                コマンドラインがどうしても苦手だという方は、GitHubのアプリケーションを入手してインストールをしてください。そして、セットアップを一通りすませます。GitHubへのログインが必要なのですが、通常はアカウントを持っていると思われるので、そのアカウントでログインをしておきます。\n                GitHubのページには、「Clone in Desktop」というボタンがあるので、それをクリックするとGitHubアプリケーションが起動して、いきなりINTER-Mediatorフォルダを作る場所を聞いてきます。そこで、配置した場所を選択してCloneボタンを押せばOKです。その後は、GitHubアプリケーションで、リポジトリのChangeのボタンを左側で選び、右上のSyncボタンをクリックすれば、サーバーにある最新のリポジトリの内容をダウンロードしてアップデートします。\n                \n                \n                ただし、この方法だと、2つ目のクローンを同じアカウント内に作成しようとしても、最初に作ったリポジトリをGitHubアプリケーション側では提示して、新たなリポジトリを作りに行きません。その場合は、クローン作成については、コマンドで行ってください。その上で、リポジトリの一覧を表示します。GitHubアプリケーションのタイトルバーの一番左の「Repositories」をクリックすればいいでしょう。そして、ウインドウ下にある「＋」ボタンをクリックして、「Add Local Repository」を選択します。そして、コマンドで作ったクローンのフォルダを指定すると、INTER-Mediatorの項目が複数登録できるようになります。あるいは、リポジトリのフォルダを、Repotoriesを選択してリポジトリ一覧が見えているウインドウの中にドラッグして追加します。ただし、リポジトリのリストで区別ができなくなるので、リポジトリのリストを右クリックして「Show in Finder」を選択してフォルダを確認して、間違えて作業しないように気をつけないといけません。\n            \n            \n                WindowsでGitHubアプリケーションを使う場合\n                WindowsにもGitHubアプリケーションがありますので、それを使ってくローンを作り、更新するということはもちろん可能です。ただし、サイトに見える「Clone Desktop」ボタンを押しても、アプリケーションの案内が見えるだけで、GitHubアプリケーションが起動して何かを始めるということはありません。従って、最初に作るクローンは、アプリケーションの左側のアカウント一覧から見えている場合は、その項目を選択して、右ボタンメニューから「Clone」を選択するなどして作成できます。\n                もし、どうしても出てこないなら、Git Shellという機能を使ってコマンドラインを呼び出し、クローンを作りたい場所をカレントディレクトリにして、「git clone https://github.com/INTER-Mediator/INTER-Mediator.git」というコマンドを実行します。コマンドラインで作ったクローンをGitHubアプリケーションで認識させるには、フォルダをアプリケーションのウインドウにドラッグ&amp;ドロップします。\n                \n                \n                作成すると、リポジトリの詳細を表示すれば、上にsyncボタンが登場します。更新はこのボタンを押すだけでOKです。\n                \n                \n            \n            \n                ダウンロードしたバージョンを開発時に利用する\n                GitHubのINTER-Mdiatorのページで、右側の「Donwload ZIP」ボタンをクリックすると、現状のリポジトリの各ファイルを圧縮・アーカイブしてダウンロードします。ブランチがmasterであれば、ダウンロードして展開したフォルダは、INTER-Mediator-masterという名前になっています。フォルダ名を適当に変更して、開発中のアプリケーションのフォルダ等へ移動します。\n                もちろん、こちらの方が当初は手軽なのですが、リポジトリとは切り離されることになるので、リポジトリの更新があれば、その都度、同じ作業を繰り返さないといけません。\n            \n            \n                実稼働向けINTER-Mediatorを生成する\n                リポジトリから取り出した結果で開発しているので、その状態で稼働はできるはずです。また、以下の方法でビルドすれば、サンプルなど実稼働に不要な素材が取り除かれると同時に、JavaScriptのプログラムを1つのファイルに圧縮してまとめるので、動作のパフォーマンスは有利になります。\n                まず、準備として、リポジトリから取り出したINTER-Mediatorフォルダと同じ階層に、Minifyをダウンロードします。ダウンロードにはgitコマンドを利用します（バージョン5.6以降ではyuicompressor-2.4.7.jarではなくMinifyを使用します）。\n                \n                    git clone -b 5.x https://github.com/INTER-Mediator/INTER-Mediator.git\ngit clone https://github.com/matthiasmullie/minify.git\n                \n                独自のバージョンと本日の日付を組み込んだ現状のINTER-Mediatorを作るには、dist-docs/buildup.shというスクリプトを使ってください。たとえば、INTER-Mediatorのディレクトリがカレントディレクトリであれば、MacあるいはUNIX系OSなら、以下のように入力します。\n                \n                    cd INTER-Mediator/dist-docs/\n./buildup.sh\n                \n                一方、Windowsの場合はCygwinで実行させてください。buildup.shファイルを、Cygwinのターミナルのウインドウにドラッグ&amp;ドロップして、Cygwinのターミナルでreturnキーを押すのが手軽でしょう。なお、ドライブのパスを指定したい場合は、Cygwinでは、/cygdrive/c/で、C:¥ドライブのルートを示すパスとなります。\n                \n                    \n                \n                すると以下のようなメッセージがターミナルに表示されます。ここで、キーボードから、1、2、3、4のいずれかをキータイプしてreturnキーを押してください。metadata.jsonファイルを更新する(4)を除くと3種類のビルド形式が選択できますが、(2)が最小の構成で、通常はこちらでいいかと思われます。(3)は認証ユーザの管理ページのサンプルや、定義ファイルエディタなどを含むようになります。なお、認証のアプリケーションに関しては、Autu_Supportフォルダの内容をもとに独自に開発されることをお勧めします。\n                \n                    $ ./buildup.sh\n=================================================\nStart to build the INTER-Mediator Ver.5.6\n-------------------------------------------------\n Original: /Users/msyk/Documents/INTER-Mediator_develop/INTER-Mediator\n Build to: /Users/msyk/Documents/INTER-Mediator_develop/im_build/INTER-Mediator\n Path of minifier: /Users/msyk/Documents/INTER-Mediator_develop/minify\n-------------------------------------------------\nChoose the build result from these:\n (1) Complete (everything contains)\n (2) Core only (the least set to work wep applications)\n (3) Core + Support (add Auth_Support and INTER-Mediator-Support)\n (4) Write just version and release date to metadata.json\nType 1, 2, 3 or 4, and then type return----&gt;\n                \n                INTER-Mediatorフォルダと同じ階層に、Minifyのディレクトリがあれば、これを使ってJavaScriptのプログラムを圧縮します。ない場合には圧縮しないで、いくつかあるJavaScriptのファイルを1つにまとめることだけを行います。\n                その後、メッセージ通り、INTER-Mediatorフォルダと同じ階層に、「im_build」フォルダが作られ、その中に、INTER-Mediatorフォルダがあります。こちらのファイルの中は、動作実行上必要なものだけに絞られています。このim_build/INTER-Mediatorフォルダを、現状のINTER-Mediatorフォルダと置き換えればOKです。\n                ただし、1点注意があります。ビルドしたINTER-Mediatorは、すべてのJavaScriptのプログラムを、INTER-Mediator.jsファイルにまとめて、その他のjsファイルは削除されています。そのままFTPでアップロードすると、消えたはずのその他のjsファイルが残ったままになります。なので、サーバー側にあるINTER-Mediatorフォルダもいったん消した上で、アップロードするのが確実です。動作がおかしいと思ったときには、INTER-Mediator.js以外のJavaScriptファイルがサーバー上で存在していないかを確認してください。\n                バージョン番号については、buildup.shファイルの最初の方に記述があるので、それを変更して利用してください。なお、バージョンのルールは次のようにします。\n                \n                    バージョン番号は、整数をピリオドで区切ることとする（例：3.4、3.11）\n                    バージョン表記は、Ver.を基本とするが、vでもVersionでもversionでも基本的には構わない\n                    整数が2つのものを「正式バージョン」とする（例：3.4、3.11）\n                    開発者が独自にバージョンを付ける場合、3つ目の整数を必ず付ける（例：3.4.1、3.11.133）\n                    開発者が独自にバージョンを付ける場合、さらに追加してもいい（例：3.4.1-rev.21）\n                \n                つまり、INTER-Mediatorをダウンロードして、実際にアプリケーションに搭載する上で少し修正したとしたら、3つ目の整数で枝番号を付けてくださいということです。できれば、その状態をコミット/プッシュした上で、そのバージョンタグをつけていただけると、自分のバックアップ用にもなると思います。他の人とバージョンが重ならないように、リポジトリをチェックして異なる番号を付けてください。また、3桁目は飛び番号でもいいとしましょう。けっこう緩いルールですね。\n            \n        "
    },
    {
        "id": 32,
        "parent": "/ja/for-novices/",
        "path": "/ja/for-novices/deploy6.html",
        "title": "ダウンロードとインストール(Ver.6以降)",
        "breadcrumb": "ダウンロードとインストール(Ver.6以降)",
        "body": "\n            \n                はじめに\n                この文書では、リリース版のダウンロード情報と、Ver. 6以降のINTER-Mediatorを使って開発をする場合のINTER-Mediatorの準備方法と、さらに作成したWebアプリケーションで使用するINTER-Mediatorを作成する方法をまとめたものです（INTER-Mediator Ver.5以前はこちらの文書をご覧ください）。INTER-MediatorはGitHubでソースを公開しています。通常の開発時は、リポジトリにあるものをインストールしておくのがおすすめです。そして、アプリケーション完成後は、JavaScriptに圧縮をかけた実稼働用のINTER-Mediatorを利用するのが少しの事ですが、効率よくなります。これらの方法を説明します。\n                \n            \n            \n                INTER-Mediatorを稼働する準備\n                INTER-Mediatorを稼働するコンピューターは、大別して、開発用のものと、運用用のものがあります。また、目的等により自由にセットアップができますが、説明の都合上、標準的な手順として、開発用のコンピューターでコード作成を行い、それを運用用のコンピューターに随時コピーすることを想定します。また、実際にアプリケーションを稼働させるためには、データベースも必要になると思われるので、運用用コンピューター上で稼働テストを行うのが一般的と考えられますが、開発用コンピューターにデータベースをセットアップしたりあるいは開発用コンピューターからデータベースへのアクセスを可能にすれば、開発用コンピューターの中だけでアプリケーションの動作テストは行えます。\n                \n                開発用のコンピューターに必要なものは、以下の通りです。\n                \n                    PHP Ver.7.1以上：サーバーコードを実行する仕組みを用意する必要があります\n                    git：ソースコードの取得に必要です\n                    composer：ライブラリの取得や稼働環境を整えるのに必要です\n                    開発環境：IDEあるいはテキストエディタで、コード作成のために必要です\n                \n                運用用のコンピューターに必要なものは、前記の開発用コンピューターに用意するもののうち、開発環境以外のものに加えて以下の通りです。つまり、運用用コンピューターでも、PHP、git、composerのセットアップはおこなってください。\n                \n                \n                    データベース：稼働はもちろん、アプリケーションのスキーマを適用している\n                    Webサーバー（Apache、IIS、nginx等）：PHPが稼働するように設定する\n                    Node.js：INTER-Mediatorのセットアップでもインストールされるが、OSにあっても良い\n                \n                WebサーバーとPHP 7.xのセットアップ\n                PHPは、開発用と運用用のいずれのコンピューターにも必須ですが、Webサーバーに関しては、運用用のみ必須となります。開発用コンピューターでは、PHPのWebサーバー機能を利用して稼働できるので、必ずしもサーバーは必要ありません。\n                \n                Ubuntu18.02でのApache2とPHP 7.xのセットアップ\n                Ubuntu18.02は、PHP 7.2がパッケージとして用意されています。これらのインストールを行い、さらに、MySQL、PostgreSQL、SQLiteをセットアップするまでは以下のようにコマンドを入れれば可能です。INTER-MEdiatorに必要なPHPのモジュールについても、以下の通りで、必要なものはインストールされます。\n                \n                \n                    sudo apt-get install -y apache2 php7.2 libapache2-mod-php7.2\nsudo apt-get install -y php7.2-mbstring php7.2-bcmath php7.2-curl php7.2-xml\nsudo apt-get install -y mysql-server-5.7 mysql-client-core-5.7 php7.2-pdo-mysql\nsudo apt-get install -y postgresql php7.2-pdo-pgsql\nsudo apt-get install -y sqlite3 php7.2-pdo-sqlite\n                \n                ドキュメントルートは「/var/www/html」、セットアップ関連ファイルは「/etc/apache2」、ログファイルは「/var/log/apache2」のそれぞれのディレクトリにあります。\n                Ubuntuでは、Webサーバのプロセスは、www-dataという名前のユーザで稼働します。INTER-Mediator Ver.6では、このwww-dataユーザが自身のホームディレクトリに書き込み権限を持っている必要があります。通常のユーザはもちろん自分のホームに書き込みできますが、www-dataはプロセス稼働用なので、ログインができなくなっています。ホームは、/var/wwwになっていますが、このフォルダはwww-dataには書き込み権限が与えられていません。ここで、Webのドキュメントフォルダ以下を、developerというユーザ（developerグループにも自動的に所属しているとする）でログインして管理することも考慮して、以下のようにコマンドをいれておくとよいでしょう。\n                \n                \n                    sudo chown -R www-data:developer /var/www\nsudo chmod -R g+w /var/www\n                \n                インストール後は、次のコマンドでApache2を再起動できます。インストール作業で試行錯誤した場合には、インストール作業の後にこのコマンドを入れれば良いでしょう。\n                \n                    sudo systemctl restart apache2\n                \n                macOSでのApache2とPHP 7.xのセットアップ\n                macOSはApacheもPHPも最初から含まれています。しかしながら、更新のサイクルを考えれば、homebrewを使いたいと考えるかもしれません。また、ハイブリットな管理も考えられます。ここでは、 macOSでのApache2とPHPを使う場合と、homebrewを使う場合で分けて、インストール方法を説明します。\n                macOSの標準機能を使う\n                まず、設定ファイルは、/etc/apache2/httpd.confです。このファイルをsudo nanoなどで開いて必要に応じて編集をしてください。このファイル内にある「#LoadModule php7module ...」の行の最初の#を消して、php7moduleがロードされるようにします。ほかに、このファイルでは、Apache2のプロセスのユーザーが_wwwであることや、ドキュメントルートが/Library/WebServer/Documentsであることが分かります。\n                初期状態ではphp.iniは用意されていませんが、/etcディレクトリに用意すると認識されます。なお、INTER-Mediatorの稼働には、基本的にOSに組み込まれたPHPのモジュールだけで利用できます。\n                INTER-Mediator Ver.6では、この_wwwユーザが自身のホームディレクトリに書き込み権限を持っている必要があります。通常のユーザはもちろん自分のホームに書き込みできますが、_wwwはプロセス稼働用なので、ログインができなくなっています（dscl . /Users/_www というコマンドで確認できます）。ホームは、/Library/WebServerになっていますが、このフォルダは_wwwには書き込み権限が与えられていません。ここで、Webのドキュメントフォルダ以下を、developerというユーザ（developerグループにも自動的に所属しているとする）でログインして管理することも考慮して、以下のようにコマンドをいれておくとよいでしょう。\n                \n                    sudo chown -R _www:developer /Library/WebServer\nsudo chmod -R g+w /Library/WebServer\n                \n                Webサーバを稼働するには以下のようにコマンドを入れます。Apache2が起動するともに、macOS起動時にapache2も起動します。なお、Apache2を止める場合は、loadの代わりにunloadというサブコマンドを指定します。そのとき、-wがあれば、macOS起動時の自動起動もオフになります。\n                \n                    sudo launchctl load -w /System/Library/LaunchDaemons/org.apache.httpd.plist\n                \n                Homebrewを使う\n                Homebrewのインストール方法はこちらのページをご覧ください。\n                まず、macOSを開発用コンピューターにしている場合が多いと思われるので、PHPのインストールを先に説明します。PHPをインストーするコマンドは以下の通りです。比較的多くのモジュールが最初から組み込まれており、INTER-Mediatorは追加でインストールすることなく、これだけで必要なものがインストールされます。\n                \n                \n                    brew install php\n                \n                macOS Mojaveでは、標準のPHP 7.1は「/usr/bin/php」で起動されますが、HomebrewのPHPをインストーすると「/usr/local/bin/php」というコマンドが追加され、Ver.7.3系列のPHPが利用できます。なお、「/usr/local/bin/php」は「/usr/local/Cellar/php/7.3.2/bin/php」へのショートカットリンクになっています。つまり、Homebrewによって管理されるPHPの様々なファイルは、/usr/local/Cellar/php以下のディレクトリに存在します。php.iniファイルのパスは「/usr/local/etc/php/7.3/php.ini」になります。\n                \n                さらに、HomebrewでApache2をインストールする方法も説明します。なお、開発用コンピューターであれば、わざわざApache2のセットアップまではする必要はありません。標準のApache2を使う場合と、いろいろ勝手が違うこともあるので、計画的にセットアップを進めてください。インストールは以下のコマンドです。\n                \n                \n                    brew install apache2\n                \n                主要なバイナリであるhttpdファイルの様子もPHPと似ており、標準の「/usr/sbin/httpd」に対して、「/usr/local/bin/httpd」が作られ、「/usr/local/Cellar/httpd/2.4.39/bin/httpd」にリンクされています。HomebrewのApache2のドキュメントルートは「/usr/local/var/www」、ログファイルは「/usr/local/var/log/httpd」、設定ファイルは「/usr/local/etc/httpd」のそれぞれのディレクトリが利用されています。いずれも、標準のApache2とは異なります。\n                HomebrewでセットアップしたAapche2でPHPを稼働させたい場合、以下の記述を設定ファイルのどこかに記述する必要があります。設定ファイルのディレクトリにあるhttpd.confの末尾に追加するなどの方法で構いません。\n                \n                    LoadModule php7_module /usr/local/opt/php/lib/httpd/modules/libphp7.so\n    \n&lt;FilesMatch \\.php$&gt;\n    SetHandler application/x-httpd-php\n&lt;/FilesMatch&gt;\n                    \n                Homebrewのapache2を利用した場合でも、標準のapache2と同様、_wwwというユーザでプロセスを稼働します。INTER-Mediator Ver.6では、_wwwユーザが自身のホームディレクトリに書き込み権限を持っている必要があります。通常のユーザはもちろん自分のホームに書き込みできますが、_wwwはプロセス稼働用なので、ログインができなくなっています（dscl . /Users/_www というコマンドで確認できます）。ホームは、OS標準のドキュメントルートの直上である/Library/WebServerになっていますが、このフォルダは_wwwには書き込み権限が与えられていません。ここで、Webのドキュメントフォルダ以下を、developerというユーザ（developerグループにも自動的に所属しているとする）でログインして管理することも考慮して、以下のようにコマンドをいれておくとよいでしょう。\n                    \n                        sudo chown -R _www:developer /Library/WebServer\nsudo chown -R _www:developer /usr/local/var/www\nsudo chmod -R g+w /usr/local/var/www\n                    \n                Apache2を起動するには、「sudo brew services start httpd」とコマンドを入力します。終了する場合はstartの代わりにstopサブコマンドを指定します。Homebrewで開かれるポートは、規定値では8080と8443になっています。通常通り80と443のポートで運用したい場合には、設定ファイルのディレクトリにあるhttpd.confとextra/httpd-ssl.confについて、それぞれポート番号の定義部分を変更する必要があります。\n\n                Windows 10でのIISとPHPのセットアップ\n                PHPのサイトでのWindows向けインストール情報では、Microsoft Web Platform Installer（WebPI）を使うのが簡単と書いてあります。執筆時点では、Ver.5.0のダウンロードが可能とMicrosoftのサイトでは表示されていますが、実際にはVer.5.1がダウンロードされます。インストーラでインストールをし、その後、スタートメニューから「Microsoft Web Platform Installer」を選択して、セットアップ用のアプリケーションを選択します。そして、検索窓で「PHP 7.3」などと入力して項目を探します。執筆時点では、PHP7.3.4がリリースされていますが、WebPIでは最新ではないものの7.3.1がダウンロードできました。PHPだけ、あるいはIIS Express用のものがあるので、状況に応じて選択すれば良いでしょう。\n                Windows 10でのWebサーバーであるIISを利用するには、スタートメニューの左側のギアのアイコンなどから「設定」アプリを開きます。そして、「アプリ」をクリックし、右側の関連設定にある「プログラムと機能」を選択します。ここからはウインドウが開いてコントロールパネルの作業になります。左側にある「Windowsの機能の有効化または無効化」を選択すると、ダイアログボックスが開きます。その中の「インターネットインフォメーションサービス」にある「World Wide Webサービス」と、「Web管理ツール」の「IIS管理コンソール」をオンにして、OKボタンをクリックします。PHPを使う場合には、「World Wide Webサービス」の「アプリケーション開発機能」にある「CGI」のチェックは必ず入れておきます。これでIISがインストールされます。\n                PHPのサイトには、Windowsに手作業でインストールする方法も記載されています。ダウンロードのページには、4種類のファイルがアップロードされていますが、32ビット/64ビット以外に、スレッドセーフとそうでないものもあります。IISの場合はスレッドセーフでないもの、Apacheの場合はスレッドセーフのものを選択します。ファイルをダウンロードすると、フォルダにファイルが入ったものが得られるので、そこからは自分で適切な位置に移動して、php.exeなどにパスが通るように、展開したルートフォルダに当たるphpのフォルダを環境変数のPathを設定します。\n                手作業でインストールしたPHPをIISで利用できるようにするには、エクスプローラーを使って、phpのフォルダに対して、IIS_IUSRSグループに対する「読み取りと実行」「フォルダーの内容の一覧表示」の権限を与えます。さらに、IISマネージャーで、新たにハンドラーマッピングを追加します。設定は、*.phpという要求パスに対して、FastCgiModleのモジュールを適用し、実行するファイルとして、phpのフォルダ以下にあるphp-cgi.exeを指定します。実行ファイルは絶対パスを指定します。\n                Windows ServerでのIISとPHPのセットアップ\n                Windows Serverをインストール後、サーバマネージャーの役割と機能の追加で、「Webサーバー(IIS)」を選択し、「役割」で、Webサーバー＞アプリケーション開発＞CGIのチェックを入れて、役割の追加を行います。これで、C:\\inetpub\\wwwrootをドキュメントルートとして、Webサーバーが起動します。\n                PHPを利用できるようにするには、PHPのサイトに記載された手作業でインストールする方法で行います。ダウンロードのページには、4種類のファイルがアップロードされていますが、32ビット/64ビット以外に、スレッドセーフとそうでないものもあります。IISの場合はスレッドセーフでないもの、Apacheの場合はスレッドセーフのものを選択します。ダウンロードしたPHPのフォルダを、例えば、C:\\などにおいて利用します。ここで、一度、php.exeをダブルクリックして、コマンドプロンプトのウインドウが出るかを確認します。それが出ずに、「VCRUNTIME140.dll」というファイルがないというメッセージが出てくれば、「Visual Studio 2015のC++再配布パッケージ」をインストールします。DLLのファイル名が違っている場合は、それらに対応した別のバージョンの再配布パッケージをインストールします。\n                続いて、インターネットインフォメーションサービス（IIS）マネージャーを利用します。サーバーの項目を選択して、「ハンドラマッピング」のところに新たに項目を作成します。要求パスは「*.php」、モジュールは「FastCgiModule」、実行可能ファイルはPHPのフォルダにある「php-cgi.exe」を選択し、名前は「PHP」としておきます。IISの設定は以上のとおりです。\n                さらに、php.iniファイルを用意します。PHPのフォルダにあるphp.ini-productionファイルをコピーして、ファイル名をphp.iniに変更します。そして、次のextensionを有効にします。\n                \n                    curl, mbstring, pdo_mysql, pdo_pgsql, pdo_sqlite\n                \n                こうして稼働するIISでのPHPは、ここでは、DefaultAppPoolというユーザでプロセスを稼働します。INTER-Mediator Ver.6では、PHPを稼働しているユーザが自身のプロファイルのに書き込み権限を持っている必要があります。そのために、C:\\Windows\\System32\\config\\systemprofileというフォルダに対して、IIS_IUSRSグループに対する「書き込み」と「変更」の権限を、フォルダのプロパティの「セキュリティ」のタブで付与しておきます。このグループはIISに関係するユーザーが自動的に登録されるので、アクセス権の設定に便利です。\n                \n                    \n                \n\n                composerのインストール\n                composerは、PHPのライブラリ管理ツールです。INTER-Mediator Ver.6より、composerの利用は必須となりました。インストールはcomposerのページに記載があります。macOSやLinuxでは、そのページの「Download」の先のページに書いてある数行のコマンドラインをコピーして、ターミナルにペーストして、インストールを行うのが1つの方法です。この方法は、https://getcomposer.org/installerから得られるPHPのスクリプトをcomposer-setup.phpというファイルに保存し、チェックサムを調べてOKであれば、ダウンロードしたスクリプトをphpコマンドで動かし、終わればそのファイルを消すというものです。なお、macOSではHomebrew、Linuxではapt-getなどでインストールすることもできますが、最新版でないことも時折あるので、コマンドでインストーするのが良いでしょう。なお、コマンドを実行するには、phpがコマンドラインで利用可能になっている必要があります。Windowsについては、composerのサイトのGetting Startedのページ内にインストーラーがあるのでそれを利用するのが便利でしょう。なお、composer自身のアップデートは「composer selfupdate」とコマンドライン入力をします。\n                その他のツールのセットアップ\n                いずれのOSでも、gitコマンドが稼働できるようにしておいてください。macOSは、Xcodeをインストールして、１度起動すると開発むけコマンドラインのインストーラーが動くので、その中にgitが入っています。Linuxではapt-get等で取得をしましょう。また、Linuxではzipについてもインストールをしておきましょう。Windowsでは、Git for Windowsをインストールします。これで、Windowsでもgitコマンドが利用できるようになります。また、Git BashというUNIXで使われるシェルも稼動できるので便利です。\n                \n                さらに、GitHub Desktopについてもインストールしておくと便利です。レポジトリからの取り出しなど、基本的な作業はコマンドを使わなくてもアプリケーション上でできるようになります。\n            \n            \n                リポジトリからINTER-Mediatorをダウンロードしてセットアップ\n                GitのレポジトリにあるINTER-Mediatorをダウンロードし、さらにセットアップする手順を示します。コマンドラインを使う方法と、アプリケーションを使う方法を説明します。\n                コマンドラインを使った方法\n                まず、開発用コンピューターのあるフォルダに作成するWebアプリケーションのファイルをまとめておくとします。そのフォルダを作ります。このフォルダは、ファイルを単にまとめておくだけなので、Webサーバーの公開ディレクトリの中でなくても良いでしょう。以下は、Documentsの下にmywebappフォルダを作りました。\n                \n                \n                    \n                \n                コマンドを使ってクローンを作成\n                そして、ターミナルを開いてください。次のように作業をします。#以降はコメントで、入力は不要です。ファイルパスはもちろん、ご自分の作られているフォルダ構成に従って指定をしてください。\n                \n                    cd ~/Documents/mywebapp  # Webアプリケーションのフォルダをカレントにする\ngit clone https://github.com/INTER-Mediator/INTER-Mediator.git  # サーバーからリポジトリを複製する\n                \n                すると、mywebappフォルダに、INTER-Mediatorフォルダが作られます。このINTER-Mediatorフォルダがフレームワーク本体となります。この階層に、たとえば、index.htmlファイルや、アプリケーションのhtml/phpファイル（ページファイルと定義ファイル）を作って行けばOKです。\n                \n                \n                \n                定義ファイルの記述方法\n                定義ファイルで、リポジトリからクローンしたINTER-Mediatorを参照するには、定義ファイルのcontexts.phpはたとえば、次のように記述をします。\n                \n                    &lt;?php\nrequire_once('INTER-Mediator/INTER-Mediator.php');\nIM_Entry( .... );\n                \n                なお、サンプルファイルは、INTER-Mediatorフォルダ内のsamplesフォルダにあります。\n                レポジトリの更新\n                もし、リポジトリ側に新しいソースコードが加わっていれば、以下のようにコマンドを入れれば、最新版を取得できます。INTER-Mediatorフォルダをカレントにして、git pullとすればいいです。\n                \n                \n                    cd ~/Documents/mywebapp/INTER-Mediator\ngit pull\n                \n                念のために説明しておきますが、pullは最新版に更新するという使い方は非常に稀で、正しくは別のリポジトリの修正を取り込むという意味合いがあります。ソースコードをメンテする上では単なる更新ではないのですが、ソースを利用する側の方から見れば更新コマンドと思っていただいて概ねいいかと思います。もし、自分でフレームワーク側のソースを修正された場合には、単純ではありませんので、ここではソースは参照だけでタッチしないという前提で、説明をここまでとします。\n                \n                GitHubアプリケーションを使う場合\n                レポジトリに対する操作は、アプリケーションとして利用できるGitHub\n                        Desktopがありますので、それを使ってクローンを作り、更新するということが可能です。インストーラーがあるのでインストールは簡単です。また、WindowsとmacOSで操作方法に大きな違いはありません。\n                \n                GitHub Desktopでクローンを作成する\n                最初に行う操作はコマンドラインの場合と同様に「クローン」です。初めて使う場合には、次のような画面になると思われるので、右側の「Clone a repository from the\n                    Internet...」をクリックします。あるいは、FileメニューからClone Repositoryを選択します。\n                \n                続いて、クローンに関する設定を行います。Clone a\n                    repositoryのボックス上部にある「URL」を選択します。INTER-MediatorのレポジトリはGitHubにあるので、最初のテキストフィールドには、「INTER-Mediator/INTER-Mediator」と入力します。最後に.gitは不要です。Local\n                    pathは、クローンを行うフォルダを指定します。Chooseボタンで選択できるので、もし、すでにフォルダが決まっているのなら、そのフォルダを指定します。そして、Cloneボタンをクリックします。\n                \n                \n                GitHubのサイトから直接クローンを作成\n                クローンを作成する場合、GitHubのページにある「Clone or download」のドロップダウンから「Open in Desktop」をクリックすることでも可能です。その前に、GitHub\n                    Desktopのインストールが必要です。\n                \n                「Open in Desktop」をクリックしてしばらく待つと、GitHub Desktopが起動し、Clone a\n                    Repositoryのパネルが開きます。URLは正しいものが入力されているので、Local Pathを望む場所に指定して、Cloneをクリックして進めれば良いでしょう。\n                \n                クローンを作成後のGitHub Desktop\n                クローンが完了すると、レポジトリを表示する画面になります。ウインドウ上部の黒い部分が主要な操作を行う箇所でCurrent\n                    Repositoryおよび「INTER-Meidator」と見えている部分が、現在、INTER-Mediatorのクローンしたレポジトリを参照している状態であることを示しています。複数のレポジトリを扱うようになった場合はここをクリックして、切り替えるレポジトリを選択することなどを行います。その右には、Current\n                    Branchとして「master」が見えていますが、これはレポジトリの中の異なるソースコードの状態を管理できるブランチの機能の選択です。右側に「Fetch\n                    origin」と見えている部分は、これをクリックすることで、GitHub上の最新のレポジトリの状態に更新できます。GitHubのレポジトリの内容は、頻繁に更新されるので、バグが修正されたりリリースのタイミングで手元のINTER-Mediatorを最新のものにするには、このFetch\n                    originのボタンは手軽に利用できます。白い背景で見えているのは、レポジトリの更新履歴などです。\n                \n                ダウンロードしたバージョンを開発時に利用する\n                GitHubのINTER-Mdiatorのページで、右側の「Donwload\n                    ZIP」ボタンをクリックすると、現状のリポジトリの各ファイルを圧縮・アーカイブしてダウンロードします。ブランチがmasterであれば、ダウンロードして展開したフォルダは、INTER-Mediator-masterという名前になっています。フォルダ名を適当に変更して、開発中のアプリケーションのフォルダ等へ移動します。\n                \n                もちろん、こちらの方が当初は手軽なのですが、リポジトリとは切り離されることになるので、リポジトリの更新があれば、その都度、同じ作業を繰り返さないといけません。\n            \n            \n                composerを使って稼働できるようにする\n                ファイルをレポジトリからダウンロードした後、ターミナル等でフレームワークのルート、つまりINTER-Mediatorフォルダの直下をカレントディレクトリにして、以下のようにcomposerのコマンドを入力し、しばらく待ちます。この作業によって、必要なライフラリをダウンロードします。\n                \n                \n                    cd INTER-Mediator  # INTER-Mediatorフォルダをカレントにする\ncomposer update # 必要なライブラリをセットアップする\n                \n                かなり時間がかかりますが、しばらく待っていてください。途中、警告が出る場合もありますが、概ねそのまま進めても問題がないものが多いと思われます。PHPのライブラリだけでなく、npmを使ったJavaScriptのライブラリのインストールも同時に行います。個別に行うこともできますが、「レポジトリのルートでcomposer\n                    updateをする」というシンプルな作業で進めることができるようになっているので、composerをインストールしてライブラリのインストールを行ってください。\n                \n                サービスサーバー稼働の確認\n                実際にアプリケーションが稼働するようになったとき、ページの最後に出てくるINTER-Mediatorのフッター表示にある「Service Server Status」を確認してください。図のように、緑色になっていれば稼働していますが、赤の場合は稼働していません。\n                \n                このサービスサーバーは、Ver.8現在、サーバーサイドでのバリデーションと、クライアント間でのリアルタイム同期のために利用していますが、今後のバージョンで利用は拡大する可能性があります。PHPではなく、Node.jsを使ったサーバーであり、サーバー上で常駐します。サーバーへのリクエストは、PHP側からのみに行い、クライアントから直接は行いません。なんらかの理由でサービスサーバーを止めたい場合は、例えば、次のようにコマンドを入力します。INTER-Mediatorフォルダがカレントディレクトになっているとします。\n                \n                \n                    node_modules/forever/bin/forever stopall\n                \n                サービスサーバーに関するトラブルシューティング\n                composerにより、INTER-Mediator側にNode.jsをインストールしており、条件が揃えば、Webアクセスがあった時に自動的にサービスサーバーが起動するようになっています。しかしながら、自動的に起動できる条件が揃っていない状況も多々あります。その場合は、サーバーOS側にNode.jsを通常通りaptやyum等でインストールして稼働してください。Node.jsのコマンドにパスが通っていれば、それで確実にサービスサーバーは稼働します。\n                Alpine Linuxの場合、composerでインストールしたnodeやnpmが起動しないことがあります。この場合、apkコマンドで、nodejsとnodejs-npmをインストールします。そして、composer updateがnpmを呼び出したところでエラーで止まるので、すぐに「npm install」コマンド入れれば良いでしょう。また、foreverコマンドに実行権限が付与されていないので、例えば、INTER-Mediatorのルールで「sudo chmod a+x node_modules/forever/bin/forever」などと入力をして実行権限を与えてください。\n            \n            \n                開発用コンピューターでテスト稼動する\n                開発用のコンピューター上で稼動テストをする場合は、phpのWebサーバー機能を使うのが便利です。なお、データベースへの接続が可能な状態になっている必要があります。そして、例えば、次のようなコマンドを入力します。前の例の通り、mywebappフォルダにアプリケーションがある場合、例えば次のようにコマンドを入力します。\n                \n                \n                    cd ~/Documents/mywebapp  # アプリケーションのフォルダをカレントにする\nphp -S localhost:9000 # phpのWebサーバーを稼動する\n                \n                最初のコマンドで、phpのWebサーバーのルートをカレントフォルダにします。カレントフォルダを指定することも可能ですが、カレントにして次のphpコマンドを実行するのが手軽です。そして、-Sオプションを付けてphpコマンドを実行します。-Sオプションは、応答するIPアドレスとポートを指定します。例のように指定すると、phpが実行しているコンピューター内であれば、「http://localhost:9000」のURLで、mywebappフォルダの内容を参照できます。したがって、他のコンピューターからは参照できません。他のコンピューターから参照したい場合には、localhostではなく、自分自身のEthernetのIPアドレスなど、外部接続可能なホスト名を指定してください。ポート番号は、Webサーバー等の利用ポートを避けるのが一般的かと思われますが、もちろん、9000である必要はありません。使われていないポートであればOKです。これで、mywebappフォルダにあるanylist.htmlファイルは、ブラウザのアドレス欄に「http://localhost:9000/anylist.html」と入力することでアクセスでき、PHPが稼動してINTER-Mediatorは正しく動作します。\n                \n                サンプルを実際に稼働させる\n                サンプルを実際に稼働させるには、まず、データベースにサンプル用のデータを追加する必要があります。MySQLとFileMakerのサンプルは豊富なので、どちらかを稼働させるのが良いでしょう。PostgreSQL、SQLiteのサンプルは限られています。データベース稼働の方法は、このページでは割愛します。\n                \n                MySQLを利用する場合、サンプルを利用するためのデータベーススキーマが、INTER-Mediatorフォルダ内のdist-docsフォルダにある「sample_schema_mysql.txt」ファイルに記載されています。これを例えば、以下のコマンドで入力します。ファイルの内容はSQLコマンドなので、状況に合わせて修正して読み込ませてください。\n                \n                \n                    cd INTER-Mediator/dist-docs #カレントフォルダの移動\nmysql -uroot &lt; sample_schema_mysql.txt #スキーマの読み込み\n                \n                FileMakerのサンプルファイルは、INTER-Mediatorフォルダ内のdist-docsフォルダにある「TestDB.fmp12」です。このファイルをFileMaker\n                    Serverで公開してください。\n                データベースの準備ができれば、実際にWebサーバーで公開しますが、これも、phpで公開するのが手軽でしょう。また、他のファイルとの混乱を避ける意味でも、INTER-Mediatorフォルダを公開するのが良いでしょう。例えば、以下のようにコマンドを入力して、INTER-Mediatorフォルダをphpコマンドで公開します。\n                \n                \n                    cd ~/Documents/mywebapp/INTER-Mediator  # INTER-Mediatorのフォルダをカレントにする\nphp -S localhost:9000 # phpのWebサーバーを稼動する\n                \n                そして、ブラウザからは、「http://localhost:9000/samples/」と入力してください。サンプルの一覧のページが見えるはずです。ここで、samplesの後のスラッシュも入力してください。Apacheだと、フォルダ参照の場合の最後のスラッシュは必要に応じて補完しますが、phpのWebサーバー機能はそうした機能はないので/を入れておく必要があります。これがないと、スタイルシートの読み込みなどがうまく行かないなど、意図しない見え方になります。\n                \n            \n            　 \n                実稼働向けINTER-Mediatorを生成する\n                リポジトリから取り出した結果で開発しているので、その状態で稼働はできるはずです。また、以下の方法でビルドすれば、サンプルなど実稼働に不要な素材が取り除かれると同時に、JavaScriptのプログラムを1つのファイルに圧縮してまとめるので、動作のパフォーマンスは有利になります。\n                \n                実行用のINTER-Mediatorを作成する\n                独自のバージョンと本日の日付を組み込んだ現状のINTER-Mediatorを作るには、dist-docs/buildup.shというスクリプトを使ってください。たとえば、INTER-Mediatorのディレクトリがカレントディレクトリであれば、MacあるいはUNIX系OSなら、以下のように入力します。Windowsの場合、PowerShellで稼動します。すると、おそらくGit\n                    Bashが別のウインドウを開いて稼動するので、どのOSでもUNIXのシェル環境で稼動することになると思われます。Cygwindでの稼働もできます。\n                \n                    cd INTER-Mediator/dist-docs/\n./buildup.sh\n                \n                すると以下のようなメッセージがターミナルに表示されます。ここで、キーボードから、1、2、3のいずれかをキータイプしてreturnキーを押してください。3種類のビルド形式が選択できますが、(2)が最小の構成で、通常はこちらでいいかと思われます。(3)についてはこの後説明します。\n                \n                \n                    $ ./buildup.sh\n=================================================\n Start to build the INTER-Mediator Ver.6-dev\n-------------------------------------------------\n Original: /Users/msyk/Documents/mywebapp/INTER-Mediator\n Build to: /Users/msyk/Documents/mywebapp/im_build/INTER-Mediator\n Path of minifyer (installed by composer): /Users/msyk/Documents/mywebapp/INTER-Mediator/vendor/matthiasmullie/minify\n-------------------------------------------------\nChoose the build result from these:\n (1) Complete (everything contains)\n (2) Core only (the least set to work web applications)\n (3) Core only, and move it to 3-up directory (the ancestor of original INTER-Mediator)\nType 1, 2 or 3, and then type return----&gt; \n                \n                その後、メッセージ通り、INTER-Mediatorフォルダと同じ階層に、「im_build」フォルダが作られ、その中に、INTER-Mediatorフォルダがあります。こちらのファイルの中は、動作実行上必要なものだけに絞られています。また、このフォルダ内でcomposer\n                    updateも自動的に実行されるので、PHPやJavaScriptのライブラリはすでにインストールされた状態になります。このim_build/INTER-Mediatorフォルダを、現状のINTER-Mediatorフォルダと置き換えればOKです。\n                \n                \n                \n                前記の手法ではビルド後のINTER-Mediatorの移動が面倒であるとも考えられますし、元のINTER-Mediatorフォルダを上書きすると、レポジトリからの更新ができないなどの問題もあります。オリジナルのINTER-Mediatorを残しつつ、実行用のINTER-Mediatorを効率的に管理するために、アプリケーションのフォルダのルートにlibフォルダ、そしてその中にsrcフォルダを作り、そこにクローンを作成しておくという方法があります。クローンの作業から説明すると、例えば次のようなコマンドで作成が可能です。作成結果の例も示します。\n                \n                \n                    cd ~/Documents/mywebapp\nmkdir lib\ncd lib\nmkdir src\ncd src\ngit clone https://github.com/INTER-Mediator/INTER-Mediator.git\n                \n                \n                そして、buildup.shスクリプトを稼働します。INTER-Mediatorフォルダがカレントの場合は、「dist-docs/buildup.sh」のように相対パスでスクリプトを指定して起動しても構いません。ここで、「\n                    (3) Core only, and move it to 3-up directory」を選択します。これを選択すると、「(2) Core\n                    only」に加えて、im_buildフォルダに作られた実行用INTER-Mediatorフォルダを、3つ上位のディレクトリに移動させます。つまり、srcにあるオリジナルのINTER-Mediatorからビルドした実行用INTER-Mediatorを、libの直下に移動するまでを自動的に行っているということです。src内部はそのまま変更はされません。\n                \n                \n                    $ pwd\n/Users/msyk/Documents/mywebapp/lib/src/INTER-Mediator\n$ dist-docs/buildup.sh \n=================================================\n Start to build the INTER-Mediator Ver.6-dev\n-------------------------------------------------\n Original: /Users/msyk/Documents/mywebapp/lib/src/INTER-Mediator\n Build to: /Users/msyk/Documents/mywebapp/lib/src/im_build/INTER-Mediator\n Path of minifyer (installed by composer): /Users/msyk/Documents/mywebapp/lib/src/INTER-Mediator/vendor/matthiasmullie/minify\n-------------------------------------------------\nChoose the build result from these:\n (1) Complete (everything contains)\n (2) Core only (the least set to work web applications)\n (3) Core only, and move it to 3-up directory (the ancestor of original INTER-Mediator)\nType 1, 2 or 3, and then type return----&gt; \n                \n\n                \n                この方法だと、フォルダの移動はしなくても済みます。もし、INTER-Mediatorのアップデートを取り込みたい場合は、srcフォルダ側のINTER-Mediatorをカレントにして「git\n                    pull」を実行し、その後、dist-docs/buildup.shを起動して(3)を選択すれば、自動的にlib直下のINTER-Mediatorが更新されるということになります。\n                開発用と運用用のコンピューターが別々の場合\n                ここでさらに実用的な場合を考えます。現状では、開発用クライアントはmacOSやWindowsを使うことが一般的である一方、運用用サーバーはLinuxあるいはWindowsであることが一般的でしょう。通常は、運用サーバー側に必要なファイルを開発用のクライアント側で整えて、全部アップロードするということがよく行われます。しかしながら、composerやその背後で動いているnpmを用いてインストールを行うと、ライブラリのファイル数が半端なく多く、アップロードに大変時間がかかります。また、一部のライブリは、プラットフォームによる違いがある場合も考えられるので、そのままアップロードして良いかどうかは検討の余地があると思われます。何れにしても、最初の１回でもかなり時間がかかるのはあまり気持ちの良いものではありません。\n                \n                この問題を解決する方法は、開発用クライアントと運用用サーバーそれぞれで、composer\n                    updateコマンドを実行することです。また、クライアントでの実行をしないのなら、サーバー側にINTER-Mediatorフォルダをコピーした後に、サーバー側でcomposer\n                    updateコマンドを実行すれば良いでしょう。さらに、buildup.shで(3)のビルドをする場合、buildup.shを運用用のサーバーがで実行するのが良いと思われます。ただ、開発ツールでは参照したファイルが存在しないとエラーを出すので、開発用と運用用でそれぞれでbuildup.shを動かすのが現実的かもしれません。何れにしても、大量のライブラリのファイルの移動を避けるように開発作業を進めるという点が重要です。\n                \n                例えば、開発用クライアントでの実行はせず、運用用あるいはテスト用のサーバーがあって、そちらでもっぱら稼働するとしたら、作業フローは次のようになると思われます。\n                \n                    クライアントにフォルダを用意し、その中にlib、srcフォルダを用意する\n                    srcフォルダにINTER-Mediatorをレポジトリからクローンする\n                    lib以下をサーバーにコピーする。src以下もコピーする\n                    サーバーにログインする。以下の作業はサーバーにログインして進める\n                    INTER-Mediatorフォルダをカレントにして、composer updateを実行する\n                    INTER-Mediatorフォルダをカレントにして、dist-docs/buildup.shを起動し、(3)を選択する\n                    lib以下にINTER-Mediatorがあることを確認する\n                    lib以下のINTER-Mediatorにある、node_modules/forever/bin/foreverが、Webサーバーのユーザーに書き込み権限があることを確認し、ない場合は権限を与えておく\n                    \n                    プログラムをクライアント側で作成する。定義ファイルでのINTER-Mediatorの参照先パスは「/lib/INTER-Mediator/INTER-Mediator.php」とする\n                    作成した定義ファイルやページファイルなどを、その都度クライアントからサーバーにアップロードして、テストする\n                \n                INTER-Mediatorフォルダを、composer\n                    updateを行う前の状態にしたい場合には、INTER-Mediatorフォルダ直下のnode_modulesとvendorの2つのフォルダを単に削除するだけで構いません。\n                バージョン番号を独自に設定する\n                バージョン番号については、buildup.shファイルの最初の方に記述があるので、それを変更すれば、独自のバージョンを設定することができます。なお、バージョンのルールは次のようにします。なお、以下のルールはVer.6以降に適用します。\n                \n                \n                    バージョン番号は、整数のみをピリオドで区切ることとする（例：6、3.4、3.11）\n                    バージョン表記は、Ver.を基本とするが、vでもVersionでもversionでも基本的には構わない\n                    整数が1つのものを「正式バージョン」とする（例：6、11）\n                    開発者が独自にバージョンを付ける場合、2つ目以降の整数を必ず付ける（例：6.2、7.1.11）\n                    開発者が独自にバージョンを付ける場合、さらに追加してもいい（例：3.4.1-rev.21）\n                \n                つまり、INTER-Mediatorをダウンロードして、実際にアプリケーションに搭載する上で少し修正したとしたら、2つ目の整数で枝番号を付けてくださいということです。できれば、その状態をコミット/プッシュした上で、そのバージョンタグをつけていただけると、自分のバックアップ用にもなると思います。他の人とバージョンが重ならないように、リポジトリをチェックして異なる番号を付けてください。また、2桁目以降は飛び番号でもいいとします。\n                \n            \n        "
    },
    {
        "id": 8,
        "parent": "/ja/for-novices/",
        "path": "/ja/for-novices/vm.html",
        "title": "バーチャルマシンの利用",
        "breadcrumb": "バーチャルマシンの利用",
        "body": "\n            \n                INTER-MediatorのVMについては、Ver.8及びVer.5.12の配布を最終版とします。M1 Macの登場まではほとんどのPC環境がIntelだったので、Mac/Windowsで使えるVMが構築できましたが、M1の登場により共通にかつフリーで使えるVM環境が整わない状態となったので、VMの製作は行わないことにしました。今後は、『トライアル版の利用方法』で紹介するDocker等での方法で、INTER-Mediatorの試用等を行ってください。（2022-05-22）\n                はじめに\n                INTER-Mediatorの試用や学習用に、即座にサーバーとして利用できるVirtual Machine（VM）についての情報をこの文書に記載します。VMを自分で作成するか、あるいはすでに作成されているVMをダウンロードするかして利用できます。\n                このVirtual Machineは、特定のホスト内でのみ利用することを想定して、ログインアカウントなどを見える場所に記載しています。学習用に定義ファイルとページファイルをブラウザーで編集できる状態にしているため、Virtual Machineとして配布している「INTER-Mediator-Server VM」をそのままインターネットに公開することは絶対に行わないでください。\n                【中・上級者へのアドバイス：追記1】INTER-Mediator 5.7以降、モバイルアプリでよく使われる「ステップ動作」開発にも活用できる機能を拡張しています。以下の説明では「ホストオンリーネットワーク」でのVM使用を強く推奨していますが､それではモバイル端末での実機テストができません。\n                安全が確保された同一ネットワーク内でのみ\bの利用を想定した「ブリッジネットワーク」接続を設定すれば､こうしたモバイル端末での動作確認を実機で行えます。以下､【追記1】として、これに関する設定方法を追記しています。ただし､その場合は既定のパスワードの変更、安全が確保されたLAN内での利用にとどめる、などの配慮に努めてください。（2018/04/07追記）\n                \n            \n            \n                使用までの準備\n                VMは、VirtualBox用を提供します。アプリケーション形式のVirtualBoxを以下の方法で、ご自分のパソコンにインストールしておいてください。\n                VirtualBoxのインストール\n                Windows、Mac、Linux、Solarisで利用できるVirtual Machine実行環境の「VirtualBox」は、Oracle社が開発してフリーで配布しているものです。こちらのページより、ご利用のホストコンピュータに対応したVirtualBoxをダウンロードしてご利用ください。\n            \n            \n                INTER-Mediator-Server VMのダウンロード\n                INTER-Mediator-Server VMは以下のリンクよりダウンロードしてください。いずれも、Intelプラットフォーム向けのLinuxをベースにしているため、Intel版Mac、通常のWindowsでは稼働しますが、Apple M1チップ搭載Macでは稼働しません。Apple Silicon搭載Mac向けにはVirtualBoxが安定してから、あるいはDockerでの動作環境提供を開発中です。\n                \n                    \n                        INTER-Mediator-Server VM 8（2021/07、約2.3GB）\n                            \n                    \n                    \n                        INTER-Mediator-Server VM 5.12（約880MB、最終更新日：2021/05/29）\n                            \n                    \n                \n            \n            \n                VMの準備\n                VMをINTER-Mediatorに含まれているスクリプト等を利用して自分で生成する方法を「VMを自分で作成して起動する」に、一方、すでに誰かが作ったVMを利用する方法を「VMをダウンロードして利用する」に解説します。もちろん、いずれか一方の作業を行うことで、VMを利用することができるので、状況に応じて使い分けてください。\n                VMをダウンロードして利用する\n                以下の手順は、VirtualBoxの初期状態を仮定しています。他の利用などでさまざまな設定がある場合には、手順が異なるかもしれませんが、原則として、ホストオンリーネットワークを用意して、そのネットワークを使用してVMが起動するようにセットアップされていればOKです。ダウンロードしたVMは、macOSでもWindowsでも、プラットフォームに関係なく利用できます。ただし、FileMaker Serverの場合には、VMとホスト側のIPアドレスが以下で行われる設定と同一である必要があります。\n                VirtualBoxの準備\n                VirtualBoxで稼働させるゲストのネットワーク環境にはいくつかありますが、「ホストオンリーネットワーク」を利用します。この方法だと、ゲストOS自体は、ホストマシン外からのネットワークアクセスはできなくなります。また、ゲストOSからホストOSへの接続も可能です。作成されるVMは、ホストオンリーネットワークであることを前提としているので、それ以外の設定での利用では、VMの状況を確認するなどして、ご自分で対処する必要があります。\n                Windowsでは、「ホストオンリーネットワーク」が最初から1つ作成されています。確認のため、「ファイル」メニューから「環境設定」を選択して、ダイアログボックスの左側で「ネットワーク」を選択し、「ホストオンリーネットワーク」のタブを選択します。そこに最初から「VirtualBox Host-Only Ethernet Adapter」が存在することを確認してください。\n                \n                    \n                \n                Mac版では、「ホストオンリーネットワーク」は最初は1つもありません。「VirtualBox」メニューの「環境設定」を選択してダイアログボックスを表示します。ツールバーにある「ネットワーク」を選択します。さらに、「ホストオンリーネットワーク」のタブを選択します。ここに何もない場合には、リストの右側の3つあるアイコンの一番上をクリックして、項目を1つ作ります。作成されたままの状態で通常はかまいません。\n                \n                    \n                \n                ダウンロードした.ovaファイルの読み込み\n                WindowsおよびMacのいずれの場合でも、「ファイル」メニューから「仮想アプライアンスのインポート」を選択してください。そして、ダウンロードしたファイルを指定して読み込み、「VirtualBox マネージャー」の画面の左側に新しい項目ができていることを確認します。\n                INTER-Mediator-Server VMのネットワーク設定\n                「VirtualBox マネージャー」で、読み込んだINTER-Mediator-Server VMの項目を選択します。そして、ツールバーの「設定」アイコンをクリックします。すると、そのVirtual Machineの設定が画面が表示されます。\n                Windowsでは、画面左側のリストで「ネットワーク」を選択します、さらに「アダプター2」のタブを選択します。そして、「割り当て」のポップアップメニューで「ホストオンリーアダプター」を選択します。すると、「名前」のところは、自動的に、「ホストオンリーネットワーク」に定義された名前が見えています。そこまでを確認して、OKボタンをクリックします。\n                \n                    \n                \n                Macの場合は、ツールバーの「ネットワーク」を選択して、さらに「アダプター2」のタブを選択します。そして、「割り当て」のポップアップメニューで「ホストオンリーアダプター」を選択します。すると、「名前」のところは、自動的に、「ホストオンリーネットワーク」に定義された名前が見えています。そこまでを確認して、OKボタンをクリックします。\n                \n                    \n                \n                【追記１】同一ネットワーク内の別デバイスからアクセスする「ブリッジネットワークの設定」\n                「ホストオンリーネットワーク」ではVMホストが稼働しているマシンからしか接続できません。\bしかし、それではiOSやAndroidデバイスでの実機操作テストができず不便です。そこで、中・上級者向けの方法としてブリッジネットワークを設定する方法を解説します。\n                「VirtualBox」メニューの「環境設定」を選択してダイアログボックスを表示したあと、ツールバーにある「ネットワーク」を選択します。「Adapter 1（アダプター1）」の「Attached to:（割り当て）」を「Bridged Adapter」にセットします。\n                \n                \n                    \n                \n                重要：既定ユーザーのパスワード変更\n                このようにセットしたあと､VirtualBox マネージャーでINTER-Mediator-Server VMの項目を選択して「起動」ボタンをクリックすると、黒いコンソール画面が現れます。\n                最初の起動時には既定値のログインID:developer、Password:im4135devでログインしますが､即座にしなければならないことがあります。パスワードの変更です。 ブリッジネットワークに設定したあと､VMが稼働しているマシンを不用意にカフェなどでWi-Fi接続して動作させると､同一ネットワーク内にいる他のユーザーからアクセスされる危険に晒されます。即座に独自のパスワードに変更した上で､IMをVM上で稼働させてください。\n                パスワードの変更はVMサーバー画面上で行います。まず､既定のログインID､パスワードでログインしたあと､passwdとタイプします。すると次の画面のようにこれまでのパスワードを要求されます。ただしくタイプできたら続いて新しいパスワードを入れるよう促されます。その際あまり短い文字列やローマ字のみのパスワードを入れると「パスワードが弱い」とはねられます。数字や記号混じりのパスワードをセットしてください。\n                \n                    \n                \n                パスワード変更が終わると、LAN内でどのようなIPアドレスが振られているか確認します。\n                ifconfig eth0\n                とタイプします。これでネットワークアダプターのEthernet port0の状況が分かります。\n                これを見ると「192.168.12.143」でINTER-Mediator Serverが公開されているのが分かります。このアドレスはあくまでも筆者の環境下での値ですので､このアドレスはあなたの使っているVM上に表示されたアドレスに読み替えて使ってください。\n                \n                    \n                \n                ここまでできたら、上記IPアドレスを手元のモバイル端末のWebブラウザのアドレスバーに入力してアクセスしてみてください。ただし､冒頭の注意書きでも強調したようにご自身の管理下にある安全が確保されているネットワーク内でのみ使用するように心がけてください。\n                \bまた､安全策としてIMのVM版にはVMが稼働している同一マシン上でしか設定ファイルエディタ、Pageエディタなどが動作しないように設定しています（下図）。学習や開発を行う場合はネットワーク上の他の機器からではなく､VMが動作しているマシン上で行ってください。\n                \n                    \n                \n                \n            \n            \n                INTER-Mediator-Server VMの利用\n                以上の準備ができれば、VirtualBox マネージャーでINTER-Mediator-Server VMの項目を選択して「起動」ボタンをクリックします。黒いコンソール画面に文字が流れて起動します。ログインプロンプトが表示されます。Webブラウザから「http://192.168.56.101」に接続してください。すると、このINTER-Mediator-Server VMで利用出来る機能などなどが見えるページがあります。\n                「サンプルプログラム」のリンクからは、INTER-MediatorのSamplesフォルダの内容を即座に稼働させることができます。ホスト側でFileMaker Serverが稼働している場合、INTER-Mediatorのディストリビューションの中にあるdist-docs/TestDB.fmp12をサーバーに登録してXML共有ができる状態になっていれば、ゲストからホストに接続して動作するので、FileMaker Serverのサンプルも試せます。FileMaker Serverが稼働していない場合には、FileMaker Serverのサンプルはエラーが出ます。\n                \n                    \n                \n                また、Webブラウザ上で、定義ファイルとページファイルを修正して、実際にプログラムした結果を参照することもできます。たとえば、ページファイルのpage01.htmlを開くリンクだけでなく、page01.htmlを編集するリンクはHTMLエディタを表示します。また、def01.phpはpage01.htmlからSCRIPTタグで参照されている定義ファイルで、定義ファイルエディタを開いて修正もできるようになっています。\n                \n                    \n                \n                「http://192.168.56.101」に接続できない場合\n                INTER-Mediator-Server VMが起動しているのなら、ユーザ名「developer」、パスワード「im4135dev」でログインをしてみて、「ifconfig」コマンドを実行してください。そこに、INTER-Mediator-Server VMが現在使用しているIPアドレスが見えます。eth1と記述された塊の中の、inet addrの後のIPアドレスが、現在のゲストOSのIPアドレスです。ホスト側でWebブラウザを起動して、そのIPアドレスで接続をしてみてください。\n                それでも考えられるのは次のようなことです。\n                \n                    そもそも、VirtualBox自体がきちんと動かない状態である。Windowsで仮想化機能が無効になっている、Windows 10でHyper-Vを有効にしている、VMwareで稼働するWindowsの上でさらにINTER-Mediator-Server VMを使用しようとした、など。\n                    ここまでに説明したネットワークの設定が正しく行われていない。あるいは、以前にその種の設定を独自に変更してしまっている。\n                    なんらかの設定により、ホストからゲストへのIP接続ができない状態になっている。VirtualBoxでの設定次第で、あり得ると考えられます。\n                \n                自分で作ったファイルを運用する\n                「http://192.168.56.101」に接続したページに、ログイン可能なアカウントが末尾に書かれています。それをご利用ください。SFTPでファイルの転送をするのが手軽かと思われます。また、INTER-Mediator-Server VM自体にログインをして、独自のデータベーススキーマを読み込ませるなどしてください。データベースの管理アカウントも、「http://192.168.56.101」に接続したページに記載しています。\n                INTER-Mediatorをアップデートする\n                ホストマシン上で、sshにより「192.168.56.101」に接続してください。ユーザー名は「developer」、パスワードは「im4135dev」です。例えば、macOSの場合は「ターミナル」アプリケーションで、「ssh developer@192.168.56.101」とコマンドを入れて、パスワードがその後にたずねられるので、キータイプをします。Windowsの場合は、TeraTermやPuTTY等のアプリケーションをご利用ください。\n                INTER-Mediator Ver.5.2（Ver.5.2-RC3を含む）以降のINTER-Mediator-Server VMの場合、以下のようにコマンドを入力します。\n                \n                    cd /var/www/html/INTER-Mediator\ngit pull origin stable\n                \n                INTER-Mediator Ver.5.2-RC1およびそれ以前のINTER-Mediator-Server VMの場合、以下のようにコマンドを入力します。checkoutの後にスペースとドット（git checkout .）を入れるのを忘れないようにして下さい。\n                \n                    cd /var/www/html/INTER-Mediator\ngit checkout .\ngit pull origin stable\n                \n                GitHubのリポジトリにあるINTER-Mediatorの最新安定版がVMに反映されます。なお、開発版の最新状況を反映させる場合には「git pull origin stable」の代わりに「git checkout master;git pull origin master」を実行します。現在のバージョンは、INTER-Mediator以下、dist-docs/build.shというスクリプトの最初の方のバージョン記述を確認してください。反映されている最終的なコミットは、git logやgit showコマンドで、現在のcommitの識別子（16進数の非常に長いコードで、commitの後に続けて記述されている）を得て、GitHubのリポジトリで探してください。なお、Ver.5.1以前の場合は、アクセス権の設定が若干違います。もともと用意されているページファイルと定義ファイルの編集には問題がありませんが、自分でファイルを追加したような場合などは、アクセス権について見直してください。\n            \n            \n                （参考）VMを自分で作成して起動する\n                INTER-Mediatorの配布ファイルの中には、VMを生成するためのスクリプト等が含まれています。最新のINTER-Mediatorが組み込まれたVMを作成するには、この方法が最適です。なお、標準環境のWindowsでは、Vagrantをインストールしてもスクリプトが稼働しないので、ご注意ください（別途Git for Windowsなどのソフトウェアをインストールしてsshを実行できる環境が必要です）。\n                \n                    Vagrantをインストールします。こちらのページに移動して、使用するOSに対応したアプリケーションをダウンロードしてインストールします。単にインストールするだけで大丈夫です。\n                    INTER-Mediatorの最新版をcloneします。こちらのページににある「Clone in Desktop」ボタンを利用するのが手軽な方法です。\n                    macOSであればターミナルアプリケーションを起動し、cloneしたINTER-Mediatorフォルダ内のdist-docs/vm-for-trialフォルダに移動します。\n                    「vagrant up」というコマンドを実行します。ダウンロードや作成処理に時間がかかります。概ね20分程度です。「INTER-Mediator-Server VM is ready.」と表示されたら準備完了です。\n                    なお、ダウンロード済みのboxファイルを削除する場合には「vagrant box remove INTER-Mediator-Server」というコマンドを実行します。\n                \n            \n        "
    },
    {
        "id": 9,
        "parent": "/ja/for-novices/",
        "path": "/ja/for-novices/startup.html",
        "title": "スタートアップガイド",
        "breadcrumb": "スタートアップガイド",
        "body": "\n            \n                はじめに\n                \n                    INTER-Mediatorを利用して、Webアプリケーションの開発を行おうと考えている方々向けに、プログラミングを行わない範囲の記述で開発可能な部分について、この文書にまとめました。最初にHTMLやデータベースの基本を簡単に説明しています。INTER-Mediatorでの開発では、HTML/CSS/JavaScriptについての知識が必要で、これらについてはすでにある程度知識があるという前提での解説になっています。データベースは概念的な理解で、既に用意されているデータベースを利用するという観点で、Webページ上への表示などを説明します。（新居雅行, 2014/2/18, 2016/11/29改訂）\n                \n            \n            \n                1. Webページ制作についての基本\n                まず最初に、Webページの成り立ちについて、知っておいていただきたい知識をまとめておきます。次のページ以降の内容を読み進めるための前提知識をこのページで説明します。\n                WebサーバーとWebクライアント\n                \n                    Webページのコンテンツは、通常は「サーバー」というインターネット上で共有可能なコンピュータ上に保持されています。それらをネットワークを通じてデータをクライアントに転送した上で参照します。クライアントとして使われるアプリケーションは、一般には「Webブラウザ」と呼ばれます。\n                HTMLについて\n                \n                    Webページのコンテンツは、HTMLという規格に従ってテキストで記述されたものが中心になっており、サーバー上ではたとえば拡張子が.htmlの1つのファイルで保存されています。そのファイルの内容をWebブラウザが解釈することで、段落や表、色の付いた文字などのレイアウトを施したWebとして表示できます。HTMLで記述されたファイルを「HTMLファイル」、HTMLの記述内容に従って表示された結果を「HTMLページ」と呼びます。\n                \n                    HTMLによる記述の特徴は、表示する文字とは別に、「タグ」として書式やレイアウトなど、テキストをどのように見せるのかという記述も付加されていることです。また、タグはデータの区切り目を示すなど見せ方に限らない使い方もあります。\n                タグは、たとえば &lt;div align=\"center\"&gt;abcdef&lt;/div&gt; のような書き方をします。開きタグ、閉じタグで囲まれるのが一般的で、divのような「タグ名」はHTMLで決められたものを利用します。また、alignのような「属性」をタグに付与できますが、属性名はタグごとに使える物が決まっています。属性名、イコールに続いて、属性の値がダブルクォート等で囲まれて記述され、値は状況に寄って変わります。\n                \n                \n                    Webページの表示では、テキスト以外に、画像やムービーも表示できます。これらは、通常はサーバーでは別のファイルとして保存されたものになっており、HTMLページ内に特定の画像を表示するには、画像であれば画像を表示するIMGタグのSRC属性に、画像のファイル名やURIを記述します。\n                CSSとJavaScriptについて\n                \n                    HTMLで表示されるものの書式設定は、CSSとして別途規格が定められており、多様な表現が可能になっています。CSSを利用する事で表現力が上がるだけでなく、まとめて設定したり、複数のHTMLファイルで設定情報を共有することができます。前者は、idやclass属性、あるいはタグに対する書式設定ができることで実現されています。後者は、CSSの定義自体を独立したファイルに記述して、HTMLからCSSが記述されたファイルの内容を参照する仕組みで実現されています。\n                \n                    HTMLでの記述やCSSによる記述は、その場でどうするかということ（例えば、画像を見せるとか、段落を右寄せにするなど）を記述する方式ですが、一方で、そうした記述以上のことを行う仕組みとして、JavaScriptというプログラミング言語を用いたプログラムをHTMLページの中で使われる事が一般的になっています。プログラム自体をHTMLの内部やあるいは別のファイルで供給できるようになっています。\n            \n            \n                2. データベースについての基本\n                \n                    データベースとは\n                    \n                        あらかじめ決められた内容を常に表示するWebページは、HTMLファイルなどを作ってサーバーに保存すれば、概ね目的は達成できます。しかしながら、販売品目が変わるコマースサイトなど、状況に応じた内容を表示する必要があるWebサイトでは、Webページを構成するための仕組みとは別に、データのみを「データベース」に保存するのが一般的です。データベースに保存する理由は、確実に保持できる事や、高速に検索できるなどの理由があり、MySQLなどのオープンソース系のデータベースソフトウェアを、Webサーバーとは別にサーバー上にインストールして利用するのが一般的です。\n                    \n                        データベースとして利用されるソフトウェアは、リレーショナル型データベースという手法に基づく物が広く利用されています。最近ではそうでないものもありますが、INTER-Mediatorで利用するのはリレーショナル型なので、この手法のみを扱います。\n                    データベースでの記録形式\n                    \n                        データベースに記録されているデータは雑多に記録されているわけではありません。Excelなどの表計算ソフトのような「テーブル形式」で記録されているのが基本です。このとき、Excelの1行に相当する物を「レコード」、1列に相当するものを「フィールド」と呼びます（ソフトウェアによっては異なる呼び方の場合もありますが、この名称で以後は説明します）。\n                    \n                        \n                    \n                    \n                        この形式でのデータは、概ね、フィールドによって「どんな種類のデータなのか」ということが決められることになります。住所録での「住所」フィールドには、たとえばある人の住所の文字が入力されて、そこに生年月日などは入力しません。そのフィールドがいくつか集まったものが「レコード」です。住所録では、1人の情報が1つのレコードになります。\n                    \n                        なお、フィールドに記録できるデータの種類（「型」などと呼びます）をあらかじめ決めておくのが一般的です。この点については、「フィールドは文字列を入力するのか、数値を入力するのかがあらかじめ決められている」といったことでの理解で十分です。\n                    データを特定する\n                    \n                        テーブル形式のデータでは、「どのレコード」の「どのフィールド」なのかを指定すると、通常は文字列か数値の1つのデータを得ることができますし、一方保存する事もできます。「どのフィールドか」ということは、フィールド名で特定します。そのため、同一のテーブルではフィールド名が重複することはできません。\n                    \n                        一方、「どのレコードか」ということはフィールド名のような名前をレコードに対しては付けていないため、異なる手法を取ります。明示的な順序を決めずに「適当に順番で前からいくつ目」といった特定方法は、リレーショナル型データベースでは原則として使うべきではないとされています。動作の効率化のため、毎回同じ順序でレコードが登場するということは保証されていません。このような事情もあって、リレーショナル型データベースでは、レコードを特定するためのフィールドを設けます。そのためのフィールドを「主キーフィールド」あるいは「キーフィールド」と呼ばれます。\n                    \n                        たとえば、住所録を考えてください。名前からレコードが特定できるかもしれませんが、同姓同名の人もいるかもしれません。そのような状況での1つの方法として、住所録には本来ないかもしれない「番号フィールド」を設けて、データベースソフトウェアの機能を使って、そこに1番以降の連番を自動的に入力し、レコードごとに必ず異なる数値データを入れておく事にします。データが増えてしまうとは言え、その番号フィールドが120だとかいった数値が分かれば、あるレコードを特定できることになります。主キーに関しても設計上はいろいろな手法が可能ですが、INTER-Mediatorではデータとは独立して連番が自動設定されるようなフィールドを利用する事が一番シンプルな方法です。\n                    検索とソート\n                    \n                        リレーショナル型データベースは特定のテーブルに対して、条件を与えてレコードを取り出す事ができます。条件は、フィールドに対して式を記述して与えます。たとえば、「金額が1000円以上」のような条件を、条件に従って記述します。その結果、条件に合ったレコード群（レコードセット）が得られます。このレコードセットは、0個以上のレコードが含まれます。この検索結果は、検索を指示した元に返すまえに、特定のフィールドのデータに基づいて並べ替えを行います。そのフィールドも検索要求に含め、指示によって昇順や降順といった並べ替えができます。\n                    \n                        以上の点から、テーブルは表計算ソフトのワークシートのように理解をすればいいのですが、現実には、テーブルは複数のレコードからなり、レコードは複数のフィールドからなる（正確にはフィールドというよりも「フィールド名で指定されたデータ」と言うべき）といった階層関係があると理解する方が、より実体に即したものと言えるでしょう。\n            \n            \n                3. Webアプリケーションの概略\n                Webアプリケーションの基本的な構成\n                \n                    データベースを利用したWebページを作成するとき、状況に応じてデータを取得して、その結果をHTMLとして生成し、それをクライアントに送るという作業を行う必要があります。HTML/CSS/JavaScriptだけではその仕組みは完全にはできないため、サーバー側で何らかの処理をさせる仕組みが必要になります。そうした仕組みを一般に「Webアプリケーション」と呼びますが、用語の示す範囲はややあいまいです。ここでは、Webサーバーとデータベース以外に、目的に応じたソフトウェアを追加しないといけないということが重要です。\n                \n                    つまり、ニュースサイトとコマースサイトでは要求が異なるため、単一の追加ソフトウェアではまかなえません。要求に応じたソフトウェアを、サイトごとに作る必要があります。そのための仕組みの基本がCGIであり、Webサーバーは単にファイルの内容を返すだけでなく、何らかの処理を行ってその結果を返すとか、クライアントのフォームで入力した結果を受け取ってなんらかの処理をするという仕組みを持っています。その処理を行うソフトウェアははさまざまな手法で構築されています。PHPやJavaなど、さまざまな実行環境や言語が利用されています。多くのソフトウェアは、プログラミング言語を用いて開発されているのが実情です。そのため、Webアプリケーション開発は、プログラミングやシステム開発を行うような会社や人材がまかなう業務となっています。\n                \n                    Webアプリケーションが複雑化するにともない、プログラミングを1から行うようなことは少なくなり、現在はほとんどの開発を「フレームワーク」と呼ばれる一定の共通的な機能をまかなうソフトウェアをベースに作られます。有名なフレームワークとしては、CakePHPやRuby on Railsがあります。\n                INTER-Mediatorの動作上の構成\n                \n                    ご利用されるINTER-Mediatorは、このフレームワークに属するものです。データベースがあり、Webサーバーがある状態で、データベースを利用したWebアプリケーションを開発するための素材です。しかしながら、INTER-Mediatorは他のフレームワークと大きく異なり、プログラミング言語でのプログラム作成をしなくても、機能を作り込めるようにしています。どのようにすればいいのかは次のページ以降、詳細に説明しますが、概ね、HTML内に記述を加えることと、データベースの利用に関するルールを列挙することと思っていてください。\n                \n                    Webアプリケーションでは複雑な動作を目にすることも一般的です。たとえば、Amazonのサイトは、莫大なユーザの購入履歴を覚えていたり、流通と連動して分割して荷物を送るなどたくさんの機能からなっています。しかしながら、複雑なページでも、その根本は、データベースから取り出したデータを表示し、一方で、入力したデータを書き込むといった作業が基本です。そうした処理を、極力少ない作業で実現しようとしたのがINTER-Mediatorです。\n                \n                    もちろん、Amazonのようなサイトを簡単に作れるかというとそれは無理です。しかしながら、Webアプリケーションを作るニーズは至る所にあり、その多くの場面では比較的シンプルな動作で十分なこともよくあります。Excelに記録するような業務で、一方でその情報を共有したいようなもの、たとえば小さな会社での資産管理などでは、Excelワークシートを添付メールで社員全員に送る事よりも、Webアプリケーションにする方が、即時に情報が見えるなど数多くのメリットがありますし、貸出や予約といった仕組みも有効に機能するでしょう。そうしたアプリケーションを、少ない労力で開発し、可能であれば現場の利用者がメンテナンスできるような状況を、INTER-Mediatorというフレームワークで作り出そうとしています。\n                INTER-Mediatorで作るべきもの\n                \n                    すでにデータベースが作られた状態であるとして、Webアプリケーション開発を解説します。その状態から、HTMLファイルなどのページ素材を作ると同時に、「定義ファイル」と呼ばれるデータベースの利用に関するルールなどを列挙したファイルを作り、Webアプリケーションとしての動作を行うようにします。\n                \n                    この定義ファイルの定義をベースにして、データベースからデータを取り出してページの中に埋め込むような動作をするのが、フレームワークとしてのINTER-Mediatorの重要な仕組みの1つです。HTMLで記述したタグ要素の中の特定の属性に、データベースのどのテーブルのどのフィールドと連動させるかといった記述を追加します。INTER-Mediator向けの記述を追加したHTMLファイルを「ページファイル」と呼びます。\n                \n                    これら、定義ファイルとページファイルを作る事で、INTER-Mediatorは機能します。いずれのファイルもサーバーに保存しますが、多くの部分がJavaScriptで稼働しており、データベースから取り出したデータをページに埋め込む作業はクライアントのWebブラウザ内で行います。\n                \n                    \n                \n            \n            \n                4. INTER-Mediatorでのバインディングの概念\n                定義ファイルのコンテキスト\n                \n                    INTER-Mediatorで開発するときの定義ファイルに記述する内容のうち、きわめて重要なものが「コンテキスト」と呼ばれるものです。コンテキストは単純な状況では、テーブルそのものという場合があります。つまり、テーブルのデータそのものを1つのコンテキストとして考えるということです。\n                \n                    しかしながら、多くの状況では、テーブル全体を使う事はありません。その一部分のデータを注目して利用します。具体的には一部分というのは、「一部分のレコード」になります。もし、住所録に対して、都道府県が京都府のデータだけを検索するような条件を与えてレコードを取り出すと、単なる誰かの住所録が「京都府に住む人の住所録」というように、意味が付加されます。技術的には検索条件を与えることですが、得られた結果は元のテーブルから何らかの意味が増えていることが一般的です。その意味で「コンテキスト」と名付けています。\n                \n                    コンテキストには、データを取り出すテーブル、データを書き込むテーブルを指定できます。取り出しと書き込みが別々の場合があるのだろうか？と思われるかもしれませんが、リレーショナル型データベースでは、データの扱いを柔軟にするため、「検索した状態」をテーブルのように見せるような機能（「ビュー」と呼ばれます）があり、ビューの結果を取り出して、その結果を元のテーブルに書き戻すような場合もあるので、別々の指定になっています。\n                \n                    このデータベースのテーブルの指定に加えて、コンテキストを区別するための名前が必要です。また、コンテキストには、その他のたくさんの指定が可能になっており、アプリケーションの動作に必要な機能の定義をコンテキスト内で行えるようになっています。\n                定義ファイルの記述方法\n                \n                    最初に、定義ファイルには、コンテキストがあり、名前、データを取り出すテーブル、書き込むテーブルを指定する必要があることを説明しました。それら3つが異なる名前、つまり順に「myaddress」「activeaddr」「address」にしたいとします。このとき、「何の値なのか」を示すキーワードと、指定する値つまり実際にデータベースに設定されているなどしてその時々で変わる値とを、それぞれコロンで区切って左右に並べて記述することにします。何の値に相当するかを示す決められたキーワードは、順番にname、view、tableとなっており、指定するのは次のような情報となります。\n                \n                    name: myaddress\nview: activeaddr\ntable: address\n                \n                \n                    なお、この記述を実際のファイルとしてどのように表現されているのかについては、以後の作業を「定義ファイルエディタ」を使う上ではほとんど関係ありません。name:と書かれた右のテキストフィールドに「myaddress」とキータイプするだけです。なお、上記の1つのかたまり（コンテキスト）内では、キーワードの順序は問いません。\n                \n                    ここで、viewとtableの記述を省略すると、nameをそのままテーブル名として使います。従って、データベースにaddressという名前のテーブルがある場合、単にそれを使うもっとも簡単な記述は、次のようなものです。もちろん、レコードの取り出しや変更では、いずれも、addressテーブルに対して行われます。なお、nameは省略できません。\n                \n                    name: address\n                \n                タグ要素に書き込む記述についての説明\n                \n                    データベースにあるaddressテーブルが住所録であるとして、電話番号がtelフィールドにあるとします。このとき、定義ファイルに次のようなコンテキストの定義があるとします。これまでに説明した事に加えて、keyというキーワードの値が増えています。\n                \n                    name: jusho\nview: address\ntable: address\nkey: id\n                \n                keyは、addressテーブルの主キーフィルドの名前を指定するものです。レコードを参照するだけだと主キーが何かは不要ですが、ページ上で書き直したデータを元のレコードに書き戻すのに必要になります。\n                ページファイル、つまり、HTMLファイル側で、addressテーブルのtelフィールドを表示し、かつ編集できるようにテキストフィールドを用意するとします。このとき、HTMLのタグを次のように記述します。\n                \n                    &lt;input type=\"text\" data-im=\"jusho@tel\" /&gt;\n                \n                この記述を行い、この後に説明する「ページファイルに必要な記述 」の記述を行うだけで、テキストフィールドに、addressテーブルのtelフィールドの値が表示されます。また、そこで電話番号を書き直して、tabキーを押すなどしてフォーカスを離すと、書き直した電話番号が元のフィールドに書き戻されます。\n                \n                通常のHTMLでの違いは、data-im属性が加わっていることです。この記述を「ターゲット指定」と呼びます。ターゲット指定では、コンテキストのname属性、区切り記号の@、そしてフィールド名を指定します。また、ターゲット指定が含まれている要素を「リンクノード」と呼びます。\n                もし、電話番号だけをどこかに表示したいのなら、次のような記述をHTMLの中に含めれば良いでしょう。\n                \n                    &lt;span data-im=\"jusho@tel\"&gt;&lt;/span&gt;\n                \n                たとえば、telフィールドの値が「0123-456-9876」ならば、「&lt;span data-im=\"jusho@tel\"&gt; 0123-456-9876 &lt;/span&gt;」というタグ要素があるとの同じ結果になります。つまりフィールドの値をそのタグの値として差し込みます。\n                以上のように、inputなどのフォーム要素をページ内に使いますが、INTER-Mediatorではテキストフィールドに見えている文字列を修正すると、テキストフィールドから離れるときに自動的にデータをデータベースに書き戻します。そのこともあり、FORMタグによる囲みやサブミット後の処理の記述などは一切必要はありません。FORMタグを記述してもかまいませんが、INTER-MediatorはFORMタグ要素に対して何の処理も行いません。\n                ページファイルに必要な記述\n                \n                    ページファイルでは、タグにどのフィールドと連動するのかということをターゲット指定として記述する事に加えて、INTER-Mediatorの本体をページに取り込むための設定が必要です。JavaScriptで記述した別ファイルの読み込みの設定と同様で、参照先がサーバー上の定義ファイルであるということです。ここまでの例で、定義ファイルがdef.phpというファイル名で保存されていて、ページファイルと同一のディレクトリにあるとします。このとき、ページファイルのヘッダ部に\n                \n                    &lt;script type=\"text/javascript\" src=\"def.php\"&gt;&lt;/script&gt;\n                \n                と記述します。INTER-Mediator自体の取り込みに加えて、定義ファイルに記述した内容も同時に取り込みます。\n            \n            \n                5. 繰り返しの実装\n                エンクロージャー、リピーターの概念\n                あるレコードのあるフィールドと、タグ要素に組み込まれるデータが連動できることはすでに説明しました。一方、データベースの出力が複数のレコードを持つのが一般的です。複数のレコードがある場合に、HTMLの要素とどのように合成するかという点をここでまとめておきます。\n                まず、1つの例を示します。あるデータベースaddressで、pnameフィールドに名前、telフィールドに電話番号が入力されているとします。このデータベースからデータを取り出すために、次のようなコンテキストが定義されているとします。\n                \n                    name: address\nkey: id\n                \n                通常、レコードが100個あれば、100個分のレコードがデータベースから取り出されます。このとき、ページファイルに次のようなHTMLでの記述があるとします。\n                \n                    &lt;table&gt;\n    &lt;thead&gt;\n        &lt;tr&gt;&lt;th&gt;名前&lt;/th&gt;&lt;th&gt;電話番号&lt;/th&gt;&lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n        &lt;tr&gt;\n            &lt;td data-im=\"address@pname\"&gt;&lt;/td&gt;\n            &lt;td data-im=\"address@tel\"&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n                \n                INTER-Mediatorは、ターゲット指定のある要素から「address」というnameの値を持つコンテキストよりデータの取り出しが必要であると解釈します。すなわちaddressテーブルからデータを取り出しますが、その結果は複数のレコードとなるわけです。\n                \n                    INTER-Mediatorは上記のようなHTMLがある場合、TRタグ要素を一度TBODYタグ要素から取り除きます、別途保存しておきます。そして、取り出したレコードセットを順番にチェックして、正しいレコードがあれば、別途保存してあるTRタグ要素を複製してその中のリンクノードに現在のレコードのフィールドに対する値を組み込み、TBODYの子要素として追加します。つまり、レコードの数だけTRタグを複製して、それぞれのTRタグに順番にレコードの中身を埋め込みます。こうして、「ここからここまでを繰り返す」というような指定をしなくても、上記のTABLE要素の場合、1つのTR要素がレコード数だけ追加され、レコード数分の行を持つテーブルが作られます。\n                \n                    上記のTBODYのような繰り返しの親要素にあたる要素を「エンクロージャー」、そしてレコードの数だけ繰り返す要素を「リピーター」と呼びます。リピーターはここでの例のようにTRタグ要素1つといった単一のタグ要素かもしれませんが、エンクロージャー内に含まれるすべての要素をリピーターとして認識するので、リピーターは多数の要素であるという場合もあり得ます。\n                エンクロージャーとリピーターとして利用できる要素として、次の表のようなものがあります。\n                \n                    \n                        \n                            用途\n                            エンクロージャー\n                            リピーター\n                        \n                        \n                            表\n                            TBODY\n                            TR（複数のTRも可能）\n                        \n                        \n                            ポップアップ\n                            SELECT\n                            OPITON\n                        \n                        \n                            リスティング\n                            UL, OL\n                            LI\n                        \n                        \n                            汎用\n                            data-im-control属性がenclosure\n                            data-im-control属性がrepeater\n                        \n                    \n                \n                \n                    INTER-Mediatorはページファイルを解析して、ターゲットノードが見つかると、そこから上位の要素をたどり、リピーターを見つけ、その上位の要素をエンクロージャーとして特定します。そして、再度、リピーター内部についてすべてのターゲットノードを探すということを行います。\n                \n                    なお、1つのエンクロージャーにおいては、1つのコンテキストを利用してデータベースからデータを取り出すため、ターゲットノードでは単一の名前が指定されていることが必要です。前の例だと、2つのTDタグ要素のターゲット指定の最初のキーワードはaddressで同一でしたが、このように同一のコンテキスト名でターゲット指定がなされているという状態が必要です。\n                \n                    TABLEタグによる表以外では、DIVやSPANなどでもエンクロージャーとリピーターのセットを構築できるので、繰り返しの形式は表にはこだわりません。しかしながら、データベースの出力を表示する場合はTABLEを使う事が多いでしょう。TBODY要素は記述しない場合、通常はブラウザが存在するものとして扱うので明示されていない場合もあります。ただし、見出しとデータを分離するには、THEADとTBODYで分離する記述を行う必要があります。\n            \n            \n                6. コンテキストでの検索とソート\n                \n                    データベースのテーブルから単にすべてのレコードを取り出すということをすることもありますが、一般には、条件を与えて絞り込みを行い、指定したフィールドのデータをもとにしたソートを行った結果を受け取ります。データベースの処理では、レコードを取り出すときだけでなく、特定のレコードの内容を修正するような場合には、検索条件を与えます。\n                INTER-Mediatorでは、コンテキストに検索条件やソート条件を記載することで、そのコンテキストを利用したデータベースからのデータ取り出しやデータ編集で、その検索条件が必ず常に付与される仕組みを持っています。\n                \n                    \n                        \n                            id\n                            pname\n                            tel\n                            device\n                        \n                        \n                            1\n                            山田一郎\n                            0123-456-9876\n                            iphone\n                        \n                        \n                            2\n                            風下寒子\n                            0123-456-9876\n                            iphone\n                        \n                        \n                            3\n                            屋根裏夫\n                            0123-456-9876\n                            ipad\n                        \n                    \n                \n                たとえば、以下のコンテキストだと、「pname = ‘風下寒子’」という検索条件がデータベースへのデータを取り出すときに追加され、pnameフィールドがこの名前の人のレコードだけが取り出されます。ここでは、queryに対する値は複数の項目を持つので、そのような場合には、[ ] で囲って記述することにします。\n                \n                \n                    name: address\nkey: id\nquery: [field: pname, operator: =, value: 風下寒子]\n                \n                operatorは利用するデータベースエンジンに依存します。MySQLでは文字列の前方一致は次のようなコンテキストで記述します。つまり「tel like ’03%’」という検索条件になり、telフィールドが03で始まるレコードが検索条件に一致します。MySQLのlike演算子では%がワイルドカードになり演算子の右側の文字列では複数個のワイルドカードを含めることができます。\n                ソート条件についても、fieldとdirectionの2つのキーワードによる指定が必要で、fieldはもちろん基準になるフィールド名を指定します。directionは昇順か降順かを指定しますが、キーワードはデータベースエンジンに依存します。MySQLでは、ASCないしはDESCを指定します。\n                \n                \n                    name: address\nkey: id\nquery: [field: tel, operator: like, value: 03%]\nsort: [field: pname, direction: asc]\n                \n                queryやsortは複数の指定が可能です。複数の指定がある場合は、[ ]で囲まれたセットをカンマで区切って記述することにします。以下のコンテキストの場合、telフィールドが03で始まり、deviceフィールドの内容がiphoneであるレコードが抽出されます。2つの条件が両方満たすAND条件として解釈されます。そしてレコードをpnameフィールドを基準に昇順でソートした結果を返します。\n                \n                \n                    name: address\nkey: id\nquery: [field: tel, operator: like, value: 03%],[field: device, operator: =, value: iphone]\nsort: [field: pname, direction: asc]\n                \n                MySQLでは、次のような演算子（operatorに記述できる記号）が代表的なものです。\n                =：等しい、!=：等しくない、&lt;：より小さい、&gt;：より大きい、&lt;=：以下、&gt;=：以上、like：マッチング\n            \n            \n                7. マスター参照の組み込み\n                \n                    マスターにあるデータを使う\n                    \n                        住所録では名前や電話番号を記録するだけでなく、「友人」「会社関連」などといった分類を入力したいと思うかもしれません。通常、そうした情報を文字列で入れていても役に立つ場合がありますが、常に一定の情報を入れないと意味がない場合もあります。たとえば、売り上げを記録するのに同じ商品であれば、すべて同じ商品名である必要があります。そうしないと、商品ごとの集計が簡単にはできなくなります。\n                    \n                        このように、常に決まっているデータを入力したい場合、その決まったデータを単独のテーブルに入力し、そのテーブルの情報を参照する情報を入力をします。こうした決まったデータを入れておくテーブルを「マスターテーブル」と一般には呼ばれています。\n                    住所録をaddressテーブルで作っているとして、分類を記録するconnectionテーブルがデータベースに用意されているとします。connectionテーブルにはidとcnameの2つのフィールドがあり、idフィールドが主キーフィールドです。\n                    \n                        \n                            \n                                id\n                                cname\n                            \n                            \n                                1\n                                親戚\n                            \n                            \n                                2\n                                友人\n                            \n                            \n                                3\n                                会社関係\n                            \n                        \n                    \n                    \n                        ここで、住所録の各レコードで、種類を記録したいとします。そのような場合、以下のように、addressテーブルに、con_idフィールドを設けて、connectionテーブルのidフィールドと対応づけます。つまり、風下寒子さんは、「会社関係」の友人であることが記録されたわけです。\n                    \n                        \n                            \n                                id\n                                pname\n                                tel\n                                con_id\n                            \n                            \n                                1\n                                山田一郎\n                                0123-456-9876\n                                1\n                            \n                            \n                                2\n                                風下寒子\n                                0123-456-9876\n                                3\n                            \n                            \n                                3\n                                屋根裏夫\n                                0123-456-9876\n                                1\n                            \n                        \n                    \n                    \n                        このような、数字で突き合わせて2つのテーブルの値を合成するのは、一見すると分かりにくく、余分なことをしていると思うかもしれません。con_idというフィールドに直接「会社関係」と入力した方が手っ取り早いと思うかもしれません。\n                    \n                        まず、この方法の利点を説明しましょう。住所録にたくさんのデータが蓄積された後、「親戚」ではなくて「親類」に変更したいとします。上記のようなデータ構造を取っていれば、connectionフィールドのid=1のレコードのcnameフィールドを変更するだけですべて変更が完了します。addressフィールドのいくつかのレコードのあるフィールドに「親戚」という文字列が入っていたら、それらを検索して特定して、不定数のレコードに対する更新を正しく行う必要があり、より多くの作業が発生することになります。このように、表現や情報そのものを別途管理するということで、確実に同一の値を記録管理できるということです。\n                    このような複数のテーブルでデータを管理して突き合わせなどを行う仕組みを持っているのがリレーショナルデータベースの特徴です。マスターテーブルを使う手法はその代表的な利用方法です。\n                    \n                        この住所録が、顧客管理的なものだったとします。そして、各顧客に対するコンタクト（訪問、問い合わせ、電話連絡といったもの）を記録したい場合、addressテーブル以外に、コンタクトをいつ誰がどのような方法で行い、どうだったのかを記録するcontactテーブルを作ります。このとき、1人の顧客に対しては複数のコンタクト結果が発生することが想定されます。一方、1回のコンタクトは1顧客だけという運用をします。このような場合、顧客とコンタクトの関係は「1対多」と呼ばれます。contactテーブルには、対応するaddressテーブルのid値を入れるフィールド（たとえば、address_idフィールド）を用意して、そこに対応するレコードのidフィールドの値を入力します。逆に、addressフィールドには対応するcontactテーブルの主キー値を記録するフィールドは設けません。2つ以上かもしれないという数が決まらない問題もさることながら、contactテーブルのaddress_idフィールドの値から組み合わせは特定できることから、それ以上の対応付けのための情報は不要になります。\n                    コピーをする場合もある\n                    \n                        なお、ここで、マスターテーブルの値をコピーした方がいいような場合もあります。売り上げをテーブルで記録する場合、商品を別のテーブルで管理するといった「商品マスター」を確保する方法は典型的な設計手法です。商品マスター側では、商品名や単価を記録します。売り上げのテーブルでは、商品テーブルの特定のレコードを参照する情報をだけを記録するということができます。商品名や単価は売り上げのテーブルでは記録しないというわけです。\n                    \n                        しかしながら、そうなると、あるときある商品の単価が変わった場合、不都合が起きるかもしれません。商品マスターの単価を書き換えれば、過去の売り上げデータはすべて新しい単価で売ったという結果になります。このように、変更があるような情報については、商品マスターの単価の値を、売り上げのテーブルにもつどつどコピーして記録するのが一般的です。それでも「現在の単価」を記録する意味で商品テーブルを別に用意するのは、間違いなく入力できるなどのメリットをもたらすものです。\n                    ポップアップメニューで入力\n                    \n                        addressテーブルのcon_idフィールドに入力するためにポップアップメニューを利用したいとします。このとき、addressテーブルのためのコンテキストだけではなく、connectionテーブルのためのコンテキストも必要になります。定義ファイルでは複数のコンテキストを定義でき、それらは並べて記述します。以下のように、区切りに線を入れて、2つのコンテキストが定義されていることを示します。なお、connectionコンテキストについてはkeyの指定はあってもなくてもかまいません。connectionテーブルにクライアントから更新をすることがないので、ここでの利用では必要ないのです。\n                    \n                        name: address\nkey: id\n    -\nname: con\nview: connection\n                    \n                    そして、ページファイルでは次のようなターゲット指定を持った要素が加わります。\n                    \n                        &lt;table&gt;\n    &lt;thead&gt;\n        &lt;tr&gt;&lt;th&gt;名前&lt;/th&gt;&lt;th&gt;電話番号&lt;/th&gt;&lt;th&gt;分類&lt;/th&gt;&lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n        &lt;tr&gt;\n            &lt;td data-im=\"address@pname\"&gt;&lt;/td&gt;\n            &lt;td data-im=\"address@tel\"&gt;&lt;/td&gt;\n            &lt;td&gt;\n                &lt;select data-im=\"address@con_id\"&gt;\n                    &lt;option data-im=\"con@id@value con@cname\"&gt;&lt;/option&gt;\n                &lt;/select&gt;\n            &lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n                    \n                    \n                        これで、テーブルには3つ目の「分類」列が追加され、各レコードに対してポップアップメニューが表示されます。すでにconn_idフィールドにデータがあれば、それに対応する選択肢が選択されているはずです。また、ポップアップメニューを選択すれば、その選択結果で、conn_idの値が更新されます。\n                    \n                        ページファイルのターゲット指定をあらためて解説をします。まず、addressコンテキストの展開中に、conという別のコンテキストが登場しています。ここでは、まず、TBODY/TRによるエンクロージャー/リピーターが識別されますが、そのとき、さらに内部にSELECT/OPTIONによるエンクロージャー/リピーターが存在しています。リピーター内部のエンクロージャー以下の要素は、データベースの結果を合成するときには特に何もしません。その代わり、データベースから得られたデータを合成した後、さらに内部のエンクロージャー/リピーターの展開に入ります。ここでは、名前と電話番号をTD要素の値に組み込んだ後、conというnameを持つコンテキストを見て、connectionテーブルへアクセスをしてレコードを受け取り、レコードの数だけOPTIONタグを複製して、OPTIONタグ要素内部にconnectionテーブルから得られた結果を合成します。\n                    \n                        OPTIONタグ要素では、2つの新しい内容が含まれています。まず、ターゲット指定は、半角スペースによって区切る事で1つの要素に複数の指定を入れる事ができ、それぞれの合成が行われます。ターゲット指定では@で区切られた3つ目の項目があります。3つ目の項目は、データベースのデータを設定する先を指定します。\n                    \n                        この場合だと、「con@id@value」という指定により、conコンテキスト（connectionテーブル）のidフィールドの値を、OPTIONタグ要素のvalue属性の値にします。続いて「con@cname」により、conコンテキストのcnameフィールドの値がOPTIONタグの値として設定され、その文字列が選択肢として見るようになります。結果として、ポップアップメニュー部分はデータベースから得れた結果を合成すると、次のようなHTMLと同じ結果になります。\n                    \n                        &lt;select data-im=\"address@conn_id\"&gt;\n    &lt;option data-im=\"con@id@value con@cname\" value=\"1\"&gt;親類&lt;/option&gt;\n    &lt;option data-im=\"con@id@value con@cname\" value=\"2\" &gt;友人&lt;/option&gt;\n    &lt;option data-im=\"con@id@value con@cname\" value=\"3\" &gt;会社関係&lt;/option&gt;\n&lt;/select&gt;\n                    \n                    ターゲット指定において、@で区切った場合の3つ目の項目には、以下のような仕組みを利用できます。\n                    \n                        省略：要素の値。ただし、フォーム要素は種類に応じて適切な属性へ設定\n                        属性名：その属性の値\n                        style.スタイル名：指定したスタイルの値（スタイル名はJavaScriptでのプロパティ名）\n                        innerHTML：要素のinnerHTML属性にフィールドの値を設定\n                        （$を最初に付加）：現在の値の中の$をフィールドの値に置き換える\n                        （#を最初に付加）：現在の値の後にフィールドの値を追加する\n                    \n            \n            \n                8. 関連レコードの展開\n                1対多の展開とリレーションシップ\n                \n                    前のページの例では、2つのテーブルを利用しましたが、2つ目のconnectionテーブルは、あるフィールドに入力する値を記録するものであり、その中の1つが選択されれるという関係でしたが、さらに複雑な関係がある場合について説明をします。\n                まず、住所録のaddressテーブルとして以下のようなものがあったとします。ここでの例は、con_idは利用しません。\n                \n                    \n                        \n                            id\n                            pname\n                            tel\n                            con_id\n                        \n                        \n                            1\n                            山田一郎\n                            0123-456-9876\n                            1\n                        \n                        \n                            2\n                            風下寒子\n                            0123-456-9876\n                            3\n                        \n                        \n                            3\n                            屋根裏夫\n                            0123-456-9876\n                            1\n                        \n                    \n                \n                \n                    addressテーブルが顧客を記録していて、営業部員が顧客に対するコンタクト内容を以下のようなcontactテーブルで記録していたとします。idフィールドが主キーになりますが、address_idには該当する顧客に関して、addressテーブルのその顧客のレコードのidフィールド値を記録します。たとえば、以下のid=2のテーブルは、address_idの値が「3」なので、「屋根裏夫」さんに関して、9月14日にメールで展示会の案内をしたということを記録していることになります。\n                \n                    \n                        \n                            id\n                            address_id\n                            dt\n                            memo\n                        \n                        \n                            1\n                            2\n                            2013-9-12 10:00\n                            電話したが不在\n                        \n                        \n                            2\n                            3\n                            2013-9-14 14:00\n                            メールで展示会の案内をした\n                        \n                        \n                            3\n                            2\n                            2013-9-15 17:00\n                            電話で展示会の案内をした\n                        \n                        \n                            4\n                            1\n                            2013-9-16 13:00\n                            訪問して商品説明した\n                        \n                    \n                \n                この2つのテーブルで、顧客ごとに、コンタクト情報を一覧するようなページを作るとします。定義ファイルは以下のような記述となります。ここで新たにrelationというキーワードが登場します。\n                \n                    name: address\nkey: id\n    -\nname: contact\nkey: id\nrelation: [foreign-key: address_id, join-field: id, operator: =]\n                \n                このrelationキーの値は、複数の項目からなっており、[ ] でその1つの項目を記述することにします。\n                ここで、 addressという名前のコンテキストがページファイル内で利用されるようなターゲット指定があるとします。このとき、addressテーブルからデータを取り出すのですが、階層関係にある上位のリピータに関して、join-fieldで指定したidフィールドの値を取り出し、addressテーブルでforeign-keyに指定したaddress_idの値とイコールなレコードだけに絞り込みます。この動作は実際のデータを考えた方が分かりやすいので、この後で動作を見ながらが説明します。\n                \n                ページファイルについては、次のようなものを作成したとします。前のページの例との違いは、外側のテーブルの3列目に、さらにテーブルがあって、そこにcontactテーブルの内容が展開されるという点です。\n                \n                    &lt;table&gt;\n    &lt;thead&gt;\n        &lt;tr&gt;&lt;th&gt;名前&lt;/th&gt;&lt;th&gt;電話番号&lt;/th&gt;&lt;th&gt;分類&lt;/th&gt;&lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n        &lt;tr&gt;\n            &lt;td data-im=\"address@pname\"&gt;&lt;/td&gt;\n            &lt;td data-im=\"address@tel\"&gt;&lt;/td&gt;\n            &lt;td&gt;\n                &lt;table&gt;\n                    &lt;thead&gt;\n                        &lt;tr&gt;&lt;th&gt;日時&lt;/th&gt;&lt;th&gt;連絡内容&lt;/th&gt;&lt;/tr&gt;\n                    &lt;/thead&gt;\n                    &lt;tbody&gt;\n                        &lt;tr&gt;\n                            &lt;td data-im=\"contact@dt\"&gt;&lt;/td&gt;\n                            &lt;td data-im=\"contact@memo\"&gt;&lt;/td&gt;\n                        &lt;/tr&gt;\n                    &lt;/tbody&gt;\n                &lt;/table&gt;\n            &lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n                \n                実際にテーブルが作られる様子を、手順を追って説明します。ページ上に存在するテーブル部分を示します。\n                \n                    BODY要素から探索されて、外側のTBODYとTRが、addressコンテキストを使用するエンクロージャー/リピーターとして識別されます。\n                        \n                            \n                                \n                                    名前\n                                    電話番号\n                                    連絡内容\n                                \n                                \n                                    &nbsp;\n                                    &nbsp;\n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n                                                \n                                                    &nbsp;\n                                                    &nbsp;\n                                                \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                    \n                    エンクロージャーからリピーターを取り除き、外側のテーブルのボディ部分がない状態になります。\n                        \n                            \n                                \n                                    名前\n                                    電話番号\n                                    連絡内容\n                                \n                            \n                        \n                    \n                    addressテーブルにアクセスして、データを取り出します。\n                    最初のid=1のレコードがあるので、リピーターを複製し、エンクロージャーの子要素に追加します。\n                        \n                            \n                                \n                                    名前\n                                    電話番号\n                                    連絡内容\n                                \n                                \n                                    &nbsp;\n                                    &nbsp;\n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n                                                \n                                                    &nbsp;\n                                                    &nbsp;\n                                                \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                    \n                    \n                        レコードの中にあるデータが、フィールドに応じてリピーター内部のaddressコンテキストのターゲット指定のある要素内に合成されます。つまり、最初のtdに「山田一郎」、次のtdに「0123-456-9876」という文字列データが埋め込まれます。\n                        \n                            \n                                \n                                    名前\n                                    電話番号\n                                    連絡内容\n                                \n                                \n                                    山田一郎\n                                    0123-456-9876\n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n                                                \n                                                    &nbsp;\n                                                    &nbsp;\n                                                \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                    \n                    リピータ内部を探索すると、新たに3列目にさらにエンクロージャー/リピーターとなるTBODY/TRタグ要素が見つかります。ここでもリピーターを一度削除してエンクロージャの中身を空にします。\n                        \n                            \n                                \n                                    名前\n                                    電話番号\n                                    連絡内容\n                                \n                                \n                                    山田一郎\n                                    0123-456-9876\n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                    \n                    現在作業中のリピーターはcontactコンテキストを使用する事が中身を解析する事で判別できます。\n                    \n                        contactコンテキストの定義に従ってcontactテーブルにアクセスします。このとき、relationキーの指定があるので、まず、その中のjoin-fieldを参照し「id」というフィールド名となっています。そこで、上位のリピーターについて、手順5で得ているようにidの値は「1」です。この値をforeign-keyに指定したaddress_idに持つレコードだけを取り出します。operatorは=なので、つまりは、contactテーブルを取り出すときに、address_id=1のレコードだけを取り出します。\n                    \n                    contactテーブルから、id=4の1つのレコードだけが取り出されました。\n                    手順5で切り出したリピーターを複製し、contactテーブルから得られたデータを合成します。ここではテーブルのTBODYに1行分のTRタグ要素が追加され、1列目には「2013-9-16 13:00」、2列目には「訪問して商品説明した」という文字が追加されます。\n                        \n                            \n                                \n                                    名前\n                                    電話番号\n                                    連絡内容\n                                \n                                \n                                    山田一郎\n                                    0123-456-9876\n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n                                                \n                                                    2013-9-16 13:00\n                                                    訪問して商品説明した\n                                                \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                    \n                    内側のコンテキストによる展開はこれでいったん終了します。また、外側のリピーターに関してはエンクロージャー/リピータのセットは1つだけですので、これで最初のレコードに関する合成が終わります。\n                    外側のコンテキストは、2つ目のレコード、つまりid=2のレコードの展開を行います。\n                    外側のリピーターの複製を作り、エンクロージャーの子要素に追加します。そして、id=2のレコードのフィールドをリンクノードに合成します。\n                        \n                            \n                                \n                                    名前\n                                    電話番号\n                                    連絡内容\n                                \n                                \n                                    山田一郎\n                                    0123-456-9876\n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n                                                \n                                                    2013-9-16 13:00\n                                                    訪問して商品説明した\n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    風下寒子\n                                    0123-456-9876\n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n                                                \n                                                    &nbsp;\n                                                    &nbsp;\n                                                \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                    \n                    内部を探索すると手順6と同様に、エンクロージャーとリピーターのセットが存在します。リピーターを取り除きます。\n                        \n                            \n                                \n                                    名前\n                                    電話番号\n                                    連絡内容\n                                \n                                \n                                    山田一郎\n                                    0123-456-9876\n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n                                                \n                                                    2013-9-16 13:00\n                                                    訪問して商品説明した\n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    風下寒子\n                                    0123-456-9876\n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                    \n                    手順8と同様に、ここではid=2のaddressテーブルのレコードが上位のリピーター内に展開されているので、contactテーブルに対してaddress_id=2となるレコードに絞り込んでレコードを取り出します。\n                    id=1とid=3の2つのレコードが取り出されました。\n                    contactテーブルのid=1のレコードについて、手順14で取り出したリピーターを複製してレコード内のデータを合成して、エンクロージャーに追加します。\n                        \n                            \n                                \n                                    名前\n                                    電話番号\n                                    連絡内容\n                                \n                                \n                                    山田一郎\n                                    0123-456-9876\n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n                                                \n                                                    2013-9-16 13:00\n                                                    訪問して商品説明した\n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    風下寒子\n                                    0123-456-9876\n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n                                                \n                                                    2013-9-12 10:00\n                                                    電話したが不在\n                                                \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                    \n                    contactテーブルのid=3のレコードについて、手順14で取り出したリピーターを複製してレコード内のデータを合成して、エンクロージャーに追加します。\n                        \n                            \n                                \n                                    名前\n                                    電話番号\n                                    連絡内容\n                                \n                                \n                                    山田一郎\n                                    0123-456-9876\n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n                                                \n                                                    2013-9-16 13:00\n                                                    訪問して商品説明した\n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    風下寒子\n                                    0123-456-9876\n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n                                                \n                                                    2013-9-12 10:00\n                                                    電話したが不在\n                                                \n                                                \n                                                    2013-9-15 17:00\n                                                    電話で展示会の案内をした\n                                                \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                    \n                    内側のコンテキストの展開はこれで終了し、addressテーブルのid=2に対する展開は終了しました。\n                    addressテーブルのid=3に対する展開も同様に行います。\n                        \n                            \n                                \n                                    名前\n                                    電話番号\n                                    連絡内容\n                                \n                                \n                                    山田一郎\n                                    0123-456-9876\n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n                                                \n                                                    2013-9-16 13:00\n                                                    訪問して商品説明した\n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    風下寒子\n                                    0123-456-9876\n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n                                                \n                                                    2013-9-12 10:00\n                                                    電話したが不在\n                                                \n                                                \n                                                    2013-9-15 17:00\n                                                    電話で展示会の案内をした\n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    屋根裏夫\n                                    0123-456-9876\n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n                                                \n                                                    2013-9-14 14:00\n                                                    メールで展示会の案内をした\n                                                \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                    \n                    \n                \n            \n            \n                9. テキスト以外のUI要素の利用\n                チェックボックスの利用\n                \n                    フィールドのデータと連動させたいチェックボックスを作る場合は、チェックボックスのタグ記述を通常通り行い、class属性にターゲット指定を記述します。そして、value属性についても空文字列でない何らかのデータを記述します。\n                \n                    &lt;input type=\"checkbox\" value=\"1\"\n    data-im=\"address@check\"/&gt;\n                \n                上記のタグ要素の場合、addressコンテキストのテーブルのcheckフィールドと連動します。チェックが入るとcheckフィールドの値はvalue属性の値の「1」になり、checkをはずすと \"\"（長さ0の文字列ないしはNULL） となります。なお、数値フィールドの場合はチェックを外すと0になるので、value属性は0以外の値を指定します。ページ合成時には、checkフィールドの値とvalueの値が同じならチェックが入るようになります。\n                \n                ラジオボタンの利用\n                \n                    ラジオボタンもチェックボックスと同様に、inputタグ要素で記述します。本来はname属性が同一のものを1つのセットとして扱いますが、INTER-Mediatorでは、同一リピーター内の同一ターゲット指定の物を1つのセットにするので、name属性は不要です。展開時に自動的に属性は設定されます。\n                \n                    &lt;input type=\"radio\" value=\"1\" data-im=\"address@kind\"/&gt;\n&lt;input type=\"radio\" value=\"2\" data-im=\"address@kind\"/&gt;\n&lt;input type=\"radio\" value=\"3\" data-im=\"address@kind\"/&gt;\n                \n                選択したボタンのvalue属性が記録され、また、ページ表示時にはフィールドの値に対応したラジオボタンが選択されています。\n                画像の利用\n                \n                    INTER-Mediatorでは画像を扱ういくつかの方法に対応していますが、代表的な手法は、Webサイト上で公開されている画像ファイルへのアクセスです。HTMLページと同一ディレクトリにある「img」ディレクトリに画像ファイルがあるとします。そして、あるテーブルで「picfile」フィールドがあり、画像ファイルのファイル名があるとします。このとき、以下のimgタグ要素はターゲット指定となって、picfileフィールドの値をsrc属性に合成します。\n                \n                    &lt;img src=\"img/\" data-im=\"product@picfile@#src\" /&gt;\n                \n                \n                    テーブルはproductコンテキストから取り出されるとします。picfileの値が「goods1.jpg」だとすると、コンテキスト指定の3つ目の記述「#src」により、src属性にフィールドの値を追加します。結果として、src属性の値は「img/goods1.jpg」となり、クライアントが指定されたURIをダウンロードして画像として表示するようになります。\n                ページネーションとナビゲーション\n                \n                    検索して得られたレコードが複数ある場合、レコードの数だけリピーターが複製されますが、何百もあると時間もかかりますし、参照する方も大変です。Webページではそのような場合、一定数のレコードごとにページ表示を切り替える「ページネーション」の仕組みを組み込みます。\n                INTER-Mediatorでは、1つのページにつき、1つのコンテキストに対してページネーションが可能です。addressテーブルが数百件あるような場合、たとえばコンテキストとして次のように記述します。\n                \n                    name: address\nkey: id\nrecords: 10\npaging: true\n                \n                まず、recordsキーの値により、レコードは10件ずつ表示されます。いちばん最初は最初の10件のみとなります。ページネーションの表示には、pagingキーワードに対する値をtrueにします。そして、ページネーションコントロールを表示するには、たとえばTABLEタグのすぐ上に、次のようなタグを記述します。\n                \n                    &lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n                \n                \n                    すると、このDIVタグ要素の中に、前後のレコードに移動したり、最初や最後のレコードに移動するコントロールを作成できます。例えば、次のようなものが表示されます。ページネーションはHTMLで記述されたものですが、スタイル設定が自動的に機能するので、テーマで指定したスタイルが最初から設定されています。なお、ボタンの背景や文字などにはすべてスタイルを設定できるようにclass属性が適用されているので、ページごとに表示形態は任意にカスタマイズできます。\n                \n                    \n                \n                レコード作成や削除のボタン配置\n                \n                    データベースのテーブルでは、新規作成や削除はレコード単位で行います。フィールドの作成や削除もできますが、データの入力や検索を行うときにはフィールド単位の処理は行いません。新規レコードを作ると、定義してあるフィールドは、中身が空かもしれませんがすべて用意され、フィールドの中にあるデータを修正することができるようになります。空のフィールドに何か数値を入れるのも、「修正」とみなします。\n                INTER-Mediatorでは、コンテキストで、 repeat-controlというキーに対する値を設定することで、そのコンテキストの検索結果をHTMLに埋め込む段階で、レコード削除や作成のボタンを作ります。このキーの値は、「insert」「insert-top」「delete」「confirm-insert」「confirm-insert-top」「confirm-delete」のいずれかで、insertは新規レコード、deleteは削除に関する機能です。confirmが付くと削除や作成前にダイアログボックスで確認します。新規レコードボタンで-topが付くものは、繰り返されるリピーターの前にボタンを作成し、-topが付いていない場合には繰り返されるリピータの後にボタンを作成します。なお、削除ボタンは各リピーターの末尾に追加され、レコードの数だけ表示されます。ただし、ページネーションが機能している場合、新規レコード作成のボタンは、ページネーションの要素の中に、テキストのボタンとして追加されます。\n                \n                    たとえば、以下のようなコンテキストだと、addressテーブルの内容を表示するとき、一連のリピーターの最後に「挿入」ボタンが作られます。また、レコードごとに「削除」ボタンが作られますが、削除ボタンをクリックすると削除していいかどうかをたずねるダイアログボックスが表示されます。\n                \n                    name: address\nkey: id\nrepeat-control: confirm-delete insert\n                \n            \n            \n                10. INTER-Mediatorのその他の機能\n                \n                    このページでは、INTER-Mediatorの機能について、ここまでのところでは触れていないことについてまとめておきます。プログラミングなどの技術的な知識背景がないと理解がしづらい事柄が中心です。それでも、ここまでの解説を読んで、他にどんな機能があるのかを興味を持っていただけたのであれば、INTER-Mediatorの全体像を知るのに有用な情報になると思われます。\n                \n                    以下、（設定）は定義ファイルの設定やページファイル内のターゲット指定で実現できるものです。（JavaScript）はJavaScript言語でプログラムを記述する場合に利用できる機能です。（PHP）はサーバーサイドでのPHP言語によるプログラムの追加が必要な機能です。\n                \n                    日付・時刻を書式を整えた形式で表示したり、数値フィールドのデータをカンマ付きの数字や通貨記号付きで表示したりする機能があります。また、修正結果を元のフィールドに書き戻すこともできます。（設定）\n                    \n                        データベースから得れた文字列について文字実体参照にして、HTMLとしてテキストエリア等で編集できるようにする仕組みがあります。加えてタグ要素のinnerHTMLにデータベースから得られたデータを代入することもできます。（設定）\n                    \n                    \n                        新規レコードを作成するための専用のページを構築でき、その中のポップアップメニュー等はマスターテーブルから構築する事ができます。ボタンを押た後にボタンを消してメッセージを表示し、別のページに自動的に移動します。（設定）\n                    \n                    検索条件では、ANDやOR条件の設定も可能です。（設定）\n                    対応ブラウザを定義し、ブラウザを判別して対応外の場合にはメッセージを表示して処理を行わないようにする仕組みがあります。（設定＋JavaScript）\n                    JavaScriptのライブラリをパーツとして使用する機能があり、ファイルのアップロードやHTMLエディなど一部はプログラミングなしに使えます。（設定+JavaScript）\n                    \n                        認証や認可の仕組みを利用できます。認証では、ユーザテーブルをデータベースに確保し、グループの設定もできます。またデータベースエンジンのネイティブユーザでの認証もできます。認可ではコンテキスト単位の処理の可否や認証の要求ができます。さらにレコード単位に特定のユーザやグループに対してのみ利用できるような設定もできます。認証のためのログインパネルをカスタマイズすることもできます。画像などのメディアファイルに対する認可の仕組みの適用もできます。（設定）\n                    \n                    データベースへの要求や応答結果を変換する仕組みを追加できます。この仕組みにより検索条件をデータに合わせて変更したり、得られた検索結果を集計して戻すなどの処理ができます。（PHP）\n                    クライアント側のプログラムでは、エンクロージャーやリピーターの合成時に割り込み処理を入れる事などが可能です。（JavaScript）\n                    クライアント側のプログラミングをサポートするために、データベースのデータを織り込んだ結果から、特定のフィールドと関連付けられている要素を参照するためのid属性を得るメソッドなどが用意されています。\n                    修正時に値のチェックができ、内容に応じてメッセージを出すことができます。（設定）\n                    楽観的ロックにより、同一フィールドを同時に2人で変更した場合、後から保存しようとしたユーザの側に警告メッセージを表示し、更新をキャンセルすることもできます。\n                \n            \n        "
    },
    {
        "id": 10,
        "parent": "/ja/for-novices/",
        "path": "/ja/for-novices/handson.html",
        "title": "ハンズオンセッション手順書",
        "breadcrumb": "ハンズオンセッション手順書",
        "body": "\n            \n                はじめに\n                この手順書は、2015年4月11日の勉強会で利用するために当初作成したものを、その後に改定してきたものです。個人で進めることもできますが、この手順書を利用して、2〜3時間のハンズオンをオフラインで開催することもできます。INTER-Mediatorをまったく触ったことがないが、どんな感じなのかを知りたい方、あるいはINTER-Mediator普及のために、活用していただけます。\n                2016/8/6用PDF資料なお、本ページの内容はこのPDFの内容から、細かな点では変わっています。\n                「ビデオで始めるINTER-Mediator」のページでは、ハンズオンを実際に行なったところをビデオでご覧いただけます。\n            \n            \n                使用までの準備\n                INTER-Mediatorがインストールされた動くサーバのVirtual Machineを参照して、INTER-Mediatorが稼働するVMを用意してください。ダウンロードしてすぐにINTER-Mediatorを稼働することができます。\n                MySQLをご利用される方は、上記のVMで準備完了です。FileMaker Serverを利用される方は、ホストOS側に、FileMaker Serverをインストールしてください。加えて、こちらのリンク先のデータベースファイルTestDBをダウンロードして、FileMaker Serverで公開をしておいてください。\n                なお、以下の手順では、VirtualBoxのホストオンリーアダプターが、既定の設定（ホストのIPアドレスが192.168.56.1、ゲストが192.168.56.101）になっていることを前提として記述しています。\n                VMの準備が整ったら、VMを起動します。そして、ホストOS側では、ブラウザを起動して、http://192.168.56.101/ に接続します。\n                http://192.168.56.101/ で表示されるページ＝「VMのホーム」と呼びます。\n            \n            \n                セッション1：入力専用ページ\n                1-1：質問の入力ページを作る\n                定義ファイルの作成（ファイル名：def01.php）\n                \n                    VMのホームで、「def01.phpを編集」をクリックします。\n                    Queryの下にある行の右側の「削除」をクリックして、Queryの下に行がないようにします。\n                    Sortingの下にある行の右側の「削除」をクリックして、Sortingの下に行がないようにします。\n                    nameに「survey」、keyに「id」と入力します。Contextsセクションには、この2つのテキストフィールドだけがあるようにします。\n                    Optionsセクションには何も入力されていない状態のままでかまいません。\n                    Database Settingsセクションには以下のように入力します。\n                    \n                        \n                            [FileMaker Server] Database Settingsセクションのdb-classには「FileMaker_FX」、databaseには「TestDB」、userには「web」、passwordには「password」、serverには「192.168.56.1」、portには「80」、protocolには「http」、datatypeには「FMPro12」と入力します。\n                            [MySQL] Database Settingsセクションのdb-classには「PDO」、dsnには\n                                「mysql:host=localhost;dbname=test_db;charset=utf8mb4」\n                                userには「web」、passwordには「password」と入力します。\n                        \n                    \n                    Debugのところは「false」と入力します。\n                \n                ページファイルの作成（ファイル名：page01.html）\n                \n                    VMのホームで、「page01.htmlを編集」をクリックします。\n                    ページファイルエディターが起動します。以下のソースコードを入力します。\n                \n                \n                    &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt;\n    &lt;title&gt;INTER-Mediator Demo&lt;/title&gt;\n    &lt;script type=\"text/javascript\" src=\"def01.php\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;table&gt;\n    &lt;tbody data-im-control=\"post\"&gt;\n    &lt;tr&gt;&lt;th&gt;名前&lt;/th&gt;&lt;td&gt;&lt;input type=\"text\" data-im=\"survey@Q5\"/&gt;&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;th&gt;質問1&lt;/th&gt;&lt;td&gt;&lt;input type=\"text\" data-im=\"survey@Q1\"/&gt;&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;td&gt;&lt;button data-im-control=\"post\"&gt;Answer&lt;/button&gt;&lt;/td&gt;&lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n                \n                コード内で変更や追加をする箇所は、下線で示します。\n                ページを表示してフォーム入力を行う\n                \n                    VMのホームで、「page01.htmlを表示する」をクリックします。\n                    フォームが表示されます。適当に入力して、Answerボタンをクリックします。\n                    \n                        \n                            [FileMaker Server] TestDBのsurveyレイアウトを確認して、データが入力されていることを確認します。\n                            [MySQL] test_dbのsurveyテーブルを確認して、データが入力されていることを確認します。以下、いちばん手軽な手順を示します。\n                                \n                                    VirtualBoxのVMのウインドウ（真っ黒のウインドウ）をクリックして、ユーザ名「developer」、パスワード「im4135dev」でログインをします。\n                                    プロンプトで、「mysql -u web -p test_db -e 'select * from survey;'」と入力します。\n                                    パスワードをたずねられるので「password」と入力します。\n                                \n                            \n                        \n                    \n                    適当にいくつかフォーム入力して、レコードが増えることを確認します。\n                \n                1-2：入力フォームらしい感じにする\n                \n                    VMのホームで、「def01.phpを編集」をクリックするか、すでに開いている定義ファイルエディターのページを参照します。\n                    右上のShow Allボタンをクリックします。\n                    post-reconstructに「true」と入力します。\n                    post-dismiss-messageに「送信しました」と入力します。\n                    post-move-urに「http://inter-mediator.org/」と入力します。URLは別のものでもかまいません。その後、入力を確定するために、Tabキーを押しておきます。\n                    VMのホームで、「page01.htmlを表示する」をクリックするか、すでに開いているpage01.htmlを更新します。\n                    フォームが表示されます。適当に入力して、Answerボタンをクリックします。今度は、Answerボタンが消え、数秒後に別のページにジャンプしました。\n                    \n                        \n                            [FileMaker Server] TestDBのsurveyレイアウトを確認して、データが入力されていることを確認します。\n                            [MySQL] test_dbのsurveyテーブルを確認して、データが入力されていることを確認します。（手順はすでに説明しました。）\n                        \n                    \n                \n                1-3：テキストフィールド以外のフォーム要素\n                チェックボックス\n                page01.htmlの中のTABLEタグの内容を以下の様に変更して、フォームを表示すると、チェックボックスが追加されます。フォームに入力して、Answerボタンを押してみて、データベースにどのように入力されるのかを確認しましょう。\n                \n                    &lt;table&gt;\n    &lt;tbody data-im-control=\"post\"&gt;\n    &lt;tr&gt;&lt;th&gt;名前&lt;/th&gt;&lt;td&gt;&lt;input type=\"text\" data-im=\"survey@Q5\"/&gt;&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;th&gt;質問1&lt;/th&gt;&lt;td&gt;&lt;input type=\"text\" data-im=\"survey@Q1\"/&gt;&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;th&gt;質問2&lt;/th&gt;\n    &lt;td&gt;&lt;input type=\"checkbox\" value=\"1\" data-im=\"survey@Q2\"/&gt;はい&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;td&gt;&lt;button data-im-control=\"post\"&gt;Answer&lt;/button&gt;&lt;/td&gt;&lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n                \n                ラジオボタン\n                page01.htmlの中のTABLEタグの内容を以下の様に変更して、フォームを表示すると、ラジオボタンが追加されます。フォームに入力して、Answerボタンを押してみて、データベースにどのように入力されるのかを確認しましょう。\n                \n                    &lt;table&gt;\n    &lt;tbody data-im-control=\"post\"&gt;\n    &lt;tr&gt;&lt;th&gt;名前&lt;/th&gt;&lt;td&gt;&lt;input type=\"text\" data-im=\"survey@Q5\"/&gt;&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;th&gt;質問1&lt;/th&gt;&lt;td&gt;&lt;input type=\"text\" data-im=\"survey@Q1\"/&gt;&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;th&gt;質問2&lt;/th&gt;\n    &lt;td&gt;&lt;input type=\"checkbox\" value=\"1\" data-im=\"survey@Q2\"/&gt;はい&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;&lt;th&gt;質問3&lt;/th&gt;\n    &lt;td&gt;&lt;div&gt;\n    &lt;input type=\"radio\" value=\"11\" name=\"q3\" data-im=\"survey@Q3\"/&gt;東\n    &lt;input type=\"radio\" value=\"12\" name=\"q3\" data-im=\"survey@Q3\"/&gt;西\n    &lt;input type=\"radio\" value=\"13\" name=\"q3\" data-im=\"survey@Q3\"/&gt;南\n    &lt;input type=\"radio\" value=\"14\" name=\"q3\" data-im=\"survey@Q3\"/&gt;北\n    &lt;/div&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;td&gt;&lt;button data-im-control=\"post\"&gt;Answer&lt;/button&gt;&lt;/td&gt;&lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n                \n                チェックボックスセット\n                page01.htmlの中のTABLEタグの内容を以下の様に変更して、フォームを表示すると、チェックボックスセットが追加されます。フォームに入力して、Answerボタンを押してみて、データベースにどのように入力されるのかを確認しましょう。\n                \n                    &lt;table&gt;\n    &lt;tbody data-im-control=\"post\"&gt;\n    &lt;tr&gt;&lt;th&gt;名前&lt;/th&gt;&lt;td&gt;&lt;input type=\"text\" data-im=\"survey@Q5\"/&gt;&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;th&gt;質問1&lt;/th&gt;&lt;td&gt;&lt;input type=\"text\" data-im=\"survey@Q1\"/&gt;&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;th&gt;質問2&lt;/th&gt;\n    &lt;td&gt;&lt;input type=\"checkbox\" value=\"1\" data-im=\"survey@Q2\"/&gt;はい&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;&lt;th&gt;質問3&lt;/th&gt;\n    &lt;td&gt;&lt;div&gt;\n    &lt;input type=\"radio\" value=\"11\" name=\"q3\" data-im=\"survey@Q3\"/&gt;東\n    &lt;input type=\"radio\" value=\"12\" name=\"q3\" data-im=\"survey@Q3\"/&gt;西\n    &lt;input type=\"radio\" value=\"13\" name=\"q3\" data-im=\"survey@Q3\"/&gt;南\n    &lt;input type=\"radio\" value=\"14\" name=\"q3\" data-im=\"survey@Q3\"/&gt;北\n    &lt;/div&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;&lt;th&gt;質問4&lt;/th&gt;\n    &lt;td&gt;&lt;div data-im-group=\"survey@Q4\"&gt;\n    &lt;input type=\"checkbox\" value=\"21\"/&gt;Docomo\n    &lt;input type=\"checkbox\" value=\"22\"/&gt;au\n    &lt;input type=\"checkbox\" value=\"23\"/&gt;Softbank\n    &lt;input type=\"checkbox\" value=\"24\"/&gt;Willcom\n    &lt;/div&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;td&gt;&lt;button data-im-control=\"post\"&gt;Answer&lt;/button&gt;&lt;/td&gt;&lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n                \n                1-4：回答を一覧表示する\n                定義ファイルの作成（ファイル名：def02.php）\n                \n                    VMのホームで、「def02.phpを編集」をクリックします。\n                    Queryの下にある行の右側の「削除」をクリックして、Queryの下に行がないようにします。\n                    Sortingの下にある行の右側の「削除」をクリックして、Sortingの下に行がないようにします。\n                    nameに「survey」、keyに「id」と入力します。recordsには「10」、maxrecordsにも「10」と入力します。\n                    Optionsセクションには何も入力されていない状態のままでかまいません。\n                    \n                        \n                            [FileMaker Server] Database Settingsセクションのdb-classには「FileMaker_FX」、databaseには「TestDB」、userには「web」、passwordには「password」、serverには「192.168.56.1」、portには「80」、protocolには「http」、datatypeには「FMPro12」と入力します。\n                            [MySQL] Database Settingsセクションのdb-classには「PDO」、dsnには「mysql:host=localhost;dbname=test_db;charset=utf8mb4」、userには「web」、passwordには「password」と入力します。\n                        \n                    \n                    Debugのところは「false」と入力します。\n                \n                ページファイルの作成（ファイル名：page02.html）\n                \n                    VMのホームで、「page02.htmlを編集」をクリックします。\n                    ページファイルエディターが起動します。以下のソースコードを入力します。\n                \n                \n                    &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt;\n    &lt;title&gt;INTER-Mediator Demo&lt;/title&gt;\n    &lt;script type=\"text/javascript\" src=\"def02.php\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;table&gt;\n    &lt;thead&gt;\n        &lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;名前&lt;/th&gt;\n        &lt;th&gt;質問1&lt;/th&gt;&lt;th&gt;質問2&lt;/th&gt;\n        &lt;th&gt;質問3&lt;/th&gt;&lt;th&gt;質問4&lt;/th&gt;&lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n        &lt;tr&gt;\n            &lt;td data-im=\"survey@id\"&gt;&lt;/td&gt;\n            &lt;td data-im=\"survey@Q5\"&gt;&lt;/td&gt;\n            &lt;td data-im=\"survey@Q1\"&gt;&lt;/td&gt;\n            &lt;td data-im=\"survey@Q2\"&gt;&lt;/td&gt;\n            &lt;td data-im=\"survey@Q3\"&gt;&lt;/td&gt;\n            &lt;td data-im=\"survey@Q4\"&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n                \n                \n                    VMのホームで、「page02.htmlを表示する」をクリックします。回答一覧が表示されました。\n                \n                ページネーション、追加、削除\n                \n                    VMのホームで、「def02.phpを編集」をクリックするか、すでに開いている定義ファイルエディターのページを参照します。\n                    pagingに「true」、repeat-controlに「confirm-insert confirm-delete」と入力します。\n                    VMのホームで、「page02.htmlを編集」をクリックするか、あるいはすでに開いているページファイルエディターを表示して。以下のソースコードを入力します。「名前」の列はテキストフィールドにします。\n                \n                \n                    &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt;\n    &lt;title&gt;INTER-Mediator Demo&lt;/title&gt;\n    &lt;script type=\"text/javascript\" src=\"def02.php\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n&lt;table&gt;\n    &lt;thead&gt;\n        &lt;tr&gt;&lt;th&gt;名前&lt;/th&gt;&lt;th&gt;質問1&lt;/th&gt;&lt;th&gt;質問2&lt;/th&gt;\n        &lt;th&gt;質問3&lt;/th&gt;&lt;th&gt;質問4&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n        &lt;tr&gt;\n            &lt;td&gt;&lt;input type=\"text\" data-im=\"survey@Q5\"/&gt;&lt;/td&gt;\n            &lt;td data-im=\"survey@Q1\"&gt;&lt;/td&gt;\n            &lt;td data-im=\"survey@Q2\"&gt;&lt;/td&gt;\n            &lt;td data-im=\"survey@Q3\"&gt;&lt;/td&gt;\n            &lt;td data-im=\"survey@Q4\"&gt;&lt;/td&gt;\n            &lt;td&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n                \n                \n                    VMのホームで、「page02.htmlを表示する」をクリックするか、すでに表示されているのならそのページを更新します。回答一覧が表示されました。\n                    レコードの追加削除ができることを確認します。\n                    名前の文字列を修正して、Tabキーを押し、データベースの内容を確認して、データの修正ができることを確認します。\n                    10レコード以上に増やしてみて、10レコードずつ表示されることを確認します。\n                \n            \n            \n                セッション2：住所録\n                定義ファイルの作成（ファイル名：def03.php）\n                \n                    VMのホームで、「def03.phpを編集」をクリックします。\n                    Queryの下にある行の右側の「削除」をクリックして、Queryの下に行がないようにします。\n                    Sortingの下にある行の右側の「削除」をクリックして、Sortingの下に行がないようにします。\n                    \n                        \n                            [FileMaker Server] nameに「person_list」、tableを「person_layout」、viewに「person_layout」、keyに「-recid」、pagingに「true」、repeat-controlに「insert」、recordsに「10」、maxrecordsに「100」と入力します。他は空白にします。\n                            [MySQL] nameに「person_list」、keyに「id」、viewに「person」、pagingに「true」、repeat-controlに「insert」、recordsに「10」、maxrecordsに「100」と入力します。他は空白にします。\n                        \n                    \n                    Optionsセクションには何も入力されていない状態のままでかまいません。\n                    \n                        \n                            [FileMaker Server] Database Settingsセクションのdb-classには「FileMaker_FX」、databaseには「TestDB」、userには「web」、passwordには「password」、serverには「192.168.56.1」、portには「80」、protocolには「http」、datatypeには「FMPro12」と入力します。\n                            [MySQL] Database Settingsセクションのdb-classには「PDO」、dsnには「mysql:host=localhost;dbname=test_db;charset=utf8mb4」、userには「web」、passwordには「password」と入力します。\n                        \n                    \n                    Debugのところは「false」と入力します。\n                \n                ページファイルの作成（ファイル名：page03.html）\n                \n                    VMのホームで、「page03.htmlを編集」をクリックします。\n                    ページファイルエディターが起動します。以下のソースコードを入力します。\n                \n                \n                    &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt;\n    &lt;title&gt;INTER-Mediator Demo&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"INTER-Mediator/Samples/sample.css\"&gt;\n    &lt;script type=\"text/javascript\" src=\"def03.php\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n&lt;table&gt;\n    &lt;tbody&gt;\n        &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td data-im=\"person_list@name\"&gt;&lt;/td&gt;&lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n                \n                \n                    VMのホームで、「page03.htmlを表示する」をクリックします。適当な一覧が見えています。\n                \n                コンテキストの追加（ファイル名：def03.php）\n                \n                    VMのホームで、「def03.phpを編集」をクリックするか、すでに開いている定義ファイルエディターのページを参照します。\n                    Contextsの下の「追加」ボタンをクリックします。nameが「= new context =」の項目が増えました。\n                    \n                        \n                            [FileMaker Server] 増えた項目で、nameを「person_detail」、tableを「person_layout」、viewを「person_layout」、keyを「-recid」、recordsを「1」、maxrecordsを「100」として、あとは空白のままにします。\n                            [MySQL] 増えた項目で、nameを「person_detail」、viewを「person」、keyを「id」、recordsを「1」、maxrecordsを「100」として、あとは空白のままにします。\n                        \n                    \n                \n                ページファイルの作成（ファイル名：page03.html）\n                \n                    VMのホームで、「page03.htmlを編集」をクリックするか、すでに開いている場合にはそのページを更新します。\n                    ページファイルエディターで、以下のソースコードを変更します。\n                \n                \n                    &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt;\n    &lt;title&gt;INTER-Mediator Demo&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"INTER-Mediator/Samples/sample.css\"&gt;\n    &lt;script type=\"text/javascript\" src=\"def03.php\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n  &lt;table&gt;\n    &lt;tbody&gt;\n        &lt;tr&gt;&lt;td data-im=\"person_list@name\"&gt;&lt;/td&gt;&lt;/tr&gt;\n    &lt;/tbody&gt;\n  &lt;/table&gt;\n  &lt;table&gt;\n    &lt;tbody&gt;\n      &lt;tr&gt;\n        &lt;th&gt;名前&lt;/th&gt;\n        &lt;td&gt;&lt;input type=\"text\" data-im=\"person_detail@name\"/&gt;&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;th&gt;住所&lt;/th&gt;\n        &lt;td&gt;&lt;input type=\"text\" data-im=\"person_detail@address\"/&gt;&lt;/td&gt;&lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;th&gt;メール&lt;/th&gt;\n        &lt;td&gt;&lt;input type=\"text\" data-im=\"person_detail@mail\"/&gt;&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;th&gt;地域&lt;/th&gt;\n        &lt;td&gt;&lt;input type=\"text\" data-im=\"person_detail@location\"/&gt;&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;th&gt;分類&lt;/th&gt;\n        &lt;td&gt;&lt;input type=\"text\" data-im=\"person_detail@category\"/&gt;&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;th&gt;メモ&lt;/th&gt;\n        &lt;td&gt;&lt;textarea data-im=\"person_detail@memo\"&gt;&lt;/textarea&gt;&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/tbody&gt;\n  &lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n                \n                \n                    VMのホームで、「page03.htmlを表示する」をクリックするか、すでに表示されているページを更新します。一覧の下に、なんとなく、編集フォームのようなものが登場しました。\n                \n                iPadのようなナビゲーションを実現する\n                \n                    page03.htmlの編集ページを表示します。以下の様に、2つあるTABLEタグにstyle属性を設定します。また、最後のTABLE閉じタグのあとに、BRタグを追加します。\n                \n                \n                    &lt;table style=\"float: left\"&gt;\n    :\n&lt;/table&gt;\n&lt;table style=\"float: left; margin-left: 12px\"&gt;\n    :\n&lt;/table&gt;\n&lt;br clear=\"all\"/&gt;\n                \n                \n                    VMのホームで、「page03.htmlを表示する」をクリックするか、すでに表示されているページを更新します。一覧と詳細が左右に分離しました。\n                    VMのホームで、「def03.phpを編集」をクリックするか、すでに開いている定義ファイルエディターのページを参照します。\n                    nameが「person_list」の方のnavi-controlを「master-hide」にします。\n                    nameが「person_detail」の方のnavi-controlを「detail」にします。\n                    VMのホームで、「page03.htmlを表示する」をクリックするか、すでに表示されているページを更新します。一覧と詳細を行き来するユーザインタフェースができあがりました。\n                    nameが「person_list」の方のnavi-controlを「master」にします。\n                    VMのホームで、「page03.htmlを表示する」をクリックするか、すでに表示されているページを更新します。スプリットビュー的な表示になりました。\n                \n            \n            \n                セッション3：伝票とリレーションシップ\n                \n                    def04.phpに、以下の様に3つのコンテキストの定義を行います。このセッションから、細かな手順の説明は行いません。定義ファイルエディターで開き、Show Allボタンを押して、全項目を表示しながら作業をしましょう。\n                \n                \n                    name: invoice\nkey: id\npaging: true\nrepeat-control: confirm-insert confirm-delete\nrecords: 1\nmaxrecords: 100\nCalculation:\n    [field: total_calc, expression: format(sum(item@amount_calc), 0)]\n\nname: item\nkey: id\nrepeat-control: confirm-insert confirm-delete\nrecords: 100\nmaxrecords: 100\nRelationship:\n    [foreign-key: invoice_id, join-field: id, operator: =] 　// ←[MySQL]の場合\n    [foreign-key: invoice_id, join-field: id, operator: eq]  // ←[FileMaker Server]の場合\nCalculation:\n    [field: amount_calc, expression: format(qty * product@unitprice, 0)]\n\nname: product\nkey: id\nrecords: 100\nmaxrecords: 100\nRelationship:\n    [foreign-key: id, join-field: product_id, operator: =] 　// ←[MySQL]の場合\n    [foreign-key: id, join-field: product_id, operator: eq]  // ←[FileMaker Server]の場合\n                \n                \n                    Database Settingsの設定は、前のセッションと同一にします。\n                    \n                        [FileMaker Server] Database Settingsセクションのdb-classには「FileMaker_FX」、databaseには「TestDB」、userには「web」、passwordには「password」、serverには「192.168.56.1」、portには「80」、protocolには「http」、datatypeには「FMPro12」と入力します。\n                        [MySQL] Database Settingsセクションのdb-classには「PDO」、dsnには「mysql:host=localhost;dbname=test_db;charset=utf8mb4」、userには「web」、passwordには「password」と入力します。\n                    \n                \n                \n                    page04.htmlは以下の様に入力します。\n                \n                \n                    &lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"INTER-Mediator/Samples/sample.css\"&gt;\n     &lt;script type=\"text/javascript\" src=\"def04.php\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n&lt;table border=\"1\"&gt;\n    &lt;tbody&gt;\n    &lt;tr&gt;\n        &lt;th&gt;id&lt;/th&gt;\n        &lt;td&gt;&lt;input type=\"text\" data-im=\"invoice@id\"&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;th&gt;issued&lt;/th&gt;\n        &lt;td&gt;&lt;input type=\"text\" data-im=\"invoice@issued\" value=\"\"&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;th&gt;title&lt;/th&gt;\n        &lt;td&gt;&lt;input type=\"text\" data-im=\"invoice@title\" value=\"\"&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td colspan=\"2\"&gt;\n            &lt;table border=\"1\"&gt;\n                &lt;thead&gt;\n                &lt;tr&gt;\n                    &lt;th&gt;product&lt;/th&gt;\n                    &lt;th&gt;qty&lt;/th&gt;\n                    &lt;th&gt;unitprice (master)&lt;/th&gt;\n                    &lt;th&gt;amount&lt;/th&gt;\n                    &lt;th&gt;&lt;/th&gt;\n                &lt;/tr&gt;\n                &lt;/thead&gt;\n                &lt;tbody&gt;\n                &lt;tr&gt;\n                    &lt;td&gt;\n                       &lt;input type=\"text\" data-im=\"item@product_id\" size=\"2\"&gt;\n                       &lt;span class=\"inline\" data-im-control=\"enclosure\"&gt;\n                            &lt;span class=\"inline\" data-im-control=\"repeater\" data-im=\"product@name\"&gt;&lt;/span&gt;\n                        &lt;/span&gt;\n                    &lt;/td&gt;\n                    &lt;td&gt;&lt;input class=\"price\" type=\"text\" data-im=\"item@qty\" size=\"5\"&gt;&lt;/td&gt;\n                    &lt;td&gt;\n                        &lt;span class=\"inline\" data-im-control=\"enclosure\"&gt;\n                            &lt;span class=\"inline\" data-im-control=\"repeater\" data-im=\"product@unitprice\"&gt;&lt;/span&gt;\n                        &lt;/span&gt;\n                      &lt;/td&gt;\n                   &lt;td align=\"right\"&gt;\n                      &lt;span align=\"right\" data-im=\"item@amount_calc\"&gt;&lt;/span&gt;\n                  &lt;/td&gt;\n                  &lt;td&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;/tbody&gt;\n            &lt;/table&gt;\n        &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;th&gt;Total:&lt;/th&gt;\n        &lt;td data-im=\"invoice@total_calc\"&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n                \n                \n                    実行します。以下の点を確認しましょう。\n                \n                \n                    伝票での明細行に相当する仕組みがリレーションシップにより取り出されています。\n                    明細の各行では、商品マスターからの商品名と単価の取り出しが行われています。\n                    productの数字を書き換えると、商品マスターの違うレコードが取り出されます。\n                    qtyを変更すると、単価x個数が計算され直され、トータルも再計算されています。\n                \n            \n            \n                セッション4：資産管理\n                アプリケーションの動作の確認\n                このセッションでは、INTER-Mediatorのサンプルにあるアプリケーションの動作を調べて、アプリケーションの改変を行います。\n                \n                    VMのホーム（http://192.168.56.101/ で表示されるページ）開きます。\n                    「リンク」の中に、「サンプルプログラム」というリンク文字列があります。こちらをクリックします。\n                    「INTER-Mediator Samples」というページが表示されます。この中の、Asset Management Sampleという行を特定します。\n                    MySQLあるいはFileMakerの列の「Improved」というリンクをクリックします。\n                    どこかの会社の機材の管理データベースのようです。まず、このファイルのファイル名をメモしてください。\n                        ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿\n                    「詳細」ボタンを押してみます。詳細部分が表示されました。\n                    その機材の貸出履歴が出てきました。\n                    「追加」ボタンをクリックすると、現在の日付が「貸出日」に設定されて新たなレコードが追加されます。担当者やメモは適当に設定します。\n                    「本日返却」ボタンをクリックすると、返却日が空欄の貸出履歴に、本日の日付が設定されました。\n                    いくつかのレコードをみて、動作を確認します。\n                \n                ページファイルの確認\n                \n                    このアプリケーションのソースプログラムは、こちらで参照できます。\n                    ページファイルを開いて内容を参照してください。\n                    定義ファイルのファイル名はなんでしょうか？\n                        ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿\n                    それぞれのTABLEタグによるテーブル内で使用されているコンテキスト名はなんでしょうか？\n                        1つ目のTABLEタグ内＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿\n                        2つ目のTABLEタグ内＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿\n                        上記の内部のTABLEタグ内＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿\n                        上記の内部のSELECTタグ内＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿\n                    JavaScriptのプログラムにあるsetBackDate関数は、「本日返却」ボタンをクリックしたときに呼び出されます。以下の情報手掛かりにプログラムを解析しましょう。\n                        \n                            generateToday関数は現在の日付を文字列で返す関数です。\n                            IMLibContextPool.getContextFromName(contextName)は、引数に指定したコンテキスト名のコンテキストオブジェクトを返します。コンテキストオブジェクトは、そのコンテキストに対する取得したデータを保持している「モデル」相当のオブジェクトです。\n                            コンテキストオブジェクトに対して、setDataAtLastRecord(field, value)を実行すると、コンテキストの最後のレコードのfieldの値をvalueにして、それを参照している箇所を更新するとともに、データベースへの書き込みを行います。\n                        \n                    \n                \n                定義ファイルの確認\n                \n                    こちらのページに戻ります。\n                    前に調べた名称の定義ファイルを開きます。定義ファイルエディターで開く場合には、こちらをクリックします。\n                    navi-controlキーが設定されているコンテキストを確認します。実際の動作と比べて、このキーによる設定がどのように適用されているのかを検討してみましょう。\n                    使用されていないコンテキストがあります。どれでしょうか？\n                        ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿\n                    使用されていないコンテキストがあります。どれでしょうか？\n                        ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿\n                    nameキーがrentのコンテキストの定義を参照してください。ここにあるrelationの設定により上位のコンテキストの値を元に検索を行っています。\n                    rentコンテキストのcalculationキーにある計算式を参照してください。計算式の意味を考えてください。そして、そのfieldキーの値を書き出しておきます。\n                        fieldキー：＿＿＿＿＿＿＿＿式の意味：＿＿＿＿＿＿＿＿＿＿\n                    assetdetailコンテキストのcalculationキーにある計算式を参照してください。計算式の意味を考えてください。そして、そのfieldキーの値を書き出しておきます。\n                        fieldキー：＿＿＿＿＿＿＿＿式の意味：＿＿＿＿＿＿＿＿＿＿\n                \n                アプリケーションの改造\n                \n                    ページファイルエディターで開きます。こちらより開くことができます。\n                    これまでに調べたことを応用して、次の設定を行ってください。\n                        \n                            貸出履歴のそれぞれの項目に、貸出期間の日数を表示してください。\n                            それぞれの機材に対する平均貸出日数を表示してください。\n                        \n                    \n                \n            \n            \n                セッション5：BBS\n                \n                    def05.phpに2つのコンテキストの定義を行います。定義ファイルエディターで開き、Show Allボタンを押して、全項目を表示しながら作業をしましょう。\n                \n                \n                    name: message\ntable: chat\nview: chat\nkey: id\npost-reconstruct: true\npost-dismiss-message: 投稿しました\nquery: \n    [field: groupname , operator: IS NULL, value:]　// ←[MySQL]の場合\n    [field: groupname, operator: eq, value: =]  // ←[FileMaker Server]の場合\nsorting:\n    [field: postdt, direction: desc]\nvalidation: \n    [field: user, rule: value !=  '', message: 入力してください。]\n    [field: message, rule: value !=  '', message: 入力してください。]\n\nname:comment\ntable: chat\nview: chat\nkey: id\npost-reconstruct: true\npost-dismiss-message: 投稿しました\nrelationship:\n    [foreign-key: groupname, join-field: id, operator: =]　// ←[MySQL]の場合\n    [foreign-key: groupname, join-field: id, operator: eq]　// ←[FileMaker Server]の場合\nsorting:\n    [field: postdt, direction: desc]\nvalidation: \n    [field: user, rule: value !=  '', message: 入力してください。]\n    [field: message, rule: value !=  '', message: 入力してください。]\n                \n                \n                    定義ファイルエディターで開いたdef05.phpに対して、以下のようにOptionsの設定を行います。\n                \n                \n                    formatters:\n   [field: chat@message, converter-class: HTMLString]\n                \n                \n                    Database Settingsの設定は、前のセッションと同一にします。\n                        \n                            [FileMaker Server] Database Settingsセクションのdb-classには「FileMaker_FX」、databaseには「TestDB」、userには「web」、passwordには「password」、serverには「192.168.56.1」、portには「80」、protocolには「http」、datatypeには「FMPro12」と入力します。\n                            [MySQL] Database Settingsセクションのdb-classには「PDO」、dsnには「mysql:host=localhost;dbname=test_db;charset=utf8mb4」、userには「web」、passwordには「password」と入力します。\n                        \n                    \n                \n                \n                    page05.htmlは以下の様に入力します。\n                \n                \n                    &lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;script type=\"text/javascript\" src=\"def05.php\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        INTERMediatorOnPage.processingBeforePostOnlyContext = function (node) {\n            var dtString, nodeIds, idValue, aNode;\n            dtString = INTERMediatorLib.dateTimeStringISO();　// ←[MySQL]の場合\n            dtString = INTERMediatorLib.dateTimeStringFileMaker(); // ←[FileMaker Server]の場合\n            nodeIds = INTERMediatorOnPage.getNodeIdsHavingTargetFromNode(node, \"message@postdt\");\n            if (nodeIds.length &gt; 0) {\n                document.getElementById(nodeIds[0]).value = dtString;\n            }\n            nodeIds = INTERMediatorOnPage.getNodeIdsHavingTargetFromNode(node, \"comment@message\");\n            if (nodeIds.length &gt; 0) {\n                aNode = node.parentNode.parentNode.parentNode;\n                nodeIds = INTERMediatorOnPage.getNodeIdsHavingTargetFromNode(aNode, \"message@id\");\n                idValue = document.getElementById(nodeIds[0]).value;\n                INTERMediator.additionalFieldValueOnNewRecord = {};\n                INTERMediator.additionalFieldValueOnNewRecord['comment'] = [\n                    {field: \"groupname\", value: idValue},\n                    {field: \"postdt\", value: dtString}\n                ];\n            }\n            return true;\n        };\n    &lt;/script&gt;\n    &lt;style&gt;\n        TEXTAREA {\n            width: 400px;\n            height: 60px;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;table&gt;\n    &lt;tbody data-im-control=\"post\"&gt;\n    &lt;tr&gt;\n        &lt;th&gt;From:&lt;/th&gt;\n        &lt;td&gt;\n            &lt;input type=\"text\" data-im=\"message@user\"&gt;\n            &lt;input type=\"hidden\" data-im=\"message@postdt\"&gt;\n        &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td colspan=\"2\"&gt;\n            &lt;textarea data-im=\"message@message\"&gt;&lt;/textarea&gt;\n            &lt;button data-im-control=\"post\"&gt;投稿&lt;/button&gt;\n        &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;table&gt;\n    &lt;tbody&gt;\n    &lt;tr&gt;\n        &lt;td colspan=\"4\"&gt;\n            &lt;hr/&gt;\n        &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;th&gt;From:&lt;/th&gt;\n        &lt;td data-im=\"message@user\"&gt;&lt;/td&gt;\n        &lt;th&gt;Date:&lt;/th&gt;\n        &lt;td data-im=\"message@postdt\"&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td colspan=\"4\" data-im=\"message@message@innerHTML\"\n            style=\"background-color: #CCCCCC\"&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td style=\"width: 50px; background-color: gray\"&gt;Comment&lt;/td&gt;\n        &lt;td colspan=\"3\"&gt;\n            &lt;input type=\"hidden\" data-im=\"message@id\"/&gt;\n            &lt;table&gt;\n                &lt;tbody data-im-control=\"post\"&gt;\n                &lt;tr&gt;\n                    &lt;th&gt;From:&lt;/th&gt;\n                    &lt;td&gt;\n                        &lt;input type=\"text\" data-im=\"comment@user\"&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td colspan=\"2\"&gt;&lt;textarea data-im=\"comment@message\"&gt;&lt;/textarea&gt;\n                        &lt;button data-im-control=\"post\"&gt;投稿&lt;/button&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;/tbody&gt;\n            &lt;/table&gt;\n            &lt;table&gt;\n                &lt;tbody&gt;\n                &lt;tr&gt;\n                    &lt;th&gt;From:&lt;/th&gt;\n                    &lt;td data-im=\"comment@user\"&gt;&lt;/td&gt;\n                    &lt;th&gt;Date:&lt;/th&gt;\n                    &lt;td data-im=\"comment@postdt\"&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;tr&gt;\n                    &lt;td colspan=\"4\" data-im=\"comment@message@innerHTML\"\n                        style=\"background-color: #CCCCCC\"&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;/tbody&gt;\n            &lt;/table&gt;\n        &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n                \n                \n                    実行します。以下の点を確認しましょう。\n                \n                \n                    最初は単にフォームだけが表示されています。「投稿」ボタンをクリックしても、何も入力しないと警告が表示され、メッセージは追加されません。\n                    Fromに自分の名前、messageに適当なメッセージを入力して「投稿」ボタンをクリックします。入力したメッセージが表示されましたが、同時に投稿ボタンを押した日時も設定されています。\n                    ページの最初のテキスト領域を利用して、メッセージを3つほど入力します。メッセージは、日付の逆順に表示されています。\n                    2つ目のメッセージの直後にも、Formとメッセージの記入部分があります。こちらにも入力をして「投稿」ボタンをクリックします。こちらは、該当メッセージへのコメントになります。いくつかコメントを追加してください。コメントも、日付が自動的に設定され、日付の逆順で表示されます。異なるルートメセージにコメントを記入し、正しいメッセージの後に付随していることを確認します。\n                    メッセージはテキストエリアです。改行を含むメッセージを入力してみてください。正しく、改行も表示されています。\n                    メッセージにJavaScriptのプログラムを、たとえば「&lt;script&gt;alert(9)&lt;/script&gt;」のように記述して投稿してみます。タグはHTMLのタグとして解釈はされず、記述した通りの文字列で表示されます。\n                    ページファイルには少し長いプログラムが入力されています。INTERMediatorOnPage.processingBeforePostOnlyContextは、「投稿」ボタンを押した直後で、データベース処理を行う前に呼び出されます。何をしているのかを以下の手がかりをもとに検討してみましょう。\n                        \n                            INTERMediatorLib.dateTimeStringISO()、INTERMediatorLib.dateTimeStringFileMaker()：現在の日時を返す\n                            INTERMediatorOnPage.getNodeIdsHavingTargetFromNode(node, target)：node以下、指定されたtargetを持つ要素のid属性値を配列で返す\n                            document.getElementById(idValue)：指定したid属性値の要素への参照を得る\n                            node.parentNode：nodeの親ノードへの参照を得る\n                            INTERMediator.additionalFieldValueOnNewRecord：新規レコードを作ったときの既定値を定める。最初のプロパティはコンテキスト名で、それに対してフィールド名と値を指定したオブジェクトの配列を与える\n                        \n                    \n                    \n                        最小限の機能ですが、あっという間にBBSが完成しました。HTMLコードはコピペして作っていただきましたが、15分から30分くらいでできたのではないでしょうか？　INTER-Mediatorを使えば、Webアプリケーションが簡単に構築できることがお分かりいただけたでしょうか？\n                    \n                \n                アプリケーションの改造\n                コメントの並び方を改良\n                先ほど作ったBBSのページを開きます。こちらより開くことができます。試しにメッセージを二つ以上投稿し、さらに、一番上に表示されているメッセージに二つ以上のコメントを投稿してみてください。\n                どうでしょうか。投稿されたコメントは読みやすい並びに表示されていますか？　\n                メッセージは新しいものほど上の方に表示されていて話の流れについて行きやすくなっていますが、コメントも同じように上から新しいものが並んでいます。誰かの発言に関連するコメントは、古いものから順番に読んで行かなければ話の流れをつかむことができません。Facebookなどのタイムラインも、メッセージは新しいものから、コメントは古いものから順に並んでいますよね。\n                では、これまで学んだことから、どこをどのようの修正すればいいか、考えてみてください。\n                コメントを表示させているコンテキストは何でしょう？＿＿＿＿＿＿＿＿＿＿＿＿\n                Sortingの方向（direction）を降順に指定するパラメーターは英語のdescendingを略したdescでした。昇順は英語でascendingと言います。パラメータはどう指定すればいいでしょうか？＿＿＿＿＿＿＿＿＿＿＿＿\n                実際に改修作業を進めて行きましょう。\n                     あるコンテキストの中に表示されるデータベース項目の順序は定義ファイルを設定することでコントロールできます。\n                \n                \n                    INTER-Mediatorトライアルのトップページに戻ります。\n                    定義ファイル def05.php を特定し、クリックします。定義ファイルエディターが開きます。 \n                    コンテキスト「name: comment」を特定し、Sorting項目のdirectionを昇順を意味するascに変更します。タブキーを押して変更したことを定義ファイルエディターにしっかりと伝えてください。\n                    では、再びBBSのページを表示させてください。一旦画面をリフレッシュします。\n                         どうでしょうか、メッセージの並びは登録日時の降順に、コメントは昇順になったでしょうか？\n                    \n                \n                簡単な作業でデータベースから取得した項目の表示順を切替えることができましたね。他に何か不都合なことはありませんでしょうか？\n                コメント入力の位置をコメントの後に移動\n                メッセージにコメントを付け加えるための入力フィールドが、コメントの並びの一番上に位置しています。これはちょっと不便ですね。コメントは通常、たくさん付いたコメントの一番最新のコメントに対してさらに続けるという使い方が一般的です。そのような使い方をするときに、たくさん付いたコメントの一番先頭にコメント入力フィールドがあると、上下にスクロールさせながら入力しなければならなくなります。\n                これも、少し改造してみましょう。\n                コメントの入力フィールドの位置を、コメントの並びの最下段に移動させてみましょう。画面の表示場所などの指定はページファイルで行います。\n                \n                    INTER-Mediatorトライアルのトップページに戻ります。\n                    ページファイル page05.html を特定し、クリックします。ページファイルエディターが開きます。\n                    HTMLファイルの中身をざーっと眺めて、どの部分がどこの表示を担当しているのか、確認してください。コメントの詳細を表示している部分がどこなのか、分かりますね？　ヒントはコメントを投稿するためのテーブルタグ内に納められている、というところです。\n                         見つけましたか？　ではそのテーブルタグごと、位置を移動させてください。\n                    \n                    さて、作業完了しましたね？　再びBBSのページを表示させてください。一旦ブラウザーに見えている画面をリフレッシュします。\n                         どうでしょうか、コメントの入力フィールドはコメントの並びの最下段になったでしょうか？\n                \n                INTER-Mediatorを使ったWebアプリケーション開発はいかがだったでしょうか？\n                     このようにして基本の骨格を作り上げ、要望に応じて徐々に改良していく。とても効率的な開発プラットフォームですね。\n                \n                今日学んだことをベースに、こんなことはできないだろうか、あんな形式に変更はできないだろうか、といろいろと工夫をしながら開発スキルを深めて行ってください。\n            \n        "
    },
    {
        "id": 11,
        "parent": "/ja/for-novices/",
        "path": "/ja/for-novices/movies.html",
        "title": "ビデオで始めるINTER-Mediator",
        "breadcrumb": "ビデオで始めるINTER-Mediator",
        "body": "\n            \n                はじめに\n                INTER-MediatorあるいはWeb開発をこれから学習しようという方々に向けて、ビデオで画面操作をみながら学習可能なコンテンツを用意しました。それぞれ、QiitaのページとYouTubeのビデオを参照していただきます。\n            \n            \n                INTER-Mediatorを始めよう！\n                \n                    (TBD)\n                \n            \n            \n                VMを準備して試用できるようになるまで\n                \n                    INTER-Mediatorをはじめよう - バーチャルマシンの準備\n                    INTER-Mediatorをはじめよう - Webページを探索しよう\n                    INTER-Mediatorをはじめよう - INTER-Mediatorのアップデート\n                \n            \n            \n                ハンズオンを進めてみる\n                \n                    INTER-Mediatorのハンズオン - セッション1: 入力専用ページ\n                    INTER-Mediatorのハンズオン - セッション2: 住所録\n                    INTER-Mediatorのハンズオン - セッション3: 伝票とリレーション\n                    INTER-Mediatorのハンズオン - セッション4: 資産管理\n                    INTER-Mediatorのハンズオン - セッション5: ブログ\n                \n            \n        "
    },
    {
        "id": 12,
        "parent": "/ja/practices/",
        "path": "/ja/practices/practice-searchnp.html",
        "title": "検索をしてその結果を一覧表示する（プログラムなし版）",
        "breadcrumb": "検索結果の一覧表示（プログラムなし版）",
        "body": "\n            \n                はじめに\n                検索結果を一覧するというユーザーインタフェースはWebアプリケーションでは一般的に見られる仕組みです。その仕組みを、宣言的な記述のみで構築できるようになっています。\n                前提知識\n                INTER-Mediatorに関して、以下の内容をすでに知っている事を前提とします。\n                \n                    data-im属性への記述によりフィールドの内容が表示されること\n                    TABLEタグを使った表の中で、複数のレコードが繰り返し表示されるようになっていること\n                    一定数ごとのレコードを表示する仕組みと、表示範囲を切り替えるページネーションの仕組みがあること\n                    定義ファイルのコンテキストには、検索条件が指定できること\n                \n            \n            \n                作成例について\n                利用するデータベースは、郵便番号と地名が含まれているもので、サンプルのデータベースにあるpostalcodeという名称のものです。レポジトリ内では、Samples/Practices/search_page1.htmlを開く事で、実際に稼働させることができます。Samples/index.htmlにあるサンプルの一覧では「Practices」にある「search」の「search(no JavaScript)」のリンクをクリックして表示できます。\n                まず、どのような動作になるのかを見て行くことにしましょう。最初にページを開くと、郵便番号と地名がともかく一覧されています。サンプルのデータベースには、ある時期の東京都のデータのみを収録しています。検索条件は何もなく、おそらく全てのデータがリストされていると想定されます。ここで、ページネーション（ページ移動）の「&gt;」ボタンをクリックすると、次々と10件ずつレコードが表示されます。また、何件目のデータを現在表示しているのかという情報も見えています。\n                \n                \n                ここで、「検索条件」に適当な地名（ここでは「市谷」）を入力してReturnキーを押します（「Search」ボタンをクリックしてもかまいません）。すると、一覧表には、「市谷」を含む地名やビル名のものだけに絞り込まれました。全部で68件の地名があることが分かります。「&gt;」ボタンでページ移動ができますが、ページ移動後にも、検索条件はそのまま見えていることにも注意を払いましょう。\n                \n                \n                「表示件数」のポップアップメニューから「4」を選択すると、これまで10件ごとに表示されていた一覧表が、4件ごとの表示に切り替わります。切り替えると、以後、ずっと4件ずつ表示されるようになります。\n                \n                \n                検索条件に「171」と入力してReturnキーを押しました。すると、郵便番号に171が含まれる地名だけが絞り込まれています。また、ここで、「郵便番号」と書かれた右側の▼をクリックすると、郵便番号の逆順で表示されるようになりました。つまり、一覧表示が「郵便番号」の逆順にソートされて表示されるようになっています。「&lt;&lt;」ボタンを押して最初のページを表示すると、いちばん大きな数値になる郵便番号の地名が、リストの最初の行に見えています。\n                \n                \n                検索条件に、「市ヶ谷」という文字列を指定して検索してみます。検索結果が0件のときに表示する行が見えています。なお、東京には、市ヶ谷という駅はありますが、地名では「市谷」と記述しており、この名前の地名がないこともわかります。\n                \n                \n            \n            \n                定義ファイル\n                定義ファイルのSamples/Practices/search_def.phpの内容は以下の通りです。コンテキストは、postalcodeという名前のものが1つだけあり、これはテーブル名と同様なので、tableやviewキーの値は指定していません。1ページあたりのレコード数は20で、後からの変更をしても30より多くの数を一度にページに出す事はできません。そして、pagingキーがtrueなので、ページネーションのコントロールがページ上に表示されます。\n                データベースはMySQLを使うのでdb-classは「PDO」を指定していますが、FileMaker Server向けには設定が変わります。それ以外の接続情報、アカウント、パスワードは、INTER-Mediator/params.phpファイルにあるものをそのまま使います。\n                \n                    require_once(dirname(__FILE__) . '/../../INTER-Mediator.php');\n\nIM_Entry(\narray(\n    array(\n        'name' =&gt; 'postalcode',\n        'records' =&gt; 20,\n        'maxrecords' =&gt; 30,\n        'paging' =&gt; true,\n    ),\n),\nnull,\narray('db-class' =&gt; 'PDO'),\n    false\n);\n                \n            \n            \n                ページファイル\n                ページファイルについては、ボディ部のみを示します。もちろん、ヘッダ部で、前述の定義ファイルSCRIPTタグで読み込んだ状態になっています。このほかに何も読み込みは行っていません。つまり、このページは、プログラムとしては、BODYタグ要素のonload属性にあるINTERMediatorを動作させる1行だけなのです。\n                \n                    &lt;body onload=\"INTERMediator.construct()\"&gt;\n&lt;div&gt;\n    検索条件:\n    &lt;input type=\"text\" data-im=\"_@condition:postalcode:f3,f7,f8,f9:*match*\"&gt;\n    表示件数：\n    &lt;select type=\"text\" data-im=\"_@limitnumber:postalcode\"&gt;\n        &lt;option value=\"4\"&gt;4&lt;/option&gt;\n        &lt;option value=\"10\"&gt;10&lt;/option&gt;\n        &lt;option value=\"20\" selected&gt;20&lt;/option&gt;\n    &lt;/select&gt;\n    &lt;button data-im=\"_@update:postalcode\"&gt;search&lt;/button&gt;\n&lt;/div&gt;\n&lt;div id=\"IM_NAVIGATOR\"&gt;Navigation Controls by INTER-Mediator&lt;/div&gt;\n&lt;table border=\"1\" id=\"resultTable\"&gt;\n    &lt;thead&gt;\n    &lt;tr&gt;\n        &lt;th&gt;郵便番号\n            &lt;span style=\"cursor: pointer\" data-im=\"_@addorder:postalcode:f3:asc\"&gt;▲&lt;/span&gt;\n            &lt;span style=\"cursor: pointer\" data-im=\"_@addorder:postalcode:f3:desc\"&gt;▼&lt;/span&gt;\n        &lt;/th&gt;\n        &lt;th&gt;都道府県&lt;/th&gt;\n        &lt;th&gt;市区町村&lt;/th&gt;\n        &lt;th&gt;町域名\n            &lt;span style=\"cursor: pointer\" data-im=\"_@addorder:postalcode:f9:asc\"&gt;▲&lt;/span&gt;\n            &lt;span style=\"cursor: pointer\" data-im=\"_@addorder:postalcode:f9:desc\"&gt;▼&lt;/span&gt;\n        &lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n    &lt;tr&gt;\n        &lt;td&gt;&lt;div data-im=\"postalcode@f3\"&gt;&lt;/div&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;div data-im=\"postalcode@f7\"&gt;&lt;/div&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;div data-im=\"postalcode@f8\"&gt;&lt;/div&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;div data-im=\"postalcode@f9\"&gt;&lt;/div&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr data-im-control=\"noresult\"&gt;\n        &lt;td colspan=\"4\"&gt;検索結果はありません。あるいは検索前です。&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n\n&lt;/body&gt;\n                \n            \n            \n                それぞれの動作の実現\n                一覧表示の実現\n                postalcodeテーブルでは、f3フィールドに郵便番号、f7〜f9フィールドに都道府県、市区町村、町域名が収められています。ページファイル内のTABLE要素によるテーブル部分で、その一覧表示を行っています。TBODYタグ要素の中には2つのTR要素があり、その最初の方の要素の子要素にTDがいくつかあり、そこにf3、f7〜f9のそれぞれのフィールドを示すターゲット指定がdata-im属性に設定されています。\n                postalcodeコンテキストに対して検索して得られた郵便番号と地名の情報に対して、TBODYの最初のTR要素がレコードの数だけ繰り返されて、そしてそれぞれDIVタグ要素のテキストとしてフィールドの値が設定されて表示されます。初期状態では、定義ファイルのコンテキストにあるrecordsキーの値に応じて最大10レコードまでとなります。この仕組みによって、一覧表が作成されています。\n                検索結果が0のときの一覧表\n                TBODYの内容を解析して、このTBODYがエンクロージャーとして機能します。そして、postalcodeコンテキストに対して検索処理を行います。このとき、検索結果が0件の場合、data-im-control属性が「noresult」のものを残して、エンクロージャー内の他のリピーターは削除され、その結果を表示します。また、一方で、検索結果が0件でない場合、data-im-control属性が「noresult」のものを削除して残った結果をリピーターとして識別して、そのリピーターをレコードの数だけ複製してページを表示します。\n                ページネーションのコントロールの表示\n                postalcodeコンテキストでは、pagingキーの値がtrueなのでページネーションコントロールによるページ切り替えが可能です。そして、ページネーションのコントロールを表示するためには、id属性が「IM_NAVIGATOR」の要素を配置しておく必要があります。TABLEタグのすぐ上にその要素が見えており、この場所にページネーションコントロールを自動的に構築します。\n                検索のユーザインタフェース\n                ページファイルの最初の方に、検索条件を指定するINPUTタグ要素があります。この要素はデータベースとは関係なく、ページ上で存在するものです。そのため、id属性（値はcondition）を設定していますが、加えて、data-im属性にローカルコンテキストを示す「_@condition:postalcode:f3,f7,f8,f9:*match*」という記述があります。この属性名を持つテキストフィールドは、コロンで区切られていて、最初の「condition」は決められたキーワードです。次の「postalcode」はどのコンテキストに対して検索をかけるのかということを指定しています。3つ目は検索対象のフィールドをカンマで書き並べると、それぞれのフィールドに対するOR検索が行われます。4つ目の「*match*」は、テキストフィールドに入力した文字列がどこかに含まれるという条件で検索することを示しています。このようなdata-im属性の指定により、ユーザーインタフェース上のテキストフィールドの値がコンテキストのデータベースへのクエリーに条件として付加され、検索結果が一覧されます。\n                このテキストフィールドに文字カーソルがある状態でReturnキーなどを押すと、コンテキストへの更新処理とみなして再度検索し、テーブルの一覧を作り直します。ユーザーは「検索によって更新された」ように見えるということです。\n                Searchボタンをクリックして検索する\n                ページファイルでは、BUTTONタグを使って「Search」ボタンを作成しています。ボタンのdata-im属性に「_@update:postalcode」と指定されています。この記述により、ボタンをクリックすると、postalcodeコンテキストに対する更新を行うので、現状の設定での検索がその場で行われます。\n                フィールド名の横の▲▼をクリックして、そのフィールドで並べ替える\n                例えば、郵便番号の▲ボタンは、spanタグ要素として記述して、data-im属性値は「_@addorder:postalcode:f3:asc」となっています。この記述があると、要素をクリックしたときにpostalcodeコンテキストに対する更新を行うと同時に、その後の記述から明らかなように、f3フィールドの昇順で並べ替えるという条件を付加します。\n            \n            \n                まとめ\n                検索して一覧するというユーザーインタフェースは当たり前のように作成されていますが、INTER-Mediatorはこのように、手続き的なプログラミングをまったくしなくても、ある程度仕組みのページを作成できるようになりました。AND条件で検索したいときには、テキストフィールドを並べます。そのとき、空白のフィールドは検索条件として含めないといった動作も、一切のプログラミングなく動作します。なお、これ以上の複雑な検索条件指定が必要な場合には、『プラクティス：検索をしてその結果を一覧表示する（JavaScript版）』の記事を参照してください。\n            \n        "
    },
    {
        "id": 13,
        "parent": "/ja/practices/",
        "path": "/ja/practices/practice-search.html",
        "title": "検索をしてその結果を一覧表示する（JavaScript版）",
        "breadcrumb": "検索結果の一覧表示（JavaScript版）",
        "body": "\n            \n                前提知識\n                INTER-Mediatorに関して、以下の内容をすでに知っている事を前提とします。\n                \n                    data-im属性への記述によりフィールドの内容が表示されること\n                    TABLEタグを使った表の中で、複数のレコードが繰り返し表示されるようになっていること\n                    一定数ごとのレコードを表示する仕組みと、表示範囲を切り替えるページネーションの仕組みがあること\n                    定義ファイルのコンテキストには、検索条件が指定できること\n                    JavaScriptによるページ機能の拡張\n                \n            \n            \n                作成例について\n                利用するデータベースは、郵便番号と地名が含まれているもので、サンプルのデータベースにあるpostalcodeという名称のものです。レポジトリ内では、Samples/Practices/search_page2.htmlを開く事で、実際に稼働させることができます。Samples/index.htmlにあるサンプルの一覧では「Practices」にある「search」の「search(using JavaScript)」のリンクをクリックして表示できます。\n                まず、どのような動作になるのかを見て行くことにしましょう。最初にページを開くと、郵便番号と地名がともかく一覧されています。サンプルのデータベースには、ある時期の東京都のデータのみを収録しています。検索条件は何もなく、おそらく全てのデータがリストされていると想定されます。ここで、ページネーション（ページ移動）の「&gt;」ボタンをクリックすると、次々と10件ずつレコードが表示されます。また、何件目のデータを現在表示しているのかという情報も見えています。\n                \n                \n                ここで、「検索条件」に適当な地名（ここでは「池袋」）を入力して「Search」ボタンをクリックします。すると、一覧表には、池袋を含む地名やビル名のものだけに絞り込まれました。全部で68件の地名があることが分かります。「&gt;」ボタンでページ移動ができますが、ページ移動後にも、検索条件はそのまま見えていることにも注意を払いましょう。\n                \n                \n                検索条件に、ここでは「171」と入力しました。すると、郵便番号が171で始まる地名だけが絞り込まれています。また、ここで、「郵便番号」と書かれた右側の▼をクリックすると、郵便番号の逆順で表示されるようになりました。つまり、一覧表示が「郵便番号」の逆順にソートされて表示されるようになっています。\n                \n                \n                検索条件に、東京都に明らかになさそうな「大阪」という文字列を指定して検索してみます。もちろん、大阪を含む地名は存在しませんが、検索結果が0件のときに表示する行が見えています。\n                \n                \n                「表示件数」については、ここでは省略します。\n            \n            \n                定義ファイル\n                定義ファイルのSamples/Practices/search_def.phpの内容は以下の通りです。コンテキストは、postalcodeという名前のものが1つだけあり、これはテーブル名と同様なので、tableやviewキーの値は指定していません。1ページあたりのレコード数は10で、後からの変更をしても30より多くの数を一度にページに出す事はできません。そして、pagingキーがtrueなので、ページネーションのコントロールがページ上に表示されます。\n                データベースはMySQLを使うのでdb-classは「PDO」を指定します。それ以外の接続情報、アカウント、パスワードは、INTER-Mediator/params.phpファイルにあるものをそのまま使います。INTER-Mediatorのサンプルファイルをそのまま参照できる状態であれば、特に変更する必要はありません。\n                \n                    require_once(dirname(__FILE__) . '/../../INTER-Mediator.php');\n\nIM_Entry(\narray(\n    array(\n        'name' =&gt; 'postalcode',\n        'records' =&gt; 10,\n        'maxrecords' =&gt; 30,\n        'paging' =&gt; true,\n    ),\n),\nnull,\narray('db-class' =&gt; 'PDO'),\n    false\n);\n                \n            \n            \n                ページファイル\n                ページファイルについては、ボディ部のみを示します。もちろん、ヘッダ部で、前述の定義ファイルSCRIPTタグで読み込んだ状態になっています。\n                \n                    &lt;div&gt;\n    検索条件:\n    &lt;input type=\"text\" id=\"condition\" data-im=\"_@condition\"&gt;\n    表示件数：\n    &lt;input type=\"text\" id=\"number\" data-im=\"_@_im_pagedSize\" size=\"3\"&gt;\n    &lt;button id=\"search\"&gt;search&lt;/button&gt;\n&lt;/div&gt;\n&lt;div id=\"IM_NAVIGATOR\"&gt;Navigation Controls by INTER-Mediator&lt;/div&gt;\n&lt;table border=\"1\" id=\"resultTable\"&gt;\n    &lt;thead&gt;\n        &lt;tr&gt;\n            &lt;th&gt;郵便番号\n                &lt;span id=\"sort1a\"&gt;▲&lt;/span&gt;\n                &lt;span id=\"sort1d\"&gt;▼&lt;/span&gt;\n            &lt;/th&gt;\n            &lt;th&gt;都道府県&lt;/th&gt;\n            &lt;th&gt;市区町村&lt;/th&gt;\n            &lt;th&gt;町域名\n                &lt;span id=\"sort2a\"&gt;▲&lt;/span&gt;\n                &lt;span id=\"sort2d\"&gt;▼&lt;/span&gt;\n            &lt;/th&gt;\n        &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n        &lt;tr&gt;\n            &lt;td&gt;\n                &lt;div data-im=\"postalcode@f3\"&gt;&lt;/div&gt;\n            &lt;/td&gt;\n            &lt;td&gt;\n                &lt;div data-im=\"postalcode@f7\"&gt;&lt;/div&gt;\n            &lt;/td&gt;\n            &lt;td&gt;\n                &lt;div data-im=\"postalcode@f8\"&gt;&lt;/div&gt;\n            &lt;/td&gt;\n            &lt;td&gt;\n                &lt;div data-im=\"postalcode@f9\"&gt;&lt;/div&gt;\n            &lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr data-im-control=\"noresult\"&gt;\n            &lt;td colspan=\"4\"&gt;検索結果はありません。あるいは検索前です。&lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n                \n            \n            \n                それぞれの動作の実現\n                一覧表示の実現\n                postalcodeテーブルでは、f3フィールドに郵便番号、f7〜f9フィールドに都道府県、市区町村、町域名が収められています。一覧表に表示をしつつ、そこでの変更の必要がない場合には、INPUTタグ要素でフィールドの内容を表示する必要はありません。ページファイル内のTBODYタグ要素の中には2つのTR要素がありますが、その最初の方の要素の子要素にTDがいくつかあり、さらに各TDはDIV要素があります。そこに、f3、f7〜f9のそれぞれのフィールドを示すターゲット指定がdata-im属性に設定されています。\n                postalcodeコンテキストに対して検索して得られた郵便番号と地名の情報に対して、TBODYの最初のTR要素がレコードの数だけ繰り返されて、そしてそれぞれDIVタグ要素のテキストとしてフィールドの値が設定されて表示されます。初期状態では、定義ファイルのコンテキストにあるrecordsキーの値に応じて最大10レコードまでとなります。この仕組みによって、一覧表が作成されています。\n                検索結果が0のときの一覧表\n                TBODYの内容を解析して、このTBODYがエンクロージャーとして機能します。そして、postalcodeコンテキストに対して検索処理を行います。このとき、検索結果が0件の場合、data-im-control属性が「noresult」のものを残して、エンクロージャー内の他のリピーターは削除され、その結果を表示します。また、一方で、検索結果が0件でない場合、data-im-control属性が「noresult」のものを削除して残った結果をリピーターとして識別して、そのリピーターをレコードの数だけ複製してページを表示します。\n                ページネーションのコントロールの表示\n                postalcodeコンテキストでは、pagingキーの値がtrueなのでページネーションコントロールによるページ切り替えが可能です。そして、ページネーションのコントロールを表示するためには、id属性が「IM_NAVIGATOR」の要素を配置しておく必要があります。TABLEタグのすぐ上にその要素が見えており、この場所にページネーションコントロールを自動的に構築します。\n                ページの合成処理\n                実際にページを表示する処理は、window.onloadへの関数の代入で実現しています。Samples/Practices/search.jsにプログラムが置いてあります。そこにある以下の部分が、実際にページを合成します。window.onloadに代入した関数は、ページの要素を読み込んだ後、つまりページが表示された直後に呼び出され、INTERMediator.construct(true);によって実際にページの生成を行います。この関数のそれまでの部分については、この後に説明をします。\n                \n                    window.onload = function () {\n        :\n    INTERMediator.construct(true);\n};\n                \n                検索のユーザインタフェース\n                ページファイルの最初の方に、検索条件を指定するINPUTタグ要素があります。この要素はデータベースとは関係なく、ページ上で存在するものです。そのため、id属性（値はcondition）を設定していますが、加えて、data-im属性にローカルコンテキストを示す「_@condition」という記述があります。これにより、クライアント内部でのデータ記憶領域とバインドされます。アンダーラインはローカルコンテキストを示す記号で、「condition」がそのコンテキストでのキーとなります。このINPUT要素から値を取り出すのではなく、ローカルコンテキストより、このテキストフィールドに入力した値が取り出せるようになります。\n                実際の検索処理\n                検索処理は、Samples/Practices/search.jsにある以下の関数として、汎用的に記述しました。つまり、doSearch()の呼び出しで、検索条件を取り出してそれを設定した上で、ページの再合成を行うことで検索結果を反映させた一覧を取得します。INTERMediator.additionalConditionには、コンテキストとして定義ファイルに記述した検索条件に、さらに新たな検索条件を付加するプロパティです。\n                \n                    function doSearch() {\n    INTERMediator.additionalCondition = {};\n    var c1 = IMLibLocalContext.getValue(\"condition\");\n    if (c1 &amp;&amp; c1.length &gt; 0) {\n        INTERMediator.additionalCondition = {\"postalcode\": [\n            {field: 'f3', operator: 'LIKE', value: c1 + '%'},\n            {field: 'f7', operator: 'LIKE', value: '%' + c1 + '%'},\n            {field: 'f8', operator: 'LIKE', value: '%' + c1 + '%'},\n            {field: 'f9', operator: 'LIKE', value: '%' + c1 + '%'},\n            {field: '__operation__', operator: 'ex'}\n        ]};\n    }\n    INTERMediator.startFrom = 0;\n    IMLibLocalContext.archive();\n    INTERMediator.construct(true);\n}\n                \n                最初に、付加条件をいったんクリアします。IMLibLocalContext.getValueメソッドにより、検索条件のテキストフィールドの値を取り出します。そのテキストフィールドは、直前に説明した通り、ローカルコンテキストのconditionキーの値とバインドしていて、テキストフィールドの値はキーの値を指定して取り出すことができます。つまり、変数c1には、テキストフィールドの値が取り出されます。\n                もし、検索条件が指定されていれば、INTERMediator.additionalConditionに付加検索条件を追加します。ここでは、f3が検索条件で始まり、f7〜g9については検索条件を含むという検索設定をMySQLの文法に従って記述しています。__operation__という記述により、それまでの並びをANDではなくOR条件で結びます。結果として、4つの条件がどれか1つでも満たすようなレコードが検索されて取り出されることになります。\n                INTERMediator.startFromは、検索結果の何番目から表示するかを示すプロパティで、ページネーションによりINTER-Mediatorによって自動的に更新されるものです。最初なので0にしておきます。IMLibLocalContext.archive()により、ローカルコンテキストを記憶しています。最後に、INTERMediator.construct(true);によってページの合成を行っています。\n                Searchボタンをクリックして検索する\n                ページファイルでは、BUTTONタグを使って「Search」ボタンを作成していますが、その要素の記述内では、特にプログラムの呼び出しなどを行っていません。onclick属性に記述する方法でももちろん動作しますが、別の方法も用意しています。INTERMediator.construct( ) でページ合成をする前に、IMLibMouseEventDispatch.setExecuteメソッドを利用して、イベントに対応する処理を記述できます。このメソッドの最初の引数は要素のid属性で、2番目にその要素をクリックしたときの処理を関数で記述します。Searchボタンのid属性値はsearchなので、以下のような記述を行えば、クリックしたときにdoSearch関数を実行します。なお、IMLibMouseEventDispatch.setExecuteは、実際にはdocumentオブジェクトでのclickコマンドを受け付けます。従って、オブジェクトに直接プログラムを記述するような場合や、オブジェクトにイベントリスナを設定する場合には、そのまま両方動くことになります。このサンプルプログラムでは、HTML側に一切の処理を書かないという方針でまとめています。\n                \n                    window.onload = function () {\n        :\n    IMLibMouseEventDispatch.setExecute('search', function () {\n        doSearch();\n    });\n        :\n    INTERMediator.construct(true);\n};\n                \n                Returnキーで検索をする\n                INPUTタグ要素は、原則としてReturnキーあるいはEnterキーによるサブミット処理は、FORMタグを使っている場合にしか適用されません。INTER-MediatorではFORMを使っていないので、簡単に言えばテキストフィールドでReturnキーを押しても「何も起こらない」ということになります。\n                そこで、ページ合成前に、IMLibKeyEventDispatch.setExecuteメソッドを利用すれば、第1引数の値をid属性に持つ要素に対して、2番目の引数の文字コードが入力されれば、3つ目の引数の関数を実行します。つまり、以下の記述により、テキストフィールドに入力中にEnterキーを押すと、doSearch関数が実行されて検索が行われるということになります。IMLibLocalContext.updateメソッドは、引数にローカルコンテキストのキーを指定し、現在の要素の値をローカルコンテキストへ反映させます。通常はこの作業は自動的に行われるのですが、要素のchangeイベントをもとにしており、キータイプだけでは同期処理が実行されません。そこで、このような記述で明示的に要素の値をコンテキストに反映させています。\n                \n                    window.onload = function () {\n    IMLibKeyEventDispatch.setExecute('condition', 13, function () {\n    IMLibLocalContext.update('condition');\n        doSearch();\n    });\n        :\n    INTERMediator.construct(true);\n};\n                \n                フィールド名の横の▲▼をクリックして、そのフィールドで並べ替える\n                例えば、郵便番号の▲ボタンは、spanタグ要素として記述して、id属性値は「sort1a」となっています。そして、window.onloadに代入している関数内で以下のようにIMLibMouseEventDispatch.setExecuteメソッドが記述されています。つまりは、▲ボタンをクリックすると、まず、INTERMediator.additionalSortKeyというプロパティに、追加のソート条件を設定します。右辺にあるように、postalcodeコンテキストに対してf3フィールドを昇順で並べ替えるという設定を追加します。このサンプルでは、フィールドに応じた並べ替えのクリックポイントが4カ所あるので、4つの要素に対してクリックイベントの実行時に処理を行うように記述をしています。\n                \n                    window.onload = function () {\n        :\n    IMLibMouseEventDispatch.setExecute('sort1a', function () {\n        INTERMediator.additionalSortKey\n            = {\"postalcode\": {field: 'f3', direction: 'ASC'}};\n        doSearch();\n    });\n    IMLibMouseEventDispatch.setExecute('sort1d', function () {\n        INTERMediator.additionalSortKey\n            = {\"postalcode\": {field: 'f3', direction: 'DESC'}};\n        doSearch();\n    });\n    IMLibMouseEventDispatch.setExecute('sort2a', function () {\n    INTERMediator.additionalSortKey\n            = {\"postalcode\": {field: 'f9', direction: 'ASC'}};\n        doSearch();\n    });\n    IMLibMouseEventDispatch.setExecute('sort2d', function () {\n        INTERMediator.additionalSortKey\n        = {\"postalcode\": {field: 'f9', direction: 'DESC'}};\n        doSearch();\n    });\n    INTERMediator.construct(true);\n};\n                \n            \n        "
    },
    {
        "id": 14,
        "parent": "/ja/practices/",
        "path": "/ja/practices/practice-masterdetail.html",
        "title": "一覧と詳細",
        "breadcrumb": "一覧と詳細",
        "body": "\n            \n                前提知識\n                INTER-Mediatorに関して、以下の内容をすでに知っている事を前提とします。\n                \n                    data-im属性への記述によりフィールドの内容が表示されること\n                    TABLEタグを使った表の中で、複数のレコードが繰り返し表示されるようになっていること\n                    一定数ごとのレコードを表示する仕組みと、表示範囲を切り替えるページネーションの仕組みがあること\n                    定義ファイルのコンテキストには、検索条件が指定できること\n                \n            \n            \n                作成例について\n                たくさんのレコード、そしてたくさんのフィールドがある場合、そのデータの一覧を表示して、ボタンをクリックするなどして移動したページで詳細を表示したり編集したりするような作りのユーザーインタフェースはよく利用されます。この種のユーザーインタフェースをマスター/ディテール、あるいは一覧と詳細といった呼び方をします。\n                サンプルデータベースには、商品マスターのテーブルがあります。その内容を一覧と詳細形式で表示したいとします。一般的なWebアプリケーションだと、それぞれ異なるページを用意して、ページ移動などの必要な機能を実装するということになります。一方、INTER-Mediatorでは、そうしたユーザーインタフェースを作りやすくした仕組みを組み込んでいます。一覧も詳細も、同一のページに表示して、必要に応じて表示と非表示を行うことで、一覧と詳細の動作を行っています。\n                サンプルの一覧のページからは「Practices」の「Master/Detail」にある「alternative navigation」をクリックすると、以下のようなページが表示されます。最初は、商品マスターの商品名と単価が見えている一覧が表示されています。ここで、「詳細」ボタンをクリックすると、クリックした商品に関する他のフィールドを、そのレコードだけ表示します。「一覧表示」ボタンをクリックすると、元の一覧のページが表示されます。\n                \n                \n                サンプルの一覧のページからは「Practices」の「Master/Detail」にある「split master/detail」をクリックすると、以下のようなページが表示されます。一覧と詳細が同時に表示されています。CSSの仕組みを利用して、それぞれのテーブルを左右に並ぶように配置しています。\n                \n                \n                左側の一覧で「詳細」ボタンをクリックすると、該当するレコードが右側に表示されます。つまり、右側は、左側のリストでクリックしたレコードの情報に逐次切り替わります。\n                \n                \n                ここで、右側の詳細表示の方が、テキストフィールドになっています。たとえば、単価を1200に修正したとします。修正をしてTabキーを押すなどすると、このレコードのunitpriceフィールドの値は1200に更新されます。\n                \n                \n                テキストフィールドからフォーカスが外れると同時に、左側の対応するフィールドも値が置き換わっています。このように、同一のフィールドがページ内の複数の箇所に見えている場合には、1つの修正が他の要素へ自動的に反映されるようになっています。（書式の反映に関しては、Ver.5.0より後に修正をおこなう予定です。）\n                \n                \n            \n            \n                定義ファイル\n                定義ファイルのSamples/Practices/nav1.phpの内容は以下の通りです。一覧と詳細が切り替わるnavi1.phpと、左右に表示されるnavi2.phpの2つの定義ファイルがありますが、1箇所の設定を除いて同一のものです。\n                まず、一覧と詳細は、基本的には同一のテーブルがデータソースになるはずです。しかしながら、INTER-Mediatorでは、それぞれ、異なるコンテキストして定義します。productテーブルをもとに、一覧用のproductlistコンテキストと、詳細用のproductdetailコンテキストを用意します。いずれも、viewキーの値がproductとなっており、同じproductテーブルから得られるコンテキストであることがわかります。一覧と詳細を構成するには、それぞれのコンテキストにnavi-controlキーに値を指定します。一覧側は「master」、詳細側は「detail」と指定するのが基本です。masterだけだと、一覧と詳細は同時に表示され、詳細側にはマスターに切り替わるボタンは表示されません。master-hideだと、一覧と詳細が切り替わり、詳細側に一覧を表示するボタンが追加されます。detail、あるいはdetail-downなら詳細の末尾に、detail-topなら詳細の冒頭に、一覧に移動するボタンを表示します。なお、master側のコンテキストでは、必ず「詳細」ボタンが追加されます。\n                データベースはMySQLを使うのでdb-classは「PDO」を指定します。それ以外の接続情報、アカウント、パスワードは、INTER-Mediator/params.phpファイルにあるものをそのまま使います。INTER-Mediatorのサンプルファイルをそのまま参照できる状態であれば、特に変更する必要はありません。\n                \n                    require_once(dirname(__FILE__) . '/../../INTER-Mediator.php');\n\nIM_Entry(\n    array(\n        array(\n            'records' =&gt; 10,\n            'name' =&gt; 'productlist',\n            'view' =&gt; 'product',\n            'key' =&gt; 'id',\n            'sort' =&gt; array(array('field' =&gt; 'name', 'direction' =&gt; 'ASC'),),\n            'navi-control' =&gt; 'master-hide',\n        ),\n        array(\n            'records' =&gt; 1,\n            'name' =&gt; 'productdetail',\n            'view' =&gt; 'product',\n            'table' =&gt; 'product',\n            'key' =&gt; 'id',\n            'navi-control' =&gt; 'detail-top',\n        ),\n    ),\n    array(\n        'formatter' =&gt; array(\n            array('field' =&gt; 'product@unitprice', 'converter-class' =&gt; 'Number', 'parameter' =&gt; '0'),\n        ),\n    ),\n    array('db-class' =&gt; 'PDO'),\n    false\n);\n                \n            \n            \n                ページファイル\n                ページファイルについては、ボディ部のみを示します。もちろん、ヘッダ部で、前述の定義ファイルSCRIPTタグで読み込んだ状態になっています。一覧を表示するTABLEと詳細を表示するTABLEが定義されているだけです。左右のレイアウトをしやすいように、それぞれDIVタグ要素に含めてあります。それぞれのTABLEタグ要素内では、productlistコンテキストと、productdetailコンテキストを利用したターゲット指定があるだけで、特に何も特別な記述はありません。\n                \n                    &lt;body onload=\"INTERMediator.construct(true);\"&gt;\n&lt;!-- Table for the list view --&gt;\n&lt;div id=\"listarea\" style=\"float:left; margin-right: 24px;\"&gt;\n    &lt;table border=\"1\"&gt;\n        &lt;thead&gt;\n        &lt;tr&gt;\n            &lt;th&gt;&lt;/th&gt;&lt;th&gt;name&lt;/th&gt;&lt;th&gt;unitprice&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n        &lt;tr&gt;\n            &lt;td&gt;&lt;/td&gt;\n            &lt;td data-im=\"productlist@name\"&gt;&lt;/td&gt;\n            &lt;td class=\"price\" data-im=\"productlist@unitprice\"&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n&lt;/div&gt;\n&lt;!-- Table for the detail view --&gt;\n&lt;div id=\"detailarea\"&gt;\n    &lt;table border=\"1\"&gt;\n        &lt;tbody&gt;\n        &lt;tr&gt;\n            &lt;th&gt;id&lt;/th&gt;\n            &lt;td data-im=\"productdetail@id\"&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;th&gt;name&lt;/th&gt;\n            &lt;td&gt;&lt;input type=\"text\" size=\"60\" data-im=\"productdetail@name\"&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;th&gt;unitprice&lt;/th&gt;\n            &lt;td&gt;&lt;input type=\"text\" size=\"60\" data-im=\"productdetail@unitprice\"&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;th&gt;photofile&lt;/th&gt;\n            &lt;td&gt;&lt;input type=\"text\" size=\"60\" data-im=\"productdetail@photofile\"&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;th&gt;acknowledgement&lt;/th&gt;\n            &lt;td&gt;&lt;input type=\"text\" size=\"60\" data-im=\"productdetail@acknowledgement\"&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;th&gt;ack_link&lt;/th&gt;\n            &lt;td&gt;&lt;input type=\"text\" size=\"60\" data-im=\"productdetail@ack_link\"&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;th&gt;photofile&lt;/th&gt;\n            &lt;td&gt;&lt;img src=\"../Sample_products/images/\" data-im=\"productdetail@photofile@#src\"&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n&lt;/div&gt;\n&lt;div style=\"clear: both\"/&gt;\n&lt;/body&gt;\n                \n            \n            \n                まとめ\n                一覧と詳細を実装するときには、それぞれを異なるコンテキストで1ページ内に配置します。そして、コンテキストにnavi-controlキーの値を指定することで、それぞれが連携して、一覧と詳細の動作を行うようになります。そのように動作させるためにプログラムを記述する必要はまったくありません。\n            \n        "
    },
    {
        "id": 33,
        "parent": "/ja/practices/",
        "path": "/ja/practices/practice-step.html",
        "title": "モバイルでよく見られるステップ動作のサイト",
        "breadcrumb": "ステップ",
        "body": "\n            \n                前提知識\n                INTER-Mediatorに関して、以下の内容をすでに知っている事を前提とします。\n                \n                    data-im属性への記述によりフィールドの内容が表示されること\n                    TABLEタグを使った表の中で、複数のレコードが繰り返し表示されるようになっていること\n                    一定数ごとのレコードを表示する仕組みと、表示範囲を切り替えるページネーションの仕組みがあること\n                    定義ファイルのコンテキストにJavaScriptを利用して、検索条件が指定できること\n                \n                また、Webサイト作成について、以下の知識も知っていることを前提とします。\n                \n                    CSSに関する知識\n                    モバイルサイトの作成方法とタッチイベントの処理\n                \n            \n            \n                作成例について\n以下のビデオをご覧ください。Chromeのモバイル画面シミュレーションで見ています。データベースはサンプルにある東京都の郵便番号を使っているので、日本郵便が配布しているデータを単に1つのテーブルに入れたものです。最初の画面では東京都しかありませんが、都道府県を選択します。そして、セルをタップすると、タップした都道府県に存在する市区町村が一覧されます。そして、いずれかをタップすると、選択した市区町村に存在する町域名が一覧されます。さらにタップすると、その郵便番号が見えます。ここでは、4つの一覧画面があり、順次タップで進めたり、戻ったりができるということです。戻って異なる郵便番号を参照することもできます。\n                \n\nこのページはサンプルに用意してありますので、そちらでもご覧いただけます。サンプルのページでは「Practices」の「Mobile」にある「step」から参照できます。デモサイトでのリンクはこちらです。PCでご覧の方は、例えばChromeのデバッガをoption+command+Iなどで呼び出し、デバイスツールバーを表示してモバイルモードにして参照してみてください。ページファイルは/samples/Sample_Mobile/step_MySQL.html、定義ファイルは/samples/Sample_Mobile/step_MySQL.phpです（リンク先はレポジトリ）。\n            \n\nサイト設計\nモバイルサイトでステップ動作をさせたい場合は、１画面で１つの項目を選択するのが一般的です。要求内容から基本的なナビゲーションの設計を行い、各ステップでどのようにデータをデータベースから取り出すかを検討します。そして、それらのコンテキストを定義ファイルに定義します。ここまでは、他のINTER-Mediatorで作成するサイトと変わりません。\nステップ動作をさせたい場合、それぞれのコンテキスト定義に、navi-controlキーを指定します。最初のページは「step」、以降のページは「step-hide」とします。したがって、stepが指定されたページは1つだけにするようにしてください。加えて、定義ファイルの中での順序が非常に重要になります。定義ファイル内でのコンテキスト定義の上から順番にステップ動作の遷移に対応するように並べてください。\n定義ファイルでのnavi-controlと順序\n定義ファイルへのリンクはすでに掲載しているので、そちらから定義ファイルを開いて参照してください。nameキーがprefecture、city、town、wrapupという4つのコンテキストがあり、いずれもnavi-controlキーの指定があります。最初にprefectureコンテキストの一覧が表示されように、順序としては最初にあり、そしてstepという値がnavi-controlキーに指定されています。\nいずれも、aggrregation-*キーがあり、やや複雑なSQLステートメントの生成を行なっていますが、基本的にはいずれもpostalcodeテーブルから、それぞれの値を取り出しているということです。例えば、市区町村フィールドからデータを取り出すとき、日本郵便のデータのままだと、「中央区」のレコードはたくさんあります。DISTINCTを使う方法もありますが主キー値をどれかのレコードで代表させたいため、ここではGROUP BYで同じ名前の市区町村をまとめて1つにして、主キー値は同一市区町村のレコードの中の最小値を取得するようにしました。\nページファイルの構築\nページファイルへのリンクをクリックして、ページファイルを確認してください。それぞれのコンテキストは、並べて定義するのが混乱がなくて良いでしょう。ここではTABLEタグでテーブルとして作成しましたが、もちろん、div等を利用しても構いません。data-im属性でターゲット指定を行う点は大きな違いはありません。モバイルデバイスでは、セルをタップしますが、PCの場合は「詳細」ボタンが出てきます。このように、デバイスによってナビゲーション動作を呼び出すイベントはINTER-Mediatorの側で自動的に設定されます。\nステップ動作のページで追加で必要なことは、クラスが「IM_Button_StepBack」の「戻る」ボタンを作成することです。単に、このクラスの要素が配置されて入ればよく、BUTTONタグでも構いませんが、サンプルのようにSPANタグでも構いません。このボタンの表示/非表示や、クリック時の動作についてはINTER-Mediatorが全て自動的に処理をします。最初のページでは表示しないなどの作業は自動的に行われています。\nページファイルの作成で悩むところは、そのデザインでしょう。サンプルでは、ヘッダとフッタが固定された状態で、選択のためのリストだけがその間でスクロールするといった動作になりように、CSSを調整しています。このデザイン部分はINTER-Mediatorは関係なく、普通にモバイルサイトとして動作するように構築します。\nナビゲーション動作のカスタマイズ\nここまでの設定で、選択リクトを表示して、ステップ動作や戻る操作は実装できました。しかしながら、それだけでは望むサイトにはならないことが多いでしょう。そこで、タップ直後に独自に定義したメソッドを呼び出すことで汎用的な動作ができるようにしました。\n例えば、name属性が「prefecture」のコンテキストにあるbefore-move-nextstepキーには、「doAfterPrefSelection」という文字列が設定されています。このキーがあれば、「INTERMediatorOnPage.doAfterPrefSelection()」という呼び出しをタップ直後に行います。このメソッドの定義は、ページファイルのヘッダ部にあるscriptタグ内で記述されています。つまり、「東京都」をクリックすると、その情報を保持して、このメソッドを呼び出すということになります。\nINTERMediatorOnPage.doAfterPrefSelectionメソッドを見てみましょう。IMLibPageNavigation.getStepLastSelectedRecord()により、最後に選択した項目に対応するレコードが得られます。ここでは、prefプロパティを参照することにより、選択した項目の都道府県名が得られます。その値を利用して、次に表示されるcityコンテキストに対して、f7（都道府県名のフィールド）が選択した都道府県名と同一になるような検索条件を指定しています。その結果、cityコンテキストは、「SELECT MIN(id) AS city_id, f8 AS city FROM postalcode WHERE f7 = '東京都' GROUP BY f8」というSQLによって得られたリレーションを元に構築され、東京都の市区町村名だけが重複なくリストアップされます。\nwrapupコンテキストのセルをタップしても、何も起こりません。最後のステップでは先には進みませんが、before-move-nextstepキーで指定したメソッドの呼び出しだけは行います。IMLibPageNavigation.stepNavigationは、順番にタップした内容が得られます。東京都→世田谷区→上馬と選択して、最後のページでいずれかをタップした場合、IMLibPageNavigation.stepNavigationの値は以下のようになっています。\n\n[\n  {context: IMLibContext {contextName: \"prefecture\",  …},\n   key: \"pref_id=1\"},\n  {context: IMLibContext {contextName: \"city\", …},\n   key: \"city_id=2317\"},\n  {context: IMLibContext {contextName: \"town\", …}\n   key: \"town_id=2329\"}\n]\n\nつまり、ステップで動作してきた各ページのコンテキストオブジェクトと、選択した項目のキーが得られます。コンテキストオブジェクトは、storeプロパティで一覧の値が全て得られます。例えば、以下のコードを実行すると、record変数には、{town_id: \"2329\", town: \"上馬\", _im_repeater: \"\"}という値が得られます。ここから、新たにデータベース処理をしたり、別のページに遷移するなどは、さらにプログラムを作成する必要があります。\n\nvar key = IMLibPageNavigation.stepNavigation[2].key;\nvar record = IMLibPageNavigation.stepNavigation[2].context.store[key];\n\n            \n            \n                まとめ\n                ステップ動作を行うページを、コンテキストと絡めて作成する方法を説明しました。なお、選択時の処理は一般化しづらい点もあるため、ページ遷移以上の機能はJavaScriptでの実装を必要とします。\n            \n        "
    },
    {
        "id": 15,
        "parent": "/ja/for-developers/",
        "path": "/ja/for-developers/manual.html",
        "title": "INTER-MediatorによるWebアプリケーションの概要",
        "breadcrumb": "INTER-MediatorによるWebアプリの概要",
        "body": "\n            \n                はじめに\n                データベースにMySQLなど、PHPのPDOに対応したものを利用することを想定します。データベースが稼働しており、INTER-Mediatorがインストールされている状況であるとします。このとき、以下の2つのファイルを作成します。\n                \n                    ブラウザにロードするHTMLファイル（「ページファイル」と名付けます）\n                    データベース接続など設定を記述したPHPファイル（「定義ファイル」と名付けます\n                \n                定義ファイルの記述\n                定義ファイルは、PHPのファイルにします。したがって、PHPの処理が可能なサーバーに配置しないといけません。定義ファイルでは、以下のように、INTER-Mediator.phpを読み込み、IM_Entry関数をコールします。この関数の引数の指定方法は、後で記述します。サンプルで言えば、sample_form_FMS_include.phpやsample_form_MySQL_include.phpなどのファイルが、定義ファイルに相当します。定義ファイルに記述できる内容はこちら のページにまとめてあります。定義ファイルについては、『定義ファイルの詳細』もご覧ください。\n                &lt;?php\nrequire_once ('INTER-Mediator/INTER-Mediator.php');\nIM_Entry( $tableDefs, $optionDefs, $dbDefs, true );\n?&gt;\n                \n                ページファイルの記述\n                ページファイルでは、定義ファイルを、ヘッダエリアのscriptタグで読み込みます。定義ファイルは、JavaScriptのソースを返します。サンプルで言えば、sample_form_FMS.htmlや、sample_form_MySQL.htmlのファイルが、ページファイルに相当します。\n                &lt;html&gt;\n&lt;head&gt;\n&lt;script src=\"sample_form_MySQL_include.php\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n                :                \n&lt;td&gt;&lt;input type=\"text\" data-im=\"contact@datetime\"/&gt;&lt;/td&gt;\n                \n                以上の準備をすれば、ページファイル内のタグのdata-im属性に記述を加えることで、そのタグの値や他の属性に対してデータベースから取り出したデータが設定されることになります。属性の値は「contact@datetime」といった記述を行います。この記述を「ターゲット指定」と呼ぶ事にします。また、ターゲット指定のあるタグのことを「リンクノード」と呼びます。ターゲット指定の詳細は、後で説明をします。\n                ページの表示\n                以上のような準備をした上で、ブラウザより、ページファイルにアクセスをします。そうすれば、リンクノードのターゲット指定や、定義ファイルでの指定に基づいて、データベースのデータを取り込んでページを構成します。データベースの内容を表示しますが、複数のレコードがあれば繰り返して一覧表示などを行います。\n            \n            \n                INTER-MediatorによるWebページ生成\n                INTER-Mediatorは、WebページのDOM構造をたどり、データベースとリンクするノード（以後「リンクノード」と記述）をさがします。そして、そのリンクノードの上位のノードをたどり、「エンクロージャ」と「リピータ」となるノードを探します。リピータ自身あるいはリピータに含まれるリンクノードをすべて集めてデータベースにアクセスします。そして、レコードの数だけリピータを繰り返して、データベースの内容をページに表示します。\n                リンクノードでのターゲット指定\n                \n                    任意の要素をリンクノードにすることができます。\n                    data-im属性に「table@field@target」の記述で記載されいているものをリンクノードとみなします。現在はこの記述方法が推奨されます。\n                    複数の設定を行う場合、値には「table@field@target table@field@target...」のように空白で区切って記述します。\n                \n                ターゲット指定について\n                「table@field@target」がひとまとまりのターゲット指定となります。\n                \n                    tableはテーブル名を記述します。IM_Entry関数の第一引数に指定した配列のname属性の値を記述できます。\n                    fieldはフィールド名を指定します。IM_Entry関数の第一引数に指定した配列の中で、name属性に対応したテーブルアクセスの中にフィールドが含まれていれば、そのフィールドの値を利用して、リンクノードの値を変更あるいは設定します。\n                    targetはノードのどの属性にフィールド値を差し込むかを指定します。\n                \n                targetの指定は以下のようなルールになります。\n                \n                    省略すると、ノードの値として設定します。\n                    「innerHTML」の場合は、ノードのinnerHTML属性にフィールドの値を設定します。\n                    「nodeText」の場合はテキストノードを作成して子ノードとして追加します。\n                    「style.STYLENAME」の場合は、STYLENAMEで指定したスタイルに値として追加します。たとえば、「style.backgroundColor」は背景色のスタイル属性に値を指定します。\n                    targetの最初の文字が「#」の場合、innerHTMLないしは属性を指定していれば、既存のノードのデータに追加します。\n                    targetの最初の文字が「$」の場合、既存のノードのデータに含まれる$の部分を、データベースのフィールドの値に置き換えます。\n                \n                エンクロージャとリピータ\n                エンクロージャとリピータとなり得るノードの組み合わせを以下の表に示します。\n                \n                    \n                        \n                            \n                                形態\n                                Enclosure\n                                Repeater\n                                Linked Element\n                            \n                        \n                        \n                            \n                                表\n                                TBODY\n                                TR\n                                any elements\n                            \n                            \n                                番号リスト\n                                OL\n                                LI\n                                LI itself or inside of LI elements\n                            \n                            \n                                箇条書き\n                                UL\n                                LI\n                                LI itself or inside of LI elements\n                            \n                            \n                                ポップアップ、リスト\n                                SELECT\n                                OPTION\n                                OPTION itself\n                            \n                            \n                                汎用\n                                data-im-control=\"enclosure\"の指定があるタグ\n                                data-im-control=\"repeater\"の指定があるタグ\n                                any elements\n                            \n                        \n                    \n                \n                テーブルの場合で説明します。たとえば、テーブルのあるセル、つまりTDタグで囲まれた中に、DIVタグ等で記述されたリンクノードがあったとします。そのリンクノードから上位のノードにたどって、TRをリピータとします。TRの1つ上位のノードはTBODYに必ずなります。そのTBODYがエンクロージャとなります。リンクノードに記述された情報からテーブルがわかり、そのテーブルへアクセスします。そして、レコードの値をリンクノードの定義に従って、ノードに反映されます。もし、レコードが複数あれば、リピータを複製して、その複製した一連のノードに対してリンクノードの処理を行います。ページファイルを作るときは、通常、TRタグによる要素が1つのテーブルを作りますが、レコードの数だけ行数が増えるということになります。なお、リピータとなるTRタグの要素は複数個あってもかまいません。レコードの数だけ複数のTRのセットが複製されて、データの反映が行われます。\n                Ver.5.3-devの段階で、任意のタグについて、data-im-control属性を指定することで、エンクロージャーやリピーターになることできるように機能を拡張しました。つまり、TBOD/TR、OL/LI、UL/LI、SELECT/OPTIONについては、属性の指定がなく、リンクノードが含まれていればエンクロージャー／リピーターとして機能します。それ以外のタグの組み合わせについては、data-im-control属性を指定します。なお、エンクロージャーの直下の子要素としてリピーターを記述する必要があります。\n                レコードがない場合の表示\n                レコードがあれば、リピーターを複製していくつかのオブジェクトがページに見えますが、そのままだと、レコードがない場合、リピーターが全くない状態になってしまいます。そこで、リピーターの1つのdata-im-control属性を「noresult」にするか、あるいはclass属性を「_im_for_noresult_」とします。すると、このリピータはレコードが存在すれば単に消しさられますが、レコードがないときにはこのリピータが1つだけエンクロージャーの中に配置されます。「レコードがありません」などの記述をこの方法で組み込めます。\n                エンクロージャやリピーターの動作をキャンセルする\n                リンクノードを含むテーブルは、自動的に展開してしまいます。その展開をさせないようにするには、data-im-control属性の値を「ignore_enc_rep」とします。たとえば、1つのテーブルの中に複数のコンテキストからのフィールドを展開したい場合は、次のように記述して、TRをリピータとして認識しないようにします。\n                &lt;table&gt;\n&lt;tr data-im-control=\"ignore_enc_rep\"&gt;\n    &lt;td&gt;\n        &lt;span data-im-control=\"enclosure\"&gt;\n            &lt;span data-im-control=\"repeater\"&gt;\n                &lt;input data-im=\"context1@field1\" /&gt;\n            &lt;/span&gt;\n        &lt;/span&gt;\n    &lt;/td&gt; \n&lt;/tr&gt;\n&lt;tr data-im-control=\"ignore_enc_rep\"&gt;\n    &lt;td&gt;\n        &lt;span data-im-control=\"enclosure\"&gt;\n            &lt;span data-im-control=\"repeater\"&gt;\n                &lt;input data-im=\"context2@field2\" /&gt;\n            &lt;/span&gt;\n        &lt;/span&gt;\n    &lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n\n                \n                特殊なリピーター\n                data-im-control属性が「header」「separator」「footer」のタグ要素も指定できます。headerに続いて、レコードの数だけリピーターが繰り返されますが、リピーターの間にはseprartorのタグ要素が付加され、最後にfooterのタグ要素が表示されます。\n                更新しないHTML要素\n                HTMLのフォーム要素では、ターゲット指定があれば、フィールドの値を表示するとともに、通常はその値を変更すると、変更結果をデータベースに更新して上書きします。しかしながら、その要素にdata-im-control=\"unbind\"という属性を記述すれば、フィールドの値は表示しますが、更新は行いません。データベースの中身を要素に反映させたいけど、後の処理は独自にJavaScript等で記述したいときにこの方法が使えます。\n            \n            \n                検索や並べ替えの動作と指定\n                INTER-Mediatorは、検索に関して以下の3つの設定個所があります。あるいは、以下のような検索条件が付与されて、データベースの読み出しが行われます。\n                \n                    定義ファイルのコンテキストの中のqueryの設定\n                    INTERMediatorオブジェクトのadditionalConditionプロパティ（JavaScript）\n                    リレーションによって決まる外部キーと対応キーとの対応（定義ファイルのコンテキストの中のrelationの設定）\n                \n                定義ファイルのqueryでの設定は、「常に適用されたい検索条件」を与えるのに便利です。たとえば、あるフィールドの値が「3」のものだけをいつも選択するとか、消し込みのフィールドがあって消し込まれていないレコードだけをとってくるというような場合です。\n                一方、ユーザが入力した検索条件のようなデータは、INTERMediatorオブジェクトのadditionalConditionプロパティを使って指定ができます。テキストフィールドに入力したテキストやあるいは計算結果などを検索条件に与えたい場合は、この方法で指定をします。\n                そして、リレーションは、エンクロージャーとリピーターによる展開中に、さらに内包するエンクロージャーとリピーターが見つかったとき、内側のコンテキストのrelation設定を参照して、外側のレコードに対応した、つまり関連のあるレコードを取り出すための条件を与えます。\n                これら3つの条件は、無条件にANDで合成されます。\n                コンテキストのqueryの指定方法\n                定義ファイルのコンテキストのqueryは、キーとして、field、operator、valueを持つ配列を指定します。その指定を複数できるので、結果として、queryキーに対する値は配列の配列となります。\n                PDO対応のデータベースアクセスクラスを利用すると、単に「field operator 'value'」という形式での式が構築されます。値についてはquoteメソッドで処理をしてあります。従って、array('field'=&gt;'age', 'operator'=&gt;'&gt;', 'value'=&gt;'19') のような指定が一例です。文字列のワイルドカードを使う場合には、データベースエンジンに従った記述が必要です。たとえば、MySQLで前方一致させるには、array('field'=&gt;'name','operator'=&gt;'LIKE', 'value'=&gt;'%田太郎') のような配列を指定します。operatorを省略すると、= とみなします。\n                'field' の値が '__operation__' の項目があれば、そこで区切りを入れます。そして区切りで分割したそれぞれについて、AND条件が適用された式が作られ、区切りで分割された固まりについてはOR演算となります。また、'field' の値が'__operation__' の項目の 'operator' が 'ex'なら、ORとANDを入れ替えます。'field' の値が'__operation__' の項目はいくつあってもかまいません。\n                'query' =&gt; array(\n&nbsp;&nbsp;&nbsp;&nbsp;array( 'field'=&gt;'age', 'operator'=&gt;'&gt;', 'value'=&gt;'19' ),\n&nbsp;&nbsp;&nbsp;&nbsp;array( 'field'=&gt;'year', 'operator'=&gt;'&gt;', 'value'=&gt;'1980' ))\n生成される条件文：age &gt; '19' AND year &gt; '1980'\n\n                \n                'query' =&gt; array(\n&nbsp;&nbsp;&nbsp;&nbsp;array( 'field'=&gt;'age', 'operator'=&gt;'&gt;', 'value'=&gt;'19' ),\n&nbsp;&nbsp;&nbsp;&nbsp;array( 'field'=&gt;'year', 'operator'=&gt;'&gt;', 'value'=&gt;'1980' ),\n&nbsp;&nbsp;&nbsp;&nbsp;array( 'field'=&gt;'__operation__' ),\n&nbsp;&nbsp;&nbsp;&nbsp;array( 'field'=&gt;'age', 'operator'=&gt;'&lt;', 'value'=&gt;'39' ),\n&nbsp;&nbsp;&nbsp;&nbsp;array( 'field'=&gt;'year', 'operator'=&gt;'&lt;', 'value'=&gt;'2006' ))\n生成される条件文：(age &gt; '19' AND year &gt; '1980') OR (age &lt; '39' AND year &lt; '2006')\n\n                \n                'query' =&gt; array(\n&nbsp;&nbsp;&nbsp;&nbsp;array( 'field'=&gt;'age', 'operator'=&gt;'&gt;', 'value'=&gt;'19' ),\n&nbsp;&nbsp;&nbsp;&nbsp;array( 'field'=&gt;'year', 'operator'=&gt;'&gt;', 'value'=&gt;'1980' ),\n&nbsp;&nbsp;&nbsp;&nbsp;array( 'field'=&gt;'__operation__', 'operator'=&gt;'ex' ),\n&nbsp;&nbsp;&nbsp;&nbsp;array( 'field'=&gt;'age', 'operator'=&gt;'&lt;', 'value'=&gt;'39' ),\n&nbsp;&nbsp;&nbsp;&nbsp;array( 'field'=&gt;'year', 'operator'=&gt;'&lt;', 'value'=&gt;'2006' ))\n生成される条件文：(age &gt; '19' OR year &gt; '1980') AND (age &lt; '39' OR year &lt;'2006')\n\n                \n                'query' =&gt; array(\n&nbsp;&nbsp;&nbsp;&nbsp;array( 'field'=&gt;'age', 'operator'=&gt;'&gt;', 'value'=&gt;'19' ),\n&nbsp;&nbsp;&nbsp;&nbsp;array( 'field'=&gt;'year', 'operator'=&gt;'&gt;', 'value'=&gt;'1980' ),\n&nbsp;&nbsp;&nbsp;&nbsp;array( 'field'=&gt;'__operation__', 'operator'=&gt;'ex' ))\n生成される条件文：age &gt; '19' OR year &gt; '1980'\n\n                \n                つまり、2つ以上の設定があれば、それらはANDで結ばれます。もし、__operation__の設定があれば、そこを区切りとして1つの塊の中のいくつかの設定はANDで結合され、そして区切り部分にORを入れた条件式になります（論理和標準形）。__operation__の設定にexがあれば、全面的にANDとORが入れ替わります。1つの塊についてはORで結び、その塊をANDで結びます（論理積標準形）。__operation__はいくつあっても構いませんが、そのうち1つでもexがあれば、全面的にAND/ORが入れ替わります。つまり、exはあるかないかだけの設定で、位置は関係ありません。\n                なお、ANDとORの組み合わせしかできないのかと思われるかもしれませんが、すべての論理式が論理和標準形ないしは論理積標準形で表現できるという定理があるので、この仕様ですべての論理式が記述できると言えるかと思われます。ただし、標準形にすると条件式によっては冗長な感じになり、かえって見づらい場合もあるでしょう。その場合は、テーブルをもとにすることだけを考えず、適当な中間段階のビューを作るなどして、効率よく条件設定を行うことも検討してください。\n                FileMaker Serverの場合、FileMaker側の仕様の制限として、検索条件は全部ANDか全部ORかで結ぶしかできません。ANDとORを組み合わせることはできないのです。コンテキストのqueryキーの値、あるいはaddtionalConditionに「array('field'=&gt;'__operation__', 'operator'=&gt;'or')」を加えれば、OR演算を行います。この指定がなければAND演算になります。OR演算を指定した場合、外部キーの検索条件もORになってしまい、リレーションが正確にとれませんので、その点は十分に注意が必要です。\n                INTERMediatorオブジェクトのadditionalConditionプロパティに指定する検索条件\n                JavaScriptのプログラムで、INTERMediator.construct(true) を実行するよりも前に、例えば以下のようなプログラムを実行します。additionalConditionプロパティは配列で、最初のインデックスはコンテキスト名、つまり定義ファイルでのnameキーに対応する値を指定します。ただし、セッタを定義したプロパティであるため、値の設定には、INTERMediatorクラスのaddConditionメソッドを利用します。右辺の条件は、もちろん、該当するコンテキストにしか適用されません。オブジェクトの値については前のqueryについての説明とおおむね共通です。OR条件とAND条件がどちらも出てくるような条件も記述できます。条件が一組の場合はオブジェクトとして記述できます。2つ以上あるときはオブジェクトの配列として記述します。\n                \nINTERMediator.addCondition(コンテキスト名, {field:'age', operator:'&gt;', value: 19});\nINTERMediator.addCondition(コンテキスト名, [\n    {field:'age', operator:'&gt;', value: 19},\n    {field:'year', operator:'&gt;', value: 1999}\n]);\n\n                \n                コンテキストのrelationキーの値\n                こちらもqueryと同様、配列の配列という形式をとります。キーはqueryと違います。外側のエンクロージャー／リピータとその内側のエンクロージャー／リピーターがあるとします。外側はmaster、内側はdetailというコンテキスト名で定義されているとします。\n                array(\n    array(\n        'name' =&gt;'master',\n        'key' =&gt;'id'\n    ),\n    array(\n        'name' =&gt;'detail',\n        'relation' =&gt;array(\n            array( 'foreign-field' =&gt;'master_id','join-field' =&gt;'id', 'operator' =&gt;'=' )\n        )\n    ), ....\n                外側のコンテキストの1レコードを処理すると、その内部にあるエンクロージャー／リピーターが見つかります。そのとき、コンテキスト名がdetailのrelationキーの値を参照します。そして、join-fieldキーについては、外側の1レコードに存在する値を取り出し、foreign-fieldキーの値とoperatorキーの値を使って検索条件を作ります。たとえば、外側のレコードのidフィールドの値が34だった場合、「master_id = '34'」という条件を作成し、AND条件として追加します。relationの配列は配列が複数あってもかまいません。その場合、すべての指定で生成される条件式のANDをとります。\n                なお、join-fieldの指定は必須です。不要と思われるかもしれませんが、必ずしも主キーとリンクしているとは限らないので指定は必須としました。\n                検索結果の並べ替えに関して\n                INTER-Mediatorは、検索結果の並べ替え関して以下の2つの設定個所があります。検索のクエリに対して、並べ替えの順序を決める基準となるフィールドを指定できます。\n                \n                    定義ファイルのコンテキストの中のsortの設定\n                    INTERMediatorオブジェクトのadditionalSortKeyプロパティ（JavaScript）\n                \n                定義ファイルのsortでの設定は、常に適用されるソートキーです。一方、additionalSortKeyプロパティはプログラムで状況に応じて設定されるソートキーです。検索時にはこれらが合成されて、並べ替えを行います。優先順位は、additionalSortKeyプロパティの方が上位になります。また、それぞれの設定の中で、指定した順序で上位の並べ替えフィールドとなります。いずれも、配列の形式で指定をし、fieldとdirectionというキーを指定します。fieldキーに対する値は1つのフィールド名を指定します。directionに対する値はデータベースエンジンに従います。たとえば、MySQLだと、ASCあるいはDESCを指定しますが、FileMaker Serverはascendあるいはdescendを指定します。additionalSortKeyプロパティについては、addtionalConditionプロパティと同様、最初のインデックスはコンテキスト名を指定し、その後にオブジェクトあるいはオブジェクトの配列を指定します。\n            \n            \n                ページ移動ナビゲーションの構築\n                ページ移動のナビゲーションは、ページの中に、idが「IM_NAVIGATOR」のノードがあれば、そのノードの内容を置き換えてナビゲーションを作成します。「IM_NAVIGATOR」のidのノードがない場合には、ナビゲーションは表示されません。通常は、divタグの要素を「&lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;」のように作っておくのがいいでしょう。\n                INTER-Mediator.constructメソッドは、ノードを見つけて自動的にページナビゲーションにしますが、それらの要素に以下のようなクラス設定をしています。つまり、ページで、これらのクラスに対してスタイルシートで定義を行えば、見栄えについては自由に設定ができます。\n                \n                    \n                        \n                            要素名.クラス名\n                            設定先\n                        \n                        \n                            .IM_NAV_panel\n                            ナビゲーションそのもの。つまり、idが「IM_NAVIGATOR」のノードに設定される\n                        \n                        \n                            span.IM_NAV_info\n                            文字情報を表示する部分に設定される\n                        \n                        \n                            span.IM_NAV_button\n                            クリックできるボタンに対して設定される\n                        \n                        \n                            span.IM_NAV_disabled\n                            クリックできないボタンに対して設定される\n                        \n                    \n                \n                ナビゲーション領域の文言等は、INTERMediator.navigationLabelに配列を設定することで、任意に設定できます。配列のインデックスと対応する箇所は以下の表に示します。INTERMediator.navigationLabelに何も設定しない場合には、表の既定値が画面に見えます。\n                \n                    \n                        \n                            インデックス\n                            設定対象\n                            既定値\n                            非表示\n                        \n                        \n                            0\n                            最初のレコードに戻る\n                            &lt;&lt;\n                            インデックス0〜3\n                        \n                        \n                            1\n                            前のページに戻る\n                            &lt;\n                            無関係\n                        \n                        \n                            2\n                            次のページに進む\n                            &gt;\n                            無関係\n                        \n                        \n                            3\n                            最後のレコードに進む\n                            &gt;&gt;\n                            無関係\n                        \n                        \n                            4\n                            レコード番号の直前\n                            レコード番号\n                            インデックス4〜7\n                        \n                        \n                            5\n                            レコード番号の範囲の間の文字列\n                            -\n                            無関係\n                        \n                        \n                            6\n                            レコード番号範囲と全レコード数の間の文字列\n                            /\n                            無関係\n                        \n                        \n                            7\n                            全レコード数の後の文字列\n                            （空文字列）\n                            無関係\n                        \n                        \n                            8\n                            更新ボタンの名称\n                            更新\n                            インデックス8\n                        \n                        \n                            9\n                            レコード作成などのボタンの表示の有無\n                            作成や削除などレコード操作のボタン\n                            インデックス9\n                        \n                        \n                            10\n                            まとめ保存のボタン\n                            保存\n                            インデックス10\n                        \n                        \n                            11\n                            ログアウトボタンの名称\n                            ログアウト\n                            インデックス11\n                        \n                    \n                \n                INTERMediator.navigationLabelに指定する配列は12の要素を指定します。それぞれ、インデックスに要素が対応します。要素がnullだと既定値のままになります。文字列を指定すると、その文字列に置き換わります。インデックスが0、4,、8、9、10、11の要素に関しては、値をfalseにすると「非表示」の列に示したものが非表示になります。たとえば、以下の記述だと、更新ボタンのみが消えて他は既定とおりのものが表示されます。インデックス9の「レコード作成」などのボタンのカスタマイズは、コンテキスト定義にあるbutton-namesキーで行います。\n                INTERMediator.navigationLabel = [null, null, null, null, null, null, null, null, false];\n            \n            \n                HTMLのUIコンポーネントの扱い\n                テキストフィールド\n                INPUTタグ要素のtype属性がtextの場合、ターゲット指定の3つ目の指定は省略できます。その場合、value属性に値が設定されます。テキストを編集すれば、テキストフィールドの内容がデータベースに書き戻されます。書き戻しは、フォーカスを外した時や、あるいは入力してから5秒後に行われます。\n                テキストエリア\n                ターゲット指定の3つ目の指定は省略できます。すると、TEXTAREAタグ要素のテキストとして設定されます。テキストフィールドと同様、テキストを編集すれば、テキストフィールドの内容がデータベースに書き戻されます。書き戻しは、フォーカスを外した時や、あるいは入力してから5秒後に行われます。\n                ポップアップメニュー／リスト\n                SELECTタグの要素自体が値を持つコンポーネントです。SELECTタグ要素のターゲット指定の3つ目の項目を省略すると、SELECT要素の選択値として指定されます。また、OPTIONタグは決められたものでもかまいませんが、データベースからも値を設定できます。このとき、自動的に、SELECT/OPTIONタグがエンクロージャー／リピータとなります。OPTIONタグはSELECTタグ要素の選択値に対応するvalue属性と、実際にメニュー項目として見えるOPTIONタグ要素のテキストの2つの設定が必要になるでしょう。従って、「&lt;option data-im=\"contact_way@id@value contact_way@name\"&gt;&lt;/option&gt;」のようなターゲット指定が2つあるようなタグ要素をSELECTの中に1つだけ作っておき、ターゲット指定の1つ目の名前のコンテキスト定義を定義ファイルに記述しておきます。\n                チェックボックス\n                データベースから読み出された特定のフィールドのデータがチェックボックスのINPUTタグ要素とリンクされている場合、そのタグのvalue属性を調べます。そして、データとvalue属性が一致していればチェックを入れます。データの有無ではなく、valueとの一致を調べます。また、書き戻す場合は、チェックが入ったときはvalue属性の値、チェックがなくなった場合には空文字列を書き戻します。通常、数値フィールドで、1ならチェックあり、それ以外ならチェックなしといったデータの持たせ方をするのが順当でしょう。\n                ラジオボタン\n                ラジオボタンに展開したい場合、同一のターゲット指定のINPUTタグでtype属性が「radio」のものを並べます。すると、name属性を自動的に設定し、複数レコードが繰り返されたときでも、問題なく処理できるようになります。それぞれのINPUTタグ要素のvalue属性はおのおのが自分の値を持ちます。データベースのフィールドの値とvalue属性の値を比べて同一のものが選択されます。\n            \n            \n                入力フォーム型ページの作成\n                アンケートの回答のような、入力フォームがあってその内容に従った新規レコードを作るだけのようなページの作り方をここで説明します。そのようなページを作るのに必要なことは以下の通りです。\n                \n                    HTMLでフォームを作るが、FORMタグは不要。必要なテキストフィールドと、登録ボタンを作成する。ただし、テキストフィールドなどは、1つのエンクロージャにまとめておく。\n                    定義ファイルに、レコードの作成が可能なコンテキストを定義する。\n                    入力フォームにしたいエンクロージャのdata-im-control属性を「post」とする。\n                    HTMLのフォームの入力要素をリンクノードにします。つまり、コンテキストの名前（context）と対応するテーブルのフィールド名（field）に対して、data-im=\"context@field\" をタグの中に記述する。\n                    「登録」ボタンはBUTTONタグで作成し、data-im-control属性に「post」を指定する。ボタン名は任意。\n                \n                登録ボタンは、テーブルのヘッダやフッタに配置することもできます。登録ボタンを押した後の動作については、コンテキストに定義できる「post-」で始まる3つの項目が用意されています。ボタンを何度も押す事を避けるために、ボタンをメッセージで置き換えたり、別のページに移動したり、ページの再描画ができます。コンテキストに指定したバリデーションの設定についても機能します。\n                この機能を使う場合、data-im-control属性に「post」を指定したエンクロージャーの外部にあるエンクロージャーに対しては、普通にページ合成ができるので、データベースアクセスの結果と、入力フォームを混在させることもできます。また、入力フォームの内部のエンクロージャーも同様に通常通り処理されるので、マスターの内容からポップアップを構築する事ができます。\n                登録ボタンをクリックした後に独自のプログラムを追加したい場合は、以下のような記述の関数を定義します。メッセージ表示、ページ再合成、ページ移動が定義されていた場合、それらよりも前に、以下に定義した関数を実行します。processingBeforePostOnlyContextは、データベースへの書き込み前に実施され、返り値がfalseだとデータベース処理を行わず、ページ移動なども行いません。processingAfterPostOnlyContextはデータベース処理後に実行され、返り値は指定しません。\n                INTERMediatorOnPage.processingBeforePostOnlyContext = function(node){\n            // any program here.\n};\nINTERMediatorOnPage.processingAfterPostOnlyContext = function(node){\n// any program here.\n};\n\n                \n            \n            \n                ブラウザのバージョンを調べる仕組み\n                ブラウザのバージョンを調べて、一定のもの以外は表示できないようにしたいと思うこともあります。この機能を、必要に応じて利用できるようにしました。\n                まず、INTER-Mediator.phpと同じディレクトリにある$paramsファイルに、変数名$browserCompatibilityという変数を定義し、配列記述します。配列の記述方法は表に示します。作成例も紹介します。。\n                \n                    \n                        \n                            次元\n                            指定内容\n                            指定する値の例\n                        \n                        \n                            第1次元\n                            ブラウザの種類\n                            msie, firefox, safari, chrome, opera\n                        \n                        \n                            第2次元\n                            配列（OSを示すキー）\n                            mac, win\n                        \n                        \n                            \n                            バージョン記述文字列\n                            3+, 4-\n                        \n                        \n                            第3次元\n                            バージョン記述文字列（第2次元が配列のとき）\n                            3+, 4-\n                        \n                    \n                \n                $browserCompatibility = array(\n    'chrome' =&gt;'1+',\n    'msie' =&gt;'7+',\n    'firefox' =&gt;'2+',\n    'safari' =&gt;array( 'win' =&gt;'4+', 'mac' =&gt;'3+' ),\n    'opera' =&gt;'1+',\n);\n\n                \n                「バージョン記述文字列」は、数字とプラスないしはマイナスで指定します。「3+」は3以上、「3-」は3以下のバージョンで利用できることを示します。プラスあるいはマイナスを付けないと、その数値のバージョンのみです。ブラウザ名やOSは、大文字小文字は関係ありません。\n                前の例だと、Safariのみ、OSごとに分岐しています。WindowsならVer.4以上、MacならVer.3以上は利用可能であることを示しています。\n                ブラウザの互換性をメッセージとして表示する\n                JavaScriptベースで動くINTER-Mediatorにとって、これがいちばん難しい仕事かもしれません。ブラウザによっては、JavaScriptが動かないこともあるかもしれないのです。こうした状況をうまく処理するために、以下のような点を考慮します。\n                \n                    ページファイルの中の、bodyタグ要素の直下あたりに、INTER-Mediatorが一切しない場合のメッセージを付けておく。たとえば、サンプルファイルの「WebSite」のindex.htmlにあるid=nonsupportedmessageのdivタグ要素。INTER-Mediatorの動作が成功すれば、このノードを削除するか表示しないようにする。これにより、JavaScriptが一切動かない状態でも、何らかのメッセージが見えるようになる。\n                    ページファイルの構築を以下のようなプログラムにする。INTERMediatorCheckBrowser関数で前に説明した$paramsファイルの変数の定義に従って、ブラウザの互換性をチェックする。もし、対応でないならfalseを返すので、ページ構築はしない。また、その場合は、body要素の中身をいちど全部クリアして、メッセージだけを表示する。もし、対応しているならnodeで示したノードを削除する。nodeはnullあるいは未指定でも構わない。\n                \n                上記の2つのうち、一方だけでもかまいませんし、両方をやってもかまいません。また、チェックは不要ということなら、単にINTERMediator.construct(true);を呼び出すだけでもいいでしょう。\n                &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta http-equiv=\"content-type\" content=\"text/html;charset=UTF-8\"/&gt;\n        &lt;title&gt;Page Title&lt;/title&gt;\n        &lt;script type=\"text/javascript\" src=\"context.php\"&gt;&lt;/script&gt;\n        &lt;script type=\"text/javascript\"&gt;\n            INTERMediatorOnPage.doAfterConstruct = function () {\n                var contentNode = document.getElementById('container');\n                contentNode.style.display = \"block\" \n            }\n        &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"nonsupportmessage\" style=\"background-color:#333333\"&gt;\n            &lt;div style=\"text-align:center;color:yellow\"&gt;\n                If you see this, you must use any unsupported web browser. Or constructing the page.\n            &lt;/div&gt;\n            &lt;div style=\"text-align:center;color:yellow\"&gt;\n                この表示が見えている場合、描画処理中です。しばらくお待ちください。長時間見えている場合は、非対応ブラウザで参照しています。\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div id=\"container\" style=\"display: none\"&gt;\n            // ページコンテンツ\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\n                \n            \n        "
    },
    {
        "id": 16,
        "parent": "/ja/for-developers/",
        "path": "/ja/for-developers/reference.html",
        "title": "定義ファイルの記述方法",
        "breadcrumb": "定義ファイルの記述方法",
        "body": "\n        \n            はじめに\n            \n                定義ファイルに記述するIM_Entry関数の引数に、データベースに関する情報を与えておきます。4つの引数があり、うち3つは配列を指定します。配列の内容を記載します。以下の表で、次元の列にキーワードがあれば、「'キーワード'\n                =&gt; '値' 」で該当する値を与えます。次元が「（なし）」というのは、その次元では、単に要素が並ぶということを意味します。サンプルファイルの例などを見ながら解読してください。\n        \n        \n            第1引数、テーブルとそれに関連した属性\n            \n                テーブルと、テーブル間を関連づけるフィールドを指定します。この引数の第2次元にまとめられた1つの配列の設定を「コンテキスト定義」と呼ぶことにします。つまり、name、keyなどのキーを持った連想配列の1つ1つがコンテキスト定義です。もちろん、コンテキスト定義は複数を定義することが可能です。ここでのnameが、ターゲット指定のテーブル名で使用します。テーブル間の結合における相手のテーブル名がないと思われるかもしれませんが、相手のテーブル名は、ページファイル側の記述で自動的に決まってきます。\n            \n                \n                    [第1引数, コンテキスト定義]\n                    コンテキスト名とエンティティ情報\n                \n                \n                    \n                    \n                        キー\n                        値\n                    \n                    \n                    \n                    \n                        'name'\n                        \n                            テーブル名[必須]。'view'がなければすべての処理を適用する「テーブル名」、'view'があれば書き込みや更新処理のときの「テーブル名」\n                        \n                    \n                    \n                        'table'\n                        \n                            指定すると更新時の「テーブル名」に使用される。指定しないと、nameで指定した名前のテーブルに書き込む\n                        \n                    \n                    \n                        'view'\n                        \n                            指定すると読み込みのときの「テーブル名」に使用される。指定しないと、nameで指定した名前のテーブルから読み込む\n                        \n                    \n                    \n                        'count'\n                        \n                            通常はレコード数のカウントをviewキーで指定したエンティティに対して行うが、この定義を追加すると個数を求めるときだけviewの代わりにcountで指定したエンティティを使用する。ビューの応答が遅い場合、同一条件で結果が得られるテーブルを指定できる場合にはパフォーマンス向上が期待できる\n                        \n                    \n                    \n                        'source'\n                        \n                            1ページに複数のコンテキストが展開されている時、あるコンテキストでのレコード作成や削除結果を、同一のテーブルから構成された別のコンテキストにも反映させるための設定。この名前が同じコンテキスト群では、レコードの作成や削除結果が同期される。指定がなければ、table、view、nameの順にさかのぼって設定を得る。ビューをviewキーで指定したときにその主要テーブルを指定するような場合に使用する。\n                        \n                    \n                    \n                        'key'\n                        \n                            レコードを特定するためのキーフィールドの名前を指定する。表示のみの場合には不要だが、更新処理にはこのフィールドは必要。単一のフィールドの指定しかできない。FileMaker\n                            Serverでは「-recid」と指定することで、システムが管理するレコード識別のための値を利用できる。\n                        \n                    \n                    \n                        'sequence'\n                        \n                            PostgreSQLにおいて、レコード追加を行うためには、シーケンスを利用してキーフィールドに連番を設定する必要がある。そのシーケンス名をここで指定をする。\n                        \n                    \n                    \n                        'cache'\n                        \n                            trueを指定するとキャッシュが機能する。同一ページ内で、１つのコンテキストを複数箇所で利用する場合、それぞれが同一の検索結果の場合に利用できる。例えば、ポップアップメニューの選択など。\n                        \n                    \n                    \n                        'data'\n                        \n                            読み込み時のみ、サーバーへのデータ処理は行わず、この値がそのままデータベースから得られたものとしてペー上に展開する。データ形式は、1レコードを示す連想配列を、さらに配列に含めたもの。編集可能なコンテキストでは利用しないのが原則とする。\n                        \n                    \n                    \n                        'appending-data'\n                        \n                            読み込み時に、サーバーへクエリー結果の末尾に、さらにこの値を追加する。データ形式は、1レコードを示す連想配列を、さらに配列に含めたもの。\n                        \n                    \n                    \n                        'ignoring-field'\n                        \n                           フィールド名の文字列の配列を値に指定する。デバッグモード=2で稼働させると、検索結果に要求されたフィールド（つまりページファイルに展開した計算フィールド以外のフィールド）が存在しない場合はエラーとして処理を停止させる。ここに名前を設定すれば、検索結果にないフィールドがあってもエラーを出さない。extending-classで全く異なるフィールド構成のデータを生成している場合、デバッグモードでのエラーを回避できる。\n                        \n                    \n                    \n                        'numeric-fields'\n                        \n                           数値型として見做して欲しいフィールドについて、フィールド名の文字列の配列を値に指定する。INTER-Mediatorはスキーマ情報から型を自動的に取得するが、SQLiteでViewに記述した計算結果のフィールドについては型が得られない。そのフィールドを数値として解釈させるために利用する。そうしないと、検索条件に応じた検索がうまくできない。\n                           \n                    \n                    \n                \n                \n                    [第1引数, コンテキスト定義]\n                    レコード繰り返しとページング\n                \n                \n                    \n                    \n                        キー\n                        値\n                    \n                    \n                    \n                    \n                        'records'\n                        \n                            1ページに何レコード分表示するか。最初のテーブルの設定のみ有効。未指定の場合は100000000、つまり十分に大きな値\n                        \n                    \n                    \n                        'maxrecords'\n                        \n                            1ページ内の最大表示レコード数。INTERMediator.pagedSizeの値を調整することで1ページ内の表示レコード数を変更できるが、その際にこのキーで指定した値を超えて表示することはできない。未指定の場合は100000000、つまり十分に大きな値\n                        \n                    \n                    \n                        'paging'\n                        recordsで指定したレコード数ずつ表示するとき、前後のページに移動するナビゲーションを表示する場合、trueを指定する。既定値はfalse\n                    \n                    \n                        'soft-delete'\n                        \n                            コンテキストに対する削除において、論理削除を行う。検索時には、論理的に削除されたレコードは検索対象外とする。値をtrueにすると、レコード削除時に、deleteフィールドに1を代入する。deleteフィールドのタイプは数値を想定している。delete以外のフィールドを利用したい場合には、値をフィールド名にする。\n                        \n                    \n                    \n                \n                \n                    [第1引数, コンテキスト定義]\n                    リレーションシップ、検索条件、並べ替え、初期値\n                \n                \n                    \n                    \n                        配列指定\n                        値\n                    \n                    \n                        キー\n                        インデックス\n                        下位のキー\n                    \n                    \n                    \n                    \n                        'relation'\n                        (なし)\n                        'foreign-key'\n                        \n                            リレーションの外部キーフィールド名（この設定は事実上データ取り出し時のみ有効）\n                        \n                    \n                    \n                        'join-field'\n                        \n                            外部キーフィールドに対応するテーブル側の関連フィールド\n                        \n                    \n                    \n                        'operator'\n                        \n                            外部キーフィールドと対応するフィールドの比較演算子\n                        \n                    \n                    \n                        'portal'\n                        \n                            FileMaker Serverを利用しているときに、このコンテキストのデータを、親コンテキストのレイアウト上にあるポータルから取得する場合にtrueを値に指定する\n                        \n                    \n                    \n                        'query'\n                        (なし)\n                        'field'\n                        検索条件のフィールド名（この設定はデータ取り出し時のみ有効）\n                    \n                    \n                        'value'\n                        検索値\n                    \n                    \n                        'operator'\n                        検索値の解釈\n                    \n                    \n                        'sort'\n                        (なし)\n                        'field'\n                        ソート条件のフィールド名（この設定はデータ取り出し時のみ有効）\n                    \n                    \n                        'direction'\n                        昇順か降順か\n                    \n                    \n                        'default-values'\n                        (なし)\n                        'field'\n                        新規レコード作成時、およびレコードコピー時の初期値指定のフィールド名\n                    \n                    \n                        'value'\n                        初期値\n                    \n                    \n                        'portals'\n                        \n                            FileMaker Data APIを利用しているときに、コンテキストに含まれるポータル名を配列で指定する。なくても動作するが、その場合ポータル名の取得のためのアクセスが発生し、パフォーマンスに少し影響する。\n                        \n                    \n                    \n                \n                \n                    [第1引数, コンテキスト定義]\n                    計算プロパティ\n                \n                \n                    \n                    \n                        配列指定\n                        値\n                    \n                    \n                        キー\n                        インデックス\n                        下位のキー\n                    \n                    \n                    \n                    \n                        'calculation'\n                        (なし)\n                        'field'\n                        計算結果を表示するリンクノードのターゲット指定。コンテキスト名は現在のコンテキスト名を使うため指定しない。属性やスタイル等の指定は可能\n                    \n                    \n                        'expression'\n                        計算式。同一コンテキストのフィールド参照はフィールド名のみ記述する。他のコンテキストのフィールド参照は「コンテキスト名@フィールド名」の形式で記述する\n                        \n                    \n                    \n                \n                \n                    [第1引数, コンテキスト定義]\n                    Post Onlyモードの動作定義\n                \n                \n                    \n                    \n                        キー\n                        値\n                    \n                    \n                    \n                    \n                        'post-reconstruct'\n                        \n                            trueなら、入力型フォームにおいて、登録ボタンを押した後にページの再合成を行う。post-dismiss-messageが指定されていれば、4秒後待って再合成する。falseあるいは指定なしなら何もしない\n                        \n                    \n                    \n                        'post-dismiss-message'\n                        \n                            入力型フォームにおいて、登録ボタンを押した後に、ボタンを消してここに記述したメッセージの文字列を表示する。文字列はSPANタグでclass属性が「IM_POSTMESSAGE」となる。\n                        \n                    \n                    \n                        'post-move-url'\n                        \n                            入力型フォームにおいて、登録ボタンを押した後に、ここで指定したURLにページを移動させる。指定しない場合にはページ移動はない。post-dismiss-messageが指定されていれば、4秒後に移動する\n                        \n                    \n                    \n                \n                \n                    [第1引数, コンテキスト定義]\n                    ユーザーインタフェース生成\n                \n                \n                    \n                    \n                        配列指定\n                        値\n                    \n                    \n                        キー\n                        下位のキー\n                    \n                    \n                    \n                    \n                        'repeat-control'\n                        \n                        \n                            繰り返し表示する部分に、レコードの追加や削除の機能を追加する。値には以下の文字列を与える。confirmがあれば確認ダイアログが表示される。複数を指定する場合はそれぞれの文字列を空白で区切って書き並べる。\n\n使用できるキーワード動作説明\ninsertレコード追加ボタンレコード追加ボタンを、レコードリストの直下、あるいは1レコード単位の場合はページネーションバーに表示する\ninsert-topレコード追加ボタン同上だが、レコードリストの直上にボタンが表示される\nconfirm-insertレコード追加ボタンボタンを押すと、本当にレコード作成して良いかをダイアログボックスでたずねる\nconfirm-insert-topレコード追加ボタン同上、かつボタンはリストの場合その直上に配置\ndeleteレコード削除ボタンレコード削除ボタンをリピータの最後の要素に追加する\nconfirm-deleteレコード削除ボタンボタンを押すと、本当にレコード削除して良いかをダイアログボックスでたずねる\ncopyレコード複製ボタンレコード複製ボタンをリピータの最後の要素に追加する\nconfirm-copyレコード複製ボタンボタンを押すと、本当にレコード複製して良いかをダイアログボックスでたずねる\ncopy-xxxxレコード複製ボタンxxxxには関連レコードのコンテキストを指定する。これにより、関連レコード群も外部キーを考慮して複製される\nconfirm-copy-xxxxレコード複製ボタンボタンを押すと、本当にレコード複製して良いかをダイアログボックスでたずねる\n\n                        \n                    \n                    \n                        'navi-control'\n                        \n                        \n                            2つのコンテキストを利用して、マスター/ディテール形式のユーザインタフェースを構築する。マスター側は複数のレコードを表示し、それぞれ対応するディテール側を表示するボタンが追加される。ディテール側では1レコードを表示する。2つのコンテキストは、原則として同一のテーブルを元にした異なるコンテキストである必要がある。FileMaker Serverを利用する時には、detailを指定したコンテキストのidキーの値は「-recid」にする必要がある。さらに、コンテキストを次々に移動できるステップ動作をするコンテキストも定義できる。\n\n使用できるキーワード動作説明\nmasterマスター側のコンテキストマスターとディテールを同時に表示\nmaster-hideマスター側のコンテキストディテール側に移動時にマスター側は非表示\nmaster-nonaviマスター側のコンテキストマスターとディテールを同時に表示\nmaster-nonavi-hideマスター側のコンテキストディテール側に移動時にマスター側は非表示\nmaster-fullnaviマスター側のコンテキストマスターとディテールを同時に表示\nmaster-fullnavi-hideマスター側のコンテキストディテール側に移動時にマスター側は非表示\ndetailディテール側のコンテキストdetail-topと同じ動作\ndetail-topディテール側のコンテキストマスターに戻るボタンを上部に表示（マスター側がmaster-hide）\ndetail-bottomディテール側のコンテキストマスターに戻るボタンを下部に表示（マスター側がmaster-hide）\ndetail-updateディテール側のコンテキストdetail-topと同じ動作に加えて、マスター側を更新\nstepステップ動作の1つのコンテキストページ表示時に見えている。あるコンテキストでタップすると、定義ファイル上での順序で次のstep*が指定されたコンテキストを表示するのが原則だが、before-move-nextstepでその挙動を変更できる。モバイルデバイスの場合はセル自体がタップに対応する。デスクトップ機での表示では、「詳細」ボタンにより、次のページに移動する\nstep-hideステップ動作の1つのコンテキストページ表示時には見えていない（他はstepと同様）\nstep-nonaviステップ動作の1つのコンテキストページ表示時に見えている。自動化のナビゲーションは表示しない、背景応答もしない、デスクトップとモバイルは同一動作。タップ時の挙動は、before-move-nextstepでのメソッドで記述する必要がある。\nstep-nonavi-hideステップ動作の1つのコンテキストページ表示時には見えていない（他はstep-nonaviと同様）\nstep-fullnaviステップ動作の1つのコンテキストページ表示時に見えている。背景のタップに対応し、加えてデスクトップの場合は次のコンテキストに移動する「詳細」ボタンも表示する。\nstep-fullnavi-hideステップ動作の1つのコンテキストページ表示時には見えていない（他はstep-fullnaviと同様）\n付加文字列適用先意味\n-hideマスターディテール側に切り替えるとマスターは非表示\n-hideステップページ表示時には見えていない\n-nonaviマスター及びステップ自動化のナビゲーションは表示しない、背景応答もしない、デスクトップとモバイルは同一動作。タップ時の挙動は、before-move-nextstepでのメソッドで記述する必要がある。\n-fullnaviマスター及びステップあらゆるナビゲーションを表示し背景応答もする、デスクトップとモバイルは同一動作\n\n                        \n                    \n                    \n                        'navi-title'\n                        \n                        ターゲット指定が「_@navi_title」の要素に、このキーで指定した文字列を設定する。\n                    \n                    \n                        'before-move-nextstep'\n                        \n                        ステップのセルをタップした時に呼び出されるメソッド名。INTERMediatorOnPageオブジェクトに、ここで指定した名前のメソッドを定義する。定義したメソッドでは、タップした先で合成されるコンテキストの検索条件の指定などを行う。通常、タップすると、定義ファイルの次にあるnavi-control=\"step*\"のコンテキストを表示するが、このメソッドで、コンテキスト名（nameキーの値）を返すと、定義ファイルの順序と関係なくそのコンテキストのページを表示する。falseを返すと、ページ移動は発生しない。なお、前のページに戻る動作は、classがIM_Button_StepBackの要素を作れば自動的に行える。例えば、「&lt;span class=\"IM_Button_StepBack\"&gt;◀︎&lt;/span&gt;」をページファイルのページ内に配置する。\n                    \n                    \n                        'just-move-thisstep'\n                        \n                        ステップのエリアを生成した直後、つまりデータベース処理をしてページ合成が終わった直後に呼び出されるメソッド名。INTERMediatorOnPageオブジェクトに、ここで指定した名前のメソッドを定義する\n                    \n                    \n                        'just-leave-thisstep'\n                        \n                        このステップから別のステップに以降する直前に呼び出されるメソッド名。INTERMediatorOnPageオブジェクトに、ここで指定した名前のメソッドを定義する\n                    \n                    \n                        'button-names'\n                        'insert'\n                        repeat-controlに「insert」を指定したときに追加されるボタンのボタン名\n                    \n                    \n                        'delete'\n                        repeat-controlに「delete」を指定したときに追加されるボタンのボタン名\n                    \n                    \n                        'copy'\n                        repeat-controlに「copy」を指定したときに追加されるボタンのボタン名\n                    \n                    \n                        'navi-detail'\n                        navi-controlに「master」あるいは「step」を指定したときに追加されるボタンのボタン名。マスター側に追加されるディテール側へ移動するボタン、あるいは次のステップに移動するためのボタンの名前\n                    \n                    \n                        'navi-back'\n                        navi-controlに「detail」を指定したときに追加されるボタンのボタン名。ディテール側に追加されるマスター側へ移動するボタンの名前\n                    \n                     \n                        'confirm-messages'\n                        'insert'\n                        repeat-controlに「insert-confirm」を指定したときに表示されるダイアログボックス内のメッセージ\n                    \n                    \n                        'delete'\n                        repeat-controlに「delete-confirm」を指定したときに表示されるダイアログボックス内のメッセージ\n                    \n                    \n                        'copy'\n                        repeat-controlに「copy-confirm」を指定したときに表示されるダイアログボックス内のメッセージ\n                    \n                    \n                \n                \n                    [第1引数, コンテキスト定義]\n                    バリデーション\n                \n                \n                    \n                    \n                        配列指定\n                        値\n                    \n                    \n                        キー\n                        インデックス\n                        下位のキー\n                    \n                    \n                    \n                    \n                        'validation'\n                        (なし)\n                        'field'\n                        データ確認を行うフィールド名（バリデーションはVer.2.1以降で実装）\n                    \n                    \n                        'rule'\n                        \n                            確認処理。JavaScriptの式を記述する。コンポーネントの値は変数value、ノードへの参照は変数targetに入っているものとして、式を組み立てることができる。式の結果がtrueならそのまま処理を進めるが、falseならmessageの文字列をダイアログボックスで表示して、コンポーネントの値を元に戻す\n                        \n                    \n                    \n                        'message'\n                        正しくない場合に表示するメッセージ（ruleがfalseのときに表示される）\n                    \n                    \n                        'notify'\n                        \n                            'inline'なら直後、'end-of-sibling'なら兄弟ノードの最後にメッセージのテキストを追加する。このとき、ノードのクラス名は'_im_alertmessage'となる。これ以外の表記あるいは、notifyを省略すると、ダイアログボックスで表示される。\n                        \n                    \n                    \n                \n                \n                    [第1引数, コンテキスト定義]\n                    合成処理やデータベース処理の拡張\n                \n                \n                    \n                    \n                        キー\n                        値\n                    \n                    \n                    \n                    \n                        'post-repeater'\n                        ページ合成時に1つのリピータの処理が終わった後に呼び出される関数名を記述する。その関数自体は、INTERMediatorOnPageオブジェクトのメソッドとして定義する。なお、INTERMediatorOnPage.postRepeater_[コンテキスト名]でメソッドを定義すれば、コンテキスト定義にこのエントリーは不要。\n                    \n                    \n                        'post-enclosure'\n                        ページ合成時に1つのエンクロージャーの処理が終わった後に呼び出される関数名を記述する。その関数自体は、INTERMediatorOnPageオブジェクトのメソッドとして定義する。なお、INTERMediatorOnPage.postEnclosure_[コンテキスト名]でメソッドを定義すれば、コンテキスト定義にこのエントリーは不要。\n                    \n                    \n                        'extending-class'\n                        データアクセス時にサーバー側で処理プログラムを追加するクラスのクラス名を指定する\n                    \n                    \n                \n                \n                    [第1引数, コンテキスト定義]\n                    スクリプト実行\n                \n                \n                    \n                    \n                        配列指定\n                        値\n                    \n                    \n                        キー\n                        インデックス\n                        下位のキー\n                    \n                    \n                    \n                    \n                        'script'\n                        (なし)\n                        'db-operation'\n                        \n                            データベース処理の前後に行う処理の指定。スクリプトを実行する場面で、値は'read', 'update', 'create', 'delete'のいずれか\n                        \n                    \n                    \n                        'situation'\n                        \n                            スクリプトの実行を行うタイミングで、'pre', 'presort', 'post'のいずれかの値を取る（'presort'はFileMaker Serverのみサポート）\n                        \n                    \n                    \n                        'definition'\n                        \n                            MySQLは指定したSQLコマンドを実行、FileMaker Serverはスクリプト名を指定。（FileMaker\n                            Serverでforeign-keyの指定されたテーブルの読み込み時の設定はすべて無視される）\n                        \n                    \n                    \n                        'parameter'\n                        FileMaker Serverを利用しているときにスクリプト引数を指定する。バージョン5.4以降で利用可能。\n                    \n                    \n                \n                \n                    [第1引数, コンテキスト定義]\n                    FileMakerでのグローバル変数設定\n                \n                \n                    \n                    \n                        配列指定\n                        値\n                    \n                    \n                        キー\n                        インデックス\n                        下位のキー\n                    \n                    \n                    \n                    \n                        'global'\n                        (なし)\n                        'db-operation'\n                        \n                            設定する場面で、値は 'read', 'update', 'create', 'delete'のいずれか（グローバルの設定はFileMaker Serverのみ）\n                        \n                    \n                    \n                        'field'\n                        グローバルフィールド名\n                    \n                    \n                        'value'\n                        グローバルフィールドに与える値\n                    \n                    \n                \n                \n                    [第1引数, コンテキスト定義]\n                    認証・認可とセキュリティ\n                \n                設定情報については、こちらのページにまとめました。\n                \n                    [第1引数, コンテキスト定義]\n                    ファイルアップロード\n                \n                \n                    \n                    \n                        配列指定\n                        値\n                    \n                    \n                        キー\n                        インデックス\n                        下位のキー\n                    \n                    \n                    \n                    \n                        'file-upload'\n                        （なし）\n                        'field'\n                        コンテキスト内のここで指定したフィールドに対してファイルアップロードのコンポーネントが設定されている場合\n                    \n                    \n                        'context'\n                        \n                            この指定があると、指定したコンテキストのpathフィールドにファイルパスを値として指定する新規レコードを作成する。こちらのコンテキストとのリレーションが設定されていれば正しく外部キーが設定される\n                        \n                    \n                    \n                        'container'\n                        アップロードしたファイルの置き場所を指定する。指定可能なキーワードは、\"FileSystem\"、\"FileMakerContainer\"、\"S3\"、\"Dropbox\"、\"FileURL\"で、指定なしの場合は\"FileSystem\"が利用される。過去との互換性のために、値がTRUEの場合には\"FileMakerContainer\"が選択される。Amazon S3やDropboxの場合は、params.phpファイルへの設定が必要になります。FileMakerについては、FileMaker Serverのバージョン13以降が必要、かつデータベースのフィールドオプションにおいて［入力値の自動化］オプションをあらかじめ設定しておく必要があります。詳細はファイルのアップロードコンポーネントの「FileMakerのオブジェクトフィールドにファイルをアップロードする」を参照\n                        \n                    \n                    \n                \n                FileSystem, FileURLの場合にparams.phpファイルに指定する変数\n                \n                    \n                    \n                        変数名\n                        既定値\n                        指定内容\n                    \n                    \n                    \n                     \n                        $mediaRootDir\n                        (設定なし)\n                        ファイルを保存するディレクトリ。定義ファイルのoptionにあるmedia-root-dirでも同じ設定にできる。\n                    \n                     \n                        $cacheMediaAccess\n                        false\n                        「定義ファイル?media=」でファイルの内容を取り出すときに、キャッシュされるようにHTTPヘッダをセットする。期限（Expiresヘッダ）は1ヶ月先に固定。\n                    \n                    \n                \n                Amazon S3の場合にparams.phpファイルに指定する変数\n                \n                    \n                    \n                        変数名\n                        既定値\n                        指定内容\n                    \n                    \n                    \n                     \n                        $accessRegion\n                        (設定なし)\n                        接続するAWSのエンドポイントを指定する。東京なら\"ap-northeast-1\"。一覧はこちら\n                    \n                     \n                        $rootBucket\n                        (設定なし)\n                        S3のバケット名\n                    \n                     \n                        $applyingACL\n                        (設定なし)\n                        オブジェクトをPutObjectメソッドで書き込むときに指定するオブジェクトのACL。指定できる値は次の通り：private、public-read、public-read-write、authenticated-read、aws-exec-read、bucket-owner-read、bucket-owner-full-control。例えば、アップロードしたファイルが即座に誰でも参照できるようにした場合はpublic-read、INTER-Mediatorでアクセス権管理をする場合にはbucket-owner-read。\n                    \n                     \n                        $s3AccessProfile\n                        (設定なし)\n                        S3へのアクセスのための認証情報としては、一般にIAMを使ってユーザーを作成し、AmazonS3FullAccessのポリシーをユーザあるいはグループに設定し、そのユーザに対するアクセスキーとシークレットを生成し、それらを利用します。認証情報を記録するために、AWSのクライアントのプロファイルを利用する場合は、ここにプロファイル名を記入します。変数がないあるいはプロファイル名が\"\"など、プロファイル名が指定されていない場合、以下のアクセスキーとシークレットを利用します。このparams.phpファイルにアクセスキーとシークレットを記述する方法については、パブリックなレポジトリではもちろん、共用レポジトリでも問題になるかもしれません。つまり、レポジトリ外にセンシティブな情報を記録する方法として、プロファイルを活用できるようになっています。\n                    \n                     \n                        $s3AccessKey\n                        (設定なし)\n                        $s3AccessProfileを参照してください。アクセスキーを直接指定する場合にはここに指定しますが、こちらの値を使うには、$s3AccessProfileの値を\"\"にします。\n                    \n                     \n                        $s3AccessSecret\n                        (設定なし)\n                        $s3AccessProfileを参照してください。シークレットを直接指定する場合にはここに指定しますが、こちらの値を使うには、$s3AccessProfileの値を\"\"にします。\n                    \n                     \n                        $s3urlCustomize\n                        TRUE\n                        アップロード後にオブジェクトにアクセスするためのURLがS3より返されます。ファイルの読み出しを無制限に行う場合にはそのままのURLをフィールドに保存しますが、INTER-Mediatorのアクセス権設定を有効にするために、MediaAccessクラスを使う場合（「定義ファイル.php?media=URL」でメディア参照ができる仕組み）は、この設定をTRUEにします。すると、S3から得られたURLの冒頭のhttps://をs3://に変えます。変わったURLをそのままフィールドに保存し、mediaパラメータの値として指定すると、S3へはGetObjectメソッドを使って認証アクセスを行うようになります。つまり、INTER-Mediatorでアクセス権の管理を完全に行なっている状態になっています。\n                    \n                   \n                \n                Dropboxの場合にparams.phpファイルに指定する変数\n                \n                    \n                    \n                        変数名\n                        既定値\n                        指定内容\n                    \n                    \n                    \n                     \n                        $dropboxAppKey\n                        (設定なし)\n                        認証のために利用されるAppKey\n                    \n                     \n                        $dropboxAppSecret\n                        (設定なし)\n                        認証のために利用されるAppSecret\n                    \n                     \n                        $dropboxRefreshToken\n                        (設定なし)\n                        リフレッシュトークン（このページに記載の方法で取得できる）\n                    \n                     \n                        $dropboxAccessTokenPath\n                        (設定なし)\n                        アクセストークンを保存するファイルへのパス。このファイルの作成や書き換えができる必要がある。つまり、Webサーバのプロセスのユーザによるアクセス権が必要\n                    \n                     \n                        $rootInDropbox\n                        /\n                        Dropbox内でのファイルの保存場所までのパス。パスを指定する場合、最後は/で終わらないようにする\n                    \n                    \n                \n                \n                    [第1引数, コンテキスト定義]\n                    データベース接続設定\n                \n                \n                    \n                    \n                        キー\n                        値\n                    \n                    \n                    \n                    \n                        'db-class'\n                        \n                            このコンテキストで使うデータアクセスクラスの名前（例：PDO、FileMaker_FX、FileMaker_DataAPI）この指定がなければ、IM_Entry関数の第3引数あるいはparams.phpの値が使われます。以下、'cert-verifying'まで同様\n                        \n                    \n                    \n                        'dsn'\n                        [PDO]このコンテキストで使う接続時に指定するDSN\n                    \n                    \n                        'option'\n                        [PDO]このコンテキストで使うオプション指定。array型で指定\n                    \n                    \n                        'database'\n                        [FileMaker_FX][FileMaker_DataAPI]このコンテキストで使うデータベース名\n                    \n                    \n                        'user'\n                        [PDO][FileMaker_FX][FileMaker_DataAPI]このコンテキストで使うユーザ名\n                    \n                    \n                        'password'\n                        [PDO][FileMaker_FX][FileMaker_DataAPI]このコンテキストで使うパスワード\n                    \n                    \n                        'server'\n                        [FileMaker_FX][FileMaker_DataAPI]このコンテキストで使うサーバーアドレス（例：127.0.0.1）\n                    \n                    \n                        'port'\n                        [FileMaker_FX][FileMaker_DataAPI]このコンテキストで使うサーバーポート（例：80）\n                    \n                    \n                        'protocol'\n                        [FileMaker_FX][FileMaker_DataAPI]このコンテキストで使うサーバーへの接続プロトコル（例：HTTP）\n                    \n                    \n                        'datatype'\n                        [FileMaker_FX]このコンテキストで使うサーバーがサポートするデータ形式（例：FMPro12）\n                    \n                    \n                        'cert-verifying'\n                        [FileMaker_DataAPI]接続時に証明書の検証が必要かどうかを論理値で指定（例：true）。未指定時はtrue\n                    \n                    \n                \n                \n                    [第1引数, コンテキスト定義]\n                    メール送信\n                \n                メール送信については、メール送信(Ver.5)あるいはメール送信(Ver.6)のページに記載しました。\n                Slackによるメッセージングについては、Slackにメッセージを追加するのページに記載しました。\n\n                 \n                    [第1引数, コンテキスト定義]\n                    複雑なSQL文によるビュー生成\n                \n                \n                    \n                    \n                        キー\n                        値\n                    \n                    \n                    \n                    \n                        'aggregation-select'\n                        \n                            PDOのデータベースクラスのみで利用できます。これらの3つの設定と、sort、queryの設定を加えて、集計処理などのSQLを構成できます。このコンテキストは読み出しのみとなります。なお、INTER-Mediatorは内部ではFROMに指定するテーブルやクエリーの情報を得て、数値フィールドの場合とそうでない場合で検索条件の適用方法を変えています。これらのキーでSQLを構築した場合、フィールド情報を得ることが現状ではできないため、検索条件がうまく当たらない可能性があります。その場合、'numeric-fields'キーで数値データのフィールドのフィールド名を与えると正しく検索されます。\n                        \n                    \n                    \n                        'aggregation-from'\n                    \n                    \n                        'aggregation-group-by'\n                    \n                    \n                \n            \n            認証についは別項目「ユーザ認証とアクセス権の動作について」も参照してください。\n            'relation'、'query'、'sort'、'script'については、配列の配列を指定します。サンプルのソース等で具体例を見てください。\n            それぞれのパラメータの解釈は、データベースドライバによって異なる場合があります。\n        \n        \n            第2引数、オプション設定\n            こちらは、「定義ファイルのオプション設定」と呼ぶことにします。該当する設定がparams.phpでも設定できる場合はその変数名も記載しています。その変数名でparams.phpを検索すれば、コメント等で記述例があるはずです。\n            \n                \n                    [第2引数, オプション設定]\n                    各種動作設定\n                \n                \n                    \n                    \n                        キー\n                        値\n                    \n                    \n                    \n                    \n                        'separator'\n                        テーブル名とフィールド名を区切る文字（既定値は「@」）\n                    \n                    \n                        'transaction'\n                        \n                            編集可能コンポーネントの変更時の書き戻しについて、'none'なら行わない、'automatic'ならchangeイベントが発生するたびに書き戻す。省略するとautomaticが指定されたものとみなす\n                        \n                    \n                    \n                        'media-root-dir'\n                        \n                            メディアアクセスに対して定義ファイルにリダイレクトの設定をWebサーバーで行う。そうすれば、この設定に指定したディレクトリにある画像などのメディアファイルを読み出す。\n                        \n                    \n                    \n                        'credit-including'\n                        INTER-Mediatorのクレジットをページ末尾に表示するのが通常の動作であるが、このキーにHTMLのid属性値を指定すると、そのタグ要素の内部の末尾にクレジットを付加する。他に末尾に付与する仕組みを使うような場合の回避策\n                    \n                    \n                \n                \n                    [第2引数, オプション設定]\n                    アプリケーションのロカール\n                \n                \n                    \n                    \n                        キー\n                        値\nparams.phpで変数名\n                    \n                    \n                    \n                    \n                        'app-locale'\n                        アプリケーション全体の言語およびカントリーコード（例えば、en、ja_JP）。これがあれば、ブラウザーのカントリーコードよりも優先される\n$appLocale\n                    \n                    \n                        'app-currency'\n                        通貨に関する国コード（例えば、US、JP）。指定なしの場合、app-localeの指定を利用\n$appCurrency\n                    \n                    \n                \n                \n                    [第2引数, オプション設定]\n                    テーマ\n                \n                \n                    \n                    \n                        キー\n                        値\nparams.phpで変数名\n                    \n                    \n                    \n                    \n                        'theme'\n                        使用するテーマ名。省略するとdefaultを使用。INTER-Mediatorに付属するテーマセットは他に最小限のleast、以前のバージョンの初期設定に近いthosedaysがある\n$themeName\n                    \n                    \n                \n                \n                    [第2引数, オプション設定]\n                    ローカルコンテキストの初期値\n                \n                \n                    \n                    \n                        配列指定\n                        値\nparams.phpで変数名\n                    \n                    \n                        第1次元\n                        第2次元\n                        第3次元\n                    \n                    \n                    \n                    \n                        'local-context'\n                        （なし）\n                        'key'\n                        ローカルコンテキストのキー（_@以降のキーワード）\n$valuesForLocalContext\n                    \n                    \n                        'value'\n                        コンテキストの初期値\n                    \n                    \n                \n                \n                    [第2引数, オプション設定]\n                    エイリアス\n                \n                \n                    \n                    \n                        配列指定\n                        値\n                    \n                    \n                        第1次元\n                        第2次元\n                        第3次元\n                    \n                    \n                    \n                    \n                        'aliases'\n                        エイリアス名\n                        置き換える定義\n                        エイリアスに対応する値。この値は正しい1つのターゲット指定である必要がある。この指定があれば、ターゲット指定の代わりに、エイリアス名をリンクノードに指定できる。\n                    \n                    \n                \n                \n                    [第2引数, オプション設定]\n                    フォーマッター（サーバーサイドでの値変換）\n                \n                \n                    \n                    \n                        配列指定\n                        値\n                    \n                    \n                        第1次元\n                        第2次元\n                        第3次元\n                    \n                    \n                    \n                    \n                        'formatter'\n                        (なし)\n                        'field'\n                        データコンバータを適用するフィールド名\n                    \n                    \n                        'converter-class'\n                        データコンバータクラス名\n                    \n                    \n                        'parameter'\n                        コンバータクラスに与えるパラメータ\n                    \n                    \n                \n                \n                    [第2引数, オプション設定]\n                    ブラウザの判定\n                \n                \n                    \n                    \n                        配列指定\n                        値\nparams.phpで変数名\n                    \n                    \n                        第1次元\n                        第2次元\n                        第3次元\n                    \n                    \n                    \n                    \n                        'browser-compatibility'\n                        (なし)\n                        文字列\n                        キーにブラウザを示す文字列（safari,\n                            msieなど）を指定し、値にはバージョン番号を指定する。バージョン番号の後に+や-をつけて、以上あるいは以下をのバージョンを示すことができる\n                        \n$browserCompatibility\n                    \n                    \n                        配列\n                        要素にはキーにOSを指定し、その要素に前の行に説明のあるバージョン番号とプラス／マイナス記号を指定する。\n                    \n                    \n                \n                \n                    [第2引数, オプション設定]\n                    認証・認可\n                \n                設定情報については、こちらのページにまとめました。\n                \n                    [第2引数, オプション設定]CSVファイル等からのインポート\n                \n                ファイルのインポートを行うユーザーインタフェースは『INTER-MediatorによるWebアプリケーションの概要』にある『入力フォーム型ページの作成』に従ったページを作成してください。その時、ファイルアップロードを受け付ける要素で、deta-im属性を「コンテキスト@_im_csv_upload」にします。@以下は固定のキーワードです。そうすると、CSVファイルの1行ずつをコンテキストに対してレコード追加します。作成方法は、INTER-Mediatorのレポジトリにあるサンプルのうち、samples/Sample_webpage/fileuploadCSV_MySQL.html（定義ファイルは同じフォルダのinclude_MySQL.php）を参考にしてください。\n                \n                    \n                    \n                        配列指定\n                        値\nparams.phpで変数名\n                    \n                    \n                        第1次元\n                        第2次元\n                    \n                    \n                    \n                    \n                        'import'\n                        '1st-line'\n                        指定なし、あるいはtrueなら1行目をフィールド指定行と見なす。フィールド指定行がない場合には、'フィールド1,フィールド2, ....'といった文字列を指定する。フィールド指定行あるいはテキストファイルの1行目で、_ という名前のフィールドの場合はその列のデータは読み込みしない。\n                        $import1stLine\n                    \n                    \n                        'skip-lines'\n                        先頭から指定した数の行数を無視する。指定なしの場合は0と見なす。フィールド指定行は、ここで指定した行数を省いた最初の行と見なす。\n                        $importSkipLines\n                    \n                    \n                        'format'\n                        読み込むファイルのフォーマットとして\"CSV\"あるいは\"TSV\"を指定する。省略すると\"CSV\"\n                        $importFormat\n                    \n                    \n                        'use-replace'\n                        データベースがMySQLの場合、trueにすると、INSERTではなくREPLACEコマンドを利用してファイルの各行のレコードを挿入あるいは更新する。MySQLでない場合は常にINSERTを利用する。省略するとfalseと見なす。\n                        $useReplace\n                    \n                    \n                        'convert-number'\n                        数値変換を行うフィールド名を配列で指定する。\n                        $comvert2Number\n                    \n                    \n                        'convert-date'\n                        日付への変換を行うフィールド名を配列で指定する。\n                        $comvert2Date\n                    \n                    \n                        'convert-datetime'\n                        日付時刻への変換を行うフィールド名を配列で指定する。\n                        $convert2DateTime\n                    \n                    \n                \n                \n                    [第2引数, オプション設定]Pusherの設定\n                \n                Pusher対応はVer.5までです。\n                \n                    \n                    \n                        配列指定\n                        値\nparams.phpで変数名\n                    \n                    \n                        第1次元\n                        第2次元\n                    \n                    \n                    \n                    \n                        'pusher'\n                        'app_id'\n                        Pusherで定義したAppのapp_id\n                        $pusherParameters\n                    \n                    \n                        'key'\n                        Pusherで定義したAppのkey\n                    \n                    \n                        'secret'\n                        Pusherで定義したAppのsecret\n                    \n                    \n                \n                [第2引数, オプション設定]メール送信サーバー\n                メール送信については、メール送信(Ver.5)あるいはメール送信(Ver.6)のページに記載しました。\n                Slackによるメッセージングについては、Slackにメッセージを追加するのページに記載しました。\n            \n            \n                認証についは別項目「ユーザ認証とアクセス権の動作について」も参照してください。\n            \n            \n                browser-compatibilityは、params.phpファイルでも指定できますが、ここに指定をした方が有効になります。この指定に含まれているブラウザで通常処理を行い、含まれていないブラウザでは処理を行わないようにします。\n            \n            \n                以前「trigger」というキーワードを書いていましたが、この設定は不要で、普通にノードに対してJavaScriptの記述をすればいいので、設定としては組み込まないこととします。\n            \n        \n        \n            第3引数、データベースへの接続情報\n            \n                データベースヘの接続情報を設定します。この設定を「定義ファイルのデータベース接続設定」と呼ぶことにします。なお、INTER-Mediator.phpと同じフォルダに入れておく「params.php」でも、データベース接続に関する指定が可能です。ページごとに接続情報が違うなら、この引数に指定してもいいのですが、たくさんのファイルで同じ設定ならparams.phpで指定をしてもいいでしょう。さらに、IM_Entry関数の第一パラーメータで指定する配列のコンテキストに対しても設定できます。params.php内で指定できる変数についてもまとめておきます。なお、必要な情報は、データベースクラスごとに異なります。以下の表には、値を必要とするクラスも記述してあります。\n            \n            \n                \n                    \n                        \n                            インデックス\n                        \n                        \n                            値\n                        \n                        \n                            params.phpで変数名\n                        \n                    \n                    \n                        \n                            'db-class'\n                        \n                        \n                            データアクセスクラスの名前（例：PDO、FileMaker_FX、FileMaker_DataAPI）\n                        \n                        \n                            $dbClass\n                        \n                    \n                    \n                        \n                            'dsn'\n                        \n                        \n                            [PDO]接続時に指定するDSN\n                        \n                        \n                            $dbDSN\n                        \n                    \n                    \n                        \n                            'option'\n                        \n                        \n                            [PDO]オプション指定。array型で指定\n                        \n                        \n                            $dbOption\n                        \n                    \n                    \n                        \n                            'database'\n                        \n                        \n                            [FileMaker_FX][FileMaker_DataAPI]データベース名\n                        \n                        \n                            $dbDatabase\n                        \n                    \n                    \n                        \n                            'user'\n                        \n                        \n                            [PDO][FileMaker_FX][FileMaker_DataAPI]ユーザ名\n                        \n                        \n                            $dbUser\n                        \n                    \n                    \n                        \n                            'password'\n                        \n                        \n                            [PDO][FileMaker_FX][FileMaker_DataAPI]パスワード\n                        \n                        \n                            $dbPassword\n                        \n                    \n                    \n                        \n                            'server'\n                        \n                        \n                            [FileMaker_FX][FileMaker_DataAPI]サーバーアドレス（例：127.0.0.1）\n                        \n                        \n                            $dbServer\n                        \n                    \n                    \n                        \n                            'port'\n                        \n                        \n                            [FileMaker_FX][FileMaker_DataAPI]サーバーポート（例：80）\n                        \n                        \n                            $dbPort\n                        \n                    \n                    \n                        \n                            'protocol'\n                        \n                        \n                            [FileMaker_FX][FileMaker_DataAPI]サーバーへの接続プロトコル（例：HTTP）\n                        \n                        \n                            $dbProtocol\n                        \n                    \n                    \n                        \n                            'datatype'\n                        \n                        \n                            [FileMaker_FX]サーバーがサポートするデータ形式（例：FMPro12）\n                        \n                        \n                            $dbDataType\n                        \n                    \n                    \n                        'cert-verifying'\n                        [FileMaker_DataAPI]接続時に証明書の検証が必要かどうかを論理値で指定（例：true）。未指定時はtrue\n                      $certVerifying\n                    \n                \n            \n        \n        \n            第4引数、デバッグ情報の表示\n            \n                数値かfalseかを指定します。false以外だと、デバッグ情報をページの最初に表示します。1ないしは2を指定でき、2の方が多くの情報を出します。\n            \n        \n    "
    },
    {
        "id": 17,
        "parent": "/ja/for-developers/",
        "path": "/ja/for-developers/migration.html",
        "title": "バージョン移行ガイド",
        "breadcrumb": "バージョン移行ガイド",
        "body": "\n            \n                はじめに\n                INTER-Mediatorもバージョンを重ねてきており、以前の動作を引き継がなくなってしまった箇所が出てきています。Ver.3 (2012/12/10) 以降の大きな変更点、つまりアプリケーション側を書き換えないといけないような変更をここにまとめておきます。\n            \n            \n                Ver.12での変更\n                PHPのサポートバージョンは、Ver.7.4以降とします。PHPのコード上で、型の記述を行いました。そのため、アドバイザクラスなどのINTER-Mediatorにあるクラスを拡張して定義したクラスについては、引数や返り値の型の追加が必要になります。既存のアプリケーションについてはPHPコードの書き換えが必要になります。\n                FileMaker Serverに関しては、ベストエフォートサポートとします。こちらの文書をご覧ください。\n                PDOなどのデータベースクラスでは、setUpdatedRecordメソッドに3つの引数を持たせて、結果の配列の一部だけを変更する機能をサポートしていましたが、Ver.9でsetDataToUpdatedRecordメソッドを定義して、結果の一部だけを変更する機能はそちらを利用するようにしました。setUpdatedRecordメソッドは、配列を1つだけ引数に取り、結果の配列全体を設定するメソッドとしました。しかしながら、Ver.9の段階で、setUpdatedRecordメソッドを3つの引数で呼び出す場合はsetDataToUpdatedRecordメソッドをさらに呼び出して互換性を確保していましたが、その互換性はこのバージョンでなくしました。なお、データベース処理結果の配列を設定するにはsetUpdatedRecordメソッドを使ってもいいのですが、もっと手軽な方法は、doAfterReadFromDBメソッドの返り値として結果の配列を与える方法です。現状を鑑みてメソッドを整理し、余計な仕組みは取り除きました。\n             \n            \n                Ver.10での変更\n                params.phpで定義される変数$sendMailCompatibilityModeの初期値をfalseにしました。元はtrueだったので、何も変数定義をしないと、古いアーキテクチャーでのメール送信になっていました。デフォルトを変えたので、この変数をtrueにしない限りは新しいアーキテクチャーのメール送信機能が利用されます。以前のアプリケーションを移行する場合には気をつけてください。\n                package.jsonから、flatpickrの定義をなくしたので、node_modules内にはflatpickrは存在しません。CDNからダウンロードするのが良いかと思われます（samples/Sample_webpage/flatpickr_MySQL.htmlを参照）。\n             \n            \n                Ver.9での変更\n                LDAP認証、ネイティブ認証をサポートしなくなりました。おそらく、Ver.8で、SAML認証に対応する段階で動いていない状態だったかと思われます。機能を復活するのではなく、LDAPサーバを使いたい場合は、SAMLのIdPがLDAPを使うように設定して利用してください。ネイティブ認証については、需要がなかったということで一旦機能を落とします。なお、SAMLを始めマニュアルテストを行う場合に、その確認記録を残すようにしました。\n                処理中を示す「ギア」のアイコンのページがあり、画面全体をグレーで覆うので操作はできないと思われるかもしれませんが、実際にはできていました。しかしながら、連打するとおかしいとかいうクレームがあり、ギアアイコンが出ている間は操作できないようにしました。若干操作性が悪くなると思われますが、操作できるようにするには、CSSで#_im_progress {pointer-events: none;} を記述してください。\n             \n            \n                Ver.8での変更\n                認証の手法をかなり見直しましたが、従来のアプリケーションは、従来の設定のまま稼働するようになっています。しかしながら、そのままでは認証関連は、以前のバージョンの状態のまま稼働することになります。\n                まず、クレデンシャル情報をhttp-onlyのクッキーに残すようにするには、IM_Entry関数の2つ目のオプション変数等で、/authentication/storingキーに対して、credentialというキーワードを設定してください。\n                パスワードのハッシュをSHA-2ベースにするには、params.phpで定義している$passwordHash変数の値を\"2\"などにしてください。ただし、この編集だけだと、ユーザーごとにSHA-2あるいはSHA-1ベースでのハッシュを利用するため、従来のユーザーはパスワードを変更しても、SHA-1のままです。そこで、$alwaysGenSHA2 = true;とすれば、パスワードを変更する時点でSHA-2ベースのハッシュに切り替えることができます。また、$migrateSHA1to2 = true;とすれば、ログイン時など認証が通った時に、SHA-2ベースのハッシュに置き換えます。なお、従来のSHA-1のハッシュをさらにSHA-2でハッシュした、パスワード変更なくハッシュの形式だけSHA-2になるような移行措置もあります。こちらはパスワードのハッシュをまとめて変更できるような場合に有効であると考えられます。今までSHA-1ベースでの認証を行なってきていて、今後SHA-2ベースでの認証を行う場合は、authuser、issuedhashテーブルのスキーマ変更が必要になります。いくつかのフィールドの文字数を増やす必要があります。dist-docsにあるサンプルのデータベーススキーマを参照して、ご利用されているデータベースに反映させてください。\n                認証に関する情報は、こちらのページをご覧ください。\n           \n           \n                Ver.7での変更\n                inter-mediator-plugin-fileuploadは稼働しないと思われます（Ver.8では認証部分が確実に動かないことに気づき、アナウンスはVer.8の途中となりました）。このプラグインはメンテナンスしないことにしました。ファイルのアップロードは、inter-mediator-plugin-jqueryfileuploadの方を使ってください。\n           \n           \n                Ver.6での変更\n                対応ブラウザなどの変更\n                Internet Explorerはサポートしません。Edgeをご利用ください。PHPはVer.7以降です。\n                ファイル構成の変更\n                Ver.5までは、INTER-Mediatorのフォルダに原則として必要なものが入っていて手軽に始められるということを目指していましたが、Ver.6からは、composerを使ってライブラリを集める方式に変更します。そのため、ダウンロード即動くとはなっていません。詳細な文書を用意しましたので、こちらをご一読ください。\n                サービスサーバーの導入\n                サービスサーバーは、Node.jsベースで動くサーバー側の常駐プロセスです。Ver.6ではサーバー側でのバリデーションの評価のために使用していますが、今後、一般的なWebアプリケーション以外の機能をこの常駐プロセスサーバー上で構築する予定です。ただし、セットアップがやや込み入っているので、前述のセットアップに関する文書をご覧ください。\n                完全非同期化に伴い使用できなくなるメソッド\n                Ver.6.0より前は、一部の通信が同期通信でしたが、完全に非同期通信だけになったことから、同期通信関連のメソッドは非実装の状態にします。以下のメソッドがなくなります。これらのメソッドを呼び出しても該当する処理は行わず、エラーログ（ページ上部に赤いバックグランドで表示される）にメッセージ（例「INTERMediator_DBAdapter.server_access method was discontinued in Ver.6」）が追加されるだけになります。\n\nINTERMediator_DBAdapter.server_access\nINTERMediator_DBAdapter.db_query\nINTERMediator_DBAdapter.db_queryWithAuth\nINTERMediator_DBAdapter.db_update\nINTERMediator_DBAdapter.db_updateWithAuth\nINTERMediator_DBAdapter.db_delete method\nINTERMediator_DBAdapter.db_deleteWithAuth\nINTERMediator_DBAdapter.db_createRecord\nINTERMediator_DBAdapter.db_createRecordWithAuth\nINTERMediator_DBAdapter.db_copy method\nINTERMediator_DBAdapter.db_copyWithAuth\n\n                廃止されるPHPのグローバル変数\n                Ver.6.0ではINTER-Mediator.phpで定義されているグローバル変数（$g_dbInstanceと$g_serverSideCall）が廃止される予定です。\n                データベース関連クラスのクラス名の変更\n                Ver.6のPHPのコードは、namespaceに対応しました。その時に、データベース関連のクラスが多数あったので、階層的なネームスペースに分類しました。その結果、コンテキストのextending-classに記述する名前のクラス（データベースアクセス処理の拡張クラス）について、以下のような変更が必要になります。インタフェース名として利用するものは、→の右側のように名前が変わります。インタフェースで定義されていたメソッドに変更はありません。移行時は、シンプルに、ネームスペースの絶対パスでのクラス名に置き換えれば良いでしょう。\n\nExtending_Interface_BeforeRead → \\INTERMediator\\DB\\Extending\\BeforeRead\nExtending_Interface_AfterRead → \\INTERMediator\\DB\\Extending\\AfterRead\nExtending_Interface_AfterRead_WithNavigation → \\INTERMediator\\DB\\Extending\\AfterRead_WithNavigation\nExtending_Interface_BeforeUpdate → \\INTERMediator\\DB\\Extending\\BeforeUpdate\nExtending_Interface_AfterUpdate → \\INTERMediator\\DB\\Extending\\AfterUpdate\nExtending_Interface_BeforeCreate → \\INTERMediator\\DB\\Extending\\BeforeCreate\nExtending_Interface_AfterCreate → \\INTERMediator\\DB\\Extending\\AfterCreate\nExtending_Interface_BeforeDelete → \\INTERMediator\\DB\\Extending\\BeforeDelete\nExtending_Interface_AfterDelete → \\INTERMediator\\DB\\Extending\\AfterDelete\nExtending_Interface_BeforeCopy → \\INTERMediator\\DB\\Extending\\BeforeCopy\nExtending_Interface_AfterCopy → \\INTERMediator\\DB\\Extending\\AfterCopy\n\nそのほかのデータベース関連クラスも名称変更があります。拡張クラス内で利用するようなクラスについて、ネームスペースの絶対パスを紹介しておきます。\n\nDB_Proxy → \\INTERMediator\\DB\\Proxy\nDB_UseSharedObject → \\INTERMediator\\DB\\UseSharedObject\nDB_PDO → \\INTERMediator\\DB\\PDO\nIM_Util → \\INTERMediator\\IM_Util\n\nデータコンバータークラスも、クラス名は変わっています。DataConverter_AppendPrefixだったものは、\\INTERMediator\\Data_Converter\\AppendPrefixになりました。ただし、通常はクラス名を正確に指定する必要はなく、IM_Entry関数の第２引数（オプション引数）で、formatterキーの後の連想配列で指定することになります。そこでの設定は、従来通りの名前を記述するだけです。つまり、「AppendPrefix」と指定していた箇所は、Ver.6でも「AppendPrefix」で機能します。\nその他\n'data-im-group'属性は、Ver.6以降利用できません。type=radioのINPUTタグについては、同一のdata-im属性のものを自動的にグループ化します。\n            \n            \n                Ver.5.12での変更\n                動作条件の変更\n                INTER-Mediator Ver.5系統ではVer.5.12でPHP 8.0に対応しましたが、PHP 5.2とPHP 5.3はサポート対象外となりました。PHP 5.4以降が必要です（推奨はPHP 7.3以降）。これに伴い、FileMaker Serverについてはバージョン13以前はサポート対象外となりました。\n            \n            \n                Ver.5.8での変更\n                要求されるプライベートキーの鍵長\n                セキュリティ上の理由から、プライベートキーの鍵長が2048bit未満のものを非推奨にしました。ネイティブ認証やLDAP認証を利用している場合には、プライベートキー（params.phpファイル内の変数 $generatedPrivateKey の値）を更新する必要があります。\n            \n            \n                Ver.5.7での変更\n                データベース更新処理の排他制御の変更\n                Ver.5.4で、IMLibUI.lockUIElementなどのメソッドを用意して、独自に排他制御をかけていましたが、ある状況でうまく機能していない場合があることがわかり、データベースへの更新処理をキューを使ってシリアライズするように変更しました。キューを使うことで、キューに登録したタスクは1つ1つが完全に終了するまで、次のタスクは実行できなくなります。データベースへの更新処理をユーザーインタフェースから呼び出すときには、必ずキューを使うので、2つの更新処理が同時に発生してしまうなどの不具合は理屈の上では発生しなくなります。また、更新前のクエリーもキューに登録されて実行されるようになります。\n自分でJavaScriptでプログラムを作る場合には、キューへの登録を適切に行ってください。IMLibQueue.setTaskメソッドを使います。引数は実行するタスクを関数で指定しますが、関数には必ず引数を1つ設定してください。その引数はクロージャーが渡され、キューのタスクの終了をシステムに知らせるために、その引数のクロージャーを実行します。実行するタスクが非同期の処理を含む場合には、タスクの最後に引数のクロージャーを実行するのではなく、非同期処理の完了処理で呼び出すなどしないと、更新処理の前後が交錯して、認証の継続がうまく行かないなどのトラブルになります。以下はコードの例です。\n\nIMLibQueue.setTask(function (completeTask) {\n     INTERMediator_DBAdapter.db_query_async(\n         {\n             name: \"execute\",\n             conditions: [{field: \"id\", operator: \"=\", value: id}],\n             uselimit: false,\n             records: 1\n         },\n         function (result) {\n             document.getElementById(\"result\").innerHTML = result.dbresult[0].result;\n             INTERMediator.flushMessage();\n             completeTask();\n         },\n         function () {\n             INTERMediator.flushMessage();\n             completeTask();\n         });\n});\n\nなお、JavaScriptの以下のAPIは、内部でIMLibQueue.setTaskを呼び出しているので、キューへの設定は自動的に行われます。以下に含まれないようなINTERMediator_DBAdapter.db_query_asyncメソッドでは、上記のように、自分でキューへの登録やタスク終了の呼び出しを行う必要が発生します。\n\nIMLibUI.valueChange\nIMLibUI.copyButton\nIMLibUI.deleteButton\nIMLibUI.insertButton\nIMLibContext.prototype.setDataAtLastRecord\nIMLibContext.prototype.setDataWithKey\nIMLibPageNavigation.copyRecordFromNavi\nIMLibPageNavigation.deleteRecordFromNavi\nIMLibPageNavigation.insertRecordFromNavi\n\n                データベースクラスに関してのリファクタリング\n                DB_PDO.phpファイルなどのように、データベースクラスは非常に行数が大きくなり、保守しづらい状況になっていました。そこで、DB_Supportフォルダにいくつかのファイルを作り、異能の分離をしています。一般のアプリケーションに影響はないようになっているはずですが、自分でデータベースクラスを作っているような場合には、DB_Interface.phpに記述されたインタフェースに基づいて機能を分離している点をご理解いただきプログラムに反映させてください。データベースクラスからは、publicなポインタを利用して、別途定義された「ハンドラ」を参照するといった仕組みです。なお、例えば認証に関連する部分はDB_Auth_Handler_PDO.phpファイルに記述されていますが、あるデータベースクラスが認証の機能を使わないのなら、このハンドラは定義不要で、ポインタとなるプロパティはnullのままで構いません。\n                一部プロパティの変更\n                内部的にINTERMediatorLogオブジェクトを導入したことで、プログラミングガイドでは言及されていなかった一部のプロパティが変更されています。もしもこれらのプロパティを個別のJavaScriptで利用している場合には書き換えが必要になります。\n                \n                    （変更前） INTERMediator.debugMode （変更後） INTERMediatorLog.debugMode\n                    （変更前） INTERMediator.supressDebugMessageOnPage （変更後） INTERMediatorLog.suppressDebugMessageOnPage\n                    （変更前） INTERMediator.supressErrorMessageOnPage （変更後） INTERMediatorLog.suppressErrorMessageOnPage\n                    （変更前） INTERMediator.errorMessages （変更後） INTERMediatorLog.errorMessages\n                    （変更前） INTERMediator.debugMessages （変更後） INTERMediatorLog.debugMessages\n                    （変更前） INTERMediator.errorMessageByAlert （変更後） INTERMediatorLog.errorMessageByAlert\n                    （変更前） INTERMediator.errorMessageOnAlert （変更後） INTERMediatorLog.errorMessageOnAlert\n                \n            \n            \n                Ver.5.6での変更\n                テーマの新設と既存の開発物について\n                このバージョンより、一切のスタイル設定をしなくてもそれなりに見栄えの良いページが作成できるように、デフォルトのテーマを構築しました。また、テーマを入れ替えることで、手軽に見栄えを変更できるような機能にもなっています。しかしながら、独自にCSSを全面的に定義しているようなサイトにおいては、デフォルトのテーマの設定と当たってしまう場合もあります。その場合、「least」テーマに切り替えてください。IM_Entry関数の第2引数（オプション設定）に、\"theme\"がキーで、値が\"least\"という定義を加えまます。params.phpでは$themeName = \"least\"; と指定します。このテーマは、ログインパネルとページネーションの要素に適用される設定しかしていませんので、多くの場合テーマと自分のCSSが当たるということはないと思います。また、テーマのCSSは、独自のCSSファイルへのlinkタグより前に配置されるため、通常は、独自のCSSファイルでテーマの内容を上書きできるはずです。\n                イベント取得\n                キーボード関連のイベントに対する応答を登録できるグローバル変数IMLibKeyEventDispatchは、IMLibKeyDownEventDispatchとIMLibKeyUpEventDispatchに変更になりました。\n                ログインパネルのカスタマイズプロパティの廃止\n                 INTERMediatorOnPage.defaultBackgroundImage、INTERMediatorOnPage.defaultBackgroundColorの2つのプロパティを廃止しました。設定しても何も起こりません。\n            \n            \n                Ver.5.5での変更\n                アドバイス定義クラスでメールの送信内容を修正する場合\n                データベースに対する処理のうち、Read/Update/Createの3つの処理が終了後にメールを送信する設定をコンテキスト定義に記述します。このとき、データベースで処理したレコードの配列を元にメールを送信するので、フィールドに送信時に使用する宛先や文面などのデータがあれば、コンテキスト定義上で使用するフィールドあるいは固定値を記述することでメールの送信ができます。しかしながら、状況によってはレコードにない情報を追加したり、あるいは変更してメール送信に利用したい場合もあります。その場合は、コンテキスト定義にextending-classキーの値を追加して、アドバイス定義クラスを実装します。そのクラスに、レコード作成直後にメールを送りたい場合の修正を組み込むため、doAfterCreateToDB($result)メソッドを実装します。このとき、書き直したフィールドや、追加したいフィールドは、データベースクラスのsetUpdatedRecordを利用して追加してください。通常、アドバイス定義クラスは、DB_UseSharedObjectsクラスを継承しているので、現在使用しているデータベース定義クラスは、dbClassプロパティで得られます。したがって、n番目のレコードのフィールドfに値vを書き込む場合は、「$this-&gt;dbClass-&gt;setUpdatedRecord（f, v, n）」というプログラムを書きます。これで、メール処理クラスに変更されたり追加されたフィールドを持つレコードが送信されます。なお、doAfterCreateToDBなどのメソッドは、基本は引数と同じレコードを返してください。メールの送信は、これらのメソッドの返り値ではなく、データベースクラスのインスタンスが管理して「結果のレコード」を利用します。返り値は、例えば、クエリー結果だと、ページ上に表示される値として利用されるものです。したがって、表示側もメール側も変更するのなら、setUpdatedRecordメソッドだけでなく、返り値の配列も変更が必要です。\n                なお、このように、setUpdatedRecordを使用する必要があるのは、これまでのバージョンは新規レコード作成時だけだったのですが、操作ごとに処理方法がバラついてしまっていたので、読み出しや更新処理も、同様にsetUpdatedRecordでメール処理に渡すレコード群の変更をするようにしました。\n            \n            \n                Ver.5.4での変更\n                サーバーサイドのPHPのAPIを整理\n                データベースアクセスクラスの基本メソッド\n                データベースアクセスクラスでは、CRUDおよびその関連処理のためのメソッドを既定しています。従来は、そのメソッドに処理しているコンテキスト名を引数として渡していましたが、それをやめました。また、メソッドの名称もCRUDの各単語に対応したものとなりました。現在処理しているコンテキスト名は、DB_SettingsクラスのメソッドgetDataSourceName()で取得できます。Ver.5.4-dev以降は、getFromDBは呼び出されず、readFromDBが呼び出されるようになるので、必要な修正をしてください。\n                従来の定義\n                \n                    interface DB_Interface extends DB_Spec_Behavior\n{\n    public function getFromDB($contextName);\n    public function countQueryResult($contextName);\n    public function getTotalCount($contextName);\n    public function setToDB($contextName);\n    public function newToDB($contextName, $bypassAuth);\n    public function deleteFromDB($contextName);\n    public function copyInDB($contextName);\n}\n                \n                新しい定義\n                \n                    interface DB_Interface extends DB_Spec_Behavior\n{\n    public function readFromDB();         // former getFromDB\n    public function countQueryResult();\n    public function getTotalCount();\n    public function updateDB();           // former setToDB\n    public function createInDB($bypassAuth);  // former newToDB\n    public function deleteFromDB();\n    public function copyInDB();\n}\n                \n                データベースアクセス処理の拡張クラス\n                コンテキストにextending-classキーで指定したクラス名にインプリメントするインタフェースを以下のように変更しました。名前をCRUDに対応するものにすると同時に、データソース名の引数は渡しません。拡張処理クラスがDB_UseSharedObjectsを継承している場合は、DB_SettingsクラスのインスタンスへdbSettingsプロパティでアクセスできます。これを利用すると、現在処理しているコンテキスト名は、DB_SettingsクラスのメソッドgetDataSourceName()で取得できます。Ver.5.4-dev以降は、従来の名称のメソッドは呼び出されず、新しいメソッドしか呼び出されませんので、必要な修正をしてください。\n                従来の定義\n                \n                    interface Extending_Interface_BeforeGet {\n    public function doBeforeGetFromDB($dataSourceName);\n}\ninterface Extending_Interface_AfterGet {\n    public function doAfterGetFromDB($dataSourceName, $result);\n}\ninterface Extending_Interface_AfterGet_WithNavigation {\n    public function doAfterGetFromDB($dataSourceName, $result);\n    public function countQueryResult($dataSourceName);\n    public function getTotalCount($dataSourceName);\n}\ninterface Extending_Interface_BeforeSet {\n    public function doBeforeSetToDB($dataSourceName);\n}\ninterface Extending_Interface_AfterSet {\n    public function doAfterSetToDB($dataSourceName, $result);\n}\ninterface Extending_Interface_BeforeDelete {\n    public function doBeforeDeleteFromDB();\n}\ninterface Extending_Interface_AfterDelete {\n    public function doAfterDeleteFromDB($result);\n}\ninterface Extending_Interface_BeforeNew {\n    public function doBeforeNewToDB($dataSourceName);\n}\ninterface Extending_Interface_AfterNew{\n    public function doAfterNewToDB($dataSourceName, $result);\n}\n                \n                新しい定義\n                \n                    interface Extending_Interface_BeforeRead {\n    public function doBeforeReadFromDB();\n}\ninterface Extending_Interface_AfterRead {\n    public function doAfterReadFromDB($result);\n}\ninterface Extending_Interface_AfterRead_WithNavigation {\n    public function doAfterReadFromDB( $result);\n    public function countQueryResult();\n    public function getTotalCount();\n}\ninterface Extending_Interface_BeforeUpdate {\n    public function doBeforeUpdateDB();\n}\ninterface Extending_Interface_AfterUpdate {\n    public function doAfterUpdateToDB($result);\n}\ninterface Extending_Interface_BeforeCreate {\n    public function doBeforeCreateToDB();\n}\ninterface Extending_Interface_AfterCreate {\n    public function doAfterCreateToDB($result);\n}\ninterface Extending_Interface_BeforeDelete {\n    public function doBeforeDeleteFromDB();\n}\ninterface Extending_Interface_AfterDelete {\n    public function doAfterDeleteFromDB($result);\n}\ninterface Extending_Interface_BeforeCopy {\n    public function doBeforeCopyInDB();\n}\ninterface Extending_Interface_AfterCopy {\n    public function doAfterCopyInDB($result);\n}\n                \n                DB_Settingsクラスの整理統合\n                以下のメソッドはVer.5.4-devでは定義されていません。代替メソッドを使ってください。\n                \n                    function getTargetName()\nfunction getTargetDataSource()\nfunction setTargetDataSource($targetDataSource)\nfunction getIndexOfDataSource($dataSourceName)\nfunction setTargetFields($fields)\n                \n                getTargetName/getTargetDataSource/setTargetDataSourceメソッドは、ほぼ同一の動きをするgetDataSourceName/setDataSourceNameメソッドに置き換えました。setTargetFieldsとgetIndexOfDataSourceメソッドは使われていないので、削除しました。\n            \n            \n                Ver.5.3での変更\n                CSRF攻撃対策の追加\n                params.phpファイルで$webServerNameという変数を設定することでCSRF攻撃対策を実施することができるようになりました。Webサーバーのドメイン名もしくはFQDN（完全修飾ドメイン名）を配列で設定するようにしてください。\n                    設定例1：array('inter-mediator.com');\n                    設定例2：array('www.inter-mediator.com', 'inter-mediator.org');\n            \n            \n                Ver.5.2での変更\n                データベースクラスでのメソッド定義の変更\n                Auth_Interface_DBインタフェースで定義しているauthSuportCreateUserメソッドの引数が、LDAP対応に伴い2つから4つに増えました。 データベースクラス（DB_PDO.phpなど）については、機能を組み込んでいなくても、メソッドの引数をインタフェースでの定義に揃えなければなりません。 定義内容は、DB_Interfaces.phpファイルを参照してください。\n                \n            \n            \n                Ver.4.7での変更\n                Internet Explorer Ver.8対応に関して\n                これまでは、Internet Explorerの最低サポートバージョンをVer.8としてきましたが、Ver.4.7現在、いくつかの機能が動かない状態になっています。これらについては、今後サポートする予定はありません。しかしながら、主要な機能はVer.4.7でも動いているので、IE8のサポートバージョンとして、最後のものがVer.4.7とします。Ver.4.7でIE8で動作に問題があるものとして、以下のものがわかっています。\n                \n                    フィールドの文字列中に改行がある場合、TEXTAREAに正しく表示されない。これは、改行をBRタグに変更してinnerHTMLに設定するという手段が、IE8ではエラーになってしまうためです。\n                    Pusherをベースにしたクライアント間同期の仕組みのうち、レコード削除後の処理でエラーが出る。フィールドの更新や新規レコードは稼働します。\n                    ローカルコンテキストを利用して、検索パラメータを指定する機能のうち、1ページの件数の制限と、並べ替えに使用するフィールドの指定が正しく動作しません。検索条件と、「検索」ボタンは動作します。\n                \n                なお、Ver.5以降は、IE8のためのコードを削除する可能性もあり、動かない機能がより増える可能性もあります。また、Ver.5以降は、Internet Explorerでの確認は、主として最新バージョンでのみ行うことにします。Firefox、Chrome、Safariと同様な扱いにします。なお、特定のバージョンでの不具合について、対応を希望する場合には、Facebookのグループ等でリクエストを出してください。\n            \n            \n                Ver.4.6での変更\n                setExeucteメソッド\n                グローバル変数のIMLibChangeEventDispatch、IMLibKeyEventDispatch、IMLibMouseEventDispatchの初期化は、constructメソッドを呼び出す後になりました。これらのオブジェクトで利用できていた、setExeucteなどのメソッドは、constructを呼び出した後に設定してください。具体的には、INTERMediatorOnPage.doAfterConstruct = function() { } という関数の定義と代入を行い、関数内でIMLibChangeEventDispatch、IMLibKeyEventDispatch、IMLibMouseEventDispatchを利用してください。\n                INTERMediator.additionalCondition, additionalSortKeyプロパティ\n                コンテキストを利用して読み出しを行うとき、JavaScriptで検索条件や並べ替え条件を付加できるプロパティadditionalConditionとadditionalSortKeyがあります。これらは、従来までは単純にオブジェクトを記録していただけですが、Ver.4.4あたりでローカルコンテキストに記録して、ページを改めて呼び出した時にローカルコンテキストを復活させることで元に戻すという仕様を組み込みました。しかしながら、その動作を見直している時にバグが見つかりましたが、結果的に、additionalConditionとadditionalSortKeyの参照は変更ありませんが、追加や書き換えには以下のような変更が必要になります。これらの2つのプロパティにセッタとゲッタを設定しているため、セッタを稼働させるために、プロパティそのものへの代入が必要になります。あるいは、新しいAPIのaddConditionやaddSortKeyメソッドを利用してください。追加した条件を消去するclearConditions、clearSortKeysメソッドも利用できます。\n                \n                    INTERMediator.additionalCondition[\"acontext\"] = [];\nINTERMediator.additionalCondition[\"acontext\"].push({field: \"afield\", operator: \"=\", value: \"1001\"});\nINTERMediator.additionalCondition[\"acontext\"].push({field: \"live\", operator: \"=\", value: \"1\"});\n\n    ↓\n\n（修正方法A）\nINTERMediator.addCondition(\"acontext\", {field: \"afield\", operator: \"=\", value: \"1001\"});\nINTERMediator.addCondition(\"acontext\", {field: \"live\", operator: \"=\", value: \"1\"});\n\n（修正方法B）\nvar conditions = INTERMediator.additionalCondition;\nconditions[\"acontext\"] = [];\nconditions[\"acontext\"].push({field: \"afield\", operator: \"=\", value: \"1001\"});\nconditions[\"acontext\"].push({field: \"live\", operator: \"=\", value: \"1\"});\nINTERMediator.additionalCondition = conditions\n                \n                検索条件が1つだけの場合も、同様に、次のように書き換えが必要になります。\n                \n                    INTERMediator.additionalCondition[\"acontext\"] = {field: \"afield\", operator: \"=\", value: \"1001\"};\n\n    ↓\n\n（修正方法A）\nINTERMediator.addCondition(\"acontext\", {field: \"afield\", operator: \"=\", value: \"1001\"});\n\n（修正方法B）\nvar conditions = INTERMediator.additionalCondition;\nconditions[\"acontext\"].push({field: \"afield\", operator: \"=\", value: \"1001\"});\nINTERMediator.additionalCondition = conditions\n                \n            \n            \n                Ver.4.5での変更\n                valueChangeメソッド\n                INTERMediator.valueChange(idValue)はIMLibUI.valueChange(idValue)に変更されました。もしもJavaScriptのプログラム内でvalueChangeメソッドを使用している場合には書き換えが必要です。\n            \n            \n                Ver.4.1 (2014/2/7) での変更\n                ターゲット指定をclass属性に独自の記述方法で書いていましたが、Ver.4.1より、HTML5のdata属性での記述に移行しました。なお、従来の記述も基本的にはそのまま利用できるはずですが、大した手間にならないので、書き直すのがいいかと思います。\n                \n                    \n                        \n                            以前の表記法\n                            Ver.4.1以降の表記法\n                            利用場所\n                        \n                        \n                            class=\"IM[...]\"\n                            data-im=\"...\"\n                            ページファイルのターゲット指定\n                        \n                        \n                            class=\"IM_WIDGET[...]\"\n                            data-im-widget=\"...\"\n                            JavaScriptコンポーネントの指定\n                        \n                        \n                            class=\"_im_enclosure\"\n                            data-im-control=\"enclosure\"\n                            エンクロージャにしたいDIV, SPANタグ\n                        \n                        \n                            class=\"_im_repeater\"\n                            data-im-control=\"repeater\"\n                            リピータにしたいDIV, SPANタグ\n                        \n                        \n                            class=\"_im_ignore_enc_rep\"\n                            data-im-control=\"ignore_enc_rep\"\n                            リピータあるいはエンクロージャでなくする\n                        \n                        \n                            class=\"_im_for_noresult_\"\n                            data-im-control=\"noresult\"\n                            検索結果が0レコードの時に表示されるリピータ\n                        \n                        \n                            class=\"_im_post\"\n                            data-im-control=\"post\"\n                            ポストオンリーモードのエンクロージャおよび書き込みボタン\n                        \n                        \n                            name=\"IM[...]\"\n                            data-im-group=\"....\"\n                            ポストオンリーモードでのラジオボタンのグループ指定\n                        \n                    \n                \n                以下は書き換え例です。\n                \n                    &lt;input class=\"IM[mytable@anyfield]\" /&gt;\n    ↓\n&lt;input data-im=\"mytable@anyfield\" /&gt;\n                \n                IM[]に複数のターゲット指定を書いていた場合、|で区切っていましたが、空白で区切れるようになりました。\n                \n                    &lt;option class=\"IM[mytable@myvalue@value|mytable@myname]\" /&gt;\n    ↓\n&lt;option data-im=\"mytable@myvalue@value mytable@myname\" /&gt;\n                \n            \n            \n                Ver.4.0 (2013/12/4) での変更\n                INTER-Mediatorの配布ファイルのファイル構成が変わりました。ルート直下にフレームワークがあり、サンプルファイルはSamplesの下に配備しました。同時に、dist-docs/buildup.shを利用して、運用向けのフレームワークを用意する機能を加えています。こちらをごらんください。\n            \n            \n                Ver.3.8 (2013/8/22) での変更\n                params.phpファイルにおいて記述できていた$scriptPathPrefix、$scriptPathSufixを利用して、クライアントから呼び出すURLをコントロールできていましたが、$callURLという変数で完全にURLで指定できるようにしています。$scriptPathPrefix、$scriptPathSufixも使用できます。\n            \n        "
    },
    {
        "id": 18,
        "parent": "/ja/for-developers/",
        "path": "/ja/for-developers/docker.html",
        "title": "Dockerの利用",
        "breadcrumb": "Dockerの利用",
        "body": "\n            \n                INTER-MediatorをDockerで動かす\n            \n            \n                Dockerとは\n                \n                    Docker（ドッカー[2]）はソフトウェアコンテナ内のアプリケーションのデプロイメントを自動化するオープンソースソフトウェアである。\n                        Wikipediaより\n                    \n                \n                \n                    Dockerを使うことにより、例えば同じ設定内容のWebサーバーを素早く追加して並列化したり、プロダクション環境と同じWebサーバーを開発環境に用意することが迅速にできます。\n                     もちろんWebサーバーに限らずDBサーバーにも使うことが出来ます。\n                     ここではそんなDockerをINTER-Mediatorを動かす環境としてセットアップしてみます。\n                \n            \n            \n                Dockerのインストール\n                \n                    まずはローカルに Docker が実行できる環境を作りましょう。以下のドキュメントを参考にしてください。\n                     Mac では Docker Toolbox をインストールする方法と Docker for Mac をインストールする方法の2通りがあります。\n                     Windows では Docker Toolbox をインストールする方法と Docker for Windows をインストールする方法の2通りがあります。\n                     OSのバージョンによってはインストールの選択肢がDocker Toolboxのみとなります。\n                \n                macOSにDockerをセットアップする場合\n                \n                    macOSの場合、Docker Toolboxを入れる方法とDocker for Macを入れる方法があります。\n                     既にVirtualBoxを使用している場合は\n                    Docker Toolboxをダウンロードしてインストールします(ダウンロードに結構時間がかかるかもしれません...)。\n                     仮想化ソフトウェアを一度もインストールしたことがないのでしたらDocker Toolboxを入れてもいいですし、Docker for Macを入れても構いません。\n                     ※Docker Toolboxのインストーラの中でVirtualboxのインストールが行われます。\n                    \n                    \n                    Docker for Mac は、macOSのxhyveを使っています。\n                     よく分からない場合やxhyveが信用ならない場合はDocker Toolboxでのセットアップを採用してください。\n                     ここではDockerの詳しい説明は行いません。\n                \n                WindowsにDockerをセットアップする場合\n                \n                    Windows7(64bit)以降であればWindowsでもDockerを動かすことが出来ます。\n                    \n                    Docker Toolboxのwindows版をインストールします(ダウンロードに結構時間がかかるかもしれません...)。\n                     ※Docker Toolboxのインストーラの中でVirtualboxのインストールが行われます。\n                     Windows10 Proに限ってはHyper-Vを利用するDocker for Windowsのインストールが簡単です。\n                     ※Docker for Windowsは2016/07/05時点ではWindows 10 Pro、Enterprise、Educationのみ対応ですが将来的には他のWindows10もサポートする予定だそうです。\n                     ※Docker for WindowsではHyper-Vを使います。お使いのPCの構成によってはHyper-Vの構成と再起動が入ります。\n                     ※Windows用のインストールでウィザード内でKitematicのインストールチェックボックスは外さないようにしてください。後で使います。\n                    \n                    \n                    \n                \n                KitematicでDockerを試す\n                \n                    Dockerの便利ツールの中にKitematicというものがあります。\n                     Dockerのお手軽さを体験するために、Kitematicを使ってみましょう。\n                     KitematicはDockerをGUIで操作するツールです。Dockerのインストール時に一緒に入ってるはずです。\n                    \n                    \n                    ※Docker for mac の場合は別途ダウンロードが必要です。ダウンロードしたものをアプリケーションフォルダに入れてください。\n                    \n                    \n                    \n                    ※Docker for Windowsの場合は別途ダウンロードが必要な場合があります。ダウンロードしたものを任意の場所に解凍(展開)してください。\n                    \n                    \n                    \n                    \n                    ※WindowsでDocker Toolboxをインストールした場合でKitematicの最初の起動に失敗した場合、Hyper-Vを使おうとしている時があります、選択肢にVirtualboxを使うがありますので、そちらで再度起動を試してください。\n                     Kitematicを起動すると真ん中にDockerHubで公開されているDockerイメージのお薦めなどが表示されています。\n                    \n                    \n                    ここでは検索して任意のDockerイメージを探すことも出来ます。\n                     虫眼鏡マークの検索欄に\n                \n                sakadonohito/im\n                \n                    と入力して検索してみましょう。INTER-Mediatorを動かすDockerのサンプルが出てきます。これをNewしましょう。\n                     ローカルにDockerイメージがダウンロードされますのでそれを起動してみましょう。\n                     起動したらブラウザでアクセスしてみましょう。\n                     http://localhost/im/Samples\n                     INTER-MediatorのサンプルTOPページが表示されましたでしょうか。\n                \n                一体何がどうなったのでしょうか？仕組みを説明します。\n                \n                    INTGER-Mediatorが動く状態のPHP、MySQL、Apacheが組み込まれたDockerイメージがDockerHubにホストされていた。\n                    手元の環境にDockerやDockerのGUIツールKitematicをインストールした。\n                    KitematicからDOckerHubにアクセスし、INTER-MediatorのDockerイメージをダウンロードした。\n                    KitematicからダウンロードしたDockerイメージを起動した。\n                    ブラウザから起動したDockerイメージ上のINTER-Mediatorにアクセスした。\n                \n                という流れです。\n                     なぜ、先述のURLでDocker上のINTER-Mediatorにアクセス出来たのかは、そうなるようにDocker上のApacheの設定を行っているからです。\n                     お手軽ですね。\n                \n            \n            \n                IMを動かすDockerイメージの作成\n                \n                    前の項でKitematicを使って作成済みのDockerイメージを起動することが出来ました。\n                     次に自作のINTER-MediatorアプリをDockerイメージ化するにはどうしたらよいでしょうか。\n                     簡単に説明します。\n                \n                Dockerイメージの設計書？Dockerfile\n                詳しくはDockerの公式を参照して欲しいのですが、Dockerfileという名前のテキストファイルに\n                \n                    ベースとなるLinuxディストリビューションやDockerイメージ名の指定\n                    作成者の名前\n                    Dockerイメージにインストールしたいライブラリ等のインストールコマンド、事前に用意したファイルを取り込むコマンドなど\n                \n                といった内容を記述します。\n                     INTER-Mediator用のイメージを作りには\n                \n                \n                    ベースとなるLinuxディストリビューションやDockerイメージ名の指定\n                    作成者の名前\n                    PHPのインストールと設定\n                    MySQLのインストールと設定\n                    Apacheのインストールと設定\n                    INTER-MediatorディレクトリをWeb公開用の場所に配置\n                \n                のようになります。\n                     終わったら記述したDockerfileからイメージを作成します。\n                     Dockerfileのあるディレクトリで以下のようなコマンドでイメージを作成します。\n                    \n                    参考Dockerfile\n                \n                docker build -t &lt;name&gt;/&lt;app&gt;:&lt;tag&gt;\n                nameはDockerHubの登録アカウント名、appは今回ならINTER-Mediatorと分かるような名称がいいでしょう。\n                     tagはバージョン番号になります。\n                \n                注意点としては、Dockerは仮想サーバーではありません。Dockerイメージを起動したからといって、自動起動のサービスが勝手に起動したりはしません。\n                     Dockerイメージの起動時に渡すコマンドで目的のサービスを起動します。\n                \n                作成したDockerイメージは例として以下の様なコマンドで起動できます。\n                docker run -d --name im -p 18880:80 myhoge/im:1.0\n                例はDocker(以降 コンテナ)を「im」という名前でバックグラウンドプロセスで起動。ローカルの18880ポートをコンテナの80ポートにマッピング、Dockerイメージは「myhoge/im:1.0」という意味になります。\n                     正しくDockerイメージが作成できていれば http://localhost:18880/ でコンテナ内で起動したApacheのルートが表示されます。\n                \n                これでいつでも手元でINTER-Mediatorを起動できるようになりました。\n            \n            \n                DockerHubの登録手順\n                手元でDockerのイメージが作成出来るようになって、ローカルで起動もできるようになりました。\n                     このイメージを他の環境でも使いたい場合はどうしたらよいでしょうか？\n                     DockerfileをGithubに置いておいて、都度DockerfileをpullしてDockerイメージをbuildして構いません。\n                     ですが、作成したイメージをDockerHubに登録しておいて、使いたい環境でpullするのが使う時はお手軽です。\n                \n                \n                    Docker Hubにアクセスし、アカウントを持っていない人は登録します。\n                     アカウントの登録ができていれば後は手元からDockerイメージをpushするだけです。\n                     手元のターミナルで\n                \n                docker login\n                してでまずはターミナルでDockerHubにログインします。次に\n                docker push myhoge/im:1.0\n                のようにコマンドを入力します。myhoge/im:1.0は前項の例の流用です。\n                     dockerイメージ名:tagという構文です。\n                     ※latestというtagでイメージを作成してpushした場合はDockerHubからpullする際にtagを省略してDockerイメージをpull出来るようになります。\n                \n            \n            \n                Dockerコンテナの中身を分割する\n                \n                    1つのDockerイメージに全てを詰め込むのはポータビリティが高いですが、本当はDockerの思想に反します。\n                     1つのDockerコンテナには一つの役割にするのが理想とされています。\n                     Webサーバー、DBサーバー、さらに分割するなら永続データとコンテナを分けてみましょう。\n                     ※PHPをApacheで動かす前提で説明しますので、ここではPHPとWebサーバー(Apache)は分けません。\n                \n                docker-composeを使う\n                \n                    上記のコンテナ分割を行うと、1つのアプリのために幾つものDockerコンテナをセットアップして起動しないといけなくなりちょっと煩雑になります。\n                     Dockerにはその煩雑さを解消するため、docker-composeというツールが有りますので、使ってみましょう。\n                     Dockerをインストールすると一緒についてきます。\n                     ※docker-composeのバージョンが1.7未満の場合はバージョンを上げてください。\n                \n                \n                    細かい内容説明はドキュメントを参照してください。完成形をpullしましょう。\n                     任意のディレクトリで以下のコマンドを実行し、githubからサンプルのdocker-composeファイルをcloneします。\n                \n                git clone https://github.com/sakadonohito/im-compose.git \n                \n                    cloneした内容にdocker-compose.ymlという設定ファイルがあります。\n                     ここにどういったDockerコンテナの起動に関する設定を連携させたいコンテナ分だけ記述します。\n                     YAMLファイルについての説明はここでは割愛します。\n                     このdocker-compose.ymlで扱うMySQLとPHP(with Apache)のDocker起動設定を記載しています。\n                     また、データボリュームの設定も書いてあります。\n                     実はこのcloneした内容には2つ足りないものが有りますので、別途用意してください、\n                \n                \n                    \n                        INTER-Mediatorで使うMySQLのサンプルデータを流し込むSQLファイル(sample_schema_mysql.sql)\n                        \n                            INTER-Mediatorをダウンロードした際に内包しているsample_schema_mysql.txtファイルをsample_schema_mysql.sqlに拡張子変更してください。\n                            mysql/tmpというディレクトリがない場合は作成してください。\n                            sample_schema_mysql.sqlをmysql/tmpディレクトリに配置してください。\n                        \n                    \n                    \n                        INTER-Mediatorそのもの。\n                        \n                            INTER-Mediatorをapache/webrootディレクトリにimという名前に変更して配置してください。\n                        \n                    \n                \n                上記の追加作業を行ったら、以下のコマンドを実行してください。\n                docker-compose up -d\n                設定ファイルの内容に従って、イメージをpullしてデーモンで起動してくれます。\n                    \n                    http://192.168.99.100/im/Samples にアクセスしてみてください。サンプルの画面が見えると思います。\n                     今回の設定では、ローカルに配置したINTER-MediatorをDockerコンテナにマウントして使っていますので、ローカル上でINTER-Mediatorを編集すると、それが反映されます。htmlファイルを編集して画面を更新してみてください。\n                \n                コンテナを停止して削除するには以下のコマンドを実行します。\n                docker-compose down -v\n                コンテナの停止と削除、それからネットワーク設定とボリュームの削除が行われます。\n            \n            \n                さいごに\n                \n                    INTER-MediatorのDockerイメージの作成についての説明は以上になります。\n                     さてこうして作成したDockerイメージはどこで使えるのでしょうか？\n                     以下の様な使い方ができます。\n                \n                \n                    手元でデモ環境として起動する。\n                    他の人にINTER-Mediatorを手軽に体験してもらうためにDockerHubに登録しておく\n                    作成したDockerイメージを本番用Linuxサーバー上で起動して使う\n                    AWSのElasticBeanstalk上で起動する。\n                    AWSのElasticContainerService上で起動する。\n                    HerokuというPaaSサービス上で起動する。\n                    ArukasというDocker専用のPaaSサービス上で起動する。\n                    Microsoft Azure上でDockerを起動する。\n                    Google Cloud Platform上でDockerを起動する。\n                \n                \n                    他にも、開発環境やテスト環境として利用することも可能です。INTER-Mediatorの開発ではCIでDockerを使っているそうです。\n                     手軽にINTER-Mediatorを動かす環境としてDockerを是非活用してください。\n                \n            \n        "
    },
    {
        "id": 19,
        "parent": "/ja/for-developers/",
        "path": "/ja/for-developers/db.html",
        "title": "データベース特有の設定",
        "breadcrumb": "データベース特有の設定",
        "body": "\n            \n                Claris FileMaker Server\n                Claris FileMakerは、テーブル、TO（テーブルオカレンス）、レイアウトといったオブジェクトを利用します。Web共有からテーブルを直接指定できず、TOも直接指定できません。指定できるのはレイアウトのみであり、レイアウトが事実上のテーブルに相当するエンティティとなります。したがって、定義ファイルのnameキー、viewキー、tableキーには、レイアウト名を指定することになります。たまたま、同じ名前のテーブルやTOがあっても、FileMakerのWebアクセス時に実際に利用するのはその名前のレイアウトとなります。\n                フィールドのタイプで、日時の記録用に「日付」「時刻」「タイムスタンプ」の3つがあります。Web経由では、「月/日/年 時:分:秒」のフォーマットにする必要があります。FileMaker Serverの最新バージョンではフォーマットを変更するオプションが用意されていますが、INTER-Mediatorではサポートしていません。また、日付フィールドに時刻を含む文字列を入力、もしくは時刻フィールドに日付を含む文字列を入力すると、エラーになり処理は何もされません。その「日付等の書式エラー」の番号は500ですが、この500はFileMakerが規定したエラー番号であることに留意してください。\n                データベース側の設定\n                FileMaker Serverでは、INTER-MediatorからはFileMaker ServerのXML Web公開機能もしくはFileMaker Data APIを使用しているため、XML Web公開もしくはFileMaker Data APIでのアクセスを許可する必要があります。INTER-Mediatorが使用するアカウントを用意し、XML Web公開もしくはFileMaker Data APIでのアクセスを許可するようにしてください（XML Web公開の拡張アクセス権のキーワードは「fmxml」、FileMaker Data APIの拡張アクセス権のキーワードは「fmrest」）。\n                FileMaker Data APIを利用する場合\n                INTER-Mediator 5.8以降でFileMaker Data APIに対応しています。FileMaker Data APIを利用するにはFileMaker Server 17以降が必要であり、Data API ライセンスが必要になるほか、Admin ConsoleでFileMaker Data APIを有効にする必要があります。db-classキーで指定するデータアクセスクラスの名前は「DB_FileMaker_FX」の代わりに「DB_FileMaker_DataAPI」を使用します。serverキーで「127.0.0.1」や「localhost」を指定していた場合には「localserver」を指定するように変更します。\n                Windows版FileMaker Serverにおける注意点\n                Windows版FileMaker Serverではmbstring拡張モジュールが標準で有効になっていません。FileMaker Serverフォルダ内のWeb Publishing &gt; publishing engine &gt; phpフォルダ以下にある「php.ini」ファイルにおいて「;extension=php_mbstring.dll」を「extension=php_mbstring.dll」に変更した上でIISの再起動を行い、mbstring拡張モジュールを有効にする必要があります。\n                定義ファイルに記述するテーブル名\n                FileMaker Serverでは、定義ファイルに記述するテーブル名（nameキーの値）は、FileMakerデータベースのレイアウト名を指定する必要があります。\n                各コンテキストにはレイアウトが必要\n                FileMaker Serverでは、カスタムWeb公開機能の仕様上、各テーブル／コンテキストごとにレイアウトを用意して、表示や更新に必要なフィールドを各レイアウト上に配置する必要があります。\n                主キーを省略できる場合\n                リレーションを設定していない場合、テーブル内の主キーや定義ファイルでの主キーの指定（keyキー）は不要です。リレーションを設定している場合、後述で説明するポータルアクセスモードを有効にすることで主キーの指定を省略できる場合があります。\n                内部レコードIDのフィールド名\n                内部レコードIDのフィールド名は、XML Web公開では「-recid」、FileMaker Data APIでは「recordId」です。\n                FileMaker Data APIでスクリプトを利用する場合\n                実行するFileMakerスクリプトの最後に、「Get (対象レコード数) &amp; \"/\" &amp; Get (レコード総数)」を結果として返すように［現在のスクリプト終了］スクリプトステップを入れる必要があります。こうすることでスクリプトが複数回実行されないようになります。\n                FileMaker Data APIでグローバルフィールドを利用する場合\n                FileMaker Data APIでグローバルフィールド値を設定する場合、レイアウト名とTO名が一致しない場合には、globalキー内のfieldキーの値は「TO名::フィールド名」の形式で指定する必要する必要があります。\n                ポータルアクセスモード（Ver.6以降では未サポート）\n                関連テーブルのデータをレイアウト上にあるポータルから取得する場合、定義ファイルでrelationキーの下位キーでportalキーの値をtrueとすることで、ポータルアクセスモードを利用できます。ポータルアクセスモードを利用することで、関連テーブル用の別レイアウトを作成する必要がなくなり、動作が若干高速化されます。\n                定義ファイルでは、relationキーのあるコンテキストのnameキーにテーブルオカレンス名（リレーションシップグラフで確認できる名称）を、viewキーにはポータルがあるレイアウト名を指定します。ページファイルでフィールドを指定する際には、「(nameキーの値)@(nameキーの値)::(フィールド名)」という形式で記述する必要があります。\n                なお、関連テーブルのレコードを追加できるようにするためには、FileMakerデータベースのレイアウト上においてポータル内に関連テーブルの主キーフィールドを配置した上で、FileMakerデータベースのリレーションシップグラフにおいて「このリレーションシップを使用して、このテーブルでのレコードの作成を許可」にチェックをつける必要があります。\n                Ver.6以降で未サポートの機能\n                以下の機能は、Ver.6以降では未サポートです。\n                \n                    ポータルアクセスモード\n                \n                Ver.9以降でサポートされなくなった機能\n                以下の機能は、Ver.9以降でサポートされなくなりました。\n                \n                    FileMakerデータベースファイルに登録されているアカウントを使った認証・認可\n                \n                未サポートの機能\n                以下の機能は、現在のバージョンでは未サポートです。\n                \n                    繰り返しフィールド\n                \n            \n            \n                PostgreSQL\n                PostgreSQLのサンプルを動かすためのデータベースのスキーマファイルは、INTER-Mediatorのレポジトリでは、\n                dist-docs/sample_schema_pgsql.txt\n                というファイルにあります。冒頭にコマンド例がありますが、PostgreSQLがどのOSのどのディストリビューションで動いているかによって、いろいろ違いがあると思います。例えばOS X Serverの場合：PostgreSQLの稼働ユーザはpostgresではなく、_postgresです。-Uの引数を_postgresにします。\n                INTER-Mediatorとの絡みについては、MySQLとほとんど同じなのですが、1点違いがあります。PostgreSQLでは、主キーフィールドにシリアル値を入力する方法として、SEQUENCEオブジェクトを利用する方法と、SERIAL型を利用する方法があります。どちらの方法も、原則として、定義ファイルのIM_Entry関数の第1引数にあるコンテキストに、'sequence' =&gt; 'xxxx' として、SEQUENCEオブジェクトを指定する必要があります。ただし、省略可能な場合もあります。\n                sequenceキーに対する値がない場合の問題は、ページネーションコントロールを表示して1レコードずつ表示しているとき、「レコード追加」ボタンをクリックしてレコードを作成した場合、新たに作られたレコードが現在のレコードになっておらず、レコードの移動をしないといけません。他は問題ないのですが、これだけの問題ではありますが、使い勝手が変わるので注意が必要です。なお、検索して参照するだけなら、sequenceキーの指定はなくてもいいのかもしれません。\n                SEQUENCEオブジェクトを使用する場合\n                SEQUENCEオブジェクトを使用する場合、スキーマは以下のようになると思います。SCHEMAはim_sample、アクセスユーザはwebを想定しています。テーブルとシーケンスの両方のオブジェクトにアクセス権を与えるのを忘れないようにしましょう。\n                CREATE SEQUENCE serial START 1000;\nCREATE TABLE person (\n    id INTEGER DEFAULT nextval('serial'),\n    :\n}\nGRANT ALL PRIVILEGES ON im_sample.serial TO web;\nGRANT ALL PRIVILEGES ON im_sample.person TO web;\n                \n                そして、定義ファイルでは、次のように、sequeceキーで、シーケンスオブジェクトの名前を指定します。\n                \n                    array(\n    'records' =&gt; 1,\n    'paging' =&gt; true,\n    'name' =&gt; 'person',\n    'view' =&gt; 'im_sample.person',\n    'table' =&gt; 'im_sample.person',\n    'key' =&gt; 'id',\n    'repeat-control' =&gt; 'insert delete',\n    'sequence' =&gt; 'im_sample.serial',\n),\n                \n                SERIAL型を利用する場合\n                SERIAL型を利用する場合、以下のように、主キーフィールドの型をSERIALにすると思われます。このとき、背後では、「テーブル名_フィールド名_seq」というシーケンスオブジェクトが自動的に作られて、初期値が1になっています。自動的に作られるオブジェクトとは言え、アクセス権の設定は記述する必要があるのが一般的でしょうから、im_sample.person_id_seqに対してwebアカウントのアクセス権も設定しなければなりません。\n                \n                    CREATE TABLE person (\n    id SERIAL PRIMARY KEY,\n}\nGRANT ALL PRIVILEGES ON im_sample.serial TO web;\nGRANT ALL PRIVILEGES ON im_sample.person_id_seq TO web;\n                \n                SERIAL型を使った場合、INSERTでレコードを新規に作るときに、ここでのidフィールドへの値を代入はしないようにします。もし、自分で値を設定したい場合は、シーケンスの値と当たらないようにしないといけませんが、そこまでの状況でSERIAL型を使う事はほぼないと思われます。\n                そして、定義ファイルでは、このときも、次のように、sequeceキーで、シーケンスオブジェクトの名前を指定できます。しかしながら、sequenceキーの値が存在しない場合は、tableキーとkeyキーの値から自動的に標準のシーケンス名を生成するので、原則、sequenceキーの指定は不要です。SEQUENCEオブジェクトが正しく機能しないと、1レコード表示時に新規レコードを作成しても、新規レコードが編集状態で開いてくれません。\n                \n                    array(\n    'records' =&gt; 1,\n    'paging' =&gt; true,\n    'name' =&gt; 'person',\n    'view' =&gt; 'im_sample.person',\n    'table' =&gt; 'im_sample.person',\n    'key' =&gt; 'id',\n    'repeat-control' =&gt; 'insert delete',\n    'sequence' =&gt; 'im_sample.person_id_seq',\n),\n                \n            \n        "
    },
    {
        "id": 20,
        "parent": "/ja/for-developers/",
        "path": "/ja/for-developers/exp.html",
        "title": "計算式",
        "breadcrumb": "計算式",
        "body": "\n            \n                定義ファイルのコンテキスト中に、calculationキーで指定する計算式の規則をこのページで紹介します。計算式自体はさらに配列中のexpressionキーの文字列で指定します。\n                \n                    以下の演算子や関数を使い、フィールド名や「コンテキスト名@フィールド名」の形式で別のデータを参照できます。ただし、calculationキーがあるコンテキストでは、keyキーによる主キーの指定が必要です。また、文字列はシングルクォーテーションによる囲みのみです。ダブルクォートは利用できません。言い換えれば、expressionキーに対応する文字列は \"\" で囲い、式の中の文字列リテラルはシングルクォートを利用します。\n            \n            \n                項\n                \n                    \n                    \n                        \n                            種類\n                            例\n                            説明\n                        \n                        \n                            数値リテラル\n                            10.3\n                            \n                        \n                        \n                            文字列リテラル\n                            'abc'\n                            シングルクォートでの囲みのみ。シングルクォートは\\で要エスケープ\n                        \n                        \n                            定数\n                            PI\n                            EとPIが定義されている\n                        \n                        \n                            ターゲット指定\n                            person@住所\n                            展開されている対応するノードを参照。同一のコンテキスト内ならフィールド名のみ\n                        \n                    \n                \n            \n            \n                定数\n                \n                    \n                    \n                        \n                            定数\n                            対応するJavaScript\n                            解説\n                        \n                        \n                            E\n                            Math.E\n                            エクスポーネンシャル\n                        \n                        \n                            PI\n                            Math.PI\n                            円周率\n                        \n                    \n                \n            \n            \n                演算子\n                \n                    \n                        \n                            対象データ\n                            演算子\n                            記述例\n                            解説\n                        \n                        \n                            数値\n                            ^\n                            2^3 の結果は 8\n                            べき乗\n                        \n                        \n                            \n                            +\n                            2+3 の結果は 5\n                            加算\n                        \n                        \n                            \n                            -\n                            3-2 の結果は 1\n                            減算（あるいは負の数）\n                        \n                        \n                            \n                            *\n                            3*2 の結果は 6\n                            乗算\n                        \n                        \n                            \n                            /\n                            3/2 の結果は 1.5\n                            除算\n                        \n                        \n                            \n                            %\n                            3%2 の結果は 1\n                            剰余\n                        \n                        \n                            文字\n                            +\n                            'a'+'b' の結果は 'ab'\n                            結合\n                        \n                        \n                            \n                            ⊕\n                            3⊕5 の結果は '35'\n                            結合（文字列として）\n                        \n                        \n                            \n                            -\n                            'abc'-'c' の結果は 'ab'\n                            除去\n                        \n                        \n                            \n                            ∩\n                            'abcdef' ∩ 'bdfx' の結果は 'bdf'\n                            共通の文字\n                        \n                        \n                            \n                            ∪\n                            'abcdef' ∪ 'bdfx' の結果は 'abcdefx'\n                            両方の文字\n                        \n                        \n                            \n                            ⊁\n                            'abcdef' ⊁ 'bdfx' の結果は 'ace'\n                            文字の除去\n                        \n                        \n                            論理演算\n                            =\n                            10=9 の結果は false\n                            等号\n                        \n                        \n                            \n                            ==\n                            10==9 の結果は false\n                            等号\n                        \n                        \n                            \n                            !=\n                            10!=9 の結果は true\n                            不等号\n                        \n                        \n                            \n                            \n                                &lt;&gt;\n                            \n                            10&lt;&gt;9 の結果は true\n                            \n                            不等号\n                        \n                        \n                            \n                            &gt;\n                            10&gt;9 の結果は true\n                            より大\n                        \n                        \n                            \n                            &lt;\n                                    10&lt;9 の結果は false \n                                            より小\n                        \n                        \n                            \n                            &gt;=\n                            10&gt;=9 の結果は true\n                            以上\n                        \n                        \n                            \n                            \n                                &lt;=\n                                    10\n                                        &lt;=9 の結果は false \n                                            以下\n                        \n                        \n                            \n                            ==\n                            10==9 の結果は false\n                            等号\n                        \n                        \n                            \n                            ||\n                            true || false の結果は true\n                            論理和\n                        \n                        \n                            \n                            &amp;&amp;\n                            true &amp;&amp; false の結果は false\n                            論理積\n                        \n                        \n                            \n                            !\n                            ! true の結果は false\n                            論理否定\n                        \n                        \n                            \n                            →\n                            true → false の結果はfalse、それ以外はtrue\n                            論理包含\n                        \n                        \n                            文字リスト\n                            ⋀\n                            'abc¶dff¶ghi' ⋀ 'dff¶stu¶' の結果は 'dff¶'\n                            共通項\n                        \n                        \n                            \n                            ⋁\n                            'abc¶dff¶ghi' ⋁ 'xyz¶stu¶' の結果は 'abc¶dff¶ghi¶xyz¶stu¶'\n                            合同\n                        \n                        \n                            \n                            ⊬\n                            'abc¶dff¶ghi' ⊬ 'ghi¶dkg¶' の結果は 'abc¶dff¶'\n                            差演算\n                        \n                    \n                \n                加算について\n                \n                    2つの項がいずれも数値なら、数値として計算します。\n                    2つの項がいずれかでも数値に変換できないか文字列なら、文字列として計算します。\n                \n                減算について\n                \n                    2つの項がいずれも数値なら、数値として計算します。\n                    2つの項がいずれかでも数値に変換できないか文字列なら、文字列として計算します。\n                \n                文字リストの改行の扱いについて\n                \n                    引数の最後に改行があってもなくてもかまいません。\n                    結果の最後には改行が付きます。\n                    最後の改行の扱いも含めて、長さが0の項目は項目として扱わず無視します。\n                    3種類ある改行のどれも同じように扱いますが、結果の改行は最初の引数の最初に出てくる改行になります。\n                \n            \n            \n                関数\n                数値\n                \n                    \n                        \n                            関数\n                            例（数値は丸めています）\n                            説明\n                        \n                        \n                            abs(x)\n                            abs(-3.1) の結果は 3.1\n                            絶対値\n                        \n                        \n                            ceil(x)\n                            ceil(-3.1) の結果は -3\n                            引数よりも大きな整数のうちの最小値\n                        \n                        \n                            floor(x)\n                            floor(-3.1) の結果は -4\n                            引数よりも小さな整数のうちの最大値\n                        \n                        \n                            round(x,y)\n                            round(3.1415, 2) の結果は 3.14\n                            1つ目の引数を四捨五入、2つ目の引数は少数以下の桁数で、正の数なら10の位から上位に上がる\n                        \n                        \n                            format(x,y)\n                            format(12345, 0) の結果は 12,345\n                            xを数値として、小数以下y桁目で四捨五入する。0以上の値は3桁ごとにカンマを付与する。\n                        \n                        \n                            sqrt(x)\n                            sqrt(3) の結果は 1.73\n                            平方根\n                        \n                        \n                            exp(x)\n                            exp(0.5) の結果は 1.65\n                            ネイピア数eのx乗\n                        \n                        \n                            log(x)\n                            log(0.5) の結果は -0.69\n                            ネイピア数を底とする自然対数\n                        \n                        \n                            random()\n                            random() の結果は 0.254\n                            0〜1の範囲の乱数\n                        \n                        \n                            pow(x, y)\n                            pow(2,3) の結果は 8\n                            べき乗、xのy乗\n                        \n                        \n                            fac(x)\n                            fac(5) の結果は 120\n                            累乗、x!の値\n                        \n                        \n                            pyt(x)\n                            pyt(3,4) の結果は 5\n                            x^2+y^2の平方根\n                        \n                    \n                \n                集計\n                \n                    \n                        \n                            関数\n                            例（数値は丸めています）\n                            説明\n                        \n                        \n                            sum(x,...)\n                            sum(1,2,3,4,5) の結果は 15\n                            合計。引数は可変\n                        \n                        \n                            min(x,...)\n                            min(3,1,2,1,5,1) の結果は 1\n                            引数の最小値。引数は可変\n                        \n                        \n                            max(x,...)\n                            max(3,1,2,1,5,1) の結果は 5\n                            引数の最大値。引数は可変\n                        \n                    \n                \n                判断\n                \n                    \n                        \n                            関数\n                            例（数値は丸めています）\n                            説明\n                        \n                        \n                            if(x,y,z)\n                            if(10 &gt;= 1,'b','c') の結果は 'b'\n                            最初の引数の結果がtrueなら2番目、falseなr3番目を返す\n                        \n                        \n                            choice(x, a1, a2, ..., an)\n                            choice(2,'a','b','c','d','e') の結果は 'c'\n                            \n                                最初の引数の結果が0以上なら引数のいずれかを返す。0なら1番目の引数の値、1なら2番目の引数の値、....nなら(n+1)番目の引数の値を返す。最初の引数が範囲0〜nを越えるとundefinedを返す。最初の引数がnullあるいはundefinedなら、それぞれnullあるいはundefinedを返す\n                            \n                        \n                        \n                            condition(x1, a1, x2, a2, ..., xn, an)\n                            condition(3&gt;10, 'a', 13&gt;10, 'b', 23&gt;10, 'c') の結果は 'b'\n                            奇数番目の引数の値を1番目から調べて、最初にtrueになった引数の次の引数を返す。奇数番目の引数にtrueのものがないとundefinedを返す\n                        \n                        \n                            accumulate(x1, a1, x2, a2, ..., xn, an)\n                            accumulate(3&gt;10, 'a', 13&gt;10, 'b'', 23&gt;10, 'c') の結果は 'b¶c¶'\n                            \n                                奇数番目の引数の値を1番目から調べ、すべてのtrueになる奇数番目の引数に対し、その次の引数をLF(0x10)を改行とした文字列リストの形式で返す。奇数番目にtrueのものがない場合には''を返す。\n                            \n                        \n                    \n                \n                文字列\n                \n                    \n                        \n                            関数\n                            例\n                            説明\n                        \n                        \n                            length()\n                            length('test') の結果は 4\n                            引数の文字列の長さを求める。nullが引数なら0を返す\n                        \n                        \n                            substr(x,y,z)\n                            substr('abcdefg', 3, 2) の結果は 'de'\n                            xの文字列に対して、y番目からz文字分のみを取り出す。最初の文字は0だが、文字位置は文字間の隙間をカウントするものとするので、最初の文字の前は0、次の隙間が1。yとzは負の数も受け付ける。yが負の数の場合は、最後の文字の前が-1、その前の文字の前が-2。zが負の数の場合はその文字より前にカウントする。\n                        \n                        \n                            substring(x,y,z)\n                            substring('abcdefg', 3, 5) の結果は 'de'\n                            xの文字列に対して、y番目からz文字目までを取り出す。最初の文字は0だが、文字位置は文字間の隙間をカウントするものとするので、最初の文字の前は0、次の隙間が1。yとzが負の数の場合は、最後の文字の前が-1、その前の文字の前が-2。\n                        \n                        \n                            left(x,y)\n                            left('abcdefg', 3) の結果は 'abc'\n                            xの文字列に対して、最初からy文字目までを取り出す\n                        \n                        \n                            mid(x,y,z)\n                            mid('abcdefg', 3, 2) の結果は 'de'\n                            xの文字列に対して、y文字目からz文字分を取り出す。最初の文字は0です。\n                        \n                        \n                            right(x,y)\n                            right('abcdefg', 3) の結果は 'efg'\n                            xの文字列に対して、最後からy文字分を取り出す\n                        \n                        \n                            indexof(x, y, fr)\n                            indexof('abcdefg','cd') の結果は 2\n                            \n                                xの文字列の最初からyの文字列を探し、最初に見つかった場所を返す。引数frを指定するとその文字以降を探すが、省略すると最初から。JavaScriptのString.indexOfを利用。最初の文字は0です。\n                            \n                        \n                        \n                            lastindexof(x,y)\n                            indexof('abcdefg','cd') の結果は 2\n                            \n                                xの文字列の最後からyの文字列を探し、最初に見つかった場所を返す。引数frを指定するとその文字以降を探すが、省略すると最初から。JavaScriptのString.lastIndexOfを利用。最初の文字は0です。\n                            \n                        \n                        \n                            replace(x,y,z,w)\n                            replace('abcdefgabc', 5, 8, 'yz') の結果は 'abcdeyzbc'\n                            xの文字列のy番目からz文字分を、文字列wに置き換える。最初の文字は0です。\n                        \n                        \n                            substitute(x,y,z)\n                            substitute('abcdefgabc', 'bc', 'yz') の結果は 'ayzdefgayz'\n                            xの文字列内にあるすべての文字列yを文字列zに置き換える。最初の文字は0です。\n                        \n                        \n                            basename(path)\n                            basename('dir/subdir/afile.txt') の結果は 'afile.txt'\n                            引数の文字列をパスとして認識して、ファイル名を求める\n                        \n                        \n                            extname(path)\n                            extname('dir/subdir/afile.txt') の結果は 'txt'\n                            引数の文字列をパスとして認識して、拡張子を求める\n                        \n                        \n                            dirname(path)\n                            dirname('dir/subdir/afile.txt') の結果は 'dir/subdir'\n                            引数の文字列をパスとして認識して、ディレクトリ名を求める\n                        \n                        \n                            decodeURI(str)\n                            decodeURI('%28Z%29') の結果は '(Z)'\n                            JavaScriptのdecodeURI関数と同一の動作\n                        \n                        \n                            encodeURI(str)\n                            encodeURI('(Z)') の結果は'%28Z%29' \n                            JavaScriptのencodeURI関数と同一の動作\n                        \n                        \n                            decodeURIComponent(str)\n                            decodeURIComponent('%28Z%29') の結果は '(Z)'\n                            JavaScriptのdecodeURIComponent関数と同一の動作\n                        \n                        \n                            encodeURIComponent(str)\n                            encodeURIComponent('(Z)') の結果は'%28Z%29' \n                            JavaScriptのencodeURIComponent関数と同一の動作\n                        \n                        \n                            jsonparse(jsonstr, path)\n                            jsonparse('{\"a\":1,\"b\":2,\"c\":[4,5,6],\"d\":{\"a\":7,\"b\":8}}','c.1')の値は5\n                            最初の引数は文字列化されたJSONを指定、pathにドットで区切ってルートからのキーを記述することで、JSON内部のデータを取り出すことができる。配列の場合は数値を指定する\n                        \n                    \n                \n                正規表現\n                \n                    \n                        \n                            関数\n                            例\n                            説明\n                        \n                        \n                            test(str, reg)\n                            test('123a456', '[^0-9]') の結果はtrue\n                            文字列strに対して、文字列regで表現した正規表現の検査を行い、マッチすればtrueを返す\n                        \n                        \n                            match(str, reg)\n                            match('123a456', '[0-9]([^0-9])([0-9]') の結果は['3a4', 'a', '4']\n                            文字列strに対して、文字列regで表現した正規表現の検索を行う。マッチすれば配列を返す。要素0は正規表現に対する最後にマッチングした文字列、要素1以降は、( ) の部分に対応する文字列\n                            \n                        \n                    \n                \n                文字リスト\n                \n                    \n                        \n                            関数\n                            例\n                            説明\n                        \n                        \n                            items(x,y,z)\n                            items(x,0,1) の結果は'abc¶'\n                            文字列リストxに対して、y番目からz項目分を文字列リストとして取り出す。最初の文字は0です。\n                        \n                        \n                            itemIndexOf(x,y)\n                            items(x,'abc') の結果は0\n                            文字列リストxに対して、yの文字列が何番目の項目かを求めて返す。 見つからない場合は、-1を返す。空行の連続では '' が要素として存在するものとして判定する。最初の文字は0です。\n                            \n                        \n                    \n                \n                三角関数\n                \n                    \n                        \n                            関数\n                            例（数値は丸めています）\n                            説明\n                        \n                        \n                            sin(x)\n                            sin(PI/4) の結果は 0.71\n                            \n                        \n                        \n                            cos(x)\n                            cos(PI/4) の結果は 0.71\n                            \n                        \n                        \n                            tan(x)\n                            tan(PI/4) の結果は 1\n                            \n                        \n                        \n                            tan2(x,y)\n                            tan2(0.5, 0.5) の結果は PI/4\n                            \n                        \n                        \n                            asin(x)\n                            asin(0.71) の結果は PI/4\n                            \n                        \n                        \n                            acos(x)\n                            acos(0.71) の結果は PI/4\n                            \n                        \n                        \n                            atan(x)\n                            atan(1) の結果は PI/4\n                            \n                        \n                    \n                \n                日付時刻の関数\n                \n                    \n                        \n                            関数\n                            例\n                            説明\n                        \n                        \n                            date(str)\n                            date('2014-02-18') の結果は\n                            引数に指定した文字列の日付に対応する整数を返す。数値は1970/1/1からの日数。引数をそのままJavaScriptのDateクラスで処理をする\n                        \n                        \n                            datetimestr)\n                            datetime('2014-02-17 09:00:01') の結果は\n                            引数に指定した文字列の日時に対応する整数を返す。数値は1970/1/1からの秒数。引数をそのままJavaScriptのDateクラスで処理をする\n                        \n                        \n                            datecomponents(y,m,d)\n                            datecomponents(2014,2,17) の結果は\n                            引数に、年月日を指定して、その日付に対応する整数を返す。数値は1970/1/1からの日数\n                        \n                        \n                            datetimecomponents(y,m,d,h,i,s)\n                            datetimecomponents(2014,2,17,9,0,0) の結果は\n                            引数に、年月日時分秒を指定して、その日時に対応する整数を返す。数値は1970/1/1からの秒数\n                        \n                        \n                            today()\n                            today() の結果は\n                            今現在の日付を指定する整数を返す。数値は1970/1/1からの日数\n                        \n                        \n                            now()\n                            now() の結果は\n                            今現在の日時を指定する整数を返す。数値は1970/1/1からの秒数\n                        \n                        \n                            year(x)\n                            year(datetime('2014-02-17')) の結果は 2014\n                            日付ないしは日時から年を求める\n                        \n                        \n                            month(x)\n                            month(datetime('2014-02-17')) の結果は 2\n                            日付ないしは日時から月を求める\n                        \n                        \n                            day(x)\n                            day(datetime('2014-02-17')) の結果は 17\n                            日付ないしは日時から日を求める\n                        \n                        \n                            weekday(d)\n                            weekday(datetime('2014-02-17 09:23:49') の結果は 1\n                            日付ないしは日時からから曜日を求める\n                        \n                        \n                            hour(x)\n                            hour(datetime('2014-02-17 09:23:49') の結果は 9\n                            日付ないしは日時から時を求める\n                        \n                        \n                            minute(x)\n                            minute(datetime('2014-02-17 09:23:49') の結果は 23\n                            日付ないしは日時から分を求める\n                        \n                        \n                            second(x)\n                            second(datetime('2014-02-17 09:23:49') の結果は 49\n                            日付ないしは日時から秒を求める\n                        \n                        \n                            yeardt(d)\n                            yeardt(datetime('2014-02-17')) の結果は 2014\n                            日時から年を求める\n                        \n                        \n                            monthdt(d)\n                            monthdt(datetime('2014-02-17')) の結果は 2\n                            日時から月を求める\n                        \n                        \n                            daydt(d)\n                            daydt(datetime('2014-02-17')) の結果は 17\n                            日時から日を求める\n                        \n                        \n                            weekdaydt(d)\n                            weekdaydt(datetime('2014-02-17 09:23:49') の結果は 1\n                            日時から曜日を求める\n                        \n                        \n                            hourdt(d)\n                            hourdt(datetime('2014-02-17 09:23:49') の結果は 9\n                            日時から時を求める\n                        \n                        \n                            minutedt(d)\n                            minutedt(datetime('2014-02-17 09:23:49') の結果は 23\n                            日時から分を求める\n                        \n                        \n                            seconddt(d)\n                            seconddt(datetime('2014-02-17 09:23:49') の結果は 49\n                            日時から秒を求める\n                        \n                        \n                            yeard(d)\n                            yeard(date('2014-02-17')) の結果は 2014\n                            日付から年を求める\n                        \n                        \n                            monthd(d)\n                            monthd(date('2014-02-17') の結果は 2\n                            日付から月を求める\n                        \n                        \n                            dayd(d)\n                            dayd(date('2014-02-17') の結果は 17\n                            日付から日を求める\n                        \n                        \n                            weekdayd(d)\n                            weekdayd(date('2014-02-17') の結果は 1\n                            日付から曜日を求める\n                        \n                        \n                            addyear(d, x)\n                            addyear(datetime('2014-02-17 09:23:49'), 2) の結果は '2016-02-17 09:23:49'\n                            日付ないしは日時に指定した年を加える\n                        \n                        \n                            addmonth(d, x)\n                            addmonth(datetime('2014-02-17 09:23:49'), 2) の結果は '2014-04-17 09:23:49'\n                            日付ないしは日時に指定した月を加える\n                        \n                        \n                            addday(d, x)\n                            addday(datetime('2014-02-17 09:23:49'), 2) の結果は '2014-02-19 09:23:49'\n                            日付ないしは日時に指定した日を加える\n                        \n                        \n                            addhour(d, x)\n                            addhour(datetime('2014-02-17 09:23:49'), 2) の結果は '2014-02-17 11:23:49'\n                            日付ないしは日時に指定した時を加える\n                        \n                        \n                            addminute(d, x)\n                            addminute(datetime('2014-02-17 09:23:49'), 2) の結果は '2014-02-17 09:25:49'\n                            日付ないしは日時に指定した分を加える\n                        \n                        \n                            addsecond(d, x)\n                            addsecond(datetime('2014-02-17 09:23:49'), 2) の結果は '2014-02-17 09:23:51'\n                            日付ないしは日時に指定した秒を加える\n                        \n                        \n                            endofmonth(d)\n                            endofmonth(datetime('2014-02-17 09:23:49') の結果は '2014-02-28'\n                            日付ないしは日時の月の最終日を求める\n                        \n                        \n                            startofmonth(d)\n                            startofmonth(datetime('2014-02-17 09:23:49') の結果は '2014-02-01'\n                            日付ないしは日時の月の最初の日を求める\n                        \n                        \n                            addyeardt(d, x)\n                            addyeardt(datetime('2014-02-17 09:23:49'), 2) の結果は '2016-02-17 09:23:49'\n                            日時に指定した年を加える\n                        \n                        \n                            addmonthdt(d, x)\n                            addmonthdt(datetime('2014-02-17 09:23:49'), 2) の結果は '2014-04-17 09:23:49'\n                            日時に指定した月を加える\n                        \n                        \n                            adddaydt(d, x)\n                            adddaydt(datetime('2014-02-17 09:23:49'), 2) の結果は '2014-02-19 09:23:49'\n                            日時に指定した日を加える\n                        \n                        \n                            addhourdt(d, x)\n                            addhourdt(datetime('2014-02-17 09:23:49'), 2) の結果は '2014-02-17 11:23:49'\n                            日時に指定した時を加える\n                        \n                        \n                            addminutedt(d, x)\n                            addminutedt(datetime('2014-02-17 09:23:49'), 2) の結果は '2014-02-17 09:25:49'\n                            日時に指定した分を加える\n                        \n                        \n                            addseconddt(d, x)\n                            addseconddt(datetime('2014-02-17 09:23:49'), 2) の結果は '2014-02-17 09:23:51'\n                            日時に指定した秒を加える\n                        \n                        \n                            endofmonthdt(d)\n                            endofmonthdt(datetime('2014-02-17 09:23:49') の結果は '2014-02-28'\n                            日時の月の最終日を求める\n                        \n                        \n                            startofmonthdt(d)\n                            startofmonthdt(datetime('2014-02-17 09:23:49') の結果は '2014-02-01'\n                            日時の月の最初の日を求める\n                        \n                        \n                            addyeard(d, x)\n                            addyeard(date('2014-02-17'), 2) の結果は '2016-02-17'\n                            日付に指定した年を加える\n                        \n                        \n                            addmonthd(d, x)\n                            addmonthd(date('2014-02-17'), 2) の結果は '2014-04-17'\n                            日付に指定した月を加える\n                        \n                        \n                            adddayd(d, x)\n                            adddayd(date('2014-02-17'), 2) の結果は '2014-02-19'\n                            日付に指定した日を加える\n                        \n                        \n                            endofmonthd(d)\n                            endofmonthd(date('2014-02-17') の結果は '2014-02-28'\n                            日付の月の最終日を求める\n                        \n                        \n                            startofmonthd(d)\n                            startofmonthd(date('2014-02-17') の結果は '2014-02-01'\n                            日付の月の最初の日を求める\n                        \n                    \n                \n            \n        "
    },
    {
        "id": 21,
        "parent": "/ja/for-developers/",
        "path": "/ja/for-developers/sendmail.html",
        "title": "メール送信(Ver.5)",
        "breadcrumb": "メール送信(Ver.5)",
        "body": "\n            \n                はじめに\n                メールはサーバーで送ります。送信方法は、PHPのmail関数を使う方法なので、UNIX系ならsendmailコマンドをたたく方法になります。一方、これだとSMTPサーバーへの転送ができないので、qdsmtpも組み込みました（Thanks to Mr. Spok）。SMTP認証はPlainのみの対応となっています。Windowsの場合はmail関数がすでにSMTPですので、php.iniにサーバー情報などを書くことで対処できます。なお、Windows環境はチェックしていないので、何かあれば知らせてもらえると助かります。（設定のリファレンスは本ページの末尾にあります。）\n                ただ、これだけではだめだろうというのはご存知の方はお分かりかと思いますが、昔作っていたOMEというメールソフトにはPHPのクラスもあったので、それをUTF-8で動くように改造してエンコードなどをさせるようにしました。ちなみに、さらにその前に『メール送信システムの作り方大全』という書籍も書いていて、その中の一部のクラスを使いやすいようにしたのがOME.phpです。この本、もう10年以上前なのですね…。\n                定義ファイルに指定可能なキーワードは以下の通り全て列挙します。しかしながら、すべてを記述することはないです。\n                \n                    IM_Entry(\n    &nbsp; &nbsp; array( &nbsp; // Contexts\n    &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;array(\n    &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;'name' =&gt; 'request',\n    &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;'send-mail' =&gt; array(\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;'new' =&gt; array(\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;'from' =&gt; '',\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;'to' =&gt; 'email',\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;'cc' =&gt; '',\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;'bcc' =&gt; '',\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;'subject' =&gt; '',\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;'body' =&gt; '',\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;'from-constant' =&gt; 'Officer &lt;info@msyk.net&gt;',\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;'to-constant' =&gt; 'msyk@me.com',\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;'cc-constant' =&gt; 'businessmatching@cocoa-study.com',\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;'bcc-constant' =&gt; '',\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;'subject-constant' =&gt; 'Cocoa勉強会ビジネスマッチング申し込み',\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;'body-constant' =&gt; 'テストメール',\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;'body-template' =&gt; 'welcome.txt',\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;'body-fields' =&gt; 'name,compnay,email,tel',\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;'f-option' =&gt; true,\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;'body-wrap' =&gt; 68,\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;)\n    &nbsp; &nbsp; ),\n    &nbsp; &nbsp; array(   // Options\n    &nbsp; &nbsp; &nbsp; &nbsp; 'formatter' =&gt; array(...),\n    &nbsp; &nbsp; &nbsp; &nbsp; 'smtp' =&gt; array(\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;'server' =&gt; 'mysmtp.msyk.net',\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;'port' =&gt; 587,\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 　　　'username' =&gt; 'msyktest@msyk.net',\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;'password' =&gt; 'oshienai',\n    &nbsp; &nbsp; &nbsp; &nbsp; )\n    &nbsp; &nbsp; ),\n    &nbsp; &nbsp; array('db-class' =&gt; 'PDO'),\n    &nbsp; &nbsp; false\n    );\n                \n            \n            \n                メールを送信するタイミングの指定\n                'send-mail'キーの配列の次のレベルのキーとして、'load' 'edit' 'new'のいずれかを指定できます。それぞれ、データベースからの読み込み時、更新時、新規レコード作成時を意味し、コンテキストに対するそれぞれのタイミングでメールを送信します。いずれも、データベース処理が終了してからメールの送信にかかります。上記の例では、新規レコード作成時に、メールが送信されます。\n            \n            \n                宛先や送信者の指定\n                宛先の指定は、'to'ないしは'to-constant'キーに指定します。もし、宛先が一定のものであれば、'to-constant'キーに指定をしてください。'to'キーにはフィールド名を指定します。データベース処理の結果、たとえば新規レコードの場合には新しいレコードが1つ作成されて、そのレコードの内容から'to'キーに指定したフィールドより宛先のデータが取り出されます。編集も原則は1レコードです。一方、読み出しの場合は1レコードにならないかもしれませんが、その場合は最初のレコードから取り出します。むしろ、1レコードに絞り込むコンテキストにするのがメールを送る場合には妥当だと考えられます。\n                メールアドレスは「名前 &lt;アドレス&gt;」ないしは「アドレス」の2つの形式のみのサポートになります。'to-constant'キーに対する値、あるいは'to'キーで指定されるフィールドの値は、このどちらかの形式にしてください。\n                cc、bccについてもまったく同様のルールです。'to'と'to-constant'の両方の指定があれば、'to-constant'が優先されます。cc、bccでも-constantが優先となります。\n                fromについても、fromとfrom-constantキーがあり、設定や動作等は同じです。ただし、UNIXでSMTPサーバーを使わない場合だと、通常はソース側のFrom:は無視されて、UNIXアカウントそのものをFrom:として設定してしまいます。ただし、サーバー側で許可されていれば「'f-option' =&gt; true」の指定を定義ファイル内に記述することで、sendmailコマンドの-fパラメータを指定して、送信者の指定が可能です。\n            \n            \n                件名と本文の指定\n                件名は、subjectあるいはsubject-constantのいずれかのキーに指定します。toなどと同じルールです。\n                メールの本文は、定義ファイル内に指定した通りに送信する'body-constant'、フィールドの内容をそのまま送信する'body'に加えて、テンプレートの処理も可能です。優先順はテンプレート、body-constant、bodyの順になりますので、不要なフィールドは消しておきましょう。\n                テンプレート処理をするには、テンプレートのファイル名をbody-templateキーに指定します。このとき、テンプレートのファイルは、定義ファイルのあるディレクトリを基準に検索します。つまり、定義ファイルといっしょに何らかのテキストファイルを億としたら、body-templateキーの値はファイル名だけでかまいません。\n                テンプレートのファイル内では、そのファイルの内容を本文にしますが、フィールドの値との置き換えも可能です。置き換えたい箇所に@@1@@、@@2@@のように、アットマーク2つに囲まれた1から始まる整数を指定します。テンプレートのファイルはUTF-8で保存します。\n                フィールドについては、'body-fields'キーに、半角のカンマで区切って指定します。最初が1で、順次番号が増えるようになります。例で言えば、emailフィールドの値は、テンプレート内の@@3@@と置き換わって表示されます。'body-fields'キーを省略すると、テンプレートのファイル通りにメールが送信されます。\n                本文は一定の長さで改行を入れます。既定値では72バイトですが、'body-wrap'キーで異なる値にできます。0に設定すると改行しません。ここで、バイト数ですが、実際のバイト数ではなく、日本語は2バイト、英語は1バイトと数えた結果で示しています。実際のエンコードはUTF-8なので、嘘と言えば嘘のカウントになりますが、おそらくこうして指定をすることに慣れている人が多いので、ここでは実態とは関係ない数値ではありますけども実用的という意味で「2バイトルール」でカウントしたものとします。\n            \n            \n                UNIXの場合のSMTPサーバーの指定\n                定義ファイルのIM_Entry関数の第3引数のオプション領域に'smtp'キーで配列を指定します。その他のキーは、前記の例の通りで、キーを見れば意味は分かると思います。もし、SMTP認証をしない場合は、serverとportだけを指定します。認証する場合は、server, port, username, passwordを指定します。したがって、2つないしは4つの要素があるかのどちらかになります。\n                SMTPサーバーの指定は、params.phpファイルでも指定が可能です。変数名として、$sendMailSMTPの定義し、値は'smtp'の右側の配列と同様に指定をします。params.phpファイルでの指定よりも、定義ファイルの指定が優先されます。どこにもSMTPサーバーの設定がない場合には、mail関数での送信になります。\n                Windowsの場合は、'smtp'の指定やparams.phpファイルでの指定は一般には不要ですが、もし設定すれば、mail関数ではなく、qdsmtpによるメール送信ができます。\n            \n            \n                送信されるメールの文字セット\n                基本的にはメールはUTF-8でエンコードして送られます。ISO-2022-JPの指定はOME.phpではできるのですが、必要なら定義ファイルでの指定ができるようにしようと思います。リクエストがなければUTF-8固定で行きます。\n                ヘッダについては、base64のインラインエンコードを、ASCIIコード以外の文字について行います。本文はそのままですが、ヘッダのContent-TyleのcharsetにUTF-8という文字を付けます。つまり、本文はbase64等でのエンコードは行いません。\n                ファイルの添付は実装する予定はありません。ファイルを送りたいのなら、そのリンクを送るようなアプリケーションの動作にしましょう。\n            \n            \n                Gmailのアカウントでメール送信する場合\n                \"server\"キーの値は、\"ssl://smtp.gmail.com\" としてください。\"port\"キーの値は、\"465\"としてください。\"username\"キーの値は、ユーザー名を指定しますが、メールアドレスそのものを指定します。\"password\"キーはパスワードそのものを指定します。\n                定義ファイルやparams.phpに上記の2つのSMTP送信に関するパラメータを設定するとメールが送信できますが、できない場合には、こちらの記述に従って、「安全性の低いアプリのアクセス」を有効にします。この設定が「有効」になっていないと、SMTPサーバーが受け付けません。相当以前はこれが既定値で「有効」になっていましたが、ある時期からは「無効」が既定値になっているようですので、以前は送ることができたという方も、この設定は必ず確認をしてみてください。\n            \n            \n                リファレンス\n               \n                    [第1引数, コンテキスト定義]\n                    メール送信\n                \n               \n                    \n                    \n                        配列指定\n                        値\n                    \n                    \n                        キー\n                        インデックス\n                        下位のキー\n                    \n                    \n                    \n                    \n                        'send-mail'\n                        'read'\n                        \n                        コンテキストに対してレコードの取り出しを行った後にメールを送信する。\n                    \n                    \n                        'from'\n                        送信者名や送信者アドレスが含まれるフィールド名\n                    \n                    \n                        'to'\n                        送信先が含まれるフィールド名\n                    \n                    \n                        'cc'\n                        Cc先が含まれるフィールド名\n                    \n                    \n                        'bcc'\n                        Bcc先が含まれるフィールド名\n                    \n                    \n                        'subject'\n                        件名が含まれるフィールド名\n                    \n                    \n                        'body'\n                        メール本文が含まれるフィールド名\n                    \n                    \n                        'from-constant'\n                        送信者やアドレスを文字列で指定\n                    \n                    \n                        'to-constant'\n                        送信先を文字列で指定\n                    \n                    \n                        'cc-constant'\n                        Cc先を文字列で指定\n                    \n                    \n                        'bcc-constant'\n                        Bcc先を文字列で指定\n                    \n                    \n                        'subject-constant'\n                        件名を文字列で指定。文字列内に「@@フィールド名@@」の記述があれば、フィールドのレコードに置き換わる\n                    \n                    \n                        'body-constant'\n                        本文を文字列で指定。文字列内に「@@フィールド名@@」の記述があれば、フィールドのレコードに置き換わる\n                    \n                    \n                        'body-template'\n                        本文のテンプレートとなるファイルのファイル名\n                    \n                    \n                        'body-fields'\n                        テンプレートに差し込むフィールドの順序をカンマで区切る\n                    \n                    \n                        'f-option'\n                        UNIXでSMTPサーバを経由しない場合にtrueを指定すると、fromの指定が有効\n                    \n                    \n                        'body-wrap'\n                        右端の折り返しのバイト数\n                    \n                    \n                        'update'\n                        \n                        コンテキストに対してレコードの更新処理を行った後にメールを送信する。第3次元については、readと同様。\n                    \n                    \n                        'create'\n                        \n                        コンテキストに対して新たなレコードを作るアクションを起こした後にメールを送信する。第3次元については、readと同様。\n                    \n                    \n                \n                \n                    [第2引数, オプション設定]メール送信サーバー\n                \n                \n                    \n                    \n                        配列指定\n                        値\nparams.phpで変数名\n                    \n                    \n                        第1次元\n                        第2次元\n                    \n                    \n                    \n                    \n                        'smtp'\n                        'server'\n                        メール送信時に使用するサーバのホスト\n                        $sendMailSMTP\n                    \n                    \n                        'port'\n                        メール送信時に使用するサーバのポート\n                    \n                    \n                        'username'\n                        メール送信時に認証で使用するユーザー名\n                    \n                    \n                        'password'\n                        メール送信時に認証で使用するパスワード\n                    \n                    \n                \n            \n        "
    },
    {
        "id": 34,
        "parent": "/ja/for-developers/",
        "path": "/ja/for-developers/sendmail6.html",
        "title": "メール送信(Ver.6)",
        "breadcrumb": "メール送信(Ver.6)",
        "body": "\n            \n                はじめに\n                メールはサーバーで送ります。送信方法は、PHPのmail関数を使う方法なので、UNIX系ならsendmailコマンドをたたく方法になります。一方、これだとSMTPサーバーへの転送ができないので、swiftmailerも組み込みました。Windowsの場合はmail関数がすでにSMTPですので、php.iniにサーバー情報などを書くことで対処できます。（設定のリファレンスは本ページの末尾にあります。）\n                定義ファイルでの指定例を以下に示します。なお、Ver.5の動作とVer.6の動作の兼ね合いがあるので、後半の記事もご覧ください。\n                \nIM_Entry(\n    &nbsp; &nbsp; array( &nbsp; // Contexts\n    &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;array(\n    &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;'name' =&gt; 'request',\n    &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;'send-mail' =&gt; array(\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;'create' =&gt; array(\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;     'from-constant' =&gt; 'info@msyk.net',\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 'to' =&gt; 'email',\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;'cc-constant' =&gt; 'msyk@me.com',\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;'subject-constant' =&gt; 'ビジネスマッチング申し込み',\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;'body-constant' =&gt; '受け付けました。\\n本当です。',\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 'f-option' =&gt; true,\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;'body-wrap' =&gt; 68,\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;)\n    &nbsp; &nbsp; ),\n    &nbsp; &nbsp; array(   // Options\n    &nbsp; &nbsp; &nbsp; &nbsp; 'formatter' =&gt; array(...),\n    &nbsp; &nbsp; &nbsp; &nbsp; 'smtp' =&gt; array(\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;'server' =&gt; 'mysmtp.msyk.net',\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;'port' =&gt; 587,\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;   'username' =&gt; 'msyktest@msyk.net',\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;'password' =&gt; 'oshienai',\n    &nbsp; &nbsp; &nbsp; &nbsp; )\n    &nbsp; &nbsp; ),\n    &nbsp; &nbsp; array('db-class' =&gt; 'PDO'),\n    &nbsp; &nbsp; false\n    );\n                \n            \n            \n                メールを送信するタイミングの指定\n                'send-mail'キーの配列の次のレベルのキーとして、'read' 'update' 'create'のいずれかを指定できます。それぞれ、データベースからの読み込み時、更新時、新規レコード作成時を意味し、コンテキストに対するそれぞれのタイミングでメールを送信します。いずれも、データベース処理が終了してからメールの送信にかかります。上記の例では、新規レコード作成時に、メールが送信されます。\n            \n            \n                宛先や送信者の指定\n                宛先の指定は、'to'ないしは'to-constant'キーに指定します。もし、宛先が一定のものであれば、'to-constant'キーに指定をしてください。'to'キーにはフィールド名を指定します。データベース処理の結果、たとえば新規レコードの場合には新しいレコードが1つ作成されて、そのレコードの内容から'to'キーに指定したフィールドより宛先のデータが取り出されます。編集も原則は1レコードです。一方、読み出しの場合は1レコードにならないかもしれませんが、その場合は最初のレコードから取り出します。むしろ、1レコードに絞り込むコンテキストにするのがメールを送る場合には妥当だと考えられます。\n                メールアドレスは「名前 &lt;アドレス&gt;」ないしは「アドレス」の2つの形式のみのサポートになります。'to-constant'キーに対する値、あるいは'to'キーで指定されるフィールドの値は、このどちらかの形式にしてください。\n                cc、bccについてもまったく同様のルールです。'to'と'to-constant'の両方の指定があれば、'to-constant'が優先されます。cc、bccでも-constantが優先となります。\n                fromについても、fromとfrom-constantキーがあり、設定や動作等は同じです。ただし、UNIXでSMTPサーバーを使わない場合だと、通常はソース側のFrom:は無視されて、UNIXアカウントそのものをFrom:として設定してしまいます。ただし、サーバー側で許可されていれば「'f-option' =&gt; true」の指定を定義ファイル内に記述することで、sendmailコマンドの-fパラメータを指定して、送信者の指定が可能です。\n            \n            \n                件名と本文の指定\n                件名は、subjectあるいはsubject-constantのいずれかのキーに指定します。toなどと同じルールです。\n                メールの本文は、定義ファイル内に指定した通りに送信する'body-constant'、フィールドの内容をそのまま送信する'body'に加えて、テンプレートの処理も可能です。優先順はテンプレート、body-constant、bodyの順になりますので、不要なフィールドは消しておきましょう。\n                テンプレート処理をするには、テンプレートのファイル名をbody-templateキーに指定します。このとき、テンプレートのファイルは、定義ファイルのあるディレクトリを基準に検索します。つまり、定義ファイルといっしょに何らかのテキストファイルを億としたら、body-templateキーの値はファイル名だけでかまいません。\n                テンプレートのファイル内では、そのファイルの内容を本文にしますが、フィールドの値との置き換えも可能です。置き換えたい箇所に@@1@@、@@2@@のように、アットマーク2つに囲まれた1から始まる整数を指定します。テンプレートのファイルはUTF-8で保存します。\n                フィールドについては、'body-fields'キーに、半角のカンマで区切って指定します。最初が1で、順次番号が増えるようになります。例で言えば、emailフィールドの値は、テンプレート内の@@3@@と置き換わって表示されます。'body-fields'キーを省略すると、テンプレートのファイル通りにメールが送信されます。\n                本文は一定の長さで改行を入れます。既定値では72バイトですが、'body-wrap'キーで異なる値にできます。0に設定すると改行しません。ここで、バイト数ですが、実際のバイト数ではなく、日本語は2バイト、英語は1バイトと数えた結果で示しています。実際のエンコードはUTF-8なので、嘘と言えば嘘のカウントになりますが、おそらくこうして指定をすることに慣れている人が多いので、ここでは実態とは関係ない数値ではありますけども実用的という意味で「2バイトルール」でカウントしたものとします。\n            \n            \n                UNIXの場合のSMTPサーバーの指定\n                定義ファイルのIM_Entry関数の第3引数のオプション領域に'smtp'キーで配列を指定します。その他のキーは、前記の例の通りで、キーを見れば意味は分かると思います。もし、SMTP認証をしない場合は、serverとportだけを指定します。認証する場合は、server, port, username, passwordを指定します。したがって、2つないしは4つの要素があるかのどちらかになります。\n                SMTPサーバーの指定は、params.phpファイルでも指定が可能です。変数名として、$sendMailSMTPの定義し、値は'smtp'の右側の配列と同様に指定をします。params.phpファイルでの指定よりも、定義ファイルの指定が優先されます。どこにもSMTPサーバーの設定がない場合には、mail関数での送信になります。\n                Windowsの場合は、'smtp'の指定やparams.phpファイルでの指定は一般には不要ですが、もし設定すれば、mail関数ではなく、qdsmtpによるメール送信ができます。\n            \n            \n                送信されるメールの文字セット\n                基本的にはメールはUTF-8でエンコードして送られます。ISO-2022-JPの指定はOME.phpではできるのですが、必要なら定義ファイルでの指定ができるようにしようと思います。リクエストがなければUTF-8固定で行きます。\n                ヘッダについては、base64のインラインエンコードを、ASCIIコード以外の文字について行います。本文はそのままですが、ヘッダのContent-TyleのcharsetにUTF-8という文字を付けます。つまり、本文はbase64等でのエンコードは行いません。\n                ファイルの添付は実装する予定はありません。ファイルを送りたいのなら、そのリンクを送るようなアプリケーションの動作にしましょう。\n            \n            \n                Gmailのアカウントでメール送信する場合\n                \"server\"キーの値は、\"smtp.gmail.com\" としてください。\"port\"キーの値は、\"587\"としてください。さらに\"encription\"キーは、\"tls\"とします。\"username\"キーの値は、ユーザー名を指定しますが、メールアドレスそのものを指定します。\"password\"キーはパスワードそのものを指定します。params.phpファイルに指定する場合の例を示します。\n$sendMailSMTP = array(\n    \"server\" =&gt; \"smtp.gmail.com\",\n    \"port\" =&gt; 587,\n    \"encryption\" =&gt; \"tls\",\n    \"username\" =&gt; \"msyk.nii83@gmail.com\",\n    \"password\" =&gt; \"himitsunopassword\",\n);\n                定義ファイルやparams.phpに上記の2つのSMTP送信に関するパラメータを設定するとメールが送信できますが、できない場合には、こちらの記述に従って、「安全性の低いアプリのアクセス」を有効にします。この設定が「有効」になっていないと、SMTPサーバーが受け付けません。相当以前はこれが既定値で「有効」になっていましたが、ある時期からは「無効」が既定値になっているようですので、以前は送ることができたという方も、この設定は必ず確認をしてみてください。\n           \n            \n                INTER-Mediator Ver.5とVer.6との相互運用\n                Ver.6の開発時に、様々な機能を追加しましたが、そのための互換性が微妙な感じになってきたので、何もしない場合はVer.5と同じ動作になることを目指し、次のようなルールでバージョン間の動作を切り分けられるようにしました。以下の方法で切り分けるのは、メールの文面を作成する動作です。メール送信は、以下の方法でVer.5の動作にしている時でも、SMTPサーバーを指定するとswiftmailerを利用するなど、送信処理はVer.6で置き換わったものになります。\n                まず、params.phpに$sendMailCompatibilityModeという変数を記述することができるようにしました。これがtrueならVer.5の動作、falseならVer.6の動作となります。この変数は省略した場合trueになります。しかしながら、コンテキストのsend-mailキーに、template-contextキーの値がある場合には、無条件にVer.6の動作になります。\n                Ver.5と6の動作の違いは以下のとおりです。\n                \n                template-contextキーによる、メール文面をデータベースから取り出す処理はVer.6動作が必須。一方、body-template、body-fieldsによるテンプレート処理は、Ver.5互換にしないと利用できない。\n                文字列中の@@フィールド名@@をフィールドの値に置き換える機能は、Ver.5ではsubject-constant、body-constantのみ。Ver.6では、from、to、bcc、cc、body、subjectについて置き換えが可能になった。\n                Ver.6では、from-constant、to-constant、cc-constant、bcc-constant、subject-constant、body-constantは無視するようにした。\n                HTMLの送信はVer.6のみ。\n                \n            \n            \n                ファイルを添付する\n                ファイルを1つだけ追加できます。添付するには、media-root-dirキーの指定が必要です。そして、media-root-dirキーと、attachmentキーから得られるパスを繋いだ絶対パスのファイルを添付します。attachmentキーにフィールド名を指定した場合、そのフィールドは、ファイルのアップロードコンポーネントを利用してアップロードした場合に自動的に設定されるパス名であることを想定していますが、状況によってはテンプレートの仕組みでパスを合成すれば良いでしょう。\n            \n            \n                送信結果をデータベースに残す\n                storeキーには、同じ定義ファイル内に定義した、レコード作成可能なコンテキストを指定します。そのコンテキストに、新たにレコードを作って送信した結果を残せます。エラーがあって送れない場合でも結果を残します。なお、指定したコンテキストには、以下のフィールドがあるものとします。フィールド名は固定でカスタマイズはできません。フィールド名から、何が入力されるかは判別可能だと思います。\n                to_field、bcc_field、cc_field、from_field、subject、body、errors\n                あるテーブルの関連テーブルに送信結果を残す場合、relationキーを指定します。すると、上位のコンテキストの主キー値を自分自身の外部キーフィールドに設定できるので、作られたメール送信レコードに元のテーブルとの関連を残すことができます。ただし、operatorが=のものだけです。また、送信結果を残すコンテキストにqueryキーがあり、operatorが=のものがある場合、その値も初期値として設定されます。\n            \n            \n                データベースに入れたテンプレートにある文面でメールを作成する\n                メールの文面や送り先などをデータベースに入れておき、それを元にメールを作成して送付するには、template-contextキーを指定します。例えば、「mail_template@id=3」のように記述します。mail_templateは、同じ定義ファイルにある読み込み可能なコンテキストで、このコンテキストから以下のようなフィールドがあるものとします。フィールド名は固定でカスタマイズはできません。フィールド名から、何が入力されているかは判別可能だと思います。\n                 to_field、bcc_field、cc_field、from_field、subject、body\n                 @以降は、コンテキストの中の検索条件を指定しますが、条件そのものではなく、=の前後で分離して、WHERE id = 3 のような検索条件で検索をします。実際には最初の1つのレコードだけを利用します。そのレコードからそれぞれのフィールドを取り出しますが、値そのままの場合もありますが、@@フィールド@@を置き換えることも可能です。\n           \n            \n                HTMLメールの送信\n                メールの文面の最初の文字列が &lt;html&gt; である場合、HTMLメールトとして送信します。添付ファイルも一緒に送れますが、添付ファイルをHTMLに埋め込みたい場合、本文の文面内で##image## と記述すればOKです。ただし、画像ファイルであるという前提で文面を作成してください。\n            \n            \n                メッセージングとしてメール送信\n                send-mailキーはVer.6でも利用できますが、メッセージ送信機能を拡張するにあたり、send-mailキーの代わりにmessagingキーを指定することもできます。その場合は、配列にdriverキーで値がmailのエントリーを入れるか、drivierキーを省略することでも構いません。\n            \n            \n                リファレンス\n               \n                    [第1引数, コンテキスト定義]\n                    メール送信\n                \n               \n                    \n                    \n                        配列指定\n                        値\n                    \n                    \n                        キー\n                        インデックス\n                        下位のキー\n                    \n                    \n                    \n                    \n                        'send-mail'あるいは'messaging'\n                        'driver'\n                        \n                        メールを送信する場合は、値は'mail'、あるいはこのエントリーごと省略する（send-mailキーの場合は記述してはいけない）\n                    \n                    \n                        'read'\n                        \n                        コンテキストに対してレコードの取り出しを行った後にメールを送信する。\n                    \n                    \n                        'from'\n                        送信者名や送信者アドレスが含まれるフィールド名、あるいはアドレスの文字列。文字列内に「@@フィールド名@@」の記述があれば、フィールドのレコードに置き換わる\n                    \n                    \n                        'to'\n                        送信先が含まれるフィールド名、あるいはアドレスの文字列。文字列内に「@@フィールド名@@」の記述があれば、フィールドのレコードに置き換わる。複数の送信先はカンマで区切る\n                    \n                    \n                        'cc'\n                        Cc先が含まれるフィールド名、あるいはアドレスの文字列。文字列内に「@@フィールド名@@」の記述があれば、フィールドのレコードに置き換わる。複数の送信先はカンマで区切る\n                    \n                    \n                        'bcc'\n                        Bcc先が含まれるフィールド名、あるいはアドレスの文字列。文字列内に「@@フィールド名@@」の記述があれば、フィールドのレコードに置き換わる。複数の送信先はカンマで区切る\n                    \n                    \n                        'subject'\n                        件名が含まれるフィールド名、あるいは件名の文字列。文字列内に「@@フィールド名@@」の記述があれば、フィールドのレコードに置き換わる\n                    \n                    \n                        'body'\n                        メール本文が含まれるフィールド名、あるいは本文の文字列。文字列内に「@@フィールド名@@」の記述があれば、フィールドのレコードに置き換わる\n                    \n                    \n                        'from-constant'\n                        送信者やアドレスを文字列で指定（Ver.5互換動作の場合のみ）\n                    \n                    \n                        'to-constant'\n                        送信先を文字列で指定（Ver.5互換動作の場合のみ）\n                    \n                    \n                        'cc-constant'\n                        Cc先を文字列で指定（Ver.5互換動作の場合のみ）\n                    \n                    \n                        'bcc-constant'\n                        Bcc先を文字列で指定（Ver.5互換動作の場合のみ）\n                    \n                    \n                        'subject-constant'\n                        件名を文字列で指定。文字列内に「@@フィールド名@@」の記述があれば、フィールドのレコードに置き換わる（Ver.5互換動作の場合のみ）\n                    \n                    \n                        'body-constant'\n                        本文を文字列で指定。文字列内に「@@フィールド名@@」の記述があれば、フィールドのレコードに置き換わる（Ver.5互換動作の場合のみ）\n                    \n                    \n                        'body-template'\n                        本文のテンプレートとなるファイルのファイル名（Ver.5互換動作の場合のみ）\n                    \n                    \n                        'body-fields'\n                        テンプレートに差し込むフィールドの順序をカンマで区切る（Ver.5互換動作の場合のみ）\n                    \n                    \n                        'f-option'\n                        UNIXでSMTPサーバを経由しない場合にtrueを指定すると、fromの指定が有効\n                    \n                    \n                        'body-wrap'\n                        右端の折り返しのバイト数\n                    \n                    \n                        'template-context'\n                        メールの文面を得られるコンテキスト名と検索条件。テーブルに文面のテンプレートをセットしているものとする\n                    \n                    \n                        'store'\n                        送信したメールをここで指定したコンテキストに対して新規レコードを作成して保存する\n                    \n                    \n                        'attachment'\n                        添付するファイルへの相対パスの文字列、あるいはそれを含むフィールド名。文字列内に「@@フィールド名@@」の記述があれば、フィールドのレコードに置き換わる\n                    \n                    \n                        'update'\n                        \n                        コンテキストに対してレコードの更新処理を行った後にメールを送信する。第3次元については、readと同様\n                    \n                    \n                        'create'\n                        \n                        コンテキストに対して新たなレコードを作るアクションを起こした後にメールを送信する。第3次元については、readと同様\n                    \n                    \n                \n                \n                    [第2引数, オプション設定]メール送信サーバー\n                \n                \n                    \n                    \n                        配列指定\n                        値\nparams.phpで変数名\n                    \n                    \n                        第1次元\n                        第2次元\n                    \n                    \n                    \n                    \n                        'smtp'\n                        'server'\n                        メール送信時に使用するサーバのホスト\n                        $sendMailSMTP\n                    \n                    \n                        'port'\n                        メール送信時に使用するサーバのポート\n                    \n                    \n                        'username'\n                        メール送信時に認証で使用するユーザー名\n                    \n                    \n                        'password'\n                        メール送信時に認証で使用するパスワード\n                    \n                    \n                        'encryption'\n                        通信処理の暗号化をする場合にその方法を指定する。'ssl'、あるいは'tls'を指定する\n                    \n                    \n                \n            \n        "
    },
    {
        "id": 35,
        "parent": "/ja/for-developers/",
        "path": "/ja/for-developers/slack.html",
        "title": "Slackにメッセージを送信する",
        "breadcrumb": "Slackにメッセージを送信する",
        "body": "\n            \n                はじめに\n                INTER-Mediatorは以前からメール送信は可能でしたが、Slackのメッセージ送信についても可能にしました。メールと同様に、データベースへの書き込み、更新、読み出しの後に、それらのデータを用いてのメッセージ送信が可能です。Slack側の仕組みは簡単で、Slack Appという設定を行い、ワークスペースにインストールするだけです。Slack Appは単にボットからの書き込みを許可する設定だけです。（設定のリファレンスは本ページの末尾にあります。）\n            \n            \n                Slackでメッセージを受け付けるようにする\n                Slackのメッセージングを行うには、ワークスペース単位にSlack Appのインストールを行います。ここで使うSlack Appは単なる設定です。Slack Appを設定すれば、認証用のトークンが発行されます。そして、メッセージを投入するときに、どのチャンネルなのかと、どんなメッセージなのかを指定します。つまり、Slack Appを作成後は、トークン、チャンネル、メッセージの3つの情報があれば、SlackのAPIコールが可能ということになります。以下、メッセージを受け付けるようにするまでのSlack側の設定を紹介します。\n                SlackのAPIのページに移動します。ログインしていない場合は、「sign in to your Slack account」の部分をクリックして、まずはログインをします。\n                \n                ログインのページで、ワークスペースにログインをします。\n                \n                \n                SlackのAPIのページに移動すると、Create New Appボタンが見えています。このボタンをクリックします。\n                \n                パネルが表示されます。ここで、App Nameを入力し、使用するワークスペースを選択します。App Nameはメッセージの送信者として、投稿したメッセージの中で見えるようになります。そして、Create Appをクリックします。\n                \n                作成したSlack Appの編集画面に入ります。以後は、必要に応じて、保存を行ってください。まず、Add features and functionalityのところにある「Permissions」のボックスをクリックします。必要ならスクロールするなどして探してください。\n                \n                \n                移動したOauth &amp; Permissionsのページで、Scopesのボックスを見つけます。そこにあるAdd an OAuth Scopeボタンをクリックします。\n                \n                ドロップダウンの枠が出てくるので、ここで、「chat:write:bot」を選択します。\n                \n                Scopsのリストに、「chat:write:bot」の項目が追加されました。\n                \n                ページをスクロールして前の方に移動すると、Install App to Workspaceというボタンがあります。このボタンをクリックします。\n                \n                OAuthでやりとりするメッセージの設定を行います。そのままAllowボタンをクリックするので構いませんが、必要ならば設定の変更を行います。\n                \n                OAuth Access Tokenとして、認証トークンが得られました。本稿では、以後はアクセストークンの例は、「xoxp-XXXXXXXXXXX-XXXXXXXXXXX-XXXXXXXXXXXX-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx」と記載します。Copyボタンをクリックするとクリップボードに文字列がコピーされます。\n                \n                設定したことがメールでも送信されています。\n                \n                Slack側の設定は以上です。\n            \n            \n                INTER-Mediatorで開発する定義ファイルの設定\n                サンプルファイルでは、samples/Sample_chatにあるinclude_MySQL.phpファイルに設定例があります。まず、こちらは、定義ファイルの設定例です。\n                \n                    &lt;?php\nrequire_once(dirname(__FILE__) . '/../../INTER-Mediator.php');\n\nIM_Entry(\n    array(\n        array(\n            'records' =&gt; 100000000,\n            'name' =&gt; 'chat',\n            'key' =&gt; 'id',\n            'sort' =&gt; array(\n                array('field' =&gt; 'postdt', 'direction' =&gt; 'desc'),\n            ),\n            'default-values' =&gt; array(\n                array('field' =&gt; 'postdt', 'value' =&gt; date(\"Y-m-d H:i:s\")),\n            ),\n            'authentication' =&gt; array(\n                'all' =&gt; array( // load, update, new, delete\n                    'target' =&gt; 'field-user',\n                    'field' =&gt; 'user',\n                ),\n            ),\n            'messaging' =&gt; [\n                'driver' =&gt; 'slack',\n                'create' =&gt; [\n                    'subject-constant' =&gt; 'message-posting-test',\n                    'body' =&gt; 'message',\n                ]\n            ]\n        ),\n    ),\n    array(\n        'authentication' =&gt; array( ... ),\n        'slack' =&gt; array(\n            'token' =&gt; 'xoxp-XXXXXXXXXXX-XXXXXXXXXXX-XXXXXXXXXXXX-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',\n            'channel =&gt; '',\n        ),\n    ),\n    array('db-class' =&gt; 'PDO'),\n    false\n);\n                \n              \n                こちらは、params.phpファイルの例です。\n\n\n                    $slackParameters = [\n    \"token\"=&gt;'xoxp-XXXXXXXXXXX-XXXXXXXXXXX-XXXXXXXXXXXX-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',\n    \"channel\" =&gt; 'message-posting-test',\n];\n                \n                認証トークンとチャンネルは、params.phpファイル、あるいは定義ファイルの2つ目の引数であるオプション指定に記述が可能です。両方に定義があると、params.php側が優先されます。params.phpファイルでは、変数$slackParametersに配列を代入し、配列はキーがtokenとchannelの連想配列になるようにしておきます。定義ファイルのオプション領域では、slackキーに対する連想配列で、tokenキーとchannelキーでそれぞれの指定を行います。\n                そして、定義ファイルのコンテキストと定義に、messagingキーを記述することで、データベース処理に対するメッセージング処理の動作を記述できます。messagingキーの直下は、driver、create、update、readのいずれかのキーを記述しますが、driverは必ず指定して、値はslackにしてください。これを省略するとメール送信とみなします。create、update、readの1つは必ず指定することになると思われます。そのデータベース処理が行われた後に、Slackへメッセージが飛びます。ここで、それぞれの操作の配列に使えるキーは、subject、subject-constat、body、body-constantのいずれかになります。subjectの2つのキーは、チャンネルを示します。チャンネルは3箇所に指定できますが、優先順位はコンテキスト内のものが最優先となります。bodyの2つのキーはメッセージです。subject、bodyは、いずれもコンテキストに存在するフィールド名を1つだけ記述します。一定の文字列で良い場合は、body-constantに文字列を記述します。なお、body-constantではテンプレート処理も行い、その中の「@@フィールド名@@」の記述部分が、コンテキストで得られるデータベースのフィールドの値に置き換わります。なお、コンテキストで複数のレコードが得られる場合、それぞれのレコードに対してメッセージが送信されます。\n                メッセージが送られる様子は、こちらのビデオでご確認できます。\n                以下、設定可能な項目について、まとめておきます。\n                \n                    [第1引数, コンテキスト定義]\n                    Slackメッセージ送信\n                \n                \n                    \n                    \n                        キー\n                        インデックス\n                        下位のキー\n                        値\n                    \n                   \n                    \n                    \n                        'messaging'\n                         'driver'\n                        \n                        'slack' と指定する\n                    \n                    \n                        'read'\n                        \n                        コンテキストに対してレコードの取り出しを行った後にメールを送信する。\n                    \n                    \n                        'subject'\n                        チャンネルが含まれるフィールド名\n                    \n                    \n                        'subject-constant'\n                        チャンネルを文字列で指定。文字列内に「@@フィールド名@@」の記述があれば、フィールドのレコードに置き換わる\n                    \n                    \n                        'body'\n                        メッセージが含まれるフィールド名\n                    \n                    \n                        'body-constant'\n                        メッセージを文字列で指定。文字列内に「@@フィールド名@@」の記述があれば、フィールドのレコードに置き換わる\n                    \n                    \n                        'create'\n                        \n                        コンテキストに対してレコード作成を行った後にメールを送信する。下位のキーはreadと同じ\n                    \n                    \n                        'update'\n                        \n                        コンテキストに対してレコードの更新を行った後にメールを送信する。下位のキーはreadと同じ\n                    \n                    \n                               \n                \n                    [第2引数, オプション設定]Slackメッセージング\n                \n                \n                    \n                    \n                        配列指定\n                        値\n                        params.phpで変数名\n                    \n                    \n                        第1次元\n                        第2次元\n                    \n                    \n                    \n                    \n                        'slack'\n                        'token'\n                        Slackの認証トークン\n                        $slackParameters\n                    \n                    \n                        'channel'\n                        メッセージを送信するサーバ連想配列、キーは第2次元のキーワードと同一\n                    \n                    \n                \n            \n        "
    },
    {
        "id": 22,
        "parent": "/ja/for-developers/",
        "path": "/ja/for-developers/auth.html",
        "title": "ユーザー認証とアクセス権",
        "breadcrumb": "ユーザー認証とアクセス権",
        "body": "\n            \n                ユーザ認証とアクセス権の設定をサポートします。INTER-Mediator自身がデータベースを利用して、ユーザーやグループを管理する手法を「ビルトイン認証」、データベースエンジン側に登録したユーザーを利用する認証を「ネイティブ認証」、LDAPサーバのユーザーを利用した認証を「LDAP認証」と呼びます。また、OAuth2（ただし、Googleのみ確認）やSAMLにも対応しています。INTER-Mediator Ver.8では、パスワード記録時のハッシュを従来のSHA-1から、5000ストレッチしたSHA-256にアップデートしています。従来のSHA-1でのハッシュと相互運用もできます。\n                認証動作に必要なテーブル\n                チャレンジ等を記録するテーブル\n                ユーザ認証ではセキュリティを高めるために、サーバーからクライアントに「チャレンジ」を送り、その値を利用して認証情報を作ります。そのため、サーバー側にチャレンジを残しておく必要があり、テーブルの定義が必要です。そのテーブルは、IM_Entryの第3引数あるいはparams.phpで指定したユーザで読み書きの権限が必要です。チャレンジのテーブル名は、IM_Entryの第2引数で指定するか、あるいは既定値の名前（issuedhash）のテーブルを作成します。テーブルには以下のフィールドが必要です。\n                \n                    チャレンジのテーブルに必要なフィールド\n                    \n                        \n                            フィールド名\n                            型の例\n                            説明\n                        \n                        \n                            user_id\n                            INT,\n                            ユーザテーブルのキーフィールドとなるid値（ユーザをデータベース内のテーブルで管理する場合に利用）\n                        \n                        \n                            username\n                            VARCHAR(48),\n                            ユーザテーブルのキーフィールドとなるid値（ユーザをデータベースエンジンが提供するもので運用する場合に利用）\n                        \n                        \n                            clienthost\n                            VARCHAR(64),\n                            クライアントを識別する情報。サーバーからランダムに与えられる40バイトのHEXコード。ただし、パスワードのセルフサービスのリセット時にSHA-256のハッシュ値のHEX文字列が入る。\n                        \n                        \n                            hash\n                            VARCHAR(64),\n                            チャレンジに使うハッシュ値。実際には48バイトの16進数文字列。ただし、パスワードのセルフサービスのリセット時にSHA-256のハッシュ値のHEX文字列が入る。\n                        \n                        \n                            expired\n                            DateTime,\n                            チャレンジの有効期限を示すタイムスタンプ値\n                        \n                    \n                \n                なお、このテーブルへの検索では、user_idとclienthostあるいはusernameとclienthostの2つのフィールドに対してAND演算での検索条件が与えられます。従って、高速化するためには、この2つのフィールドを合成したインデックスを作っておきます。\n                ユーザーのテーブル\n                認証のためのユーザは、データベース内にテーブルを作成する方法と、データベースエンジンが管理するユーザによる方法を利用できます。データベース内にテーブルを作る場合、そのテーブルは、IM_Entryの第3引数あるいはparams.phpで指定したユーザで少なくとも読み出しの権限が必要です。チャレンジのテーブル名は、IM_Entryの第2引数で指定するか、あるいは既定値の名前（authuser）のテーブルを作成します。テーブルには以下のフィールドが必要です。\n                \n                    ユーザテーブルに必要なフィールド\n                    \n                        \n                            フィールド名\n                            型の例\n                            説明\n                        \n                        \n                            id\n                            INT AUTO_INCREMENT,\n                            連番の数値を入れて、キーフィールドとする\n                        \n                        \n                            username\n                            VARCHAR(48)\n                            ユーザ名（特に制限はないが、重複した名前が定義されないようにするのが望ましい）\n                        \n                        \n                            hashedpasswd\n                            VARCHAR(72)\n                            パスワードのハッシュ値。SHA-256のハッシュ値と、4バイトのソルトを合成したコードのHEXが入るので、72バイト必要。\n                        \n                        \n                            email\n                            VARCHAR(48),\n                            電子メールアドレス。ユーザー名の代わりに使用したり、パスワードのリセットで利用\n                        \n                        \n                            limitdt\n                            DateTime\n                            LDAP認証ユーザーのキャッシュの期限\n                        \n                    \n                \n                ユーザの場合は、ユーザ名をキーフィールドに使えるとも考えられますが、大量のユーザになったときなどに処理速度を有利にするために、内部的にはidフィールドによる連番で与えた数値で処理をすることにします。なお、usernameを条件として検索をかけるので、高速化のためにはこのフィールドにインデックスを作成しておきます。パスワードはハッシュを保存しますが、ハッシュ値は、次の手順で計算をします。\n                \n                    パスワード（pw）と、4バイトのソルト（s）を用意します。\n                    パスワードとソルトをつなげた文字列のSHA-256を5000回のストレッチで求めます（ sha256(pw+s, 5000) → H1）\n                    H1の16進数表現した文字列と、ソルトを16進数表現した文字列をつなげます（hex(H1)+hex(s)→H2）\n                    H2をフィールドに保存します。\n                \n                コマンドで求める例としては、あまり効率良くはないですが、INTER-Mediatorのレポジトリにあるdist-docs/passwdgen.shスクリプトを利用できます。-uはユーザ名、-pはパスワード、-sはSQL文として出力するパラメータです。opensslのコマンドを内部で使っていますが、5000回のストレッチをコマンドから行う方法がわからず、シェルスクリプトで繰り返してopensslコマンドを動かしているため、ハッシュの計算に30秒から1分くらいかかると思われます。\n                % dist-docs/passwdgen.sh -u test -p TEST -s\nINSERT authuser(username,initialpass,hashedpasswd) VALUES('test','TEST','5d4b09daced104e42bc5cfc1d4db6c677afd3ffeadc950a2873b009aeba39bab45654d4b');\n\n                \n                なお、過去に開発したアプリケーションとの互換性を考慮して、SHA-1での利用も可能です。SHA-1ハッシュ値は、次の手順で計算をします。\n                \n                    パスワード（pw）と、4バイトのソルト（s）を用意します。\n                    パスワードとソルトをつなげた文字列のSHA-1求めます（ sha1(pw+s) → H1）\n                    H1の16進数表現した文字列と、ソルトを16進数表現した文字列をつなげます（hex(H1)+hex(s)→H2）\n                    H2をフィールドに保存します。\n                \n                SHA-256互換ハッシュという、SHA-1からパスワードを変更せずにハッシュそのものはSHA-256に移行できるモードも用意しています。設定を行えば、SHA-1での認証が成功した時に、データベースのhashedpasswdフィールドの内容をこの互換ハッシュで書き換えます。次回以降の認証は、互換ハッシュを使っての認証となるので、パスワードを変更せずにSHA-256を使ったハッシュでの運用に移行できます。互換ハッシュは次の手順で計算をします。\n                \n                    SHA-1で求めたHEX表現のハッシュをHとします。\n                    Hのソルトを求めてsとします（salt(H) → s）\n                    Hとsをつなげた文字列のSHA-256を5000回のストレッチで求めます（ sha256(H+s, 5000) → H1）\n                    Hの16進数表現した文字列と、ソルトを16進数表現した文字列をつなげます。このH2がSHA-256互換ハッシュです（hex(H1)+hex(s)→H2）\n                \n\n                グループを管理するテーブル\n                グループそのものを管理するテーブルと、ユーザーやグループの特定のグループへの所属を記録するテーブルの2つがあります。\n                \n                    グループテーブル（既定名：authgroup）のフィールド\n                    \n                        \n                            フィールド名\n                            型の例\n                            説明\n                        \n                        \n                            id\n                            INT AUTO_INCREMENT,\n                            グループを識別するための番号\n                        \n                        \n                            groupname\n                            VARCHAR(48),\n                            グループ名\n                        \n                    \n                \n                \n                    ユーザ・グループ対応付けテーブル（既定名：authcor）のフィールド\n                    \n                        \n                            フィールド名\n                            型の例\n                            説明\n                        \n                        \n                            user_id\n                            INT,\n                            所属するユーザのidフィールドの値\n                        \n                        \n                            group_id\n                            INT,\n                            所属するグループのidフィールドの値\n                        \n                        \n                            dest_group_id\n                            INT,\n                            所属されるグループのidフィールドの値\n                        \n                    \n                \n                アクセス権に関する設定の評価\n                認証の設定は基本的にコンテキストに行いますが、IM_Entryの2番目の引数にも行えます。記述可能な内容については、『定義ファイルでの記述方法a&gt;』を参照してください。つまり、2カ所の設定があるので、以下のように、コンテキストに設定する方を「コンテキストの認証設定」、2つ目の引数に設定するのを「オプションの認証設定」とします。また、いずれも、アクセス権の設定も行いますが、「認証とアクセス権」を合わせてここでは「認証」というネーミングをします。\n                IM_Entry(\n    array(\n        array(\n            \"name\"=&gt;\"context\",\n            \"authentication\"=&gt;array(\n                /* コンテキストの認証設定 */\n            ),\n        ),\n    ),\n    array(\n        \"authentication\"=&gt;array(\n            /* オプションの認証設定 */\n        ),\n...);\n\n                \n                \n                オプションの認証設定に設定可能な情報\n                \n                    \n                    \n                        配列指定\n                        値\n                        params.phpで変数名\n                    \n                    \n                        第1次元\n                        第2次元\n                    \n                    \n                    \n                    \n                        'authentication'\n                        'user'\n                        利用可能なユーザを配列で指定。この記述がなければすべてのユーザにアクセス権。データベースのネイティブユーザで認証する場合には、値を「array('database_native')」と指定する。\n                    \n                    \n                        'group'\n                        利用可能なグループを配列で指定。この記述がなければすべてのグループにアクセス権\n                    \n                    \n                        'user-table'\n                        ユーザ情報が保存されているテーブル名。省略すると'authuser'\n                    \n                    \n                        'group-table'\n                        ユーザ情報が保存されているテーブル名。省略すると'authgroup'\n                    \n                    \n                        'corresponding-table'\n                        ユーザとグループが対応づけられている情報が保存されているテーブル名。省略すると'authcor'\n                    \n                    \n                        'challenge-table'\n                        チャレンジが保存されているテーブル名。省略すると'issuedhash'\n                    \n                    \n                        'authexpired'\n                        認証が自動的に継続される時間を秒数で指定する。省略すると'3600'（1時間）。バージョン4.4以降では、0を指定すると有効期限はWebブラウザー終了時まで\n                    \n                    \n                        'storing'\n                        \n                            認証情報のクライアントへの保存を指定。'cookie'ならPathを指定しないでクッキーに保存（既定値）、'cookie-domainwide'ならドメイン全体で共有できるようにクッキーに保存、'session-storage'ならブラウザのセッションストレージに保存、'none'ならクッキーに保存しない。'credential'であれば認証情報をhttp-onlyのクッキーに保存する\n                        \n                    \n                    \n                        'realm'\n                        \n                            認証領域名。ログインパネルの上部に表示される。また、認証情報を記憶するクッキーの名称の末尾に付与される。\n                        \n                    \n                    \n                        'email-as-username'\n                        \n                            trueを指定すると、authuserテーブルのusernameと同時にemailフィールドも検索する。つまり、電子メールアドレスでの認証が可能になる。既定値はfalse\n                        \n$emailAsAliasOfUserName\n                    \n                    \n                        'issuedhash-dsn'\n                        \n                            issuedhashテーブルに対するDSNを指定する。たとえば、FileMakerデータベースで、issuedhashテーブルをSQLiteで運用する場合に使える\n                        \n$issuedHashDSN\n                    \n                    \n                        'password-policy'\n                        パスワード変更時に適用されるパスワードポリシー。useAlphabet useNumber useUpper useLower usePunctuation length(10)\n                            notUserNameの各単語をスペースで区切って指定する。useAlphabetはアルファベットを使用していないといけなくする。その他、同様に単語から意味が分かるはずである。length(10)はパスワードは10文字以上にする必要があるという意味で、(\n                            ) 内には任意の数値を記述できる。\n                        \n$passwordPolicy\n                    \n                    \n                        'reset-page'\n                        ログインパネルに、パスワードリセットページへのボタンを設置する。ここに、パスワードリセットページのURLを記載する。\n                        $resetPage\n                    \n                        'enroll-page'\n                        ログインパネルに、ユーザー登録ページへのボタンを設置する。ここに、ユーザー登録ページのURLを記載する。\n                        $enrollPage\n                    \n                        'is-saml'\n                        SAML認証を有効にする。なお、params.phpで、$samlAuthSourceの設定は必要。\n                        $isSAML\n                    \n                        'saml-builtin-auth'\n                        SAML認証有効時、ビルトイン認証も有効にするかどうかを指定する。\n                        $samlWithBuiltInAuth\n                    \n                    \n                        'media-context'\n                        \n                        \n                            メディアアクセスに認証を設定するとき、ここで指定したコンテキストにアクセスしたときにメディアの認証用のトークンをクライアントに届ける。このトークンをクライアントが持つ事で、メディアプロキシが認証される（Ver.6ではこの指定は不要になった）\n                        \n                    \n                    \n                \n\n                コンテキストの認証設定に設定可能な情報\n                \n                    \n                    \n                        配列指定\n                        値\n                    \n                    \n                        キー\n                        インデックス\n                        下位のキー\n                    \n                    \n                    \n                    \n                        'authentication'\n                        'media-handling'\n                        \n                        メディアアクセス時の認証を通すためのクッキー情報を、このコンテキストの読み出し時にクライアントに送り込む。必要なときに値にtrueを指定する\n                    \n                    \n                        'all'\n                        'user'\n                        \n                            すべての操作について、このコンテキストを利用可能なユーザを配列で指定。この記述がなければすべての認証ユーザにアクセス権\n                        \n                    \n                    \n                        'group'\n                        \n                            すべての操作について、このコンテキストを利用可能なグループを配列で指定。この記述がなければすべてのグループにアクセス権\n                        \n                    \n                    \n                        'target'\n                        \n                            省略あるいは'table'なら、テーブル全体に対する権限の設定、'field-user'あるいは'field-group'ならレコードごとに権限を指定できる\n                        \n                    \n                    \n                        'field'\n                        \n                            'target'に'field-user'あるいは'field-group'に指定した場合、ユーザ名やグループ名を指定するフィールドのフィールド名\n                        \n                    \n                    \n                        'noset'\n                        \n                            'noset' =&gt; trueで指定すると、レコード作成時に、fieldで指定したフィールドにユーザ名あるいはグループ名を設定する操作を行わない。例えば、認証に使うフィールドを意図的にリレーションシップにより自動的に設定するようなことを意図した場合、リレーションシップのためのフィールド設定と、fieldに指定したフィールドへの入力が重複してSQLエラーが出る。それを回避するための設定。\n                        \n                    \n                    \n                        'read'\n                        (allと同様）\n                        クエリーの操作について、このコンテキストに関する設定を行う\n                    \n                    \n                        'update'\n                        （allと同様）\n                        更新の操作について、このコンテキストに関する設定を行う\n                    \n                    \n                        'create'\n                        （allと同様）\n                        新規レコード作成の操作について、このコンテキストに関する設定を行う\n                    \n                    \n                        'delete'\n                        （allと同様）\n                        レコード削除の操作について、このコンテキストに関する設定を行う\n                    \n                    \n                        'protect-writing'\n                        \n                        \n                        この配列に指定したフィールド名に対する更新処理を禁止する\n                    \n                    \n                        'protect-reading'\n                        \n                        \n                        この配列に指定したフィールド名から読み出したデータをクライアントに送る事を禁止する\n                    \n                    \n                \n\n                コンテキストの認証設定なし、オプションの認証設定あり\n                タイトル用な条件だと、コンテキストの認証設定のuserとgroupがアクセス権の設定に関係します。もし、userもgroupも設定されていない場合は、認証が通ったユーザは何でもできると考えてください。\n                userあるいはgroupが設定されている場合、認証が通ると同時に、そのユーザあるいはそのユーザを含むグループが、userあるいはgroupの設定に含まれている必要があります。\n                コンテキストの認証設定あり、オプションの認証設定なし\n                オプションの設定のうちuserとgroupの設定がないということです。この場合、特定のコンテキストのデータベース処理に対して、コンテキストの認証設定が適用されます。\n                コンテキストの認証設定あり、オプションの認証設定あり\n                両方の認証設定があれば、先にオプションの認証設定が評価されて、その後にコンテキストの認証設定が評価されます。\n                コンテキストの認証設定の適用対象\n                適用対象として、4つのデータベース処理、read/create/update/deleteに対する処理と、それらすべてに対してまとめて設定を行うallがあります。\n                コンテキストの認証設定のtableとfleld\n                \"table\"キーに対する値がfield-userあるいはfield-groupの場合は、そのテーブルにあるfieldに指定したフィールドに、ログインが成功したユーザあるいはそのユーザが含むグループの名前が設定されちているレコードだけに絞り込まれます。検索条件にANDでユーザないしはグループの値をfieldに指定したフィールドに対する条件を付け加えます。したがって、fieldで指定したフィールドのうち、空欄ものは認証すればいっさいアクセスできないということになります。\n                \"table\"キーに対する値がfield-useやfield-groupではない場合、アクセス権はすべてのテーブルに渡って適用されます。レコードごとのアクセス権を記録するフィールドは不要です。このとき、userあるいはgroup属性に含まれていないユーザで認証した場合、いっさいのアクセスはできないようになっています。オプションの認証設定と異なる動作ですので、注意してください。\n                read/update/deleteに関しては、アクセス権は「検索条件」として集約されます。一方、createの操作に対しては、アクセス権がある場合だけ、レコードの作成が可能です。レコードの作成により、fieldで指定したフィールドに、ユーザないしはグループが設定されます。ユーザの場合は1つに決まりますが、グループの場合は、グループ名を並べ替えたときのいちばん先頭のグループ名を記録するようにします。\n                \n                params.phpファイルへの指定\n                \n                                \n                    \n                    \n                        変数名\n                        既定値\n                        指定内容\n                    \n                    \n                    \n                      \n                        $passwordHash\n                        \"1\"\n                        \"1\"なら、SHA-1、SHA-256互換、SHA-256のいずれも対応。\"2m\"なら、SHA-256互換、SHA-256のいずれも対応。\"2\"なら、SHA-256のみ対応。\n                      \n                      \n                        $alwaysGenSHA2\n                        false\n                        $passwordHashが\"1\"で、この変数がfalseの場合、パスワード変更するとSHA-1でハッシュする。この変数がtrueなら、パスワード変更時にSHA-256でハッシュする。$passwordHashが\"1\"以外の場合は、この変数に関係なく、パスワードを変更すると、SHA-256でハッシュをかける。\n                      \n                      \n                        $migrateSHA1to2\n                        false\n                        trueにすれば、SHA-1でハッシュされたパスワードでログインをした後、そのハッシュ値をSHA-256互換のハッシュにコンバートする。実質的に、SHA-1のパスワードを変更しないでSHA-256に移行できる。\n                      \n                      \n                        $resetPage\n                        なし\n                        URLを文字列で指定すると、ログインパネルに「パスワードをリセット」のボタンが表示され、クリックするとそのURLへジャンプする。ボタン名のメッセージの番号は2023\n                      \n                      \n                        $enrollPage\n                        なし\n                        URLを文字列で指定すると、ログインパネルに「ユーザー登録をする(要メールアドレス)」のボタンが表示され、クリックするとそのURLへジャンプする。ボタン名のメッセージの番号は2022\n                      \n                      \n                        $ldapServer\n                        なし\n                        LDAPサーバーのURLで、ldap://あるいはldaps://から始まる。この設定を行うと、LDAP認証が有効になる。\n                      \n                      \n                        $ldapPort\n                        なし\n                        LDAPサーバーのポート番号。通常は389\n                      \n                      \n                        $ldapBase\n                        なし\n                        ディレクトリ内のルートへのDNなど。$ldapContainerを繋げてユーザレコードが存在する場所を示す。\n                      \n                      \n                        $ldapContainer \n                        なし\n                        $ldapBaseに繋げてユーザレコードが存在する場所を示す。\n                      \n                      \n                        $ldapAccountKey\n                        なし\n                        ユーザー名として識別するデータがある属性名\n                      \n                      \n                        $ldapExpiringSeconds\n                        1800\n                        ユーザー情報をビルトインユーザとしてキャッシュするが、キャッシュの有効期間。この期間を過ぎると、再度LDAPサーバへ認証を確認する。\n                      \n                      \n                        $oAuthProvider \n                        なし\n                        OAuth認証時のプロバイダを指定する文字列で、\"Google\"のみ実装。\n                      \n                      \n                        $oAuthClientID\n                        \n                        プロバイダから供給されるクライアントID\n                      \n                      \n                        $oAuthClientSecret \n                        \n                        プロバイダから供給されるシークレット\n                      \n                      \n                        $oAuthRedirect\n                        \n                        認証後にリダイレクトされるURL\n                      \n                      \n                        $isSAML\n                        false\n                        SAML認証を有効にする。なお、SAMLのSPになるための設定については、INTER-Mediatorのレポジトリにあるsample/saml-configディレクトリの内容と説明を参照してください。\n                      \n                      \n                        $samlAuthSource\n                        なし\n                        SPの識別名\n                      \n                      \n                        $samlWithBuiltInAuth\n                        false\n                        trueにすると、SAML認証だけでなく、ビルトイン認証も並行して利用できる。そのため、INTER-Mediatorのログインパネルが表示され、そこに「SAML認証」ボタン（ボタン名のメッセージの番号は2026）が表示される\n                      \n                   \n                \nログインパネルのカスタマイズ\nログインパネルのカスタマイズについて、マイナーなものであれば、CSSの設定で行けると思います。ブラウザのデバッガで見ていただければ、ログインパネルの各要素はそれぞれclass属性が割り当てられているので、たとえば、ページのヘッダや独立したファイルでCSSを適用します。これらは、原則としてINTER-Mediatorのテーマ設定よりも優先度は高くなるので、上書きや変更は可能です。なお、ログインパネルのスタイル情報はテーマに含まれているので、テーマを作り直すという方法もあります。\nログインパネルを完全にカスタマイズしたいとう場合は、例えば、以下のようなプログラムを、INTERMediatorOnPage.doBeforeConstructに代入する関数の中などで実行します。最初の3行はプロパティ名から動作は明白と思われますが、ポイントは、ページに上乗せするログインパネル部分を、HTMLの文字列として、loginPanelHTMLプロパティに書き込みます。\nINTERMediatorOnPage.isShowChangePassword = false;\nINTERMediatorOnPage.defaultBackgroundImage = null;\nINTERMediatorOnPage.defaultBackgroundColor = \"white\";\nINTERMediatorOnPage.loginPanelHTML = '&lt;div&gt;....';\nこのloginPanelHTMLに書き込むHTMLはボディの一部となるような書き方をします。原則自由に記述できますが、この中にユーザー名を入れるテキストフィールドや、認証ボタンなどを配置する必要があります。それらは、決められたid属性を持つ必要があります。INTER-Mediatorが認識するid属性は、_im_password、_im_username、_im_authbutton、_im_changebutton、_im_oauthbuttonです。最初の2つがテキストフィールド、残りがボタンを想定しています。このid属性値を設定しておけば、例えば、認証ボタンとしての機能はINTER-Mediatorが自動的に組み込みます。\n                ネイティブ認証、LDAP認証で使う鍵データ\n                ネイティブ認証やLDAP認証では、クライアントで入力したパスワードを、サーバー側でも利用します。そのため、クライアントからサーバーにパスワードそのものを伝達しなければなりませんが、平文で流すことがないように、暗号化してクライアントからサーバーに送ります。そのために、RSAの鍵ペアを生成してサーバーに記録します。クライアントへは公開鍵だけが送られて、暗号にしたデータをサーバーに送ります。鍵ペアは例えば、「openssl rsagen -out gen.key 2048」のようなコマンドを入れてファイルをまず作ります。そして、その内容のテキストを、$params.phpファイルの変数$generatedPrivateKeyに代入します。INTER-Mediatorに含まれているparams.phpファイルで、該当する変数を探して、生成した鍵に置き換えてください。もし、鍵にパスワードが必要な場合には変数$passPhraseに記述できますが、このファイル自体はPHPが稼働していればクライアントから参照できないとはいえ、扱いには注意しましょう。\n                LDAP認証\n                LDAPサーバに関する情報を、params.phpファイルに記述をします。以下はその例です。変数ldapServerはLDAPサーバのURL、ldapPortはポート番号です。そして、ユーザーのDN（Distinguished Name）を決定するために、3つの変数を指定します。たとえば、ユーザー名がmsykなら、Open Directoryの場合はDNは「uid=msyk,cn=users,dc=homeserver,dc=msyk,dc=net」となります。「msyk」の前はldapAccountKey、後はldapContainerとldapBaseで指定した記述がつなげられて、DNを構成しています。ldapExpiringSecondsは、1回のLDAP認証後、指定した時間はLDAPサーバではなく、ネイティブ認証のためのテーブルにキャッシュした情報で認証します。これはパフォーマンスを高めるためです。最後に認証してから、変数ldapExpiringSeconds以上の時間が経過すると、改めてLDAPサーバに接続して認証を行います。\n                $ldapServer = \"ldap://homeserver.msyk.net\";\n$ldapPort = 389;\n$ldapBase = \"dc=homeserver,dc=msyk,dc=net\";\n$ldapContainer = \"cn=users\";\n$ldapAccountKey = \"uid\";\n$ldapExpiringSeconds = 1800;\n            \n            "
    },
    {
        "id": 23,
        "parent": "/ja/for-developers/",
        "path": "/ja/for-developers/samples.html",
        "title": "サンプルファイル",
        "breadcrumb": "サンプルファイル",
        "body": "\n            \n                はじめに\n                \n                    PHPの稼働が可能なWebサーバーをご用意ください。データベースとしては、FileMaker ServerないしはPDOに対応したデータベース（MySQLなど）も稼働させてください。\n                    \n                        ダウンロードしたファイルを展開したフォルダの中にある「INTER-Mediator_XXXX」フォルダをWebサーバーから参照できる場所にコピーしてください。以下、このフォルダを「INTER-Mediator」フォルダと参照します。このようにフォルダ名を変更してもかまいません。\n                    \n                    PHPでは、mbstringが動作していることを確認してください。Windows版のPHPではデフォルトではmbstringのDLLがコメントされていて読み込まれていないことが一般的ですので、ご注意ください。\n                    \n                \n            \n            \n                ダウンロードしたファイルの中身\n                \n                    ダウンロードしたフォルダ内ルートにあるファイルやフォルダが、INTER-Mediatorの本体です。その中にある「Samples」フォルダはサンプルです。\n                    \n                        「INTER-Mediator」フォルダは、PHPからから参照できる場所であれば、どこにあってもかまいません。このフォルダの中にJavaScriptファイルの「INTER-Mediator.js」があるのでWebで公開していないといけないかと思うかもしれませんが、このファイルは公開されている必要はありません。\n                    \n                    しかしながら、「INTER-Mediator」フォルダごと、Webサーバーで公開する場所に配置するのがいちばん手軽な方法です。\n                \n            \n            \n                FileMaker Serverでの準備\n                \n                    FileMaker Serverで利用する場合は、FX.php(This site is neither affiliated with nor endorsed by Chris Hansen)が必要ですが、INTER-Mediatorには含まれています。「INTER-Mediator/lib/FX」フォルダがそれです。一般に配布されるものをある程度改造したものを使っています。\n                    \n                    FileMaker Serverで付属のサンプルを利用する場合、解凍したフォルダのルートにあるTestDB.fp7をFileMaker Serverにインストールしてください。このファイルの管理ユーザは「admin」でパスワードは「1234」です。\n                    \n                    FileMaker ServerではXML共有を開始していることを確認してください（FXの動作条件です）。\n                \n            \n            \n                MySQLでの準備\n                \n                    \n                        MySQLで付属のサンプルを利用する場合、「INTER-Mediator/dist_docs/sample_schema_mysql.txtをmysqlコマンド等でデータベースに読み込んで、テーブルなどを定義してください。このファイルの最初に、コマンド入力方法について簡単に記載してあります。\n                    \n                    INTER-Mediator/params.phpの値、特に、$dbDSN 変数の値を適切なものに変更してください。\n                \n            \n            \n                PostgreSQLでの準備\n                \n                    \n                        PostgreSQLで付属のサンプルを利用する場合、「INTER-Mediator/dist_docs/sample_schema_pgsql.txtをpgsqlコマンド等でデータベースに読み込んで、テーブルなどを定義してください。このファイルの最初に、コマンド入力方法について簡単に記載してあります。\n                    \n                    INTER-Mediator/params.phpの値、特に、$dbDSN 変数の値を適切なものに変更してください。\n                \n            \n            \n                SQLiteでの準備\n                \n                    \n                        SQLiteで付属のサンプルを利用する場合、「INTER-Mediator/dist_docs/sample_schema_sqlite.txtをsqliteコマンド等でデータベースに読み込んで、テーブルなどを定義してください。このファイルの最初に、コマンド入力方法について簡単に記載してあります。\n                    \n                    データベースファイルの位置は特に問いませんので、適当な場所に作成します。INTER-Mediator/params.phpの値、特に、$dbDSN 変数の値を適切なものに変更してください。\n                \n            \n            \n                サンプルファイルのチェックポイント\n                \n                    \n                        インストール等の準備が行われれば、Webブラウザからサーバーに公開した「INTER-Mediator/Samples」ディレクトリを参照してください。Webサーバーのルートに「INTER-Mediator」フォルダがある場合、http://ホスト名/INTER-Mediator/Samples/index.htmlで、各サンプルへのリンクを貼ったページが表示されます。\n                    \n                    サンプルの一覧のページが表示されます。サンプルはデータベースごとに分類されています。\n                    \"Sample Portal Page\"は、テーブル形式の画面が表示されています。テキストフィールドに何か表示されていれば、インストールは成功です。これらのデータはデータベースの中にあるものが見えています。データベースを開いてページの内容と一致していることを確認します。たとえばFileMaker Proを使って開いたFileMakerのデータベースと、Webブラウザに見えているデータベースの内容が同じであることを確認してください。\n                    \n                    \n                        サンプルは、人間１人に対するコンタクト情報を記録するようなものです。意図的にあまり凝っては作っていません（INTER-Mediatorは「きれいな表」を作るツールではないからです）。まず、テキストフィールドに、フィールドの値がそのまま表示されていることを確認します。また、テキストフィールドのデータを変更してTabを押すなどすれば、そのタイミングでデータベース側ではそのフィールドだけが更新されています。つまり、テキストフィールドでは表示して編集し、編集結果をデータベースに書き戻す事ができます。\n                    \n                    チェックボックスやラジオボタンもあります。これらも、値に応じて選択されていたり、いなかったりといった動作をします。また、選択肢を変更すると、その結果がデータベースに書き込まれています。\n                    1人の人間に対して、複数のコンタクト先があります。つまり、1対多の関係をWebページ上に展開できます。\n                    \n                        コンタクトの情報では、WayとKindという2つのフィールドでポップアップメニューがあります。Wayの選択肢に応じてKindの選択肢が変わるようになっています。WayとKindの選択肢は多対多の関係にあるため、スキーマ的には中間テーブルを定義しています。\n                    \n                    「Delete」や「Insert」ボタンがあります。おそらく、期待通りに削除や挿入ができているのではないかと思います。1対多の関係にあるレコードについても、適切に外部キーの値を設定して、レコードの挿入を行います。\n                    \n                    いずれも、「保存」や「更新」という処理をしなくても、データベースが更新されていることが分かります。\n                    \"Sample Search Page\"は、郵便番号検索のサンプルです。検索条件にあらかじめ入れられているテキストで検索してみてください。また、その後、適当にいろいろと検索をしてみてください。複数のレコードを、決められた数のレコードごとに表示することができます。このサンプルの場合は、ボタンをクリックすればページを合成するという仕組みを利用して、「検索」の動きをさせています。\n                    \n                \n            \n        "
    },
    {
        "id": 24,
        "parent": "/ja/for-developers/",
        "path": "/ja/for-developers/bindingfunc.html",
        "title": "検索ページを作成するための機能",
        "breadcrumb": "検索ページを作成するための機能",
        "body": "\n            \n                はじめに\n                データベースの内容を一覧するときに、検索結果を適用するという仕組みを一切プログラムを書かずに実現するために、ボタンやテキストフィールド、あるいは一般的なノードに対して機能を割り当てるという考え方を導入しました。要素のdata-im属性を利用して、ローカルコンテキスト（名前は「_」）に特別なキー名でバインドすることで、機能が割り当てられます。今の所、検索ページを作るための以下のものが利用できます。抽象的に記述してもわかりにくいと思いますので、具体的なタグのテキストともに紹介します。\n            \n            \n                検索条件の付加\n                テキストフィールドを「_@condition:....」のローカルコンテキストへバインドさせると、そのテキストフィールドに入れた文字列が検索条件になります。また、Enterキーで、コンテキストの更新が実行されます。\n                &lt;input type=\"text\" data-im=\"_@condition:postalcode:f3,f7,f8,f9:*match*\"&gt;\n                \n                @以降は、コロン（:）で4つのセクションに分かれます。\n                \n                    第1セクション（例：condition）：この文字列\n                    第2セクション（例：postalcode）：コンテキスト名\n                    第3セクション（例：f3,f7）：フィールド名。複数の指定も可能\n                    第4セクション（例：*match*）：演算子\n                \n                最初の2つはいいとして、3つ目のフィールドは半角のカンマで区切って複数指定も可能です。複数指定をすると、それぞれのフィールドに対して同じ値の検索条件をORで与えます。なお、FileMakerのフィールド名に含まれる「::」は、「;;」に置き換えて指定します。4つ目の演算子は、一般的なものに加えて「*match」「match*」「*match*」の3つが用意されています。データベースエンジンに関わらずに、部分一致や前方一致などをこの演算子で記述します。\n                上記のテキストフィールドに、例えば「新宿」と入れてEnterキーを押すと、以下の検索条件がコンテキストに付加されて、再度検索を行い、そのコンテキストのエンクロージャー内が更新されます。\n                (f3 LIKE '%新宿%' OR&nbsp;f7 LIKE '%新宿%' OR&nbsp;f8 LIKE '%新宿%' OR&nbsp;f9 LIKE '%新宿%')\n                \n            \n            \n                表示件数の制御\n                以下のポップアップメニューを選択すると、レコードの表示件数をポップアップの選択肢で指定でき、選択と同時にコンテキストが更新されます。「limitnumber」が決められた名前で、コロンより後にはコンテキスト名を記述します。changeイベントにより、コンテキストの更新します。\n                &lt;select type=\"text\" data-im=\"_@limitnumber:postalcode\"&gt;...&lt;/select&gt;\n                \n            \n            \n                コンテキストの更新ボタン（検索ボタン）\n                以下のボタンをクリックすると、指定したコンテキストが更新されます。つまり、「検索」ボタンとして機能するということです。「update」が決められた名前で、コロンより後にはコンテキスト名を記述します。clickイベントにより、コンテキストの更新します。\n                &lt;button data-im=\"_@update:postalcode\"&gt;search&lt;/button&gt;\n                \n            \n            \n                並べ替えフィールドの指定\n                以下のSPANタグ内の▲をクリックすると、f3フィールドの昇順で並べ替えを行います。同一のコンテキストに対する「addorder」の機能を持った要素は連動します。たとえば「f3で昇順」の後に「f9の降順」を選択すると、「f9の降順」を最優先とし、続くキーとして「f3で昇順」を設定します。最後に設定した条件が最優先になるようになっています。このバインドはclickイベントに対応しており、クリックすれば指定したコンテキストが更新されます。\n                &lt;span style=\"cursor: pointer\" data-im=\"_@addorder:postalcode:f3:asc\"&gt;▲&lt;/span&gt;\n                \n                @以降は、コロン（:）で4つのセクションに分かれます。\n                \n                    第1セクション（例：addorder）：この文字列\n                    第2セクション（例：postalcode）：コンテキスト名\n                    第3セクション（例：f3）：フィールド名。1つのみ\n                    第4セクション（例：asc）：昇順ならasc、降順ならdesc\n                \n            \n            \n            複数の検索条件に対する演算子\n                この項目の記述は、Ver.10の途中から実装した機能です。あるコンテキストtesttableに対して、以下のような3つの検索用テキストフィールドを用意したとします。ちょっと複雑ですが、これによって、どんなWHERE句が生成されるのかを具体的に紹介します。\n                \n                    \n                \n                まず、既定の状態では次のように、ローカルコンテキストを利用した検索条件などからWHERE句を生成します。このコンテキストは、num1 &gt; 0 という検索条件をコンテキストに設定しているので、まず、それらの検索条件（つまり、ローカルコンテキストではない条件）があって、続いてANDで繋がれ、その後にローカルコンテキストによる条件が並びます。既定値では、ローカルコンテキストの検索条件は全てORで結ばれます。ローカルコンテキストによる条件の前の演算子は必ずANDになります。\n                SELECT * FROM `testtable` WHERE ((`num1` &gt; 0)) \n    AND ( ((`vc1` LIKE '%test word%' OR `vc2` LIKE '%test word%' OR `vc3` LIKE '%test word%') \n         OR (`num1` &gt;= 10) \n         OR (`num2` &lt;= 99)))\n                ここでカスタマイズ可能な演算子を「OP1」「OP2」で記述すると、次のようになります。OP1は、フィールドをカンマで書き並べた場合のそれぞれの条件を結合する演算子です。一方、OP2は、異なるローカルコンテキストの値ごとに生成される条件を結合する演算子です。\n                SELECT * FROM `testtable` WHERE ((`num1` &gt; 0)) \n    AND ( ((`vc1` LIKE '%test word%' OP1 `vc2` LIKE '%test word%' OP1  `vc3` LIKE '%test word%') \n         OP2  (`num1` &gt;= 10) \n         OP2  (`num2` &lt;= 99)))\n               OP1、OP2については既定値ではORですが、プロパティへの設定で演算子をANDに切り替えることもできます。INTERMediator.lcConditionsOP1AND、あるいはINTERMediator.lcConditionsOP2ANDというプロパティに対してtrueを代入することで、それぞれ、OP1とOP2の演算子をANDに切り替えることができます。プロパティへの設定は、例えば、ページ生成前に呼びされるdoBeforeConstructメソッド等に記述します。\n               INTERMediator.lcConditionsOP3ANDは、さらに検索条件の値に半角あるいは全角のスペースがあれば、それで区切って複数の検索条件を生成することができます。例えば、次のようにプロパティを設定したとします。\n      INTERMediatorOnPage.doBeforeConstruct = function () {\n        INTERMediatorLog.suppressDebugMessageOnPage = true\n        INTERMediator.lcConditionsOP1AND = false;\n        INTERMediator.lcConditionsOP2AND = true;\n        INTERMediator.lcConditionsOP3AND = true;\n      }\n               この時、3つ目の検索条件は「test word」だったので、「test」と「word」でそれぞれで検索する条件を生成して、それらは、OP1、つまりORで検索条件を生成します。ここでのtestによる検索条件と、wordによる検索条件を結ぶ演算子はORになっていますが、INTERMediator.lcConditionsOP3ANDに代入する値を文字列の'and'にすれば、ORではなくANDで演算します。なお、INTERMediator.lcConditionsOP2ANDについてもtrueにしているので、num1 &gt;= 10などの検索条件との結合演算子はANDが設定されています。\nSELECT * FROM `testtable` WHERE ((`num1` &gt; 0))\n    AND ( (((`vc1` LIKE '%test%' OR `vc2` LIKE '%test%' OR `vc3` LIKE '%test%') \n             OR (`vc1` LIKE '%word%' OR `vc2` LIKE '%word%' OR `vc3` LIKE '%word%')) \n         AND (`num1` &gt;= 10) \n         AND (`num2` &lt;= 99)))\n                改めて、OP1、OP2、OP3の関係がわかりやすいSQL文を記述しておきます。\n                SELECT * FROM `testtable` WHERE ((`num1` &gt; 0)) \n    AND ( (((`vc1` LIKE '%test%' OP1  `vc2` LIKE '%test%' OP1  `vc3` LIKE '%test%') \n             OP3  (`vc1` LIKE '%word%' OP1  `vc2` LIKE '%word%' OP1  `vc3` LIKE '%word%')) \n         OP2  (`num1` &gt;= 10) \n         OP2  (`num2` &lt;= 99)))\n                INTERMediator.lcConditionsOP1ANDとINTERMediator.lcConditionsOP2ANDについては、trueかfalseを入力しますが、規定値がfalseになっているので、trueにしたい場合だけ代入することでも構いません。INTERMediator.lcConditionsOP3ANDは前の2つのプロパティと異なり、false/true/'and'の3つの値のどれかです。trueの場合は単語分割するというフラグになっているので、この時のOP3演算子はORにはなります。OP3演算子をANDにしたい場合は、文字列の'AND'を指定します。\n                なお、Ver.7でINTERMediator.alwaysAddOperationExchangeを導入し、これにより、前述の説明のOP2をANDにするという機能を実装しました。Ver.10での改訂時に、INTERMediator.alwaysAddOperationExchangeが設定されていれば、INTERMediator.lcConditionsOP2ANDをtrueにするようにして、互換性を保っています。\n                        \n        "
    },
    {
        "id": 25,
        "parent": "/ja/for-developers/",
        "path": "/ja/for-developers/sharing5.html",
        "title": "変更結果の即時更新をマルチクライアントで実現する(Ver.5)",
        "breadcrumb": "変更結果の即時更新をマルチクライアントで実現",
        "body": "\n            \n                はじめに\n                \n                    コンテキストの共有化をマルチクライアントで実現する仕組みが稼働します。つまり、同一のページを複数のクライアントで参照しているとき、誰かがデータを変更すると、その結果は他のユーザのページにも反映されるという動作が典型的です。従って、1つのフィールドを単一の要素にバインドしている場合でも、マルチユーザつまり複数のブラウザで同一のエンティティをバインドしているという点で「共有化」されていると言えるわけです。コンテキストの共有化を実現するために、ページファイル上でのターゲット指定や、定義ファイルでのコンテキスト定義以外に何をしなければならないかをこの文書にまとめておきます。なお、このページに記載の内容は、Ver.5まで適用できます。Ver.6ではこの機能を廃止、Ver.7以降で別の実装に移行します。\n            \n            \n                機能の概要と実現手法\n                \n                    INTER-Mediatorでは、「コンテキスト」は、データベースに対するデータの出入り口的なイメージのものであり、検索条件などでの意味づけされたデータソースを意味します。その「共有化」とは、同一エンティティが複数のページ上のオブジェクトに展開されているとき、1つのエンティティを変更すると、その結果が他のオブジェクトにも反映される仕組みと定義します。Ver.4.4までに、単一ページ内のコンテキストの共有化が実現しています。つまり、あるページ上に、同一フィールドとバインドした要素がある\bとすると、一方を変更すると、もう一方は自動的に更新します。この動作を実現するためのプログラミングは必要なく、バインドの設定（ターゲット指定の付与）だけで可能です。しかしながら、マルチクライアントでのコンテキストの共有化では、WebRTCを利用したPusherというサービスを利用することにしました。試用程度なら無償ですが、実運用には有償となってしまうものの、開発の効率化のために利用することにしました。\n                \n            \n            \n                Pusherアカウントの取得とアプリケーション登録\n                Pusherのサイトでアカウントを取得します。Pusherでは「App」という単位で管理ができるので、たとえばINTER-Mediatorで作る1つのソリューションを、1つのPusherのAppとして登録するという方法もありますし、複数のソリューションで共有してもいいかもしれません。いずれにしても、アカウントを作成し、New Appというボタンなどで新たに1つのAppを作成します。ページ上に表示されるapp_id、key、secretの3つの情報がこの後に必要となります。\n                \n            \n            \n                Pusherのサーバープログラムのインストール\n                PusherのサーバーモジュールはPHP版を利用します。こちらのレポジトリをダウンロードし、そこから得られるlibディレクトリにあるPusher.phpという1つのファイルだけをサーバーにインストールします。他は使用しません。ファイルはPHPの設定ファイル（php.iniが代表的）で、include_pathの設定で参照できるディレクトリにあればかまいません。もっとも安直な方法は、INTER-Mediatorフォルダに入れて、サーバーにコピーしておくことです。もし、設定が以下のようなものであれば、例えば/usr/lib/phpディレクトリにPusher.phpをコピーしておけば良いでしょう。\n                include_path = \".:/usr/lib/php/pear:/usr/lib/php\"\n            \n            \n                ページファイルへの追加\n                \n                    Pusherのクライアントソフトウエアを、ページファイルで組み込む必要があります。たとえば、以下のように、ヘッダ部で定義ファイル（include_MySQL.php）の読み込みの前に読み込みます。この方法だと、Pusherのサイトから直接取り出すので、ファイルを自分のサーバーにコピーする必要はありません。ソースはこの通りコピペで大丈夫ですが、Pusherのバージョンが変わった時などはそれに合わせてください。\n                &lt;html&gt;\n&lt;head&gt;\n&nbsp; &nbsp; :\n&nbsp; &nbsp;&nbsp;&lt;script src=\"http://js.pusher.com/2.2/pusher.min.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n&nbsp; &nbsp;&nbsp;&lt;script type=\"text/javascript\" src=\"include_MySQL.php\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n                \n            \n            \n                定義ファイルあるいはparams.phpへの追加\n                \n                    Pusherで定義したAppに関する指定は、定義ファイルのオプション部あるいはparams.phpで指定をします。原則的にはどちらか一方で定義をしてください。両方指定すると、定義ファイルの方が優先されます。定義ファイルでは、pusherをキーにした配列を定義し、さらにPusherのAppで示された3つの値を配列の各要素の値とします。以下は、定義ファイルでの定義例です。\n                IM_Entry(\n    array(\n　　　　　　　　　　　　　　/* コンテキストの定義 */\n　　　　　　　),\n    array(\n        :\n        'pusher' =&gt; array(\n            'app_id' =&gt; '1234',\n            'key' =&gt; '9876543210',\n            'secret' =&gt; '9876543210',\n        ),\n    ),\n    array('db-class' =&gt; 'PDO'),\n    false\n);\n                \n                params.phpファイルに記述するときには、以下のように、$pusherParameters変数に同様な配列として定義をします。\n                $pusherParameters = array(\n 'app_id' =&gt; '1234',\n 'key' =&gt; '9876543210',\n 'secret' =&gt; '9876543210',\n);\n                \n                \n                    上記のいずれかがあると、マルチクライアントのコンテキストの共有化がオンになります。定義ファイルあるいはparams.phpの指定の有無だけで、共有化の利用／不使用が決まります。指定がないと一切何も行いません。指定があるのに、Pusherのサーバーあるいはクライアントソフトウエアが利用できない状態になると、なんらかのエラーが発生します。\n            \n            \n                Ver.4.6での制約\n                \n                    レコードの追加においては、そのコンテキストの検索条件を加味して、検索条件に合わないレコードの追加は行いません。しかしながら、別のクライアントで作成したレコードが当初はコンテキストに合わないものの、フィールドの値を変更してコンテキストの検索条件に合うようになっても、現状ではそのレコードが見えるようにはなりません。\n                さらに、コンテキストのソート条件は現状では加味されておらず、一連の表示リストのサイトに常に追加されます。\n            \n            \n    "
    },
    {
        "id": 25,
        "parent": "/ja/for-developers/",
        "path": "/ja/for-developers/sharing7.html",
        "title": "変更結果の即時更新をマルチクライアントで実現する(Ver.7以降)",
        "breadcrumb": "変更結果の即時更新をマルチクライアントで実現",
        "body": "\n            \n                はじめに\n                \n                    コンテキストの共有化をマルチクライアントで実現する仕組みが稼働します。つまり、同一のページを複数のクライアントで参照しているとき、誰かがデータを変更すると、その結果は他のユーザのページにも反映されるという動作です。この仕組みを「クライアント同期」と呼ぶことにします。従って、1つのフィールドを単一の要素にバインドしている場合でも、マルチユーザつまり複数のブラウザで同一のエンティティをバインドしているという点で共有化されていると言えるわけです。コンテキストの共有化を実現するために、ページファイル上でのターゲット指定や、定義ファイルでのコンテキスト定義以外に何をしなければならないかをこの文書にまとめておきます。\n            \n            \n                機能の概要と実現手法\n                \n                    INTER-Mediatorでは、「コンテキスト」は、データベースに対するデータの出入り口的なイメージのものであり、検索条件などでの意味づけされたデータソースを意味します。クライアント同期の仕組みにより、同一エンティティが複数のページ上のオブジェクトに展開されているとき、1つのエンティティを変更すると、その結果が他のオブジェクトにも反映されます。この動作を実現するためのプログラミングは必要なく、バインドの設定（ターゲット指定の付与）とコンテキスト定義へのsync-controlキーの値の追加だけで可能です。この機能はVer.5まではPusherと言うサービスを利用して実装していましたが、Ver.7ではINTER-Mediator単体で実装しています。背後では、Node.jsによるサーバー（サービスサーバ）を稼働させ、Socket.ioやExpressなどを使って実現しています。\n                \n            \n            \n                サンプルサイト\n                INTER-Mediatorのサンプルサイトにある、「Any kinds of Saples」の「Realtime Multi-Client Update」が、クライアント同期を使ったサンプルです。2つのウインドウで開いたり、別々のクライアントで開いてみて、それぞれで編集作業をして、もう一方に反映されるのを確認できると思います。\n                動作の特徴\n                少し複雑になりますが、クライアント同期の動作をステップで記載したのが下の図です。黒い矢印線は、通常のINTER-Mediatorの処理です。クライアント同期を有効にすると、赤い矢印線や赤い点線の処理が加わります。\n                \n                    \n                \n                クライアント同期では、Webアプリケーションが利用するデータベースに2つのテーブルを定義します。テーブル定義の詳細は、INTER-Mediatorのdist-docsディレクトリにある各データベースごとのサンプルスキーマを参照してください。クライアントやコンテキストの情報を保存するregisteredcontextテーブルと、現在そのクライアントで表示しているレコードの主キー値を集めたregisteredpksテーブルを使います。もちろん、1対多でこれらのテーブルは関連しています。\n                Node.jsベースのService Serverが常駐している点もポイントです。このサーバは、クライアント同期以外に、バリデーションの設定がある場合に、クライアントからサーバに来たデータに対してチェックをかける作業もおこないます。通常、自動的に起動しますが、その辺りのポイントは、「ダウンロードとインストール(Ver.6以降)」の記載も参照してください。\n            \n            \n                定義ファイル作成\n                クライアント同期を使うためには、コンテキスト定義にsync-controlキーを追加します。Create/Update/Deleteのそれぞれのオペレーションがクライアント同期で伝達されるかを記載します。設定できる値は、create update deteleで、複数記載する場合はスペースで区切って記述しましょう。以下は設定例です。これみより、invoiceコンテキストで変更やレコード作成・削除が行われれば、それがsync-controlキーを設置したコンテキストに対して、伝達が行われます。単に同一コンテキストということではなく、そのコンテキストが使うテーブル名のレベルでマッチングを取るようにしていますが、SQLのビューの場合には必ずしもうまくいくわけではありません。そこは若干の制限があります。\n                IM_Entry(\n   [\n       [\n           'name' =&gt; 'invoice',\n           'records' =&gt; 1,\n           'paging' =&gt; true,\n           'key' =&gt; 'id',\n           'sort' =&gt; [['field' =&gt; 'id', 'direction' =&gt; 'asc'],],\n           'repeat-control' =&gt; 'insert delete',\n           'sync-control' =&gt; 'create update delete', // これがあれば同期を設定\n           'calculation' =&gt; [[\n               'field' =&gt; 'total_calc',\n               'expression' =&gt; 'format(sum(item@amount_calc) * (1 + _@taxRate ))',\n           ],],\n       ],…\nあるコンテキストに対して、現在ページ上に表示されている内容は、source、table、view、nameキーの値で識別されます。この順序で設定がある最初のものを利用します。ビュー等を利用した表示で、viewキーの値がある場合、別のコンテキストではテーブル名を利用して更新しているかもしれません。その場合、表示する側で、tableキーを指定しますが、他の動作にも影響があるので、sourceキーを揃えるということをする方法が考えられます。更新系の処理は、tableキーの値を利用して、更新するエンティティの識別を行います。\n            \n            \n                同期処理への割り込み\n                クライアント同期により、伝達してきたクライアント側では、以下の6つの関数を定義できます。メソッド名を見てわかるように、Create/Update/Deleteのそれぞれのオペレーションの前後つまりBefore/Afterに呼び出されます。クライアントでは、Beforeが呼び出され、更新処理を行い、Afterが呼び出されるようになります。Beforeが付くメソッドでは、引き続く処理を実行するためにはtrueを返します。逆にfalseを返すと、そこでクライアント同期の処理は停止します。引数dは、同期情報に関するオブジェクト（例：{entity: \"item\", field: [\"product_unitprice\"], 'justnotify: false, pkvalue: [\"3\"], value: [\"30\"]}）が設定されて呼び出されます。\n                INTERMediatorOnPage.syncBeforeUpdate = (d) =&gt; {}\nINTERMediatorOnPage.syncAfterUpdate = (d) =&gt; {}\nINTERMediatorOnPage.syncBeforeCreate = (d) =&gt; {}\nINTERMediatorOnPage.syncAfterCreate = (d) =&gt; {}\nINTERMediatorOnPage.syncBeforeDelete = (d) =&gt; {}\nINTERMediatorOnPage.syncAfterDelete = (d) =&gt; {}\n            \n            \n                params.phpファイルへの設定方法\n                クライアント同期は既定値で稼働するようになっています。その場合、sync-controlの定義がどのコンテキストにも存在しないのであれば、クライアント同期のための接続などは一切行いません。クライアント同期は、INTER-MediatorのサーバであるPHPとサービスサーバ、クライアントとサービスサーバの2つの通信経路が確立されていなければなりません。前者は、$serviceServerConnectでURL、$serviceServerPort変数でポート番号が決まります。後者は、$serviceServerProtocol、$serviceServerHost、$serviceServerPortの3つの変数で決まります。TLSを使わないのであれば、通常は既定値で動作すると思われますが、サーバのセットアップに応じて、設定を見直してください。また、クライアントからは、11478などのポートで通信をしますので、レンタルサーバなどではファイアウォールの設定を見直す必要があるのが通常です。\n                \n\n変数既定値動作\n$notUseServiceServerfalsetrueの場合Service Serverを起動しない、falseの場合起動する。逆っぽいので注意\n$activateClientServicetruetrueの場合クライアント側の同期機能を使用する、falseの場合使用しない\n$serviceServerProtocolwsService Serverを受け付けるプロトコル。wsあるいはwss\n$serviceServerHost\"\"Service Serverのホスト名で、\"\"にすると公開IPアドレスになる。クライアントから接続する先のホスト名を指定する\n$serviceServerPort11478Serviceサーバが使用するポート\n$serviceServerKey\"\"証明書のキーファイルへの絶対パス\n$serviceServerCert\"\"サーバ証明書への絶対パス\n$serviceServerCA\"\"中間証明書への絶対パス\n$serviceServerConnecthttp://localhostPHPのサーバからService Serverに接続するときのプロトコルとホスト名\n$bootWithInstalledNodefalseService Serverの起動にサーバにあるnodeを使う\n$preventSSAutoBootfalsetrueの場合Service Serverの自動起動をやらない、falseの場合自動起動する\n$foreverLog/etc以下にランダムService Serverのコンソール出力を収めるログファイル\n\nTLSベースのhttps://サーバで運用する\nWebサーバをTLSベースで運用しているならば、サービスサーバをTLSベースで稼働させる必要があります。そうしないと、httpsの中からhttpへのアクセスに相当すると判断され、ブラウザはサービスサーバへの接続を拒否します。そのためには、$serviceServerKey、$serviceServerCertそして$serviceServerCAにそれぞれ.pemファイルへの絶対パスを記述します。Let's Encryptでは、ファイルが2つですが、$serviceServerKeyにprivkey.pem、$serviceServerCertと$serviceServerCAにfullchain.pemを指定すれば良いようです。なお、その時、本来のキーファイルの位置は/etc/ca-certificates以下にあり、rootしか参照できないため、Webサーバのプロセスのユーザ（Ubuntuならwww-data、CentOSならapache2）はファイルを直接参照できません。仕方ないので、該当ファイルをどこかのディレクトリにコピーして（もちろん、キーファイルなのでWeb公開されていないなど安全な場所である必要があります）、そのファイルへのパスを指定します。$serviceServerProtocolはwssを指定します。$serviceServerHostにはクライアントから見えていて証明書に記述されているホスト名を指定しなければなりません。さらに、$serviceServerConnectは、「https://証明書のホスト名」にします。PHPのサーバと同じサーバでサービスサーバを稼働させていても、wws://でサービスサーバを運用する場合、ws://のポートは開かないですし、証明書の検証もあるので、同一ホストからでもホスト名を利用したアクセスにしなければなりません。\n            \n\n                実際の動作\n                \n                パターンA：リスト形式のトップレベルコンテキスト\n                \n                \n                \n                コンテキスト定義での設定動作\n                \n                \n                更新：update\n                \n                \n                更新：update-notify\n                \n                \n                挿入：create\n                \n                \n                挿入：create-notify\n                \n                \n                削除：delete\n                \n                \n                パターンB：カード形式のトップレベルコンテキスト\n                \n                \n                \n                コンテキスト定義での設定動作\n                \n                \n                更新：update\n                \n                \n                更新：update-notify\n                \n                \n                挿入：create\n                \n                \n                挿入：create-notify\n                \n                \n                削除：delete\n                \n                \n                パターンC：関連コンテキスト\n                \n                \n                \n                コンテキスト定義での設定動作\n                \n                \n                更新：update\n                \n                \n                更新：update-notify\n                \n                \n                挿入：create\n                \n                \n                挿入：create-notify\n                \n                \n                削除：delete\n                \n                \n            -->\n            "
    },
    {
        "id": 26,
        "parent": "/ja/for-developers/",
        "path": "/ja/for-developers/format.html",
        "title": "HTMLの属性に記述する書式を適用する機能",
        "breadcrumb": "HTMLの属性に記述する書式を適用する機能",
        "body": "\n            \n                はじめに\n                数値をカンマ区切りにしたり通貨記号をつけたり、日付を特定の書式で記述するような機能は、アプリケーション作成には必須です。Ver.5.6までは主としてDataConverterクラスによりサーバーサイドで処理をしていましたが、変更や計算結果更新に対する書式設定が適用されない場合がありました。この書式設定の仕組みをクライアントサイドで指定をするようにして、書式の適用を確実に行います。書式の適用は、HTMLの属性に記述を行います。データベースはもちろん、コンテキストにキャッシュされる内容までは「生データ」として、そこからHTML要素に書き込まれる場合に書式を適用し、逆に編集時には書式を解除して生データとして扱えるようにするのが動作の基本となります。\n            \n            \n                設定例\n                \n                \n                    数値、通貨についての設定例\n                    \n                        \n                            設定例\n                            値が「1923」の場合\n                            値が「1923.8765」の場合\n                            値が「-1923.8765」の場合\n                        \n                        \n                            data-im-format=\"number(0)\"\n                            1923\n                            1924\n                            -1924\n                        \n                        \n                            data-im-format=\"number(2)\"\n                                data-im-format-options=\"useseparator\"\n                            1,923.00\n                            1,923.88\n                            -1,923.88\n                        \n                        \n                            data-im-format=\"number(2)\"\n                                data-im-format-negative-style=\"triangle\"\n                            1923.00\n                            1923.88\n                            ▲1923.88\n                        \n                        \n                            data-im-format=\"currency(2)\"\n                                data-im-format-options=\"useseparator\"\n                            ¥1,923.00\n                            ¥1,923.88\n                            ¥-1,923.88\n                        \n                    \n                \n                \n                    論理値についての設定例\n                    \n                        \n                            設定例\n                            値が「0」の場合\n                            値が「0」でない場合\n                        \n                        \n                            data-im-format=\"boolean()\"\n                            false\n                            true\n                        \n                        \n                            data-im-format=\"boolean(T,F)\"\n                            F\n                            T\n                        \n                    \n                \n                \n                    日付時刻についての設定例\n                    \n                        \n                            設定例\n                            値が「2017-07-12 09:05:00」の場合\n                        \n                        \n                            data-im-format=\"datetime(middle)\"\n                            2017/07/12 09:05:00\n                        \n                        \n                            data-im-format=\"datetime(%m月%d日の%h時%i分)\"\n                            7月12日の9時5分\n                        \n                        \n                            data-im-format=\"datetime(%g%M月%D日)\"\n                            平成29年07月12日\n                        \n                    \n                \n            \n            \n                data-im-format\n                ターゲット指定によりコンテキストの値を要素に設定する時、その要素にdata-im-format属性があれば、書式化されるようになります。この設定は排他的なので、どれか1つが設定されていることが期待されます。\n                \n                    data-im-formatに設定可能な値\n                    \n                        \n                            分類\n                            属性値\n                            書式化の動作\n                        \n                        \n                            数値\n                            number(桁数)\n                            数値に関する書式化を行う。桁数は少数以下の桁数で、省略すると0とみなす\n                        \n                        \n                            currency(桁数)\n                            通過記号を伴う書式化を行う。桁数は少数以下の桁数で、省略すると0とみなす\n                        \n                        \n                            boolean(true表現,false表現)\n                            論理値を表現する。引数にはtrueとfalseの時の表現をそのまま記述する。引数を省略すると、true/falseになる\n                        \n                        \n                            percent(桁数)\n                            パーセント表現による書式化を行う。桁数は少数以下の桁数で、省略すると0とみなす\n                        \n                        \n                            日付\n                                時刻\n                            date(書式)\n                            引数がlong/middle/shortの場合は日付のみを書式化する。それ以外の引数は引数のパターンに従って表示される。日付がない場合は空文字列を表示する\n                        \n                        \n                            time(書式)\n                            引数がlong/middle/shortの場合は時刻のみを書式化する。それ以外の引数は引数のパターンに従って表示される。時刻がない場合には「00:00:00」とみなす。書式は別表を参照\n                        \n                        \n                            datetime(書式)\n                            引数がlong/middle/shortの場合は日付時刻を書式化する。それ以外の引数は引数のパターンに従って表示される。日付や時刻がない場合には、date、timeの動作通り。書式は別表を参照\n                        \n                    \n                \n                日付や時刻については、long/middle/shortの場合はロケールに応じた形式で表示します。それ以外のパターン（%とアルファベットの置き換え文字列）については、ロケールに応じるものとそうでないものがあります。引数にパターンを指定した場合は、date/time/datetimeのいずれの指定でも結果は同じになります。\n            \n            \n                数値に対するオプション設定のための属性\n                数値に関連したdata-im-format属性を指定した場合、書式化の動作を以下のいくつかの属性で指定することができます。\n                \n                    書式設定に関するオプション設定\n                    \n                        \n                            属性名\n                            属性値\n                            書式化の動作\n                        \n                        \n                            data-im-format-options\n                            useseparator\n                            数値の整数部で3桁ごとにカンマを入れる\n                        \n                        \n                            blankifzero\n                            数値が0の時には何も表示しない\n                        \n                        \n                            thousands\n                            千単位の整数値に四捨五入する。修正は未対応で、表示のみ\n                        \n                        \n                            millions\n                            百万単位の整数値に四捨五入する。修正は未対応で、表示のみ\n                        \n                        \n                            billions\n                            十億単位の整数値に四捨五入する。修正は未対応で、表示のみ\n                        \n                        \n                            data-im-format-negative-color\n                            (CSSのcolorプロパティに設定可能な値)\n                            負の数場合に文字に設定する色\n                        \n                        \n                            data-im-format-negative-style\n                            leading-minus\n                            負の数の記号（通常はマイナス）を数値の前に指定\n                        \n                        \n                            trailingminus\n                            負の数の記号（通常はマイナス）を数値の後に指定\n                        \n                        \n                            parenthesis\n                            負の数の場合、数値をカッコで囲む\n                        \n                        \n                            angle\n                            負の数の場合、数値を &lt; &gt;で囲む\n                        \n                        \n                            credit\n                            負の数の場合、前にCRを付加する\n                        \n                        \n                            triangle\n                            負の数の場合、前に▲を付加する\n                        \n                        \n                            data-im-format-numeral-type\n                            half-width\n                            数値を一般的なアスキーコードの数字で記述\n                        \n                        \n                            full-width\n                            数値を全角の数字で記述する\n                        \n                        \n                            kanji-numeral-modern\n                            数値を、数字を示す漢字（一二三…）で記述\n                        \n                        \n                            kanji-numeral\n                            数値を、数字を示す漢字（壱弐参…）で記述\n                        \n                        \n                            data-im-format-kanji-separator\n                            every-4th-place\n                            4桁ごと日本語表記する（例：1億2345万3456）\n                        \n                        \n                            full-notation\n                            全ての桁において日本語表記する（例：1億2千3百4十5万3千4百5十6）\n                        \n                    \n                \n            \n            \n                日付や時刻に対する引数設定\n                日付や時刻に関連したdata-im-format属性を指定する場合、引数に以下の文字列を指定できます。「単独使用」の場合には、引数にはその文字列のみを記述します。一方、「組み合わせ」の文字列については、組み合わせて指定をします。一方、更新処理に対応した書式設定は表に示す通り一部に限られます。なお、書式設定に変わらず、ISO8601形式の文字列（2017-10-12 10:04など）を入力することでデータベースへの更新が可能です。\n                \n                    日付に対する引数設定\n                    \n                        \n                            指定\n                            指定文字列\n                            意味\n                            表示例\n                        \n                        \n                            単独使用\n                            short\n                            短い形式\n                            2017/07/23 14:39\n                        \n                        \n                            middle\n                            よく利用される形式\n                            2017/07/23(日) 14:39:06\n                        \n                        \n                            long\n                            長い形式\n                            2017年07月23日 日曜日 14時39分06秒 JST\n                        \n                        \n                            組み合わせ\n                            %Y\n                            西暦4桁*1\n                            2017\n                        \n                        \n                            %y\n                            西暦2桁*1\n                            17\n                        \n                        \n                            %g\n                            ロカールによる年数\n                            平成29年\n                        \n                        \n                            %G\n                            ロカールによる年数\n                            平成二十九年\n                        \n                        \n                            %M\n                            月2桁*1\n                            07\n                        \n                        \n                            %m\n                            月数値*1\n                            7\n                        \n                        \n                            %t\n                            英語短縮月名*1\n                            Jul\n                        \n                        \n                            %T\n                            英語月名*1\n                            July\n                        \n                        \n                            %b\n                            ロカールによる短縮月名\n                            ７月\n                        \n                        \n                            %B\n                            ロカールによる月名\n                            文月\n                        \n                        \n                            %D\n                            日2桁*1\n                            12\n                        \n                        \n                            %d\n                            日数値*1\n                            12\n                        \n                        \n                            %a\n                            英語短縮曜日名\n                            Mon\n                        \n                        \n                            %A\n                            英語曜日名\n                            Monday\n                        \n                        \n                            %w\n                            ロカールによる短縮曜日名\n                            月\n                        \n                        \n                            %W\n                            ロカールによる曜日名\n                            月曜日\n                        \n                        \n                            %H\n                            時2桁*1\n                            09\n                        \n                        \n                            %h\n                            時数値*1\n                            9\n                        \n                        \n                            %K\n                            12時間制1〜12での時2桁\n                            09\n                        \n                        \n                            %k\n                            12時間制1〜12での時数値\n                            9\n                        \n                        \n                            %J\n                            12時間制0〜11での時2桁\n                            09\n                        \n                        \n                            %j\n                            12時間制0〜11での時数値\n                            9\n                        \n                        \n                            %I\n                            分2桁*1\n                            05\n                        \n                        \n                            %i\n                            分数値*1\n                            5\n                        \n                        \n                            %S\n                            秒2桁*1\n                            00\n                        \n                        \n                            %s\n                            秒数値*1\n                            0\n                        \n                        \n                            %P\n                            AM/PM\n                            AM\n                        \n                        \n                            %p\n                            am/pm\n                            am\n                        \n                        \n                            %N\n                            ロカールによる午前午後\n                            午前\n                        \n                        %Zタイムゾーン省略名JST\n%zタイムゾーンオフセット+0900\n-->\n                        \n                            %%\n                            パーセント\n                             %\n                        \n                        \n                            上記以外\n                            そのまま表示\n                            -\n                        \n                    \n*1：変更処理に対応した書式設定文字列。テキストフィールドに対して、これらの文字を使って書式設定したものが表示されている時、その文字列を変更することで、データベースへの更新が正しくできるもの。\n                \n            \n            \n    "
    },
    {
        "id": 27,
        "parent": "/ja/for-programmers/",
        "path": "/ja/for-programmers/api.html",
        "title": "JavaScriptのインタフェース",
        "breadcrumb": "JavaScriptのインタフェース",
        "body": "\n      \n        はじめに\n        クライアント側ではもちろん、JavaScriptのプログラムを記述できますが、一般的なJavaScriptの関数などを使うことに加えて、INTER-Mediatorが稼働していれば利用できるメソッドについて、ここで解説をします。\n      \n      \n        ページ合成処理\n        INTERMediator.construct(targetContext)\n        \n          解説：INTERMediator.constructMainと同じ\n        \n        INTERMediator.constructMain(targetContext)\n        \n          解説：ページ合成を行う。asyncで定義されている。\n          引数：targetContext：省略あるいはtrueで、ページファイルのすべての要素に対して合成を行う。引数にコンテキストのオブジェクト（IMLibContext）を指定すれば、そのオブジェクトに対応したエンクロージャー内部のみを合成する。\n          返り値：なし\n        \n        INTERMediatorOnPage.doBeforeConstruct = function() { }\n        ページの合成処理が実行される関数を定義します。引数のない関数を代入します。INTERMediator.constructMain(true)でページ合成を行いますが、その処理の最初に関数が実行されます。例えば、URLのパラメータを取り出して、検索条件として設定するなどの処理を組み込めます。\n        INTERMediatorOnPage.doAfterConstruct = function() { }\n        ページの合成処理が終わったときに実行される関数を定義します。引数のない関数を代入します。INTERMediator.constructMain(true)でページ合成を行いますが、非同期に処理を進めるため、このステートメントの次に書かれた命令は、通常は合成途中に実行されるなど、少なくともページを作り終える前になってしまいます。ページができていないと取得できないような情報もあるので、このようなコールバックの仕組みを用意してあります。\n        INTERMediatorOnPage.doBeforePartialConstruct = function(context) { }\n        INTERMediator.constructMain(context)のように、コンテキストを与えてページの合成処理を実施して部分的に合成する場合に、ページ合成処理よりも前に実行される関数を定義します。引数にはconstructMainの引数に指定したコンテキストへの参照が設定されます。\n        INTERMediatorOnPage.doAfterPartialConstruct = function(context) { }\n        INTERMediator.constructMain(context)のように、コンテキストを与えてページの合成処理を実施して部分的に合成する場合に、ページ合成処理よりも後に実行される関数を定義します。引数にはconstructMainの引数に指定したコンテキストへの参照が設定されます。\n        INTERMediatorOnPage.isAutoConstruct\n        このプロパティをfalseにすると、ページの合成を行わなくなります。doBeforeConstructに指定した関数の中などで、条件に応じてページ合成をしたくない場合は、このプロパティにfalseを代入してください。初期値はtrueです。\n        INTERMediatorOnPage.isFinishToConstruct\n        ページ生成中（つまり、constractMainメソッド実行中）であれば、trueになる。\n        INTERMediator.partialConstructing\n        ページ構築中に参照することで、現在の構築がページ全体なのか、ページの一部分なのかが判定できる。\n      \n      \n        検索条件やソート条件の追加\n        INTERMediator.addCondition(contextName, {field:xxx,operator:xxx,value:xxxx})\n        コンテキストに従ってデータベースのクエリを行うとき、ここで指定した検索条件が、他の条件に対してAND条件で追加される。引数contextNameにはコンテキスト名を指定する。第2引数は条件を示すオブジェクトを指定する。このオブジェクトではfield、operator、valueのプロパティを指定し、それぞれフィールド名、演算子、値を指定する。複数の条件を追加する場合には、このメソッドを繰り返し呼べば良い。additionalConditionプロパティはセッター／ゲッターで実装しているため、内部のオブジェクトへの追加はこのAPIを使うようにする。\n        INTERMediator.clearCondition(contextName)\n        検索条件に追加される設定を、引数に指定したコンテキスト名のものついて初期化して、指定なしにする。そのコンテキストがページネーションを持っている場合はページ番号は1にリセットされる。引数なしで呼び出し場合、全ての追加条件をクリアし、ページ番号を1にする。\n        INTERMediator.additionalCondition = {};\n        すべての検索条件に追加される設定を消す。\n        INTERMediator.addSortKey(contextName, {field:xxx,direction:xxxx})\n        コンテキストに従ってデータベースのクエリを行うとき、ここで指定したソート条件が設定される。コンテキストのソート条件より高い優先順になっている。引数contextNameにはコンテキスト名を指定する。第2引数はそーと条件を示すオブジェクトを指定する。このオブジェクトではfield、directionのプロパティを指定し、それぞれフィールド名、昇順か降順かをASCないしはDESCを指定する。複数の条件を追加する場合には、このメソッドを繰り返し呼べばよく、先に指定した方が優先順位が高い。\n        INTERMediator.clearSortKey(contextName)\n        ソート条件に追加される設定を、引数に指定したコンテキスト名のものついて初期化して、指定なしにする。\n        INTERMediator.additionalSortKey = {};\n        すべてのソート条件に追加される設定を消す。\n        INTERMediator.setRecordLimit(contextName, n);\n        引数に指定したコンテキスト名のコンテキストに対してクエリーを実施するとき、レコードの個数の上限値を設定できる。なお、同じことは、コンテキストのrecordsキーの値でも指定できる。\n        INTERMediator.clearRecordLimit(contextName);\n        setRecordLimitで指定した値をクリアする。\n        INTERMediator.setRecordStart(contextName, n);\n        引数に指定したコンテキスト名のコンテキストに対してクエリーを実施するとき、レコードの開始番号を指定できる。\n        INTERMediator.clearRecordStart(contextName);\n        setRecordStartで指定した値をクリアする。\n        INTERMediator.additionalFieldValueOnNewRecord\n        新規レコードを作った時のフィールドの既定値を、JavaScript上で追加定義する。INTERMediator.additionalFieldValueOnNewRecord[\"コンテキスト名\"] = [{field: フィールド名, value: 値}, ...] の形式で利用する。\n        INTERMediator.additionalFieldValueOnUpdate\n        レコード更新時に変更するフィールドとその値を、JavaScript上で追加定義する。INTERMediator.additionalFieldValueOnUpdate[\"コンテキスト名\"] = [{field: フィールド名, value: 値}, ...] の形式で利用する。\n        INTERMediator.additionalFieldValueOnDelete\n        レコード削除時の検索条件を、JavaScript上で追加定義する。INTERMediator.additionalFieldValueOnDelete[\"コンテキスト名\"] = [{field: フィールド名, value: 値}, ...] の形式で利用する。\n        INTERMediator_DBAdapter.eliminateDuplicatedConditions = logical_value (default is false)\n        trueの場合検索条件で同一の検索式を自動的に取り除く。既定値はfalse。\n      \n      \n        ページ合成処理に割り込む処理の記述\n        INTERMediatorOnPage.additionalExpandingEnclosureFinish = {コンテキスト名: function (target) { }},\n        INTERMediatorOnPage.expandingEnclosureFinish = function (name, target) { } \n        INTERMediatorOnPage.postEnclosure_《コンテキスト名》 (target) \n        INTERMediatorOnPage.《コンテキストで指定した名前》 (target) \n        \n          引数：name：展開が終わった箇所で利用した定義ファイルのコンテキストのname属性の値\n          引数：target：展開が終わったエンクロージャのノード\n          返り値：なし\n        \n         エンクロージャの展開が終わる度に呼び出されます。4つメソッドがあり、前述の順序で呼び出されますが、3番目が存在すれば4番目は呼び出されません。2つ目は全てのコンテキストで呼び出され、その他のものはコンテキストごとに呼び出すかどうかを制御できます。最初のものは呼び出すプログラム自体をプログラムで指定できます。そこまで複雑ではない場合には3ないしは4番目の手法が良いでしょう。2番目の手法は、全てのエンクロージャの展開後に実行したい処理を記述します。4番目の《コンテキストで指定した名前》は、定義ファイルのコンテキストの指定で、'post-enclosure'というキーに対応する文字列で、メソッド名を指定します。1〜3番目はメソッドの定義をすればそれで呼び出されますが、3番目の手法がいちばん手軽だと思われます。\n        INTERMediatorOnPage.additionalExpandingRecordFinish: {コンテキスト名: function (repeaters) { }},\n        INTERMediatorOnPage.expandingRecordFinish(name, repeaters)\n        INTERMediatorOnPage.postRepeater_《コンテキスト名》(repeaters)\n        INTERMediatorOnPage.《コンテキストで指定した名前》(repeaters)\n        \n          引数：name：展開が終わった箇所で利用した定義ファイルのコンテキストのname属性の値\n          引数：repeaters：1レコード分の展開をしたリピーターの配列\n          返り値：なし\n        \n         リピータの展開時に、1レコード分の処理が終わった度に呼び出されます。4つメソッドがあり、前述の順序で呼び出されますが、3番目が存在すれば4番目は呼び出されません。2つ目は全てのコンテキストで呼び出され、その他のものはコンテキストごとに呼び出すかどうかを制御できます。最初のものは呼び出すプログラム自体をプログラムで指定できます。そこまで複雑ではない場合には3ないしは4番目の手法が良いでしょう。2番目の手法は、全てのリピーターの展開後に実行したい処理を記述します。4番目の《コンテキストで指定した名前》は、定義ファイルのコンテキストの指定で、'post-repeater'というキーに対応する文字列で、メソッド名を指定します。そのメソッドを以下のように定義して、プログラムを記述します。1〜3番目はメソッドの定義をすればそれで呼び出されますが、3番目の手法がいちばん手軽だと思われます。\n        INTERMediatorOnPage.notShowHeaderFooterOnNoResult\n        trueの場合、data-im-control属性の値がfooter、headerのリピーターについて、検索結果にレコードが存在しない場合に表示しなくする。既定値はfalse。\n        INTERMediator.noRecordClassName: '_im_for_noresult_',\n        INTERMediatorLib.ignoreEnclosureRepeaterClassName: '_im_ignore_enc_rep',\n        INTERMediatorLib.ignoreEnclosureRepeaterControlName: 'ignore_enc_rep',\n        INTERMediatorLib.roleAsRepeaterClassName: '_im_repeater',\n        INTERMediatorLib.roleAsEnclosureClassName: '_im_enclosure',\n        INTERMediatorLib.roleAsRepeaterDataControlName: 'repeater',\n        INTERMediatorLib.roleAsEnclosureDataControlName: 'enclosure',\n        INTERMediatorLib.roleAsSeparatorDataControlName: 'separator',\n        INTERMediatorLib.roleAsHeaderDataControlName: 'header',\n        INTERMediatorLib.roleAsFooterDataControlName: 'footer',\n        INTERMediatorLib.roleAsNoResultDataControlName: 'noresult',\n        リピーターやエンクロージャーに指定するクラス名やdata-im-control属性に指定する文字列を定義したプロパティ。通常は変更する必要はないが、どうしても名前を変えたい場合にはプロパティへの書き込みによって変更は可能であるが、この仕組みは厳密にはデバッグされていないので、使用するときは注意が必要である。\n      \n      \n        アプリケーション動作のための様々なプロパティ\n        INTERMediatorOnPage.dbCache\n        cacheキーの値がtrueのコンテキストによって集積されたキャッシュデータがこのオブジェクトに設定される。\n        INTERMediatorOnPage.creditIncluding: null,\n        INTER-Mediatorのクレジットサイン（ページ下部に表示されるもの）を挿入するノードのid値。nullだとbodyタグ直下の最後に追加\n        INTERMediatorOnPage.getEditorPath\n        定義ファイルエディタやページファイルエディタが使える場合、エディタへのパス。\n        INTERMediatorOnPage.getEntryPath\n        定義ファイルへのパス。\n        INTERMediatorOnPage.getDataSources\n        定義ファイルのIM_Entry関数の第1引数に指定したデータソースを記述したオブジェクト。\n        INTERMediatorOnPage.getOptionsAliases: null,\n        定義ファイルのIM_Entry関数の第2引数に指定したaliasesキーの値。\n        INTERMediatorOnPage.getOptionsTransaction: null,\n        定義ファイルのIM_Entry関数の第2引数に指定したtransactionキーの値。\n        INTERMediatorOnPage.dbClassName: null,\n        定義ファイルのIM_Entry関数の第3引数に指定したデータベースクラス名。例えば「PDO」。\n        INTERMediatorOnPage.serviceServerStatus\n        サービスサーバーが起動しているかどうか。\n        INTERMediatorOnPage.appLocale\n        サーバーで設定あるいは識別したロケールのコード。例えば「ja_JP」\n        INTERMediatorOnPage.appCurrency\n        サーバーで設定あるいは識別した通貨の国コード。例えば「JP」\n        INTERMediatorLocale\n        このオブジェクトに、サーバーで設定あるいは識別したロケールに基づく小数点の記号などの情報が設定されている。\n        INTERMediatorOnPage.metadata\n        composer.jsonから得られたINTER-Mediatorに関する情報で、キーはversionとreleasedate\n        INTERMediatorOnPage.showProgress()\n        処理中を示すギアが回るアニメーションを表示する。\n        INTERMediatorOnPage.hideProgress()\n        処理中を示すギアが回るアニメーションを非表示にする。\n        INTERMediatorOnPage.isShowProgress\n        trueの場合、処理中を示すギアが回るアニメーションを表示する。既定値はtrue。\n        INTERMediatorOnPage.buttonClassCopy\n        INTERMediatorOnPage.buttonClassDelete\n        INTERMediatorOnPage.buttonClassInsert\n        INTERMediatorOnPage.buttonClassMaster\n        INTERMediatorOnPage.buttonClassBackNavi\n        これらのプロパティに設定した文字列が、「複製」ボタンや「削除」ボタン等にclass属性に追加される。例えば、Bootstrapを使っている場合には、doBeforeConstructプロパティの関数内で、これらのプロパティに\"btn btn-info\"を代入するなどができる。\n\n      \n      \n        ブラウザのバージョンや種類の判定\n        INTERMediator.isTablet\n        クライアントのUserAgentから判定したタブレットかどうかのチェック結果。\n        INTERMediator.isMobile\n        クライアントのUserAgentから判定したモバイルデバイスかどうかのチェック結果。\n        INTERMediator.isIE\n        クライアントのUserAgentから判定したInternet Explorerかどうかのチェック結果。「MSIE/」が含まれているかをチェック。\n        INTERMediator.isTrident\n        クライアントのUserAgentから判定したTridentエンジンかどうかのチェック結果。「Trident/」が含まれているかをチェック。\n        INTERMediator.isEdge\n        クライアントのUserAgentから判定したEdgeエンジンかどうかのチェック結果。「Edge/」が含まれているかをチェック。\n        INTERMediatorOnPage.browserCompatibility\n        接続してきたブラウザの種類やバージョンから、アプリケーションが利用可能かどうかを判定するための情報をオブジェクトで指定する。詳細は、INTER-MediatorによるWebアプリケーションの概要にある「ブラウザのバージョンを調べる仕組み」を参照。\n        INTERMediatorOnPage.nonSupportMessageId\n        INTERMediatorOnPage.browserCompatibilityの仕組みを用いれば、サポートブラウザである場合にはエラーメッセージを非表示にすることができるが、その時のエラーメッセージが記載されたHTML要素のid属性値の文字列を指定する。既定値は「nonsupportmessage」\n      \n      \n        特定のターゲット指定を持つノードの検索\n        INTERMediatorOnPage.getNodeIdsHavingTargetFromNode(fromNode, imDefinition)\n        \n          引数：fromNode：基準となるノードで、このノードより下位のノードを検索する。ノードの配列でもOK\n          引数：imDefinition：ターゲット指定。例えば、「&lt;input type=\"text\" class=\"IM[item@unitprice]\" /&gt;」については、引数に \"item@unitprice\" を指定する \n          返り値：ノードのid属性を示す文字列の配列。ノードが発見された場合でid属性がない場合は、そのノードへの参照\n        \n        INTERMediatorOnPage.getNodeIdsHavingTargetFromRepeater(fromNode, imDefinition)\n        \n          引数：fromNode：基準となるノードで、このノードより上位のノードを検索し最初に見つかったリピータよりも下位のノードを検索する\n          引数：imDefinition：ターゲット指定。例えば、「&lt;input type=\"text\" class=\"IM[item@unitprice]\" /&gt;」については、引数に \"item@unitprice\" を指定する \n          返り値：ノードのid属性を示す文字列の配列。ノードが発見された場合でid属性がない場合は、そのノードへの参照\n        \n        INTERMediatorOnPage.getNodeIdsHavingTargetFromEnclosure(fromNode, imDefinition)\n        \n          引数：fromNode：基準となるノードで、このノードより上位のノードを検索し最初に見つかったエンクロージャよりも下位のノードを検索する\n          引数：imDefinition：ターゲット指定。例えば、「&lt;input type=\"text\" class=\"IM[item@unitprice]\" /&gt;」については、引数に \"item@unitprice\" を指定する \n          返り値：ノードのid属性を示す文字列の配列。ノードが発見された場合でid属性がない場合は、そのノードへの参照\n        \n      \n      \n        URLからパラメータを取り出す\n        INTERMediatorOnPage.getURLParametersAsArray()\n        URLの中のパラメータを取り出し、パラメータ名をキーとしたオブジェクトを返す。たとえば、「http://domain.name/page.html?a=1&amp;b=2」というページなら、返り値は {a:1, b:2}となる。\n      \n      \n      安全に別のページに移動する\n      INTERMediator.moveAnotherURL(url[, task])\n     location.hrefに文字列を代入することで別のページに移動できますが、フィールドの更新の途中かもしれません。このメソッドを利用すれば、更新処理を全て終えるのを待って引数urlで指定する別のページに移動できます。また、クライアント間同期処理を行っている場合、別ページに移動する前にページに表示している内容に関する情報を削除したいのですが、このメソッドで移動する前に削除を行います。taskはページ移動前に行う処理をクロージャで記述できますが、省略可能です。\n      \n      \n        Post Onlyモードでのメソッド\n        INTERMediatorOnPage.processingBeforePostOnlyContext = function(targetNode) {}\n        バリデーションが完了し、データベースへの書き込み前に呼び出される。falseを返すとデータベースの書き込み処理はキャンセルされる。引数targetにはPost Onlyモードのエンクロージャーへの参照が設定される。\n        INTERMediatorOnPage.processingAfterPostOnlyContext = function(targetNode, idValue) {}\n        新規レコードを作成した直後に呼び出される。引数targetにはPost Onlyモードのエンクロージャーへの参照が設定される。引数idValueは新たに作成されたレコードの主キー値が設定される。設定されていない場合は、レコード作成ができなかったことを示す。\n        INTERMediator.waitSecondsAfterPostMessage\n        ポストオンリーモードで、送信後の処理を何秒後に開始するかを秒数で指定。既定値は4秒後。\n      \n      \n        数値の書式設定\n        INTERMediatorLib.toNumber( str );\n        引数の文字列を数値に変換する。なお、JavaScript標準のparseInt、parseFloatを使う方が良いと思われる。\n        IMLibFormat.numberFormat( str, digit );\n        引数strの文字列を数値に変換し、カンマ区切りで表示する。小数点以下の桁数をdigitで指定する。\n      \n      \n        日付時刻のデータから文字列を生成\n        INTERMediatorLib.dateTimeStringISO( dt );\n        引数のDateクラスの値を、ISO8601形式（2015-06-21 00:00:00）に変換する。引数を省略すると、現在の日付を得る。日時はブラウザのローカル時刻。\n        INTERMediatorLib.dateTimeStringFileMaker( dt );\n        引数のDateクラスの値を、FileMaker Serverが受け付ける形式（06/21/2015 00:00:00）に変換する。引数を省略すると、現在の日付を得る。日時はブラウザのローカル時刻。\n        INTERMediatorLib.dateStringISO( dt );\n        引数のDateクラスの値を、ISO8601形式（2015-06-21）に変換する。引数を省略すると、現在の日付を得る。日付はブラウザのローカル時刻。\n        INTERMediatorLib.dateStringFileMaker( dt );\n        引数のDateクラスの値を、FileMaker Serverが受け付ける形式（06/21/2015）に変換する。引数を省略すると、現在の日付を得る。日付はブラウザのローカル時刻。\n        INTERMediatorLib.timeString( dt );\n        引数のDateクラスの値を、時刻の形式（12:34:56）に変換する。引数を省略すると、現在の時刻を得る。時刻はブラウザのローカル時刻。\n      \n      \n        要素の値を更新する\n        IMLibUI.valueChange(idValue)\n        引数にINTER-Mediatorによって展開されたノードのid属性値を指定すると、現在の値をもってデータベース側に更新を行う。INTER-Mediatorによる自動更新をしない場合に利用するかもしれない。\n        \n          注記：バージョン4.5でINTERMediator.valueChange(idValue)からIMLibUI.valueChange(idValue)に変更されました。\n        \n        INTERMediatorOnPage.doBeforeValueChange = function(idValue)\n        INTERMediatorOnPageオブジェクトにdoBeforeValueChangeメソッドを実装することで、ユーザーが値を変更しバリデーションが通った直後で、データベース等への書き込みが行われる前にこのメソッドが実行される。あらゆる要素の変更時にこのメソッドを通過するようになる。引数は変更のあったUI要素のid属性が得られるので、これを手がかりにして、処理をしたい要素を判定できる。返り値は不要で無視される。\n        INTERMediatorOnPage.doAfterValueChange = function(idValue)\n        NTERMediatorOnPageオブジェクトにdoAfterValueChangeメソッドを実装することで、ユーザーが値を変更しバリデーションが通り、データベース等への書き込みが成功した後に、このメソッドが実行される。あらゆる要素の変更時にこのメソッドを通過するようになる。引数は変更のあったUI要素のid属性が得られるので、これを手がかりにして、処理をしたい要素を判定できる。返り値は不要で無視される。\n        IMLibUI.revertOnValidationError\n        このプロパティがtrueだと、バリデーションエラーがあった場合、フィールドの値を元に戻す。falseだと何もしない。既定値はtrue。\n      \n      \n        INTERMediatorクラスのプロパティ\n        INTERMediator.debugMode = true | false\n        デバッグモード（展開の過程をページの最初に表示）での実行を行う。IM_Entryの4つ目の引数でコントロールするのが手軽\n        INTERMediator.separator = '@'\n        リンク定義の区切り文字で、既定値は@\n        INTERMediator.defDivider = '|',\n        複数のリンク定義がある場合の区切り文字で、既定値は |\n        INTERMediator.defaultTargetInnerHTML = true\n        リンク設定のターゲット指定がない場合、既定値はテキストノードを作成して下位のノードとする。ここにtrueを指定すると、ターゲット指定がない場合にはinnerHTMLに代入する\n        INTERMediator.navigationLabel = ...\n        ナビゲーションのカスタマイズ（別項目で詳細を解説）\n        INTERMediator.titleAsLinkInfo = true;\n        titile属性の内容をリンク設定として解釈する。既定値はtrue\n        INTERMediator.classAsLinkInfo = false;\n        class属性にあるIM[ ] でかこった箇所をリンク設定として解釈する。既定値はtrue\n      \n      \n        バリデーション後に呼び出される関数\n        INTERMediatorOnPage.doAfterValidationSucceed = function(target,linkInfo){}\n        バリデーションの設定がされていて、ルールの結果がtrueとなった直後に呼び出される。引数targetは調べたノードへの参照、linkInfoは対照となったリンク定義の文字列が得られる\n        INTERMediatorOnPage.doAfterValidationFailure = function(target,linkInfo){}\n        バリデーションの設定がされていて、ルールの結果がfalseとなった直後に呼び出される。引数targetは調べたノードへの参照、linkInfoは対照となったリンク定義の文字列が得られる。テキストフィールドの値をもとにして計算処理をしている場合、間違えた値で再計算をしてしまっているかもしれないが、この関数は、元の値に戻された後に呼び出されるので、さらに再計算などを組み込むことができる。\n      \n      \n        レコード作成後及び削除後に呼び出される関数\n        INTERMediatorOnPage.doAfterCreateRecord = function(newRedId, targetName){}\n        レコード作成が成功した後に呼び出される。引数newRedIdには、作成したレコードのキーフィールドの値が設定され、targetNameにはコンテキストのname属性の値が設定されて呼び出される。\n        INTERMediatorOnPage.doAfterDeleteRecord = function(targetName){}\n        レコード作成が成功した後に呼び出される。引数targetNameにはコンテキストのname属性の値が設定されて呼び出される。\n      \n      \n        マスター/ディテール形式のユーザーインタフェース\n        IMLibPageNavigation.moveDetail(keying)\n        keyingには「手キーフィールド=値」の形式を指定する。マスター表示しているときにこのメソッドを呼び出すと、引数に指定したレコードに関する詳細表示に切り替わる。\n        IMLibPageNavigation.moveDetailOnceAgain()\n        画面更新をして現在のディテールページを表示する。事実上、ディテールのページが表示されているときに、そのページの更新を行う\n      \n      \n        マスター/ディテール形式のユーザーインタフェース処理前後\n        INTERMediatorOnPage.naviBeforeMoveToDetail(masterContext, detailContext)\n        マスター表示からディテール表示への切り替え前に呼び出される。引数はマスターおよびディテールのコンテキストオブジェクト。\n        INTERMediatorOnPage.naviAfterMoveToDetail(masterContext, detailContext)\n        マスター表示からディテール表示への切り替え後に呼び出される。引数はマスターおよびディテールのコンテキストオブジェクト。\n        INTERMediatorOnPage.navibeforeMoveToMaster(masterContext, detailContext)\n        ディテール表示からマスター表示への切り替え前に呼び出される。引数はマスターおよびディテールのコンテキストオブジェクト。\n        INTERMediatorOnPage.naviAfterMoveToMaster(masterContext, detailContext)\n        ディテール表示からマスター表示への切り替え後に呼び出される。引数はマスターおよびディテールのコンテキストオブジェクト。\n        IMLibUI.mobileSelectionColor\n        マスター/ディーテイル、あるいはステップ動作する場合、モバイルデバイス、あるいはfullnaviを付けたコンテキストにおいて、ホバーのフィードバックのための背景色。既定値は「#BBBBBB」。\n      \n      \n        独自にマスター/ディテール形式のユーザーインタフェースを作る場合\n\t\tマスター/ディテール形式のユーザインタフェースを、navi-controlキーの指定で作るのではなく、それぞれ2つのページを用意して行き来をするよに作成することもできます。この時、一覧側の詳細ボタンをクリックするとINTERMediator.moveAnotherURL(ディテールページのURL?id=xxxx)を実行して、詳細ページに移動し、詳細ページ側ではURLからどのレコードかを求めて検索してレコードの内容を表示するということを行います。この時、INTERMediator.moveAnotherURLを実行する直前に、INTERMediator.prepareToScrollBackを実行します。また、一覧ページのINTERMediatorOnPage.doAfterConstructの関数内でINTERMediator.scrollBackを実行します。すると、詳細から一覧に戻ってきた時に、詳細でみていたレコードが表示され、その行はフラッシュするようになります。\n        INTERMediator.prepareToScrollBack(contextName, id)\n        引数には一覧表示のコンテキスト名と、クリックした行に対するキーの値を指定する。\n        INTERMediator.scrollBack(bias, scrollTarget)\n        biasの指定が必要なのは、表のヘッダ等をsticky表示にした場合、画面に残る見出し部分等の高さを負数で指定するような時で、スクロール結果がbias分調整される。scrollTargetはスクロール対象で、省略するとwindowとする。ページ内でoverflow: auto;とCSSを設定した要素をスクロールする場合は、その要素への参照を指定する。scrollTargetをfalseにするとスクロールはせず、行のフラッシュだけが行われる。\n      \n      \n        ステップ動作\n        INTERMediatorOnPage.《コンテキストで指定した名前》()\n        コンテキスト定義において、before-move-nextstepキーで指定した名前のメソッドをINTERMediatorOnPageオブジェクトに用意すると、ステップ移動時に呼び出される。このメソッドがない場合や、メソッドの返り値がnullの場合、コンテキスト定義の順序で次のステップに画面遷移する。次のステップが無い場合は、画面の遷移は行わない。このメソッドがfalseを返すと、前の画面に遷移する。コンテキスト名の文字列を返すと、そのコンテキストの画面を表示し、現在のコンテキストは表示しなくなる。\n        コンテキスト定義において、before-move-thisstepキーで指定した名前のメソッドは、ステップのコンテキストが合成された直後に呼び出される。after-leave-thisstepキーで指定した名前のメソッドは、次のステップが合成される直前に呼び出される。\n        IMLibPageNavigation.stepNavigation\n        ステップ動作で選択したそれぞれのセルが順番に入力された配列。最後の要素が、今表示されている画面での選択結果となる。要素は、key、contextの2つのプロパティを持つオブジェクトである。contextは、そのステップで利用されたコンテキストオブジェクト（IMLibContextクラス）を参照するので、選択したデータはもちろん、関連するフィールドや他のレコードを含めて参照できる。keyは、選択したレコードのキーで、「主キーフィールド名=主キー値」の形式を持つ。コンテキストのstoreプロパティで、keyの値をキーにすると、選択したレコードが取り出せる。\n        IMLibPageNavigation.getStepLastSelectedRecord()\n        現在のコンテキストで選択したレコードを得る。\n        IMLibPageNavigation.startStep()\n        navi-controlにstep-hideをもつ最初のコンテキストを表示する。ステップ動作のコンテキストを全てstep-hideで定義して、ボタン操作で最初のステップに移動したいような場合に利用する。 をするような場合に利用できるでしょう。\n        IMLibPageNavigation.backToPreviousStep()\n        「戻る」ボタンと同等な処理を行う。なお、複数ステップを戻るには、このメソッドを必要回数指定する。\n        IMLibPageNavigation.moveNextStep(key)\n        セルをタップしたのと同じくステップを進める処理を行う。この時、引数keyが、IMLibPageNavigation.stepNavigationの要素のkeyプロパティに設定される。直後に、before-move-nextstepキーで指定した名前のメソッドが呼び出される。\n      \n      \n        認証に関連する情報\n        INTERMediatorOnPage.authCountLimit\n        認証を行うとき、失敗を許す回数。既定値は4。\n        INTERMediatorOnPage.authCount\n        認証を行うときに、ここまでに失敗した回数。\n        INTERMediatorOnPage.authUser\n        認証に使用されているユーザー名。\n        INTERMediatorOnPage.requireAuthentication\n        通信処理後、ユーザー認証が必要な場合にtrueが設定されている。\n        INTERMediatorOnPage.authStoring\n        認証情報のキャッシュスル場合で、cookie、sessionstrageなど。設定はサーバー側で行われている。\n        INTERMediatorOnPage.authExpired\n        認証情報のキャッシュ時間の秒数。設定はサーバー側で行われている。\n        INTERMediatorOnPage.isNativeAuth\n        データベースのアカウントによって認証を行うネイティブ認証を行なっていればtrue。設定はサーバー側で行われている。\n        INTERMediatorOnPage.realm\n        認証のレルム。同一レルムのページは、認証のキャッシュ情報を共有できる。設定はサーバー側で行われている。\n        INTERMediatorOnPage.isShowChangePassword\n        ログインパネルにパスワード変更のためのテキストフィールドを追加し、パスワード変更機能を追加する。既定値はtrue。\n        INTERMediatorOnPage.isSetDefaultStyle\n        認証パネルにおいて、スタイルの設定を古いバージョンと同じにする。既定値はfalseで、既にこのプロパティはtrueにする理由はない。もし、認証パネルのスタイルを変更したい場合は、テーマの修正をするのが適切である。\n        INTERMediatorOnPage.authPanelTitle\n        認証パネルのタイトルを文字列で指定する。既定値のnullの場合、タイトルには、realmの文字列が設定される。\n        INTERMediatorOnPage.isOAuthAvailable\n        OAuthによる認証を行なっている場合にはtrueになる。既定値はfalse。\n        INTERMediatorOnPage.isLDAP\n        LDAP認証が設定されている場合にtrueになる。既定値はnull。\n        INTERMediatorOnPage.passwordPolicy\n        サーバー側の設定で定めたパスワードポリシーの定義文字列。\n        INTERMediatorOnPage.isEmailAsUsername\n        認証時のユーザー名にメールアドレスが使えるかどうかを示す論理値。\n        INTERMediatorOnPage.doAfterLoginPanel\n        ログインパネル表示直後に呼び出される関数をsetteidekiru.\n      \n      \n        エラーメッセージ、デバッグメッセージ\n        INTERMediator.setDebugMessage(message, level)\n        でバッグメッセージを設定する。引数messageが実際のメッセージで、levelはそのレベル。定義ファイルでのIM_Entry関数の4つ目の引数の数値より低いレベルのデバッグメッセージが画面あるいはコンソールに表示される。\n        INTERMediator.setErrorMessage(ex, moreMessage)\n        単にエラーメッセージを表示するだけなら第1引数に文字列を指定するだけでよい。フレームワーク内では、exに文字列ないしはExceptionクラスのオブジェクト、第2引数に付加的なメッセージを設定している。ex自身もしくはmessageプロパティに、moreMessageが追加されてエラーメッセージとなる。\n        INTERMediator.flushMessage()\n        エラーメッセージやデバッグメッセージを表示する\n        INTERMediatorLog.errorMessageByAlert\n        trueにするとエラーメッセージが登録されるとき、その内容をダイアログボックスで表示する。既定値はfalse。\n        INTERMediatorLog.errorMessageOnAlert\n        エラ〜メッセージをダイアログボックスで表示するとき、このプロパティに文字列を与えると、システム側からのメッセージは無視して、その文字列のみを表示する。既定値のnullのままだと、setErrorMessageの引数がダイアログボックスに表示される。\n        INTERMediatorLog.suppressDebugMessageOnPage\n        デバッグログを表示した場合でも、デバッグログをページ上に表示することはしないで、コンソールのみにデバッグ情報を表示する。\n        INTERMediatorLog.suppressErrorMessageOnPage\n        エラーログを表示した場合でも、エラーログをページ上に表示することはしないで、コンソールのみにエラー情報を表示する。\n        INTERMediatorLog.warningMessagePrevent\n        警告メッセージは通常はダイアログボックスで表示するが、このプロパティにtrueを設定すると、警告メッセージのダイアログ表示は行わない。つまり、警告メッセージは無視される。データベースエラーを中心に警告メッセージが表示されるが、十分デバッグすれば無視もありうる。また、input[type=date]では、データのキー入力途中に更新しようとして警告メッセージが出る場合もあり、その場合の対処はこのプロパティをtrueにすることである。\n      \n      \n        ローカルコンテキスト\n        IMLibLocalContext.clearAll()\n        ローカルコンテキストのオブジェクトを初期化して、記録された内容をクリアする\n        IMLibLocalContext.setValue(key, value)\n        指定したキーで値を保存する\n        IMLibLocalContext.getValue(key)\n        指定したキーの値を取り出す\n        IMLibLocalContext.archive()\n        ローカルコンテキストの内容をセッションストレージ（またはクッキー）に記録する\n        IMLibLocalContext.unarchive()\n        セッションストレージ（またはクッキー）に記録したデータからローカルコンテキストを復元する\n        IMLibLocalContext.update(idValue)\n        引数に指定したid属性値のノードがローカルコンテキストにバインドされていれば、その要素の値をコンテキストに反映させる。通常はchangeイベントで自動的にコンテキストに値が設定されるが、changeイベント以外での動作時に利用する必要が出る\n        INTERMediator.useSessionStorage\n        ローカルコンテキストをセッションストレージに保持する。既定値はtrue。\n      \n      \n        コンテキストオブジェクト\n        IMLibContextクラスのオブジェクトに対するメソッドは以下の通りです。通常は、new IMLibContext(contextName)で生成された結果を使っています。《IMLibContext》は、IMLibContextクラスのインスタンスを示します。\n        コンテキストごとに生成されるオブジェクト\n        《IMLibContext》.contextName\n        コンテキスト名\n        《IMLibContext》.enclosureNode\n        エンクロージャーの要素への参照\n        《IMLibContext》.repeaterNodes\n        リピーターの初期状態で、ドキュメントツリー外に複製して取ってあるもの。値はノードの配列。\n        《IMLibContext》.store\n        コンテキストが保持するデータベースの値。このオブジェクトのプロパティは、keyフィールードが「id」とすれば、id=3、id=420のように、「主キーフィールド名=値」の文字列。その文字列のプロパティはさらにオブジェクトとなっていて、そのオブジェクトのプロパティはフィールド名。そのフィールド名のプロパティに対する値がデータベースに記録された値。FileMaker Serverで、relationキーのportalがtrueの場合、その値がさらにオブジェクトとなっており、プロパティはリレーションシップの関連キーの値である。なお、この値は更新しても、データベースへの更新は自動的には行われない。\n        《IMLibContext》.setValue(recKey, key, value, nodeId, target)\n        コンテキストに値valueを設定する。キーとしてはrecKey（id=34、つまり主キーとイコール、その値を合成した文字列）およびkey（フィールド名）を指定する。最初は要素のid属性値nodeIdを伴ってい指定され、id属性値とターゲット指定targetで決定されるページ内のノードと、データベースの値の対応関係を記録する。nodeIdを省略すると、値を保存すると同時に、他のコンテキストの同じテーブルの同じレコードの同じフィールドとバインドしている値も更新し、要素に表示する値も更新する。\n        INTERMediatorOnPage.updateProcessedNode\n        このプロパティは既定値がfalseで、その場合、すでにバインドされたノードに再度値を設定する事はしない。trueに設定すれば、Widgetでなければ値の設定をバインドが終わったノードに対しても行う。\n        《IMLibContext》.getValue(recKey, key)\n        2種類のキーを指定して値を取り出す。最初のキーは、「主キーフィールド名=値」の文字列、次のキーはフィールド名。つまり、storeプロパティへのアクセッサーメソッド。なお、keyに \"_im_buttom_master_id\" を指定すると、「詳細」ボタンの要素に設定されているid属性値を得られるので、プログラムでクリック操作をしたい時には利用できる。\n        《IMLibContext》.getContextInfo(nodeId, target)\n        要素のid属性値とターゲットから、コンテキスト情報（{context: this, record: recKey, field: key}形式のオブジェクト）を得る。コンテキスト名とフィールド名だけのターゲットの場合は、\"\" を指定する\n        《IMLibContext》.getContextValue(nodeId, target)\n        要素のid属性値とターゲットから、コンテキストでの値を得る\n        《IMLibContext》.setDataAtLastRecord(key, value)\n        コンテキストの最後のレコードのkeyで指定したフィールドに、valueの値を設定し、データベースへの更新を行う。\n        《IMLibContext》.setDataWithKey(pkValue, key, value)\n        コンテキストにあるレコードをpkValueで指定して、そのレコードにあるkeyで指定したフィールドに、valueの値を設定し、データベースへの更新を行う。レコードの指定はフィールドの値のみで行う。\n        コンテキストを管理するIMLibContextPool\n        IMLibContextPool.poolingContexts\n        IMLibContextPoolは複数のコンテキストを管理するオブジェクト。このプロパティは配列で、管理しているそれぞれのIMLibContextクラスのオブジェクトが要素として記録されている\n        IMLibContextPool.getContextInfoFromId(idValue, target)\n        要素のid属性値とターゲットから、コンテキスト情報（{context: this, record: recKey, field: key}形式のオブジェクト）を得る。コンテキストをまたいで検索する\n        IMLibContextPool.updateContext(idValue, target)\n        id属性値とターゲットで示す要素の現在の値を、対応するコンテキストに書き込む\n        IMLibContextPool.contextFromEnclosureId(idValue)\n        指定したid属性を持つ要素がエンクロージャーのコンテキストオブジェクトを返す\n        IMLibContextPool.contextFromName(cName)\n        コンテキスト名からコンテキストを返すが、最初のコンテキストオブジェクトのみが返される\n        IMLibContextPool.getContextFromName(cName)\n        コンテキスト名からコンテキストを返すが、引数のコンテキスト名を持つすべてのコンテキストオブジェクトを含む配列が返される\n      \n      \n        イベント対応\n        IMLibMouseEventDispatch.setExecute(idValue, exec)\n        指定したid属性値の要素に対してclickイベントが発生したときにexecに指定した関数が実行されるようにする\n        IMLibMouseEventDispatch.setTargetExecute(targetValue, exec)\n        指定したターゲット指定の要素に対してclickイベントが発生したときにexecに指定した関数が実行されるようにする\n        IMLibKeyDownEventDispatch.setExecute(idValue, charCode, exec)\n        指定したid属性値の要素に対して、charCodeのキーを押したことによるkeydonwイベントが発生したときにexecに指定した関数が実行されるようにする\n        IMLibKeyUpEventDispatch.setExecute(idValue, charCode, exec)\n        指定したid属性値の要素に対して、charCodeのキーを離したことによるkeyupイベントが発生したときにexecに指定した関数が実行されるようにする\n        IMLibChangeEventDispatch.setExecute(idValue, exec)\n        指定したid属性値の要素に対してchangeイベントが発生したときにexecに指定した関数が実行されるようにする\n        IMLibChangeEventDispatch.setTargetExecute(targetValue, exec)\n        指定したターゲット指定の要素に対してchangeイベントが発生したときにexecに指定した関数が実行されるようにする\n        IMLibBlurEventDispatch.setExecute(idValue, exec)\n        指定したid属性値の要素に対してblurイベントが発生したときにexecに指定した関数が実行されるようにする\n        IMLibBlurEventDispatch.setTargetExecute(targetValue, exec)\n        指定したターゲット指定の要素に対してblurイベントが発生したときにexecに指定した関数が実行されるようにする\n        IMLibInputEventDispatch.setExecute(idValue, exec)\n        指定したid属性値の要素に対してinputイベントが発生したときにexecに指定した関数が実行されるようにする\n        IMLibInputEventDispatch.setTargetExecute(targetValue, exec)\n        指定したターゲット指定の要素に対してinputイベントが発生したときにexecに指定した関数が実行されるようにする\n      \n      \n        クライアントからの直接的なデータベース処理\n        INTER-Mediatorは、INPUT、SELECT、TEXTAREAタグ要素を編集してフォーカスを離れる時（つまり、onchangeイベントを受けて）、自動的にデータを書き戻すようにしています。しかしながら、データベースの読み書きの処理はこれだけでは足りないと思われます。たとえば、DIVタグ要素をドラッグできるようにして、ドラッグ先の座標をデータベースに書き戻すようなことをしたいと思うかもしれません。その場合、イベント処理関数で、ノードの属性やスタイルの値を取り出して、データベース処理を自前でやりたくなります。そのために、以下のように、CRUDに対応した4つの関数およびレコードコピーのための関数を用意してあります。\n        以下のメソッドはいずれも、ネットワーク処理を非同期で行います。通信のためのパラメータは、argsに指定します。それぞれ、直前に示した、同期通信の対応するAPIと同じように、argsを指定します。successProcとfailProcはそれぞれ、通信が成功した時、エラーが発生した時に呼び出されるメソッドを指定します。何もしないなら、nullを指定します。通信処理は非同期で実行されるため、これらのメソッドの直後にステートメントは、通常は通信終了前に実施されるでしょう。原則として、このメソッド以降はプログラムを何も書かない、つまり、一連の処理がこのメソッドの呼出で終わるように記述する必要があります。これらのメソッドは認証が必要な場合でも、不要な場合でも利用されます。認証が必要な場合、認証が失敗すると、繰り返しログインパネルが表示する仕組みも組み込んであります。\n        INTERMediator_DBAdapter.db_query_async(args, successProc, failProc)\n        データベースからの取り出しを行います。関数の返り値は1レコードがオブジェクトとなった配列です。args引数には以下のキーを利用したオブジェクトを指定します。\n        \n          \n            \n              属性\n              指定する値\n            \n            \n              name\n              定義ファイルのIM_Entry関数の第1引数に指定する配列のname属性の値\n            \n            \n              records\n              取り出すレコードの数（レコード数の上限）\n            \n            \n              fields\n              取り出すフィールドの名前の配列（現在はすべて*でアクセスしており無視される）\n            \n            \n              parentkeyvalue\n              外部キーフィールドの値\n            \n            \n              conditions\n              {field:xx, operator:xx, value:xx} の形式のオブジェクトの配列。検索条件をANDで追加する\n            \n            \n              useoffset\n              trueならオフセットの値を利用する。falseなら利用しない\n            \n          \n        \n        INTERMediator_DBAdapter.db_update_async(args, successProc, failProc)\n        　データベースのレコードの更新を行います。args引数には以下のキーを利用したオブジェクトを指定します。\n        \n          \n            \n              属性\n              指定する値\n            \n            \n              name\n              定義ファイルのIM_Entry関数の第1引数に指定する配列のname属性の値\n            \n            \n              conditions\n              {field:xx, operator:xx, value:xx} の形式のオブジェクトの配列。検索条件をANDで追加する\n            \n            \n              dataset\n              {field:xx, value:xx}の形式のオブジェクトの配列。設定するフィールドとその値を指定する\n            \n          \n        \n        INTERMediator_DBAdapter.db_delete_async(args, successProc, failProc)\n        データベースのレコード削除を行います。args引数には以下のキーを利用したオブジェクトを指定します。\n        \n          \n            \n              属性\n              指定する値\n            \n            \n              name\n              定義ファイルのIM_Entry関数の第1引数に指定する配列のname属性の値\n            \n            \n              conditions\n              {field:xx, operator:xx, value:xx} の形式のオブジェクトの配列。検索条件をANDで追加する\n            \n          \n        \n        INTERMediator_DBAdapter.db_createRecord_async(args, successProc, failProc)\n        データベースに新しいレコードを作成します。関数の返り値は、作成したレコードのキーフィールドの値です。args引数には以下のキーを利用したオブジェクトを指定します。\n        \n          \n            \n              属性\n              指定する値\n            \n            \n              name\n              定義ファイルのIM_Entry関数の第1引数に指定する配列のname属性の値\n            \n            \n              dataset\n              {field:xx, value:xx} の形式のオブジェクトの配列。新しいレコードに対して指定フィールドに値を設定する\n            \n          \n        \n        INTERMediator_DBAdapter.db_copy_async(args, successProc, failProc)\n        指定したレコードを複製します。関数の返り値は、作成したレコードのキーフィールドの値です。args引数には以下のキーを利用したオブジェクトを指定します。\n        \n          \n            \n              属性\n              指定する値\n            \n            \n              name\n              定義ファイルのIM_Entry関数の第1引数に指定する配列のname属性の値\n            \n            \n              conditions\n              {field:xx, operator:xx, value:xx} の形式のオブジェクトの配列。検索条件をANDで追加する\n            \n            \n              conditions\n              {name: xxx, field:xx, value:xx} の形式のオブジェクトの配列。nameは関連テーブルのコンテキスト名、外部キーフィールド、そして、親レコードを特定する「キーフィールド名=キーの値」形式の文字列をそれぞれ指定します。\n            \n          \n        \n        通信が失敗した時に呼び出されるfailProcの関数は引数がありません。成功した時に呼び出されるメソッドは、引数が1つあり、通信結果を含むオブジェクトを引数で得られます。そのオブジェクトは、以下のプロパティを持っています。このsuccessProcに、通信結果をもとにした処理を記述することが可能です。\n        \n          \n            \n              プロパティ\n              内容\n            \n            \n              dbresult\n              検索結果あるいは処理したレコードを示すオブジェクトの配列\n            \n            \n              resultCount\n              検索あるいは処理したレコード数\n            \n            \n              totalCount\n              現在の検索条件で得られる総レコード数\n            \n            \n              newRecordKeyValue\n              新しいレコードを作ったり複製をした時、新しいレコードのキーフィールドの値\n            \n            \n              newPasswordResult\n              パスワードの変更が成功したかどうかを示す論理値\n            \n            \n              registeredId\n              クライアント間連携で利用する登録ID\n            \n            \n              nullAcceptable\n              フィールドの値にnullが許可されているかどうか\n            \n          \n        \n        INTERMediator_DBAdapter.db_query(args)\n        INTERMediator_DBAdapter.db_queryWithAuth(args, completion)\n        INTERMediator_DBAdapter.db_update(args)\n        INTERMediator_DBAdapter.db_updateWithAuth(args, completion)\n        INTERMediator_DBAdapter.db_delete(args)\n        INTERMediator_DBAdapter.db_deleteWithAuth(args, completion)\n        INTERMediator_DBAdapter.db_createRecord(args)\n        INTERMediator_DBAdapter.db_createRecordWithAuth(args, completion)\n        上記の関数は、Ver.5までに搭載されていた同期通信でクライアントからサーバーに対してデータベース処理が可能なものです。Ver.6では利用できなくなっています。非同期の近い名前の関数から、引数を調べてください。\n        INTERMediator.ignoreOptimisticLocking\n        trueの場合データベース更新時に楽観的ロック（ページ構築時から値が変化していないかを検出）の処理を行わない。既定値はfalse。\n        INTERMediatorOnPage.newRecordId\n        直前に行ったデータベース処理がレコード作成の場合、作成したレコードのキーフィールドの値が設定されている。\n      \n      \n        キューへのタスク投入\n        IMLibQueue.setTask(function(completeTask){...}, execSoon, later)\n        INTER-Mediator内部での更新処理のためのサーバーへの通信は、全てキューに投入して処理されます。これにより、更新処理が複数同時に稼働してしまう問題を避けることができます。独自にJavaScriptでプログラムを組む時、非同期通信を上記のメソッドで実装する場合、通信処理自体をこのメソッドでキューへ登録するのが確実です。引数の関数の処理ブロック内で、非同期通信処理を呼び出します。なお、関数の引数はキューを終了することを示すためのクロージャーが設定されて呼び出されます。通信処理後などに「completeTask()」のように呼び出しを記述する必要があります。これが呼び出されないと、次のキューの処理に移行しません。execSoonはtrueにするとキューに投入せずすぐに実行します。laterをtrueにすると、優先度の低いキュートなり、実行前に100msの時間を確保します。最後の2つの引数は省略可能で、省略時はそれぞれfalseになります。\n        例えば、あるボタンを押して、データベース処理をした後、location.hrefにURLを代入して別のページに移動したいとします。そのとき、単に、コンテキストにあるsetDataAtLastRecordメソッドを使って直後にlocation.hrefへの代入を行うと、このメソッド内のデータベース更新の通信が非同期で行われ、通信処理が完了する前にページが遷移し、データベース処理がキャンセルされてしまう可能性があります。その場合、以下のように、データベース更新処理の後にタスクを定義します。なお、setDataAtLastRecordメソッドは内部でsetTaskメソッドを呼び出しており、キューを利用しています。最後のキューによりmove関数が登録されますが、その中でキューがなくなるまで待つという処理を行います。こうすれば、データベース処理が完了した後にlocation.hrefへの代入が行われます。move関数は自身を内部で呼び出しているので無限ループの可能性がありますが、ここでは短時間でデータベース処理は完了することを想定しています。\n                \n          function clickAnyButton() {\n  const context = IMLibContextPool.contextName('test') // コンテキストを確保\n  context.setDataAtLastRecord('field1', 0)  // コンテキストの最後のレコードを更新\n  context.setDataAtLastRecord('field2', -1) // コンテキストの最後のレコードを更新\n  IMLibQueue.setTask(moving)  // キューが処理を終えるまで待つ処理を登録\n}\n\nfunction moving(complete) {\n  if (IMLibQueue.tasks.length &lt;= 1) {\n    location.href = 'https://moving.to.this.url.site/all_right'\n  } else {\n    IMLibQueue.setTask(moving, false, true)\n  }\n  complete()\n} \n      \n\nクライアント同期処理のカスタマイズ\nINTERMediatorOnPage.syncBeforeUpdate = (d) =&gt; {}\nINTERMediatorOnPage.syncAfterUpdate = (d) =&gt; {}\nINTERMediatorOnPage.syncBeforeCreate = (d) =&gt; {}\nINTERMediatorOnPage.syncAfterCreate = (d) =&gt; {}\nINTERMediatorOnPage.syncBeforeDelete = (d) =&gt; {}\nINTERMediatorOnPage.syncAfterDelete = (d) =&gt; {}\nクライアント同期が設定されているページにおいて、変更処理が同期された側で、それぞれの変更処理が行われる前後に呼び出されるメソッドを定義できます。Beforeが名前に含まれているメソッドでは、返り値を設定でき、引き続き処理する場合はtrue、処理をキャンセルする場合はfalseを返します。引数dは、同期情報に関するオブジェクト（例：{entity: \"item\", field: [\"product_unitprice\"], 'justnotify: false, pkvalue: [\"3\"], value: [\"30\"]}）が設定されて呼び出されます。\n\n    "
    },
    {
        "id": 28,
        "parent": "/ja/for-programmers/",
        "path": "/ja/for-programmers/jscomponent.html",
        "title": "JavaScriptコンポーネントの使い方",
        "breadcrumb": "JavaScriptコンポーネントの使い方",
        "body": "\n            \n                はじめに\n                以下のムービーのようなドラッグ&amp;ドロップによるファイルのアップロードができます。サンプルでは、Sample_webpageにあるfileupload_MySQL.htmlを中心に見てください。\n                \n                    dragdrop\n                \n                単一のコンテキストとバインドしたファイルアップロード\n                ファイルのドラッグ&amp;ドロップによるアップロード機能は、JavaScriptのドラッグ&amp;ドロップの機能などを利用して実装しています。シンプルな利用方法は、ファイルのドラッグを受け付けたい箇所に、以下のように記述します。JavaScriptのプログラムはINTER-Mediatorに含まれているので、定義ファイルをscriptタブで読み込むだけで基本的には利用できます。\n                \n                    &lt;span data-im=\"testtable@vc1\" data-im-widget=\"fileupload\"&gt;&lt;/span&gt;\n                \n                単にドラッグ&amp;ドロップしてファイルをサーバーにアップロードするだけということは通常はなく、そのファイルをどこかに記録し、さらにパスなどを記録しておくことになるはずです。前述の例では、testtableというコンテキストのvc1フィールドに、ファイルのパスを記述します。実際にアップロードしたファイルが置かれるディレクトリは、IM_Entryの第2引数（オプション指定）で、'media-root-dir'キーでパスを指定します。\n                アップロード結果を関連レコードとして追加する\n                前述の方法は、アップロードを複数回行った場合、最後のアップロードしたファイルへのパスのみが残ります。これに対して、アップロード結果を別のコンテキストに新しいレコードを作成し、アップロードごとに新しいレコードを作成することもできます。別のコンテキストとの間にはリレーションシップの定義が必要です。以下の例は、testtableコンテキストのvc1フィールドに対してファイルアップロードのコンポーネントを使う場合です。まず、この場合も、testtable側にはパスを記録するフィールド（ここでのvc1）を一つ用意します。そして、アップロードがあれば、2つ目のコンテキストfileuploadに新たにレコードを作るとします。まず、2つのコンテキストは、fileupload側のreatlionキーの定義に従って1対多の関係にあります。加えて、testtable側にfile-uploadキーによる配列を定義します。この配列により、vc1フィールドでファイルのアップロードがあれば、fileupload側に新たなレコードを作るという動作をします。\n                \n                    IM_Entry(\n    array(\n        array(\n            'records' =&gt; 10000,\n            'name' =&gt; 'testtable',\n            'key' =&gt; 'id',\n            'file-upload' =&gt; array(\n                array('field'=&gt;'vc1', 'context'=&gt;'fileupload',)\n            ),\n        ),\n        array(\n            'name' =&gt; 'fileupload',\n            'key' =&gt; 'id',\n            'relation' =&gt; array(\n                array('foreign-key' =&gt; 'f_id', 'join-field' =&gt; 'id', 'operator' =&gt; '=')\n            ),\n        ),\n    ),\n    array(\n        'media-root-dir' =&gt; '/tmp',\n    ),\n    array('db-class' =&gt; 'PDO'),\n    false\n);\n                \n                そして、アップロードが行われた場合、fileuploadコンテキストに新しいレコードを作りますが、relationの指定に従って、fileupload側の外部キーのフィールドに、testtable側の主キーの値が自動的に設定されて、アップロードのレコードが関連付けられます。fileuploadコンテキスト側には、文字列型のpathフィールドを作成しておきます。このフィールドに、アップロードされたファイルのパスが設定されます。このフィールド名は決め打ちになります。fileuploadコンテキストのテーブルには他のフィールドも定義できます。\n                アップロードのプログレスバー\n                アップロードの経過を表示するプログレスバーを表示したい場合には、INTERMediator.construct(); の実行前に、以下のステートメントを実行させてください。\n                \n                    IMParts_Catalog.fileupload.progressSupported = true;\n                \n                加えて、Sample_webpageフォルダにあるupload_frame.phpファイルを、定義ファイルと同じフォルダにコピーしておいてください。\n                なお、プログレス表示はPHPがAPC(Alternative PHP Cache)に対応している必要があります。PHP v5.3で稼働させる方法は、こちらを参考にしてください。\n                フォーム形式のアップロード\n                ドラッグ&amp;ドロップによるファイルのアップロードは、実はInternet Explorer 10では動きません。それに必要なクラスがブラウザに用意されていないからです。その場合、フォーム形式のアップロードコンポーネントが表示されます。これと同じように、常に、フォーム形式のアップロード機能を設定したい場合、INTERMediator.construct(); の実行前に、以下のステートメントを実行させてください。\n                \n                    IMParts_Catalog.fileupload.forceOldStyleForm = true;\n                \n                FileMakerのオブジェクトフィールドにファイルをアップロードする\n                INTER-Mediator 5.1以降を使用している場合、FileMakerのオブジェクトフィールドに直接ファイルをアップロードできます。ただし、FileMaker Serverのバージョン13以降が必要、かつあらかじめデータベースのフィールドオプションにおいて［入力値の自動化］オプションの［計算値］に下記を設定しておく必要があります。\n                If (\n    GetContainerAttribute(Self; \"filename\") ≠ \"\";\n        Self;\n        Let([\n            fileName = GetValue(Self; 1);\n            content = Substitute(Self; fileName &amp; ¶; \"\")\n        ];\n        Base64Decode(content; fileName)\n    )\n)\n                定義ファイルでは、'file-upload'キーおよび下位のキーとして'field'キーと'container'キーを下記のように指定します。'field'キーの値はオブジェクトフィールドの名称です（下記の例ではvc1）。\n                'file-upload' =&gt; array(\n    array('field'=&gt;'vc1', 'container' =&gt; true)\n),\n\n            \n            \n                JavaScriptコンポーネントのプラグイン\n                以前から、HTMLエディタのtinyMCE、コードエディタのCodeMirrorや独自作成したファイルアップロードコンポーネントを使えるようにしていたのですが、なんとか「プラグイン」的に使える状態になったので、一度ドキュメントを作成します。JavaScriptで作ったコンポーネントに、データベースにあるフィールドの値を表示し、修正するとそれが書き戻される仕組みを提供します。ただし、コンポーネントごとに、初期化の方法は違うので、その部分を吸収するプラグインを作らないといけません。\n                JavaScriptコンポーネントの使い方\n                まず、JavaScriptのコンポーネントを使いたい場合には、次のように、data-im-widget属性にキーワードを書きます。プラグインができていればこれだけです。\n                \n                    &lt;div data-im=\"testtable@text1\" data-im-widget=\"tinymce\"&gt;&lt;/div&gt;\n                \n                ここで、tinyMCEを使うにはプラグインが必要ですが、これについては、すでにINTER-Mediatorの中にあります。Samples/Sample_webpage/tinymce_im.jsがそれなので、たとえば、ページファイルのヘッダ部に、次のような記述を行ってtinyMCE自身の読み込みと、プラグインの読み込みを行っておきます。もちろん、パスは適切なものを指定してください。\n                \n                    &lt;script type=\"text/javascript\" src=\"tinymce/js/tinymce/tinymce.min.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\" src=\"tinymce_im.js\"&gt;&lt;/script&gt;\n                \n                Ver.4.4現在、tinyMCE、CodeMirror、それから独自に作ったファイルアップロードコンポーネント（Samples/Sample_webpage/fileupload_MySQL.htmlがサンプル）が利用可能です。\n                JavaScriptコンポーネントプラグインの作り方\n                プラグイン（前記のtinymce_im.jsに相当）は、JavaScriptで記述します。もちろん、tinymce_im.jsもサンプルとして参照する必要があるでしょう。\n                プラグインのファイルでは、IMParts_Catalog変数のオブジェクトに、プラグインのオブジェクトを追加します。このときのキーが、data-im-widget属性に指定するキーワードとなります。以下はその基本構造です。\n                \n                    IMParts_Catalog[\"tinymce\"] = {\n    instanciate: function (parentNode) { },\n    ids: [],\n    finish: function (update) { }\n}\n                \n                右辺のオブジェクトは、instanciateとfinishという2つのメソッドを持つ事が重要です。INTER-Mediatorは、ページ合成時に、im-data-widget属性があるノードを見つけると、そのノードを引数にとって、instanciateメソッドを呼び出します。\n                一方、ページ合成の最終段階、つまり、DOMオブジェクトが確定してページ上に存在する状態になった後に、finishメソッドが呼び出されます。結果的に、im-data-widget属性が設定された要素×レコード数の回数instanciateメソッドが呼び出され、最後に1回finishが呼び出されます。\n                プラグインの作業として必要なこと\n                この2つのメソッドが行うことは、コンポーネントに対するゲッタおよびセッタメソッドをそれぞれ展開したコンポーネントに対して設定することです。また、対応コンポーネントのid属性値を得るメソッドも実装します。たとえば、instanciateメソッドに記述するとしたら、次のようになります。instanciateメソッドを呼び出されたときの引数parentNodeあるいはコンポーネントのルートの要素に対して、以下の決められた名称のメソッドを実装します。メソッドの中身はtinyMCEの場合の例です。\n                \n                    parentNode._im_getComponentId = function () { // data-im-widgetのある要素に設定\n    var theId = newId;\n    return theId;\n};\nparentNode._im_setValue = function (str) { // data-im-widgetのある要素に設定\n    var targetNode = newNode;\n    targetNode.innerHTML = str;\n};\ntargetNode._im_getValue = (function () { // コンポーネントのルートの要素に設定\n    var thisId = targetId;\n    return function () {\n        return tinymce.EditorManager.get(thisId).getContent();\n    }\n})();\n                \n                instanciateメソッドでの作業\n                通常、JavaScriptのコンポーネントは、特定の要素にidやclass値を適当に与えて、その要素の中に必要なオブジェクトを詰め込むといった動作をします。つまり、起点となる要素を用意しておき、そこに必要なオブジェクトを追加します。tinyMCEだと、手軽な作り方はTEXTAREAタグ要素を用意することですが、ページファイル上に記述した要素がどんな種類のタグ要素でもいいように、data-im-widget属性がある要素の子要素にTEXTAREAタグ要素を作り、その要素をtinyMCEで初期化するようにしています。\n                そのTEXTAREA要素のid属性は、適当に付けます。targetNodeで参照されるリピーター内の要素は、すでにid属性が設定されているので、そのid値に適当な文字を追加すれば、一意なid属性になります。_im_getComponentIdメソッドは、ここでのTEXTAREA要素に付けたidを返します。\n                なお、instanticateメソッド中は、まだ、リピーターはエンクロージャーに挿入されておらず、documentからたどれない状態になっています。その場合、初期化をしてもうまく動作しないと思われます。従って、instanciateメソッドでは、元になるTEXTAREA要素を作り、id番号を振り、そのid番号をidsプロパティの配列に追加して、必須のメソッドを定義するところまでしかできないのが一般的かと思います。idsプロパティはなくてもいいのですが、この後のfinalizeメソッドでそれぞれの要素を初期化するために、初期化すべき要素を後から特定できるようにするために、instanciateで作成した要素のidを残します。\n                instanciateメソッドの段階で実際に利用されるのは、_im_getComponentIdメソッドと_im_setValueメソッドなので、_im_getValueメソッドは実際には設定する必要はありません。_im_setValueメソッドについては、JavaScriptコンポーネントが初期化前であることを考慮して、機能する前の状態での値設定が可能なプログラムを記述する必要があります。\n                finalizeメソッドでの作業\n                この段階では、全ての要素がdocument配下にいるので、JavaScriptコンポーネントの初期化を実際に行います。なお、初期化した結果、ゲッタやセッタの動作を変えたい場合は、設定をしなおします。JavaScriptのコンポーネント内で修正した結果をデータベースに書き戻すには、_im_getValueメソッドを、初期化が終わった後の状態でのゲッタとして動作するように設定をする必要があります。単にデータベースに書き戻すだけでいいのなら、ゲッタの設定のみでかまいません。以下は、tinyMCEの例で、idsプロパティにコンポーネントのid属性値が配列として残されています。1つ1つの要素に対して、_im_getValueメソッドを追加しています。\n                \n                    for (var i = 0; i &lt; this.ids.length; i++) {\n     var targetNode = document.getElementById(this.ids[i]);\n     var targetId = this.ids[i];\n     if (targetNode) {\n         targetNode._im_getValue = (function () {\n             var thisId = targetId;\n             return function () {\n                 return tinymce.EditorManager.get(thisId).getContent();\n             }\n         })();\n     }\n }\n                \n                tinyMCEのプラグインは、ページ上にあるすべてTEXTAREAをHTMLエディタにしてしまう動作で初期化するので、tinyMCE.initメソッドを呼び出すだけです。コンポーネントによっては、個別にオブジェクトをidsプロパティから取得したid値で参照して、それぞれに何らかのメソッドを適用しないといけないかもしれません。\n                結果的に、それぞれのJavaScriptコンポーネントごとにうまく初期化をしないといけませんが、場合によってはフレームワークの更新も必要になるかもしれません。\n                自分でJavaScriptコンポーネントを作る場合\n                自分で１からコンポーネントを作る場合は、以下のプラグインの骨格を作り、後は自由につくっていいでしょう。このクラスにメソッドを集めてもいいですし、他のファイルから参照してもかまいません。\n                \n                    IMParts_Catalog[\"myjscomponent\"] = {\n    instanciate: function (parentNode) { },\n    ids: [],\n    finish: function (update) { }\n}\n                \n            \n        "
    },
    {
        "id": 29,
        "parent": "/ja/for-programmers/",
        "path": "/ja/for-programmers/media.html",
        "title": "MediaAccessクラスとその拡張点",
        "breadcrumb": "MediaAccessクラスとその拡張点",
        "body": "\n            \n                はじめに\n                INTER-Mediatorはデータベースの内容を取り出し、Webページに展開し、場合によっては書き直したデータをデータベースに書き戻します。この一連のDBを中心としたデータの流れがあるのですが、Webアプリケーションではこれだけではすべてはまかなえません。HTMLでページを作るときは写真などの画像を別のファイルで供給します。このHTML外に実データが存在するようなものを「メディア」と呼ぶことにします。\n                メディアにはいろいろな種類があります。主要なものはIMGタグ要素で表示する画像、OBJECTタグなどで表示するFlashのコンテンツやビデオなど、そしてリンク先で得られるものとなるでしょうか。また、それぞれ、サーバー上にスタティックにあるものや、データベースのオブジェクト型フィールドに存在する場合もあります。WebページからこれらにアクセスするためのものがMediaAccessクラスです。概ね、次のような用途に使用方法は分類できます。\n                \n                    サーバー上にある画像ファイルを参照する\n                    FileMakerのオブジェクトフィールドを参照する\n                    データ生成を指定したクラスにさせ、生成結果を返す\n                \n                ここで、単なる画像は普通にHTMLを書けばいいじゃないかと思うかもしれませんが、MediaAccessクラスを使う理由は、認証やアクセス権の設定との連携が可能になっているところです。\n            \n            \n                サーバー上にある画像ファイルを単に参照する\n                スタティックな画像で、認証が絡まない場合は、普通にIMGタグを記述します。また、画像ファイル名やパスがデータベースにある場合でも、必ずしもMediaAccessクラスは必要ないかもしれません。たとえば、あるテーブルのfilepathフィールドにファイル名が記録されているのなら、このようなIMGタグで表示できるでしょう。#srcにより、この要素のSRC属性にフィールドのデータが追加されます。\n                \n                    &lt;img src=\";figs/\"; data-im=\";context@filepath@#src\"; /&gt;\n                \n            \n            \n                サーバー上にある画像ファイルを認証を伴って参照する\n                一方、ページの内容を認証しなければ参照できないようにしたとき、やはりページに埋め込んだ画像なども認証を経由したいと考えます。Webサーバーレベルでの認証の場合は、ある意味、認証がない場合と概ね同じことで可能ですが、INTER-Mediatorの認証機能を使った場合、SRC要素がスタティックな画像を参照していれば、もしかしたら、認証しなくても画像だけは見えてしまうかもしれません。そんなことをしても大した情報流出にならないとも言えるのですが、ガードしたいものはガードするのが基本ですし、認証しているのに一部は誰でも見えるのは正しい運用ではありません。\n                そこで、IM_Entry関数の2つ目の引数（つまりオプション引数）に、'media-root-dir'というキーで、サーバー上にあるメディアファイルのフォルダへのルートからの絶対パスを指定しておきます。たとえば、\n                \n                    'media-root-dir' =&gt; '/var/www/images',\n                \n                となっていたとします。あるページファイルで使われている定義ファイルのパスがcontext.phpだったとします。すると、次の部分URLが、メディアを返します。ここで背後では、MediaAccessクラスが使われており、このクラスがメディアに対するプロキシになっているとも言えます。\n                \n                    context.php?media=ch1/shot345.png\n                \n                たとえば、IMGタグのSRC属性に上記のURLを記述すれば、media-root-dirと合成して、「/var/www/images/ch1/shot345.png」というファイルをアクセスし、その内容を取り出して、適切なMIMEタイプのヘッダとともに出力をします。\n                前記のURLにある画像ファイル名「shot345.png」がフィールドpicfileにあるような場合には、ページファイルの要素には以下のような記述ができます。media=は決められたキーワードです。\n                \n                    &lt;img src=\";context.php?media=ch1/\"; data-im=\";table@picfile@#src\"; /&gt;\n                \n                このとき、定義ファイルで認証が必要な設定になっていると、SRC属性のURLからの取得時にMediaAccessクラス内部で、認証の確認を行います。ここで、一般の認証時に使っているクレデンシャルをそのまま使うことが実はできません。一般の認証では、1つのアクセスごとに異なるチャレンジデータを使うことで、認証の乗っ取りをしにくくしています。しかし、そのためにメディア処理ではその仕組みが使えません。なぜなら、メディアへのアクセスは並列的にブラウザから行うからです。\n                そこで、メディアアクセス時の認証のためだけのクレデンシャルを生成させるようにしています。たとえば、直前のimgタグ要素の場合、tableという名前のコンテキストからの取得となりますが、そのコンテキスト定義（IM_Entry関数の第1引数）の'authentication'キー内部の'media-handling'キーの値をtrueにします。すると、このコンテキストのデータを取得するときに、サーバー側からメディア用のクレデンシャルを出力します。\n                IMGタグ要素などから実際にメディア取得を定義ファイルに対して行うとき、media=があれば、MediaAccessクラスに処理をまかせます。そのとき、クレデンシャルがクッキーに記録されてサーバー側に到達し、それを発行したクレデンシャルと比較することで認証が通っているかどうかを判定します。つまり、コンテキストが得られるということは認証が通っているわけで、その信頼関係をもとに秘密の合い言葉をやりとりします。このクレデンシャルは繰り返し使われる可能性があります。クッキーに記録し、時間が来れば消去するようにはなっているものの、クレデンシャルを盗まれるのはそれだけでメディアアクセスを可能にしてしまうことになります。従って、HTTPS（SSL）でのサーバー運用は必須とも言えるでしょう。\n            \n            \n                普通のHTMLでMediaAccessを経由させる\n                Webページを作って画像を埋め込むと、&lt;img src=\";img/cover.jpg\"; /&gt; などと記述します。これをMediaAccessクラスを使ってデータの取り出しを行いたいとしたら、ソースを全部変更しないといけないのかというとそうではありません。リダイレクトを使うことで、HTMLソースはそのままに、MediaAccessクラスを使うことができます。たとえば、.htaccessファイルを作り、たとえば次のような記述を作ります。\n                \n                    RedirectMatch img/(.+) http://host.name/myapp/context.php?media=$1\n                \n                すると、&lt;img src=\";img/cover.jpg\"; /&gt; は、&lt;img src=\";http://host.name/myapp/context.php?media=cover.jpg\"; /&gt; と同じことになるわけです。\n                部分パスと絶対パス、それらを消したり追加したりといろいろ複雑にはなりますが、このスタティックなメディアを認証した上で表示できるようにしたのがMediaAccessの最初のインプリメントでした。\n            \n            \n                FileMakerのオブジェクトフィールドを参照する\n                オブジェクトフィールドはデータベースごとに扱いが異なり、統一的にはやりにくい処理ではあります。MediaAccessクラスでは、FileMaker Serverをターゲットにオブジェクトフィールドに対応する機能を作成しました。\n                FileMakerはFXを経由し、XML共有の仕組みを使います。テキスト型や数値型は、基本的にテキストでフィールドにあるデータが得られます。一方、オブジェクトフィールドはオブジェクトそのもののデータではなく、フィールドのデータに応じた以下のような「テキスト」が得られます。\n                \n                    /fmi/xml/cnt/photo.jpg\nhttp://server:16000/…\n                \n                PDFは完全なURLで、FileMaker Serverに16000ポートで接続して取り出すことが可能です。JPEGなどの画像の場合は、URLのパスに相当するものが得られますが、たとえばIMGタグのSRC属性にそのまま指定が可能な文字列になります。\n                いずれにしても、両方ともURLであると解釈すればいいわけです。この仕組みはFileMaker Serverに限らず、一般的なアクセスにも使えます。つまり、media=URLと指定をした場合は、そのURLにアクセスしたデータをMediaAccessクラスが取得し、さらにクラスを呼び出した元にそのデータを返します。/fmi/xml/cntで始まる物だけは特別にURLであるという処理が組み込まれています。また、URLかどうかはそれ以外には、httpあるいはhttpsで開始するものかどうかで判定しています。\n            \n            \n                MediaAccessでのアクセス権\n                認証が成立したらすべて参照可能となり、成立しなければ参照不可という単純なものなら非常に話が早く、前に説明したmedia-tokenの仕組みで事は足りるのです。なお、データはCRUDの4つの側面がありますが、メディアに関しては「編集」というのはWeb世界ではかなり難易度が高い世界であり、MediaAccessクラスはほぼ参照のみのサポートになっています。\n                ここで、メディアそのものがログインしたユーザごとのアクセス権を持たせたい場合が出てきます。レコードについては、特定のフィールドにユーザ名やグループ名を入力することで、そのユーザやグループに所属したユーザでないと参照や更新ができない仕組みを持っています。フィールドのデータはそれでいいのですが、メディアは実体はレコードと別に有ります。ここで、個々のメディアをコンテキストのレコードと結合させ、レコードごとのアクセス権をメディアにまで及ぼす仕組みを組み込みました。\n                まず、IM_Entry関数の2つ目の引数（オプション引数）に、キーが'media-context'で値がコンテキスト名（コンテキストのnameキーに対する値）を与えます。すると、メディアはこのコンテキストにある特定のレコードの、1つのフィールドのようなふるまいになります。\n                \n                    'media-context' =&gt; 'context-name',\n                \n                実際にメディアにアクセスするパスは次のような形式にします。つまり、コンテキスト名、レコードの検索条件をパスに入れます。最初のfilesは特に意味はなく、相対パスの最初のキーワードです。context-nameは、media-contextの値と同じでなければなりません。そのコンテキストのkeyキーに対する値、つまり主キーがpidであるなら、たとえば、field=valueは、pid=312 のような値になります。\n                \n                    context.php?media=files/context-name/field=value/filename.png\n                \n                ここでもし、media-root-dirが /var/www/media であるなら、実際に\n                \n                    /var/www/media/files/context-name/pid=312/finename.png\n                \n                という絶対パスの画像ファイルが存在する必要があります。コンテキストの定義には、レコード単位のアクセス権設定があれば、メディアに対するアクセス権の認証の確認を行い、ユーザを特定します。pid=312のレコードがそのユーザにアクセス権があるのかどうかを確認することによって、アクセスの可否を決めます。従って、適当にpid=316などとパスを変えても、その条件で検索されたレコードが他のユーザに対する権利があるものであれば、400番台のレスポンスを返してデータは返しません。認証の確認を行い、そのユーザに対するアクセス権がないものは出力しないという仕様によりアクセス権は定義した通りに適用されます。\n                pid=312を、age=45のようにできると言えばできますが、おそらく、そういうディレクトリは存在せず、漏洩にはならないでしょう。\n                ファイルのアップロードのコンポーネントは、コンテキスト名やレコード検索条件のパスを自動的に作成するようにも作られています。\n                メディア関連処理は、開発している側で「必要の合った」状況しかうまく動かない可能性があります。ぜひとも、いろいろ試してフィードバックをください。\n            \n            \n                データ生成を指定したクラスにさせ生成結果を返す\n                URLを使用して、別のシステムにデータを取りに行くことができるということはかなり汎用的になります。しかしながら、別システムとの連動ということになり、開発はやや大変になると同時にセキュリティ面への配慮する場面も増えることになります。そこで、INTER-Mediatorで完結させるために、定義ファイルの呼び出しにおいて、\n                \n                    context.php?media=class://ClassName/context/criteria\n                \n                という呼び出しができます。この場合、ClassNameは定義ファイルと同じディレクトリなど、PHPが取得できる場所にあるクラスのファイル名です。ClassNameで指定したクラスには、processingというメソッドを記述します。そして、ヘッダを含めた応答すべてをこのメソッドの中で完結させます。\n                \n                    class ClassName {\n    function processing($contextData, $options) { }\n}\n                \n                スペック上はprocessingというメソッドがあればいいのですが、引数については、とりあえず作ったアプリケーションで必要なものを並べました。$contextDataは、パス内にあるcontextで指定したクラスに対して、パス内にあるcriteriaで指定した検索条件で得られたレコードないしはその配列が引数で渡されます。認証を行うと、1レコードに限定されるので、そのレコードの連想配列です。認証を行わないと単に検索条件となるので、連想配列の配列を返します。criteriaはたとえば「id=45」にすれば、idフィールドが45のレコードに絞り込みます。$optionには、定義ファイルのIM_Entryの2つ目の値が設定されます。\n                \n                この仕組みを作って作ったのが『FileMaker as a Relational Database』のサイトです。このサイトでは、書籍を購入した人にPDFおよびePubでの書籍を配布していますが、それぞれパーソナライズをしています。PDFはヘッダに購入者やメールアドレスを入れ込み、ePubでは特定のページに同じような内容のテキストを埋め込んで圧縮・アーカイブします。media=class://という記述は、そうしたドキュメント生成処理を記述できるような仕組みなのです。\n            \n        "
    },
    {
        "id": 30,
        "parent": "/ja/for-programmers/",
        "path": "/ja/for-programmers/serverextending.html",
        "title": "サーバーサイドの拡張（Ver.5.4以降）",
        "breadcrumb": "サーバーサイドの拡張（Ver.5.4以降）",
        "body": "\n            \n                データコンバータクラスの利用方法\n                IM_Entry関数の第2引数で、'formatter'を利用して、特定のコンテキストのフィールドに対して、データベースの読み書き前後にフィルタを設定することができます。このときに使うクラスをデータコンバータクラスと呼びます。使用する箇所では、ネームスペースを除いたクラス名だけを記述します。自分で作成もできますが、以下のものが最初から組み込まれています。自分で作成する場合はDataConverter_template.phpを参照してください\n                \n                    \n                        \n                            \\INTERMediator\\Data_Converter\\AppendPrefix.php\n                            parameterに指定した文字列を前につける\n                        \n                        \n                            \\INTERMediator\\Data_Converter\\AppendSuffix.php\n                            parameterに指定した文字列を後につける\n                        \n                        \n                            \\INTERMediator\\Data_Converter\\Currency.php\n                            parameterに指定した小数以下の桁数で、数値を通貨で表示する\n                        \n                        \n                            \\INTERMediator\\Data_Converter\\FMDateTime.php\n                            FileMaker Serverの出力する「月/日/年」形式の日付や時刻を整える\n                        \n                        \n                            \\INTERMediator\\Data_Converter\\HTMLString.php\n                            改行をBRタグ要素、そして&lt;や&gt;や&amp;を参照形式に変換する。parameterにautolinkと指定するとURLにAタグ要素を付加してリンクに変換する。バージョン4.2以降においてparameterにnoescapeと指定すると参照形式への変換を無効にする。データベースへの書き込み時はそのままの文字列\n                        \n                        \n                            \\INTERMediator\\Data_Converter\\MarkdownString\n                            マークダウン表記のテキストをHTMLに整形する。コンバーターを通したフィールドは、innerHTMLで受ける必要がある。現在サポートしているマークダウン表記は以下のとおり。\n                                \n                                    \n                                        \n                                            行頭の記号\n                                            動作\n                                        \n                                        \n                                            *\n                                            その行をHnタグで囲む。nは*の個数に対応する\n                                        \n                                        \n                                            -\n                                            その行を箇条書きにする。-を重ねて階層的に記述することも可能\n                                        \n                                        \n                                            #\n                                            クラスが「_im_markdown_p1」のPタグで囲む。#は2つおよび3つにも対応し、クラス名の末尾の数字と#の個数が対応する\n                                        \n                                        \n                                            @@IMG[file]\n                                            href属性がfileのIMGタグを生成すし、さらにクラスが「_im_markdown_para_img」のPタグで囲む\n                                        \n                                        \n                                            |\n                                            TABLEタグで表を作る。セルの区切りと末尾に|を入れる\n                                        \n                                    \n                                \n                            \n                        \n                        \n                            \\INTERMediator\\Data_Converter\\MySQLDateTime.php\n                            MySQLの出力する「年-月-日」形式の日付や時刻を整える\n                        \n                        \n                            \\INTERMediator\\Data_Converter\\Number.php\n                            parameterに指定した小数以下の桁数で、数値をカンマ付きで表示する\n                        \n                        \n                            \\INTERMediator\\Data_Converter\\NumberBase.php\n                            NumberやCurrencyの基底クラス\n                        \n                        \n                            \\INTERMediator\\Data_Converter\\NullZeroString.php\n                            書き込み時にデータが''ならNULLとする、読み込み時は逆変換\n                        \n                        \n                            \\INTERMediator\\Data_Converter\\DataConverter_template.php\n                            データコンバータのクラスのテンプレート\n                        \n                    \n                \n            \n            \n                データベースアクセス処理のアドバイザクラスを定義する\n                データベース側の処理に割り込むには「データベースクラスを自作する」で説明する手法（「データアクセスクラスのサブクラスを利用する方法」と定義します）とここで説明する手法（「アドバイザクラスを定義する方法」とします）の2通りがあります。「データアクセスクラスのサブクラスを利用する方法」だと、すべてのコンテキストに対する処理を記述しなければなりません。言い換えれば、複数あるコンテキストの１つだけに対して処理を加えたい場合、そのコンテキストのときだけプログラムが実行されるようにする必要があります。コンテキストが増減したときのメンテナンスタスクが増えます。「アドバイザクラスを定義する方法」だと、特定のコンテキストにだけ利用されるクラスを指定するので、「コンテキストごとに分岐させる」処理は不要です。必要な処理だけを記述する「アドバイザクラスを定義する方法」を使う方がプログラムの作成は容易でしょう。\n                IM_Entry関数の第一引数、つまりコンテキストの中に「extending-class」でクラス名を指定します。ここで指定したクラス名は任意のものでかまいませんが、そのクラスをPHPが認識できる場所に記述しておく必要があります。クラスは以下のようなインタフェースをインプリメントする必要があります。つまり、CRUDに対応する4種類のデータアクセス処理の前後にメソッドを含めることができるのです。\n                interface \\INTERMediator\\DB\\Extending\\BeforeRead {\n    public function doBeforeReadFromDB();\n}\ninterface \\INTERMediator\\DB\\Extending\\AfterRead {\n    public function doAfterReadFromDB($result);\n}\ninterface \\INTERMediator\\DB\\Extending\\AfterRead_WithNavigation {\n    public function doAfterReadFromDB( $result);\n    public function countQueryResult();\n    public function getTotalCount();\n}\ninterface \\INTERMediator\\DB\\Extending\\BeforeUpdate {\n    public function doBeforeUpdateDB();\n}\ninterface \\INTERMediator\\DB\\Extending\\AfterUpdate {\n    public function doAfterUpdateToDB($result);\n}\ninterface \\INTERMediator\\DB\\Extending\\BeforeCreate {\n    public function doBeforeCreateToDB();\n}\ninterface \\INTERMediator\\DB\\Extending\\AfterCreate{\n    public function doAfterCreateToDB($result);\n}\ninterface \\INTERMediator\\DB\\Extending\\BeforeDelete {\n    public function doBeforeDeleteFromDB();\n}\ninterface \\INTERMediator\\DB\\Extending\\AfterDelete {\n    public function doAfterDeleteFromDB($result);\n}\ninterface \\INTERMediator\\DB\\Extending\\BeforeCopy {\n    public function doBeforeCopyInDB();\n}\ninterface \\INTERMediator\\DB\\Extending\\AfterCopy{\n    public function doAfterCopyInDB($result);\n}\n\n                \n                メソッドの引数\n                Deleteを除くdoAfter____メソッドの$result引数は、対象レコードが連想配列の配列の形式で入っています。1レコードがフィールド名をキーとした連想配列になっており、レコードの数だけその配列があります。doAfterGetFromDBでは複数のレコードが得られますが、doAfterSetToDBやdoAfterNewToDBでは1レコードだけが返されます。doAfterDeleteメソッドでは、削除できたかどうかの論理値が設定されます。\n                doAfter____メソッドの返り値\n                doAfter____メソッドがあれば、その返り値を、データベースのクエリー結果やあるいは更新処理などをした結果のレコードとしてクライアントに返します。シンプルな方法としては、引数をそのまま返すようにプログラムを作成しますが、ここで、データベースからの取得結果を加工して返しても構いません。たとえば、doAfterGetFromDBメソッドで集計処理などを行い、同様に連想配列の配列にして結果を返します。また、新たなフィールドを追加するなども行えます。もちろん、連想配列のキーがフィールドになります。\n                doBefore____メソッドの返り値\n                Ver.8の途中より、doBefore____メソッドの返り値を利用できるようにしました。それ以前は、値を返しても何も使われていませんでした。通常は、doBefore___を実行し、クライアントから要求されたデータベース処理を行い、doAfter____を実行しますが、引数によってはdoBeforeで処理を終了させることができます。\n                \n                    doBefore____メソッドの返り値\n                    \n                        \n                            値\n                            動作\n                        \n                        \n                            false\n                            データベース処理を中断して、英語のエラーメッセージを表示する\n                        \n                        \n                            文字列\n                            データベース処理を中断して、文字列をエラーメッセージとして表示する\n                        \n                        \n                            \"\"\n                            データベース処理を続ける\n                        \n                        \n                            その他（返り値なしの場合も含む）\n                            データベース処理を続ける\n                        \n                    \n                \n                メソッドの作成例\n                以下は、データベースからレコードを取得した後に呼び出されるクラスの定義例です。MyProgramというクラス名は任意ですが、2つのメソッドはインタフェースに決められたものを定義します。doAfterGetFromDBはデータベースからデータを取得した後に呼び出されます。このとき、ナビゲーションを使ってページ送りの処理をしているのなら、「レコードの個数」をcountQueryResultメソッドで、「全レコード数」をgetTotalCountメソッドで返す必要があります。ナビゲーションがない場合にはこのメソッドの実装は不要です。また、ナビゲーションを使う場合でも、レコード総数がdoAfterGetFromDBの処理の後でも変わらないのであれば、countQueryResultメソッドは不要です。\n                class MyProgram extends \\INTERMediator\\DB\\UseSharedObjects implements \\INTERMediator\\DB\\Extending\\AfterRead {\n    function doAfterReadFromDB($result) {\n        foreach( $result as $record ) {\n            foreach( $record as $field =&gt; $value ) {\n                :\n            }\n        }\n        return $result;\n    }\n}\n\n                \n                countQueryResultメソッドを記述する場合の例を以下に示します。countQueryResultはdoAfterGetFromDBよりも後に呼び出されます。countQueryResultによって返されるのは、実際のレコード数ではなく、検索条件に合ったレコード数です。つまり、1万個のレコードのうち40個を表示している場合には、1万という数値を返す必要があります。doAfterGetFromDBで集計処理などをすると、1万レコードを取得して、それが20個などになると思います。その場合は20個を返さないといけません。この場合、自分でメンバ変数（dataCount）を定義して、そこに値を残しておくのが分かりやすい方法でしょう。\n                class MyProgram implements \\INTERMediator\\DB\\Extending\\WithNavigation {\n    var $dataCount;\n    \n    function doAfterReadFromDB($result) {\n            :\n        $this-&gt;dataCount = count( $result );\n        $return result;\n    }\n    \n    function countQueryResult() {\n        return $this-&gt;dataCount;\n    }\n}\n\n                \n                アドバイザクラス内でさまざまな情報にアクセスする\n                アドバイザクラスで「\\INTERMediator\\DB\\UseSharedObjects」クラスの子クラスにした場合は、他のオブジェクトへの参照が得られます。メソッドが呼び出された段階で、メンバ変数はオブジェクトを参照した状態になります。\n                \n                    \\INTERMediator\\DB\\UseSharedObjectsを継承したときに利用できるメンバ変数\n                    \n                        \n                            メンバ変数\n                            参照するもの\n                        \n                        \n                            $this-&gt;dbClass\n                            データベースクラスのインスタンス\n                        \n                        \n                            $this-&gt;authDbClass\n                            認証情報に使用するデータベースクラスのインスタンス\n                        \n                        \n                            $this-&gt;dbSettings\n                            \\INTERMediator\\DB\\Settingsクラスのインスタンス\n                        \n                        \n                            $this-&gt;logger\n                            DB_Loggerクラスのインスタンス\n                        \n                        \n                            $this-&gt;authCommon\n                            DB_AuthCommonクラスのインスタンス\n                        \n                        \n                            $this-&gt;formatter\n                            DB_Formattersクラスのインスタンス\n                        \n                    \n                \n                アドバイザクラスのメソッドでのデータベース処理\n                メソッド内で新たなデータベース処理を記述したい場合は、DB\\Proxyクラスを新たに生成してメソッドを利用すれば可能です。どんなメソッドがあるかは以下の「サーバーサイドのプログラムで利用できるAPI」で説明しています。しかしながら、若干冗長だったので、Ver.8の途中でより簡単にデータベース処理が記述できるようなトレイトProxy_ExtSupportを定義しました。例えば、アドバイザクラスを次のように定義します。ポイントは、class内で「use Proxy_ExtSupport;」と記述するところです。これによりいくつかのメソッドが使えるようになります。\n\n                use \\INTERMediator\\DB\\UseSharedObjects;\nuse \\INTERMediator\\DB\\Extending\\AfterRead;\nuse \\INTERMediator\\DB\\Proxy_ExtSupport;\n\nclass Advisor extends UseSharedObjects implements AfterRead\n{\n  use Proxy_ExtSupport;\n\n  public function doAfterReadFromDB($result)\n  {\n    $this-&gt;setFixedKey(\"id\");\n    $result = $this-&gt;dbRead(\"authuser\",[\"username\" =&gt; \"admin\"]);\n    return $result;\n  }\n} \nProxy_ExtSupportトレイトを利用したクラスでは、以下のメソッドが利用できます。いずれも、そのクラスにメソッドが追加されるので、this-&gt;で呼び出すことができます。\n\n                this-&gt;dbInit($datasource = null, $options = null, $dbspec = null, $debug = null)\n                Proxyクラスのインスタンスの初期化を行う方法。4つの引数は、定義ファイルのIM_Entry関数の引数と同様。引数は省略もでき、さらにこのメソッドの呼出自体も省略可能。\n\n               this-&gt;setFixedKey($key = null)\n                キーフィールドは、既定の状態では、「テーブル名_id」というネーミングルールに従うが、直後のデータベース処理で、キーフィールドを決め打ちしたい場合に引数に指定してこのメソッドを呼び出す。なお、コンテキスト定義を行なって引数に指定する場合は、keyキーを使って主キーを指定するので、このAPIを必ずしも使う必要はない。\n\n                this-&gt;getExtProxy()\n                内部で使っているProxyクラスへの参照。トランザクションをスタートしたりロールバックしたりするときに、この返り値にbeginTransaction()やcommitTransaction(), rollbackTransaction()を適用することができる。\n\n              this-&gt;dbRead($target, $query = null, $sort = null, $spec = null)\n               this-&gt;dbUpdate($target, $query = null, $data = null, $spec = null)\n               this-&gt;dbCreate($target, $data = null, $spec = null)\n                 this-&gt;dbDelete($target, $query = null, $spec = null)\n               それぞれ名称通りのデータベース処理を行う。$specにはdbInitメソッドの$datasource引数に指定するコンテンツ定義の配列を指定できる。コンテンツ定義のどのコンテンツを利用するかは、$targetで指定する。$query引数は検索条件、$sort引数は並べ替えの条件、$dataは変更や追加するフィールドと値を示す。\n                \n                    コンテキストの指定のパターン\n                    \n                        \n                            パターン\n                            説明\n                        \n                        \n                            dbInit: なし$spec: なし\n                            $targetが文字列「product」なら、productテーブルに対して、キーフィールドproduct_idであることを前提にデータベース処理を行う。\n                        \n                        \n                            dbInit: $datasourceを指定$specなし\n                            $targetには、$datasourceに存在するコンテキスト定義の名前（nameキーの値）を指定して、そのコンテキスト定義に応じたデータベース処理を行う。コンテキスト定義は複数あっても構わないので、1つのdbInitで複数のデータベース処理を行うことも可能。\n                        \n                        \n                            dbInit: なし$spec: 指定\n                            $specには$datasourceと同じ形式の配列を指定する。そのメソッドを使うときにだけ、$specのコンテキスト定義が有効になる。もちろん、$targetは、$specに存在するコンテキスト定義の名前（nameキーの値）を指定する。$specがあれば、$dbInitの$datasourceの指定は無視する。\n                        \n                    \n                \n                \n                    データベース処理の引数\n                    \n                        \n                            引数\n                            説明\n                            指定例\n                        \n                        \n                            query\n                            検索条件の指定\n                            [[\"field\" =&gt; \"id\", \"operator\" =&gt; \"=\", \"value\" =&gt; $id],...]\n// 基本的にはコンテキスト定義のqueryキーの定義と同じルール\n[\"id\" =&gt; $id,...] // フィールド名をキーにするとoperatorは=固定'\n                        \n                        \n                            sort\n                            並べ替え条件の指定\n                            [[\"field\" =&gt; \"lastDT\", \"direction\" =&gt; \"desc\"],...]\n// 基本的にはコンテキスト定義のsoftキーの定義と同じルール\n[\"lastDT\" =&gt; \"desc\",...] // フィールド名をキーにもできる\n                        \n                        \n                            data\n                            初期値、更新値\n                            [[\"field\" =&gt; \"lastDT\", \"value\" =&gt; $nowDT],...]\n// 基本的にはコンテキスト定義のdefault-valuesキーの定義と同じルール\n[\"lastDT\" =&gt; $nowDT,...] // フィールド名をキーにもできる\n                        \n                    \n                \n           \n            \n                データベースクラスを自作する\n                データベースクラスを独自に作成する場合には、以下のようなPHPのクラスが基本となります。もちろん、データベースクラスを1から作れるのですが、たぶん、そういうニーズはまずないと思います。データベースをPDOで使うならINTER-Mediatorの\\INTERMediator\\DB\\PDO.php、FileMaer Serverを使うならDB_FileMaker_FX.phpを拡張したクラスを定義します。基底クラスの方のファイルも読み込みが必要です。以下の例は、INTER-Mediatorフォルダと同じフォルダに、このデータベースクラスのファイルがあるというわけです。自分が作るクラスでも、最初にDBをつけないといけません。IM_Entry関数の引数などでの設定は、この場合DB_をのぞいた「MyOriginalDB」を指定します。\n                class \\INTERMediator\\DB\\MyOriginalDB extends \\INTERMediator\\DB\\PDO.php {\n    public function readFromDB() {\n        /* ここにプログラムを追加できる */\n        $result = super::readFromDB();\n        /* ここにプログラムを追加できる */\n        $this-&gt;mainTableCount = count( $result ); //レコード数\n        return $result;\n    }\n\n    public function countQueryResult()  {\n        return super::countQueryResult();\n    }\n\n    public function getTotalCount()  {\n        return super::getTotalCount();\n    }\n\n    public function updateDB() {\n        /* ここにプログラムを追加できる */\n        $result = super::updateDB();\n        /* ここにプログラムを追加できる */\n        return $result;\n    }\n    \n    public function createInDB($bypassAuth) {\n        /* ここにプログラムを追加できる */\n        $lastKeyValue = super::createInDB($bypassAuth);\n        /* ここにプログラムを追加できる */\n        return $lastKeyValue;\n    }\n    \n    public function deleteFromDB() {\n        /* ここにプログラムを追加できる */\n         $result = super::deleteFromDB();\n        /* ここにプログラムを追加できる */\n        return $result;\n    }\n    public function copyInDB()  {\n         $result = super::copyInDB();\n        return $result;\n    }\n}\n                自分で作るクラスでは、要はCRUDに対応した4つのメソッドをオーバーライドすることによって、独自の仕組みを組み込むことができます。また、4つのうち、特にプログラムの追加がない場合には、定義する必要はありません。いずれの関数も、コンテキスト名を引数に取ります。そして、現在処理しているコンテキスト名が設定されてこれらのメソッドを呼び出します。\n                readFromDBメソッドは、データベースからデータを取り出します。取り出し結果は連想配列の配列です。連想配列のキーがフィールド名になっています。そこから、特定のフィールドの値を元に集計をしたり、あるいは必要な値だけに取り除くなどの処理を、親クラスのreadFromDBメソッドを呼び出す後に入れればいいでしょう。リクエスト時と同じフィールド名を返す必要はなく（つまりINTER-Mediatorはそのチェックをしていない）、自由に連想配列の配列を作ります。そして、ページファイルの方で適切なフィールド名を指定すれば、集計結果が表示されます。なお、ページファイルで、一定レコード数ごとのページングをしているときには、mainTableCountメンバ変数にレコード数、つまり返す配列の要素数も指定します。何か問題が発生したのなら、array()を返します。以下のプログラムは売り上げのテーブルから集計を行う例です。\n                $result = super::readFromDB();\n$summary = array();\nforeach( $returnValue as $record ) {\n    $summary[ $record[ 'itemNo' ]] += $record[ 'qty' ] * $record[ 'unitPrice' ];\n    }\nreturn array( $summary );\n\n                \n                updateDBとdeleteFromDBメソッドは、いずれも値の更新や削除のときに呼び出されるメソッドです。返り値は論理値で、処理が成功すればtrueで失敗ならfalseです。createInDBは新規レコードの作成です。メソッドの返り値は、新たに作ったレコードのキーフィールドの値である必要があります。問題があれば返り値をfalseにします。\n            \n            \n                サーバーサイドのプログラムで利用できるAPI\n                以下、\\INTERMediator\\DB\\Proxyは\\INTERMediator\\DB\\Proxyクラスのオブジェクトへの参照を意味します。\n                \\INTERMediator\\DB\\Proxy-&gt;initialize($datasource, $options, $dbspec, $debug, $target = null)\n                \\INTERMediator\\DB\\Proxyクラスを初期化する。返り値はなし。生成した\\INTERMediator\\DB\\Proxyクラスのオブジェクトに対して適用することで、さまざまな設定が反映されたオブジェクト群を形成する。\n                \n                    initializeメソッドの引数\n                    \n                        \n                            引数\n                            指定する内容\n                        \n                        \n                            $datasource\n                            IM_Entry関数の第1引数と同様に、連想配列で表現されたコンテキストの配列。\n                        \n                        \n                            $options\n                            IM_Entry関数の第2引数と同様、さまざまな設定を含む連想配列。\n                        \n                        \n                            $dbspec\n                            IM_Entry関数の第3引数と同様、データベース接続に関する連想配列。\n                        \n                        \n                            $debug\n                            IM_Entry関数の第4引数と同様、falseならデバッグ出力なし、1ないしは2なら出力あり。\n                        \n                        \n                            $target\n                            コンテキストのnameキーの値のひとつを文字列で指定する。省略することも可能。\n                        \n                    \n                \n                \\INTERMediator\\DB\\Proxy-&gt;processingRequest($access, $bypassAuth)\n                初期化した\\INTERMediator\\DB\\Proxyクラスのオブジェクトに対して処理を行う。返り値はない。引数$bypassAuthは、認証やアクセス権設定を無視するが、この指定は慎重に行う必要がある。既定値はfalse。引数$accessに、行うデータベース処理を示す文字列を指定する。nullを指定したときや省略したときにはPOST時のパラメーターの\"access\"キーの値を使用する。$accessに指定できる値と動作は次の通り：'create'（レコードの作成）、'read'（データベースへのクエリー）、'update'（レコードの更新）、'delete'（レコードの削除）、'copy'（レコードの複製）、'challenge'（チャレンジの生成＝原則として何もしない）、'changepassword'（パスワード変更）、'unregister'（Pusherによるクライアント同期の登録解除）、'describe'（スキーマ情報を得る）。他に'select' 'new'が過去の互換性のために利用可能となっている。それ以外の文字列の場合は、特に何もしない。\n                \\INTERMediator\\DB\\Proxy-&gt;ignoringPost()\n                initializeメソッドではPOSTされたデータを取り込むが、その結果、処理拡張クラス内で新たに\\INTERMediator\\DB\\Proxyクラスを生成してコンテキストを別途用意したとき、POSTデータの取り込みをしたくない場合も発生する。そのときにこのメソッドをinitializeメソッドよりも前に呼び出す。\n                \\INTERMediator\\DB\\Proxy-&gt;getDatabaseResult()\n                データベースからの検索結果などで、1レコードが連想配列として表現され、その連想配列がレコード数分ある配列が返される。利用可能なprocessingRequestメソッドの最初の引数は、create（作成されたレコード）、read（検索結果）、update（更新後のレコード）、copy（複製後のレコード）、describe（スキーマ情報）。なお、レコード作成時にこの値が空の場合がまれにあるようです。PDOのlastInsertIdメソッドを使って新たに作成したレコードのキーフィールドの値を取得していますが、何らかの原因でそれが取得されず0が返され、作成したレコードの取得ができないのが原因です。解決策として、PHPのインストールをしなおしたら直ったなどが記載されていますが、決定的な方法はないようです。\n                \\INTERMediator\\DB\\Proxy-&gt;getDatabaseResultCount()\n                processingRequestメソッドの最初の引数がreadの場合、検索結果に含まれるレコード数を返す。コンテキストのrecordsキーが上限値となるが、実際に検索されたレコード数はそれより少ない場合もある。\n                \\INTERMediator\\DB\\Proxy-&gt;getDatabaseTotalCount()\n                processingRequestメソッドの最初の引数がreadの場合、検索条件に合致したレコード数を返す。\n                \\INTERMediator\\DB\\Proxy-&gt;getDatabaseNewRecordKey()\n                processingRequestメソッドの最初の引数がcreateあるいはcopyの場合、新たに作成されたレコードの主キーの値を返す。\n                \\INTERMediator\\DB\\Proxy-&gt;finishCommunication($notFinish)\n                出力するためのさまざまな準備を行う。\n                \\INTERMediator\\DB\\Proxy-&gt;exportOutputDataAsJSON()\n                JSON形式のテキストで各種データを出力する。\n                DB_Logger-&gt;setDebugMessage($str, $level)\n                引数$strに指定した文字列を、引数$levelに指定したレベルでのデバッグメッセージとして記録する。レベルは1ないしは2のみをサポートし、引数$levelを省略すると1になる。\n                DB_Logger-&gt;setErrorMessage($str)\n                引数$strに指定した文字列を、エラーメッセージとして記録する。\n                DB_Logger-&gt;setWarningMessage($str)\n                引数$strに指定した文字列を、警告メッセージとして記録する。\n                DB_Logger-&gt;getDebugMessages()\n                記録されたデバッグメッセージを要素として含む配列を返す。\n                DB_Logger-&gt;getErrorMessages()\n                記録されたエラーメッセージを要素として含む配列を返す。\n                DB_Logger-&gt;getWarningMessages()\n                記録された警告メッセージを要素として含む配列を返す。\n                \\INTERMediator\\DB\\Settings-&gt;setDataSourceName($dataSourceName)\n                引数に指定した文字列をnameキーの値として持つコンテキストを選択する。\n                \\INTERMediator\\DB\\Settings-&gt;getDataSourceName()\n                現在、選択されているコンテキストのnameキーに対する値。\n                \\INTERMediator\\DB\\Settings-&gt;getDataSourceTargetArray()\n                現在、選択されているコンテキストの定義内容を連想配列で返す。\n                \\INTERMediator\\DB\\Settings-&gt;getDataSourceDefinition($dataSourceName)\n                引数に指定した文字列をnameキーの値として持つコンテキスト定義の連想配列を返す。\n                \\INTERMediator\\DB\\Settings-&gt;getEntityForRetrieve()\n                クエリー処理に利用するエンティティ名を返す。つまり、viewキーの値が指定されていればその値、指定されていない場合にはnameキーの値が返される。\n                \\INTERMediator\\DB\\Settings-&gt;getEntityForUpdate()\n                更新処理に利用するエンティティ名を返す。つまり、tableキーの値が指定されていればその値、指定されていない場合にはnameキーの値が返される。\n                \\INTERMediator\\DB\\Settings-&gt;setStart($st)\n                検索結果の最初のいくつ目から結果として取り出すかを、引数の数値で指定する。クライアントのINTERMediator.startFromの値が自動的に設定される。\n                \\INTERMediator\\DB\\Settings-&gt;getStart()\n                検索結果の最初のいくつ目から結果として取り出すかが得られる。\n                \\INTERMediator\\DB\\Settings-&gt;setRecordCount($sk)\n                検索結果の中から、最大でいくつのレコードを取り出すかを引数の数値で指定する。コンテキストのrecordsキーの値や、クライアントINTERMediator.pageSizeの値など、すでに決まっている値が指定される。\n                \\INTERMediator\\DB\\Settings-&gt;getRecordCount()\n                検索結果の中から、最大でいくつのレコードを取り出すかが得られる。\n                \\INTERMediator\\DB\\Settings-&gt;getAggregationSelect()\n\\INTERMediator\\DB\\Settings-&gt;setAggregationSelect($value)\n                選択されているコンテキストに指定したaggregation-selectキーの設定と取得\n                \\INTERMediator\\DB\\Settings-&gt;getAggregationFrom()\n\\INTERMediator\\DB\\Settings-&gt;setAggregationFrom($value)\n                選択されているコンテキストに指定したaggregation-fromキーの設定と取得\n                \\INTERMediator\\DB\\Settings-&gt;getAggregationGroupBy()\n\\INTERMediator\\DB\\Settings-&gt;setAggregationGroupBy($value)\n                選択されているコンテキストに指定したaggregation-group-byキーの設定と取得\n                \\INTERMediator\\DB\\Settings-&gt;setDataSource($src)\n                引数には定義ファイルのIM_Entry関数の第1引数の値を指定して、コンテキスト定義の配列をオブジェクトに記録する。\n                \\INTERMediator\\DB\\Settings-&gt;getDataSource()\n                定義ファイルのIM_Entry関数の第1引数の値が返される。\n                \\INTERMediator\\DB\\Settings-&gt;setOptions($src)\n                引数には定義ファイルのIM_Entry関数の第2引数の値を指定して、オプション指定の配列をオブジェクトに記録する。\n                \\INTERMediator\\DB\\Settings-&gt;getOptions()\n                定義ファイルのIM_Entry関数の第2引数の値が返される。\n                \\INTERMediator\\DB\\Settings-&gt;setDbSpec($src)\n                引数には定義ファイルのIM_Entry関数の第3引数の値を指定して、データベース設定の配列をオブジェクトに記録する。\n                \\INTERMediator\\DB\\Settings-&gt;getDbSpec()\n                定義ファイルのIM_Entry関数の第3引数の値が返される。\n                \\INTERMediator\\DB\\Settings-&gt;setFieldsRequired($fieldsRequired)\n                フィールドの配列として、引数の配列を設定する。このメソッドは、配列そのものを設定するが、addValueWithField、addTargetFieldメソッドにより、フィールド一覧を管理する配列へ要素が追加される。\n                \\INTERMediator\\DB\\Settings-&gt;getFieldsRequired()\n                フィールドの配列を返す。\n                \\INTERMediator\\DB\\Settings-&gt;addTargetField($field)\n                フィールドの配列の要素として、引数に指定した文字列を追加する。\n                \\INTERMediator\\DB\\Settings-&gt;getFieldOfIndex($ix)\n                フィールドの配列から、引数に指定した番号の要素を返す。\n                \\INTERMediator\\DB\\Settings-&gt;setValue($values)\n                値の配列として、引数の配列を設定する。\n                \\INTERMediator\\DB\\Settings-&gt;getValue()\n                値の配列を返す。\n                \\INTERMediator\\DB\\Settings-&gt;addValue($value)\n                値の配列の要素として、引数に指定した文字列を追加する。\n                \\INTERMediator\\DB\\Settings-&gt;addValueWithField($field, $value)\n                フィールドの配列および値の配列の要素として、引数に指定した文字列をそれぞれ追加する。\n                \\INTERMediator\\DB\\Settings-&gt;getValuesWithFields()\n                フィールドの配列にある値をキー、そのキーに対する値を要素にした連想配列を返す。\n                \\INTERMediator\\DB\\Settings-&gt;getValueOfField($targetField)\n                引数に指定したフィールド名をフィールドの配列の何番目なのかを判別し、値の配列の同じ番号の要素を返す。つまり、フィールド名に対応した値を返す。\n                \\INTERMediator\\DB\\Settings-&gt;setForeignFieldAndValue($foreignFieldAndValue)\n                引数を外部キーの値を保持する配列に指定する。引数は、field、valueをキーとした連想配列の配列である必要がある。\n                \\INTERMediator\\DB\\Settings-&gt;getForeignFieldAndValue()\n                外部キーの値を保持する配列を返す。返される値は、field、valueをキーとした連想配列の配列。\n                \\INTERMediator\\DB\\Settings-&gt;addForeignValue($field, $value)\n                引数に指定したフィールド名と値を、外部キーの値を保持する配列に追加する。\n                \\INTERMediator\\DB\\Settings-&gt;getForeignKeysValue($targetField)\n                外部キーの値を保持する配列から、引数に指定したフィールドに対する値を返す。ない場合はnullが返る。\n                \\INTERMediator\\DB\\Settings-&gt;addExtraCriteria($field, $operator, $value)\n                追加的な検索条件を保持する配列に、引数の3つの要素を持つ連想配列として追加する。\n                \\INTERMediator\\DB\\Settings-&gt;getExtraCriteria()\n                追加的な検索条件を保持する配列を返す。\n                \\INTERMediator\\DB\\Settings-&gt;unsetExtraCriteria($index)\n                追加的な検索条件を保持する配列の中にある引数に指定したインデックスの要素を削除する。\n                \\INTERMediator\\DB\\Settings-&gt;getCriteriaValue($targetField)\n                追加的な検索条件を保持する配列から、引数に指定した文字列をfieldキーの値として持つ最初の要素を特定し、その要素のvalueキーの値を返す。\n                \\INTERMediator\\DB\\Settings-&gt;getCriteriaOperator($targetField)\n                追加的な検索条件を保持する配列から、引数に指定した文字列をfieldキーの値として持つ最初の要素を特定し、その要素のoperatorキーの値を返す。\n                \\INTERMediator\\DB\\Settings-&gt;setGlobalInContext($contextName, $operation, $field, $value)\n                引数に指定したコンテキストに、残りの引数で指定した設定内容を持つglobalキーの連想配列を追加する。もちろん、FileMaker Serverのみで意味のある機能である。\n                \\INTERMediator\\DB\\Settings-&gt;setPrimaryKeyOnly($primaryKeyOnly)\n\\INTERMediator\\DB\\Settings-&gt;getPrimaryKeyOnly()\n                検索条件の中から、主キー（コンテキストのkeyキー）で指定されたものだけを利用する設定とその状態の取得。なお、主キーのみを利用する検索は、データベースの更新前に楽観的ロックの仕組みを利用して、現在の値を取り出す場合に利用している。\n                \\INTERMediator\\DB\\Settings-&gt;addExtraSortKey($field, $direction)\n                追加のソート条件を記録した配列に、引数にしていたフィールドと基準（昇順ないしは降順）を追加する。\n                \\INTERMediator\\DB\\Settings-&gt;getExtraSortKey()\n                追加のソート条件を記録した配列を得る。\n                \\INTERMediator\\DB\\Settings-&gt;addAssociated($name, $field, $value)\n                レコードのコピーにおいて、関連するコンテキストに対する設定を追加する。\n                \\INTERMediator\\DB\\Settings-&gt;getAssociated()\n                レコードのコピーにおいて使用される関連するコンテキストに対する配列を得る。\n                \\INTERMediator\\DB\\Settings-&gt;setDbSpecServer($str)\n\\INTERMediator\\DB\\Settings-&gt;getDbSpecServer()\n\\INTERMediator\\DB\\Settings-&gt;setDbSpecPort($str)\n\\INTERMediator\\DB\\Settings-&gt;getDbSpecPort()\n\\INTERMediator\\DB\\Settings-&gt;setDbSpecUser($str)\n\\INTERMediator\\DB\\Settings-&gt;getDbSpecUser()\n\\INTERMediator\\DB\\Settings-&gt;setDbSpecPassword($str)\n\\INTERMediator\\DB\\Settings-&gt;getDbSpecPassword()\n\\INTERMediator\\DB\\Settings-&gt;setDbSpecDataType($str)\n\\INTERMediator\\DB\\Settings-&gt;getDbSpecDataType()\n\\INTERMediator\\DB\\Settings-&gt;setDbSpecDatabase($str)\n\\INTERMediator\\DB\\Settings-&gt;getDbSpecDatabase()\n\\INTERMediator\\DB\\Settings-&gt;setDbSpecProtocol($str)\n\\INTERMediator\\DB\\Settings-&gt;getDbSpecProtocol()\n\\INTERMediator\\DB\\Settings-&gt;setDbSpecDSN($str)\n\\INTERMediator\\DB\\Settings-&gt;getDbSpecDSN()\n\\INTERMediator\\DB\\Settings-&gt;setDbSpecOption($str)\n\\INTERMediator\\DB\\Settings-&gt;getDbSpecOption()\n                データベース処理に関する設定を行ったり取り出したりするメソッド。\n                \\INTERMediator\\DB\\Settings-&gt;setCurrentUser($str)\n\\INTERMediator\\DB\\Settings-&gt;getCurrentUser()\n                クライアントから申告されたユーザー名の設定及び取得と行うメソッド。\n                \\INTERMediator\\DB\\Settings-&gt;setUserAndPasswordForAccess($user, $pass)\n\\INTERMediator\\DB\\Settings-&gt;getAccessUser()\n\\INTERMediator\\DB\\Settings-&gt;getAccessPassword()\n                クライアントから申告されたユーザー名とパスワードの設定及び取得と行うメソッド。ネイティブ認証時にチャレンジに対応するレスポンスによって返されたユーザー名とパスワードが設定され、それ以外の時には設定されない。\n                \\INTERMediator\\DB\\Settings-&gt;setAuthentication($authentication)\n\\INTERMediator\\DB\\Settings-&gt;getAuthentication()\n                IM_Entry関数の第2引数（オプション設定）の、authenticationキーに対する値を記録あるいは取り出す。\n                \\INTERMediator\\DB\\Settings-&gt;getAuthenticationItem($key)\n                IM_Entry関数の第2引数（オプション設定）のauthenticationキーに対する値に対し、さらに引数の文字列のキーの値を取り出す。もし、引数に与えたキーに対する値が定義されていない場合で、引数がテーブル名の場合には、規定のテーブル名を返す。あるいは認証継続時間の場合には既定値として8時間が返される。\n                \\INTERMediator\\DB\\Settings-&gt;getUserTable()\n                認証に使用するテーブル名を返す。定義ファイル等で未設定の場合には既定値のauthuserが返される。\n                \\INTERMediator\\DB\\Settings-&gt;getGroupTable()\n                グループ管理に使用するテーブル名を返す。定義ファイル等で未設定の場合には既定値のauthgroupが返される。\n                \\INTERMediator\\DB\\Settings-&gt;getCorrTable()\n                グループ所属記録に使用するテーブル名を返す。定義ファイル等で未設定の場合には既定値のauthcorrが返される。\n                \\INTERMediator\\DB\\Settings-&gt;getHashTable()\n                認証でのチャレンジ等を記録するためのテーブル名を返す。定義ファイル等で未設定の場合には既定値のissuedhashが返される。\n                \\INTERMediator\\DB\\Settings-&gt;getExpiringSeconds()\n                認証結果を保持する時間を返す。定義ファイル等で未設定の場合には既定値の8時間が返される。\n                \\INTERMediator\\DB\\Settings-&gt;setRequireAuthentication($requireAuthentication)\n\\INTERMediator\\DB\\Settings-&gt;getRequireAuthentication()\n                ゲッターは、定義ファイルの内容から、認証が必要かどうかを求めた結果を返す。セッターはprocessingRequestメソッド内で判定結果を記録するために利用される。\n                \\INTERMediator\\DB\\Settings-&gt;setRequireAuthorization($requireAuthorization)\n\\INTERMediator\\DB\\Settings-&gt;getRequireAuthorization()\n                ゲッターは、定義ファイルの内容から、アクセス権の判定が必要かどうかを求めた結果を返す。セッターはprocessingRequestメソッド内で判定結果を記録するために利用される。\n                \\INTERMediator\\DB\\Settings-&gt;setDBNative($isDBNative)\n\\INTERMediator\\DB\\Settings-&gt;isDBNative()\n                ゲッターは、定義ファイルの内容から、ネイティブ認証を行うかどうかを求めた結果を返す。セッターはprocessingRequestメソッド内で判定結果を記録するために利用される。\n                \\INTERMediator\\DB\\Settings-&gt;setEmailAsAccount($emailAsAccount)\n\\INTERMediator\\DB\\Settings-&gt;getEmailAsAccount()\n                ゲッターは、定義ファイルの内容から、電子メールを認証時のユーザー名として使用できるかどうかを返す。セッターはprocessingRequestメソッド内で設定を記録するために利用される。\n                \\INTERMediator\\DB\\Settings-&gt;getLDAPSettings()\n                params.phpファイルで定義されたLDAPの設定値を持つ配列を返す。要素は順番に、サーバー名、ポート番号、検索ベース、コンテナ名、ユーザー名のキー名。\n                \\INTERMediator\\DB\\Settings-&gt;setLDAPExpiringSeconds($sec)\n\\INTERMediator\\DB\\Settings-&gt;getLDAPExpiringSeconds()\n                ゲッターは、params.phpファイルの内容から得られたLDAP認証の継続時間を返す。セッターは設定を記録するために利用される。\n                \\INTERMediator\\DB\\Settings-&gt;setSeparator($sep)\n\\INTERMediator\\DB\\Settings-&gt;getSeparator()\n                ターゲット指定の区切り文字（通常は「@」）を記録したり取得するメソッド。設定しない場合には、＠が返される。\n                \\INTERMediator\\DB\\Settings-&gt;setSmtpConfiguration($config)\n\\INTERMediator\\DB\\Settings-&gt;getSmtpConfiguration()\n                IM_Entry関数の第2引数（オプション設定）の、smtpキーに対する値を記録あるいは取り出す。\n            \n        "
    },
    {
        "id": 31,
        "parent": "/ja/for-programmers/",
        "path": "/ja/for-programmers/commitcode.html",
        "title": "ソースコードの投稿",
        "breadcrumb": "ソースコードの投稿",
        "body": "\n            \n                はじめに\n                \n                    INTER-Mediatorへのソースコードを投稿する場合の手順をまとめておきます。INTER-Mediatorのコミッターや、あるいはバグレポートの1つの方法として、ソースコードの投稿を歓迎します。手順は、Webサイトを利用した、いちばん手軽な方法が中心です。\n            \n            \n                ソースコード投稿の考え方\n                INTER-Mediatorはオープンソースプロジェクトであり、コミュニティを形成することで、開発が進行する手法を取り入れています。多くの方々によってソースコードがレビューされることで、システム全体が洗練され、セキュリティ的な問題点が解消されることが期待できます。また、新たな機能やバグ修正等のソースコードの投稿を受け付けることで、システムの継続的な進化も期待できます。そのために、INTER-Mediatorでは、GitHubを利用した「Pull Request」によるソースコードの投稿を広く受け付けることとします。\n            \n            \n                GitHubの組織「INTER-Mediator」\n                INTER-Mediatorは、GitHub上に「INTER-Mediator」という名称の組織を作成しており、そこにあるレポジトリが「マスターレポジトリ」となります。コミッターの開発結果はこのマスターレポジトリにまとめられますが、まとめる作業は、INTER-Mediator Directive Committeeのメンバーによって行われます。レポジトリの1つ「INTER-Mediator」は、フレームワーク本体やサンプルプログラムなどのソフトウエア全般がまとめられています。「INTER-Mediator_WebSite」は、INTER-MediatorのWebサイトのソースです。「INTER-Mediator」はForkをしてPull Requestを送る手法を基本とします。「INTER-Mediator_WebSite」はINTER-Mediator Directive Committeeメンバによる書き込み権限を与えることで、Forkをしないで単一のレポジトリでの運用を基本とします。したがって、本文書に書かれた内容は、フレームワーク本体の「INTER-Mediator/INTER-Mediator」というレポジトリの運用方法を記載したものとなります。\n                \n                \n                \n            \n            \n                GitHubアプリケーションを使ったPull Request\n                GitHubはバージョン管理システムのgitをベースにしており、すべてはgitのコマンドでできると言えますが、コマンドでの処理は習得に時間がかかると同時に失敗しやすいということもあります。しかしながら、GitHubは専用アプリケーションをリリースしており、そのアプリケーションを利用することで、ソースコードの投稿を簡単にできるようになっています。ここでは、なるべくGitHubアプリケーションと、GitHubのサイトを利用するということで、ソースコードを取得し、修正後に投稿する流れを説明します。\n                組織で管理しているマスターレポジトリは「INTER-Mediator/INTER-Mediator」と記載します。Gitの表記にしたがって「組織名/レポジトリ名」でレポジトリを記述することにします。ここで、GitHubのあるユーザmsykが、INTER-Mediator本体のレポジトリに対して、ソースコードの追加等を行い、その開発結果を投稿しようとします。\n                ソースコードの取得を最初に行いますが、その作業を「マスターレポジトリをForkする」などと呼ばれます。Forkにより、レポジトリの複製を自分自身のアカウントの領域に作成をします。マスターレポジトリへの書き込み権限を持つ人は限られていますが、パブリックなプロジェクトなので、逆にソースコードは誰でも取得できます。したがって、GitHubにアカウントがあれば、誰でもForkができることになります。GitHubにユーザmsykでログインをして作成した、ユーザmsykのINTER-Mediatorフレームワーク本体は、「msyk/INTER-Mediator」と記述をします。さらに、現実には、自分のアカウントにあるリモートのレポジトリのクローンを作業者のMac/PCの中にローカルのレポジトリとして作成をします。ソースコードの改変をする前に、まず、ここまでの準備が必要です。概念図は以下のとおりで、左側のマスターレポジトリをForkして、あるユーザのリモートレポジトリを作成し、そのクローンのレポジトリがローカルにあるという状態です。ここで、masterはブランチ名で、「A」はある状態を示します。この後に、ローカルのレポジトリのソースコードを変更した結果、状態が「B」になるというような図が出てきます。\n                \n                \n                Forkする\n                Forkをするには、GitHubに自分のアカウント（この場合はmsyk）でログインをします。そして、組織のページに移動して、マスタレポジトリのトップページを表示します。組織のマスターレポジトリは、レポジトリ名が「INTER-Mediator/INTER-Mediator」となっていることから、判別できます。そして、右上にある「Fork」のボタンをクリックします。これだけで、自分の領域にマスターレポジトリの複製のレポジトリが作成されます。なお、単に複製するだけでなく、マスターレポジトリが元々のオリジナルであることもきちんと記録されています。\n                \n                \n                \n                    「Fork」ボタンをクリックした後、画面が遷移して、自分自身の複製したレポジトリのページに移動しています。レポジトリ名が「msyk/INTER-Mediator」となっていて、ユーザmsykにINTER-Mediatorというレポジトリが作られたことがわかります。この段階では、マスターと同一のレポジトリです。\n                \n                \n                ローカルにクローンを作成する\n                さらに自分のレポジトリのクローンを自分のMac/PCに作成します。ここで、クローンはコマンドラインで作る方法などいろいろありますが、使用しているパソコンにGitHubアプリケーションをインストールしておけば、レポジトリのページの「Clone in Desktop」のボタンをクリックし、そしてローカルレポジトリを作るフォルダを指定するだけで、作成することができます。\n                \n                \n                コマンドラインで作るときには、ローカルレポジトリを作りたいフォルダをカレントフォルダにして、「git clone [レポジトリのURL]」と入力します。レポジトリのURLは、やはりレポジトリのページ右側にある「HTTPS clone URL」の部分のURLを指定しますが、コピーボタンがあるので、URLをコピーし、コマンドライン入力中にペースとすれば良いでしょう。\n                変更結果をPull Requestする\n                自分のローカルのレポジトリ内で、ファイルを修正したとします。その修正処理はmasterでもいいですが、独自に作成したブランチでもかまいません。以下の図では、「readme-file-modify」というローカルのブランチに、変更結果が存在する状態です。そして、GitHubアプリケーションで、ツールバーの右から2つ目のボタンをクリックすることで、Pull Requestを作成します。パネルをクリックすると、右側に「Pull Request」の薄青い背景のパネルが表示されます。ここで、最初のテキストボックスに概要、そして、広いテキストフィールドにはある程度の説明を入力します。\n                \n                \n                タイトルの直下の部分で、マージを希望する先のマスターレポジトリのブランチを指定してください。右側はローカルで現在選択されているブランチができていて、ここは変更できません。右側はクリックするとドロップダウンリストが表示され、レポジトリを選択できます。ローカルと同じ名前のブランチの場合で、マスターリポジトリにブランチがない場合、そのブランチはマスターレポジトリに作られます。「Send Pull Request」ボタンをクリックします。このPull Requestは、Forkしたレポジトリの元のレポジトリに送り届けられます。\n                \n                \n                リクエストでは、取り込み先のブランチを選択できます。通常、最終的に変更結果はmasterに統合されるので、完成した機能やあるいはバグの修正となると、masterに統合することでかまいません。一方、機能そのものが一部しか実現していないものの、その結果を他のデベロッパーにも見てもらいたいといった理由があれば、ブランチにPull Requestを送ってください。その後の統合作業については、ディスカッションの上進めましょう。\n                Pull Requestが終了するとメッセージが表示され、GitHubのサイトへのリンクも見えています。ここでは#220という番号も見えています。GitHubアプリケーションを使えば、Pull Requestはこのように簡単に作成できます。\n                \n                \n            \n            \n                マスターレポジトリの更新結果の取り込み\n                Pull Requestによって、複数の開発者からのPull Requestが行われると、当然のこととしてマスターレポジトリはどんどん更新され、それぞれのユーザのレポジトリは以前の状態のままになります。Pull Requestを出したユーザは、自分と同じ状態にマスターレポジトリが更新されたので、同一の状態になっています。しかしながら、別のアカウント（以下の図にあるsomeone）が、msykによるPull Requestを発行する前にForkして、自分アカウントにレジストリーを作っていたとしたら、組織のアカウントは状態Bになっても、someoneの方は状態Aのままになります。someoneのレポジトリは状態Bにしたいと考えます。\n                    \n                    \n                    一時期はGitHubアプリケーションの右上にある「Sync」ボタンをクリックするだけで、自分のローカルのレポジトリを、Forkした元のマスターレポジトリと同じ状態にできましたが、これは「バグ」だったようで、その後にこの作業は自動的にできなくなっています。Syncは、ローカルとその元になっているレポジトリの間だけの同期です。\n                    Forkした元のレポジトリの更新結果を受け入れるには、以下のようにコマンドラインで作業をします。コマンドは、カレントディレクトリが、ローカルレポジトリのフォルダのルートになっている状態で入力します。最初のgit remote -vを見ると、自分自身のGitHub上のレポジトリに対してorignという名前が付けられ、加えて、Fork元のレポジトリは、「INTER-Mediator」という名前が付けられています。よくある作業例ではupstremという名前付けが一般的ですが、この「INTER-Mediator」は、GitHubアプリケーションが自動的に定義を加えています。そして、fetchでFork元のレポジトリを取り込んで、現在のブランチ（ここでは、ローカルレポジトリのmasterが選択されているとする）に、Fork元のレポジトリのmasterブランチの更新結果をマージします。\n                    \n    \n-->\n                    $ git remote -v\nINTER-Mediator  https://github.com/INTER-Mediator/INTER-Mediator.git (fetch)\nINTER-Mediator  https://github.com/INTER-Mediator/INTER-Mediator.git (push)\norigin  https://github.com/msyk/INTER-Mediator.git (fetch)\norigin  https://github.com/msyk/INTER-Mediator.git (push)\n$ git fetch INTER-Mediator\n$ git merge INTER-Mediator/master\nUpdating 757ee4a..e41aabd\nFast-forward\n INTER-Mediator-UnitTest/sha1-test.js |  10 +++++\n LICENSE                              |   4 ++\n dist-docs/License.txt                |  29 ++++++++++++++\n dist-docs/buildup.sh                 |   2 +-\n dist-docs/change_log.txt             |   2 +\n dist-docs/readme.txt                 |   4 +-\n dist-docs/vm-for-trial/index.html    |   8 ++--\n lib/js_lib/sha1.js                   | 185 ----------------------------------------------------------------------------------------\n lib/js_lib/tinySHA1.js               |   1 +\n 9 files changed, 53 insertions(+), 192 deletions(-)\n create mode 100644 INTER-Mediator-UnitTest/sha1-test.js\n create mode 100644 LICENSE\n delete mode 100644 lib/js_lib/sha1.js\n create mode 100644 lib/js_lib/tinySHA1.js\n                    \n            \n            \n                GitHubのWebサイトからPull Requestを送る\n                ここまでにGitHubアプリケーションを使用した方法で、投稿から更新結果の受け取りまでを説明しました。ここからは、これらの作業をGitHubアプリケーションを使わないで行う方法を説明します。\n                変更結果を自分のレポジトリにpush\n                Pull RequestをGitHubアプリケーションを使わないで行うには、まず、変更結果を、自分のレポジトリに反映させます。\n                \n                \n                ローカルのレポジトリであらたなブランチを作ったり、あるいはマスターレポジトリにすでにブランチがある場合には、そのブランチを現在利用するブランチとしてプログラムの追加や変更を行います。ブランチの切り替えは、GitHubアプリケーションのツールバーでBranchesのボタンをクリックし、ブランチの一覧にある右端の▼をクリックして、「Switch to This Branch」を選択します。プログラムの変更を行った後は、GitHubアプリケーションのツールバーでChangesを選択し、CommitとSyncを行います。Syncにより現在のブランチへのpushも行います。\n                ローカルのレポジトリではmasterブランチのまま作業をして、それを自分のリモートレポジトリにpushするときに、新たなブランチを作成するの良いでしょう。たとえば、PHPStormで作業をしているのであれば、ブランチに含めたいファイルを選択したり、あるいはルートのフォルダを選択するなどして、VCSメニューからCommit Changesを選択します。するとコミットされるファイルの一覧と、コミットメッセージが見えるダイアログボックスが表示されます。メッセージを書き込んだ上で、Commitボタンにマウスポインタを移動させるとポップアップメニューが出るので「Commit and Push」を選択します。すると、さらにGit Pushと書かれたダイアログボックスが表示されるので、その下の部分のチェックボックスをオンにして、右側のテキストフィールドに、新たなブランチ名をキータイプします。すると、コミット結果が新たなブランチにpushされ、リモートレポジトリにここで入力した名前のブランチが作成されています。\n                \n                \n                \n                \n                Pull Requestの作成\n                ここまでの作業で、変更結果は、自分のリモートレポジトリ側には反映されていますが、これをマスターに反映するためには、Pull Requestをマスターレポジトリに対して要求します。以下の図では、new-funcというブランチに、改変結果が記録されているので、そのブランチをマスターレポジトリへ取り込んでもらうということを示しています。\n                \n                \n                ここまでの作業で改変した結果は自分自身のリモートレポジトリにあります。自分のアカウントでログインをして、自分のリモートレポジトリのページを開きます。ここで、ファイルリストの上の部分に、薄い黄色の枠で、Your recently pushed branches:という記述があれば、そこにある「Compare &amp; pull request」ボタンをクリックします。もし、出ていないようであれば、ファイルリストの上部の「branch: master」などと書かれいる部分からブランチを選択して、その左の緑色のボタンをクリックして、移動したページで「Create Pull Request」ボタンをクリックします。\n                \n                \n                Pull Requestを作成するページになります。ここで、追加した機能の概要などを記載して「Create pull request」ボタンをクリックします。作業はこれだけです。このユーザ側のレポジトリは、マスターリポジトリからForkしたものなので、このPull Requestは、マスターレポジトリ側に送られます。\n                \n                \n            \n            \n                Pull Requestの受け入れ\n                マスターレポジトリ側での受け入れ作業は、INTER-Mediator Directive Committeeで行います。Pull Requestがあれば、それをいったんマスターレポジトリにpullします。その段階では、リクエストを送ったのと同じブランチ名のものがマスターレポジトリにできあがります。そして、動作の検証やコードのレビューを行います。masterではないブランチでPull Requstがあったものは、masterへマージします。この場合、マスターレポジトリでPull Requestを行い、それを受け入れればmasterに反映されるということになります。\n                \n                \n                \n                \n                受け付けられたPull Requestはマスターレポジトリ側はでは次のように見えます。\n                \n                \n            \n            \n                マスターレポジトリからの部分的な受け入れ\n                GitHubアプリケーションを使えばSyncによりマスターレジストリの内容を即座にローカルに取り込むことができます。その作業をコマンドだけで行う方法を、以下に記述します。ローカルレポジトリをマスターとは異なる状態で保持する必要がある場合などには、この方法を応用して、必要な更新だけを取り込むようにします。以下、青色で太字が入力するコマンドで、#で始まるグレーの文字は説明です。\n                # Forkした自分のレポジトリをローカル側にクローンを作る（すでに作成済みなら不要）\n$ git clone https://github.com/msayukinii/INTER-Mediator.git\nCloning into 'INTER-Mediator'...\nremote: Counting objects: 7408, done.\nremote: Compressing objects: 100% (2387/2387), done.\nremote: Total 7408 (delta 4983), reused 7408 (delta 4983)\nReceiving objects: 100% (7408/7408), 8.04 MiB | 1.71 MiB/s, done.\nResolving deltas: 100% (4983/4983), done.\nChecking connectivity... done.\n# ローカルレポジトリのルートをカレントディレクトリにする\n$ cd INTER-Mediator/\n# 現在、masterブランチが選択されている。自分のレポジトリにはmaster以外に# targeting-generalizationというブランチもあり、ローカル側にもそのブランチはある\n$ git branch -a\n* master\n  targeting-generalization\n  remotes/origin/HEAD -&gt; origin/master\n  remotes/origin/master\n  remotes/origin/targeting-generalization\n# リモートレポジトリの一覧を見る。自分のリモートレポジトリが見えている\n$ git remote -v\norigin https://github.com/msayukinii/INTER-Mediator.git (fetch)\norigin https://github.com/msayukinii/INTER-Mediator.git (push)\n# 新たに、マスターリポジトリをupstreamという名前でローカルリポジトリに登録する\n$ git remote add upstream https://github.com/INTER-Mediator/INTER-Mediator.git\n# originだけでなくupstreamも管理対象のリモートレポジトリとして登録された\n$ git remote -v\norigin https://github.com/msayukinii/INTER-Mediator.git (fetch)\norigin https://github.com/msayukinii/INTER-Mediator.git (push)\nupstream https://github.com/INTER-Mediator/INTER-Mediator.git (fetch)\nupstream https://github.com/INTER-Mediator/INTER-Mediator.git (push)\n# upstreamで指定されるレポジトリの内容を取り込む\n$ git fetch upstream\nremote: Counting objects: 13, done.\nremote: Compressing objects: 100% (10/10), done.\nremote: Total 13 (delta 4), reused 7 (delta 3)\nUnpacking objects: 100% (13/13), done.\nFrom https://github.com/INTER-Mediator/INTER-Mediator\n* [new branch] master -&gt; upstream/master\n* [new branch] targeting-generalization -&gt; upstream/targeting-generalization\n# remotes/upstreamの2つのブランチが新たに加わった\n$ git branch -a\n* master\n  targeting-generalization\n  remotes/origin/HEAD -&gt; origin/master\n  remotes/origin/master\n  remotes/origin/targeting-generalization\n  remotes/upstream/master\n  remotes/upstream/targeting-generalization\n# upstream/masterを現在のローカルのmasterにマージする。これで、ローカルのmasterは、マスターレポジトリのmasterと同一の内容になった\n$ git merge upstream/master\nUpdating 10e5c96..720ff24\nFast-forward\nDB_Null.php | 177 +++++++++++++++\nINTER-Mediator-Element.js | 27 ---------------\nREADME.md | 2 +-\nSamples/templates/definition_file_full.php | 1 +\n4 files changed, 179 insertions(+), 28 deletions(-)\ncreate mode 100644 DB_Null.php\n# 自分のリモートレポジトリのmasterに、ローカルの内容をpushすることで、リモート側にも反映される。ただし、この作業は必須ではない\n$ git push origin master\n# さらにマスターレポジトリ側の別のブランチを取り込みたいのなら、まず、ローカル側を受け入れるブランチに切り替える\n$ git checkout targeting-generalization\nSwitched to branch 'targeting-generalization'\nYour branch is ahead of 'origin/targeting-generalization' by 2 commits.\n  (use \"git push\" to publish your local commits)\n# すでにマスターレポジトリのブランチは取り込んであるので、マージすれば、このブランチもマスターレポジトリの内容と同じになる\n$ git merge upstream/targeting-generalization\nAlready up-to-date!\nMerge made by the 'recursive' strategy.\n                \n                上位の一連のコマンドの流れを図示すると次のようになります。一度、upstreamで参照を作っておけば、以後は、fetchしてmergeすることで、マスターレポジトリの内容をローカルのmasterに取り込むことができます。\n                \n                \n                最初に前提として「masterが正」であるということを記述しましたが、場合によっては、機能が完成する前にレビューや共同作業目的で、ブランチのPull Requestが発生するかど思われます。そういうブランチはマスターレポジトリに残したままになり、fetchによってupstreamにも取り込まれます。こちらは必要に応じてマージすればいいと思われます。また、共同で新たな機能を作る場合、各自がForkしたレポジトリで作業するのは、更新結果の配布に時間がかかることも予想されます。その場合、共同開発している中の1人のForkしたレポジトリに他の開発者も書き込み権限を与えて登録して、単一のレポジトリで各自がcommit/pushするという開発モデルの方が効率がいいと思われます。\n            \n        "
    },
    {
        "id": 36,
        "parent": "/ja/for-developers/",
        "path": "/ja/for-developers/lookup.html",
        "title": "値をコピーするルックアップ",
        "breadcrumb": "値をコピーするルックアップ",
        "body": "\n            \n                ルックアップについて\n                ルックアップとは、特定のフィールドにリレーションシップで得られた値を自動的に埋め込む仕組みです。FileMakerでも機能の1つとして利用できるものです。データベースの世界では、リレーショナルデータベースの考え方が優位であり、マスターテーブルとリンクして値を参照することが中心的です。しかしながら、アプリケーションを作る上では、マスター参照のように常にマスターに定義した値が得られるということがニーズであるだけでなく、その時点のマスターの値を複製しておくというニーズもあります。帳票作成では現実な方法として値を複製しておくことはよく行われます。リレーショナルデータベース的にはそれによって正規化が崩れるという主張もあるかもしれませんが、理論的な綺麗さよりも、ニーズをよりシンプルに満たす方法として、複製はよく利用されています。\n            \n            \n                ルックアップの設定\n                ルックアップの動作と設定をまとめた図を以下に示します。ここでは会計アプリケーションにおいて、仕分けパターンを選択すると、それに応じて借方科目と貸方科目がルックアップとして記録されるという状況を考えます。パターンと2つの科目の合計3つの項目に関して、同一のテーブルにフィールドが用意されています。いずれもマスターを持つもので、主キー値をINTEGERで保存しています。このアプリケーションはこちらのレポジトリで公開されているので、実際に手元でご利用いただけます。\n                \n                    \n                \n                「貸方科目」の設定を見てください。まず、data-imは「account_detail」コンテキストの「credit_id」フィールドが設定されています。このポップアップメニューの値はcredit_idフィールドとバインドされていて、フィールドの値とポップアップの選択結果が連動します。もちろん、optionには科目マスターの項目が並んでいます。ここまでは、普通のINTER-Mediatorの開発手法と変わりません。\n                これに加えて、data-im-control属性をポップアップメニューに設定しています。この属性値として、「lookup:A:B」の形式で設定を行います。これにより「Aの値が変更されれれば、Bの設定に応じて値を取り出し、data-im属性に従って値を記録する」ということを行います。\n                ここでAは「account_detail@assort_pattern_id」となっています。このターゲット指定は、「仕分けパターン」のポップアップメニューのdata-im属性と同一です。つまり、まず、「仕分けパターンのポップアップが変更されれば、」という定義が加わっていることになります。\n                Bについては、取り出し先を指定しますが、一般にはマスター参照などを行うコンテキスト定義（ここでは「assort_pattern_lookup」）をあらかじめ定義しておきます。ポップアップメニューにより、assort_pattern_idに値が設定されて、その値を利用して、assort_pattern_lookupに検索をかけます。検索条件は、assort_pattern_idの値と、assort_pattern_lookupコンテキストのrelationキーに指定したフィールド名を利用して自動的に作成されます。なお、特に理由がないのであれば、ルックアップで利用するコンテキストはqueryキーなどの検索条件はかからないようにしておくのが良いでしょう。また、recordsは自動的に1に設定されるので、コンテキストで指定する必要はありません。そして、コンテキストから検索されると、Bの@以降に記載したフィールドの値が取り出されて、ポップアップメニューのdata-im属性に指定したフィールドに保存します。要素の値が設定されるだけでなく、データベースへの更新も行われます。\n                なお、ルックアップの機能はポップアップにだけ機能するのではなく、テキストフィールドなどのUI要素で稼働します。\n            \n        "
    },
    {
        "id": 37,
        "parent": "/ja/practices/",
        "path": "/ja/practices/practice-tips.html",
        "title": "ティップス集",
        "breadcrumb": "ティップス集",
        "body": "\n            \n                スタイルの値にフィールドの値を設定する\n                HTML要素にフィールドの値を表示させるには、data-im属性を使うのはよくご存知だと思います。通常は属性の値に「コンテキスト名@フィールド名」と書きますが、これによりinput属性などではvalue属性に、value属性のない要素には、小要素の1つとしてフィールドの値のテキスト値をセットします。加えて、フィールドの値をスタイルに設定できます。例えば、次のように記載すると、要素のstyle属性のdisplayの値として、フィールドmyStyleの値が設定されます。「style.」に続いて、JavaScriptでのstyle属性で利用できるキーを指定します。つまり、背景色なら、@style.backgroundColorと指定します。\n                &lt;span data-im=\"myContext@myStyle@style.display\"&gt;&lt;/span&gt;\n                この場合、フィールドmyStyleに「none」や「inline-block」などの値が入っていないといけませんが、もともとコンテキストから得られるリレーションで、display属性スタイルに合致しない値が入っているのなら、コンテキスト定義の中でcalculationキーを使って計算式を設定しましょう。ここで、is_showフィールドが1の場合は表示、そうでない場合は非表示にしたい場合、上記のように要素のdata-im属性を指定するとともに、定義ファイルに以下のような記述を追加します。こうすればデータベース側でmyStyleフィールドが存在していなくても、ダウンロードした結果に計算結果のmyStyleフィールド（計算プロパティ）が追加されて、is_showフィールドの値に応じてdisplayスタイルが設定されることになります。\n                IM_Entry(\n    [\n        [\n            'name' =&gt; 'myContext',\n            'view' =&gt; 'person_list',\n            'table' =&gt; 'person',\n            'key' =&gt; 'person_id',\n           'calculation' =&gt; [\n                ['field' =&gt; 'myStyle', 'expression' =&gt; \"if(is_show, 'in-lineblock', 'none')\"],\n            ], ....\n        ], ...\n            \n            \n                一覧ページから詳細ページに移動するボタンを設置する\n                一覧ページと選択したレコードの詳細ページを移動するナビゲーションはよく作られます。INTER-Mediatorでは、簡単にそうしたUIを作成する方法として、navi-controlキーにmasterやdetailなどの値を設定したコンテキストを定義ファイルで定義することで簡単に実現します。詳細は、プラクティスの一覧と詳細に記載しています。\n                しかしながら、さまざまな理由で、一覧と詳細を別々のHTMLファイルで用意する場合があります。例えば、ファイル送信コンポーネントを使うような場合だと、ファイルの送信後にページ更新が必要になり、詳細ページから一覧ページに勝手に移行してしまうので、別々のHTMLにするのが1つの解決策です。また、単純な一覧と詳細ではないような場合、別々に作る方が作りやすいかもしれません。その場合、一覧のページに、詳細のページに移動するボタンをつけたいでしょう。典型的には次のようなコードになるでしょう。\n                &lt;button onclick=\"detailpage.html?id=\"\n    data-im=\"myList@person_id@#onclick\"&gt;\n&lt;/button&gt;\n                ここではmyListコンテキストに、主キー値としてperson_idフィールドが存在しているとします。ここで、data-imのターゲット指定に「@#onclick」が存在します。これにより、person_idフィールドの値が、onclick属性の末尾に追加されます。person_idが35なら、onclick属性の値は「detailpage.html?id=35」となります。詳細のページでこのURL引数を取り出す方法は、次に説明します。\n            \n            \n                URLの検索パラメータの値を検索条件にする\n                前の項目で説明した一覧ページから詳細ページに移動するボタンを設置した場合など、URLに詳細に表示すべきレコードの主キー値が検索パラメータとしてに含まれています。検索パラメータを取り出して、それを検索条件として与えるには、INTERMediatorOnPage.doBeforeConstructメソッドにプログラムを記載します。\n                INTERMediatorOnPage.doBeforeConstruct = () =&gt; {\n  const params = INTERMediatorOnPage.getURLParametersAsArray()\n  const contextName = 'myDetail'\n  INTERMediator.clearCondition(contextName)\n  INTERMediator.addCondition(contextName, {field: 'person_id', value: parseInt(params['id']), operator: '='})\n    :\n                INTERMediatorOnPage.getURLParametersAsArray()によりURLに含まれる検索パラメータをオブジェクトとして取得できます。その後は、INTERMediator.clearConditionで一度コンテキストの検索条件を消してから、INTERMediator.addConditionでコンテキストの検索条件を追加します。doBeforeConstructメソッド内なので、この後に、データベースアクセスを行います。その時に、addConditionで追加した条件が付加されて、該当するレコードを取得できます。例えば、URLが「detailpage.html?id=35」なら、「id = 35」という検索条件がSELECT句に追加されます。なお、この場合、idパラメータが存在しない場合などの処理は必要に応じて組み込んでください。\n            \n            \n                ページ移動時に「保存されない」場合の対処\n                一覧と詳細ページを別々に作っている場合、詳細から一覧のページに移動する「戻る」ボタンを独自に設置しなければなりません。navi-controlを使えば自動的に用意しました。その場合、シンプルなリンクやlocation.href属性への代入等を行うことが簡単な方法ですが、詳細ページに編集可能テキストフィールドやテキストエリアがある場合には、それらの値が“場合によって”保存されないことがあります。これは、「戻る」ボタンをクリック時に編集中のテキストフィールドからフォーカスが外れて、テキストフィールドの更新のためのデータベースアクセスがスタートするからです。そのアクセスが終了しない間に一覧ページに移動すると、更新処理が失敗して更新がかからず、「保存されていない」と思ってしまいます。この場合、更新処理が終わってからページ移動をするようにします。例えば、戻るボタンのonclickに以下のようなmovePage関数の呼び出しを設置します。URLは引数にしましたが、固定文字列でもいいでしょう。IMLibQueue.setTaskにキューに入れる処理を記述しますが、その中ではキューを進めるために、引数で渡されたクロージャを呼びだすcomplete()を書きます。そして、setTaskの2、3番目の引数を、false、trueと記述します。これがあれば、優先度の低いキューとなり、更新処理が終わるのを確実に待って、この場合はlocation.hrefへの代入が行われます。\n                function movePage(url) {\n  IMLibQueue.setTask((complete) =&gt; {\n    complete()\n    location.href = url\n  }, false, true)\n}\n            Ver.11より、APIを増やしました。上記と同じことが、以下の１行で実行可能です。\n            INTERMediator.moveAnotherURL(url)\n            \n            \n                「クリックを受け付けない場合がある」と感じた時の対処\n                サーバの応答にもよるのですが、テキストフィールドを編集中にボタンをクリックした時、ボタンのクリックが受け付けないという思う場合が出てきます。その時は、CSSセレクタ#_im_progress（つまり、idが_im_progress）の要素に対して、pointer-event属性をnoneにしてください。この時、クリック時の処理は、優先度の低いキューに入れる方が良い場合があります。このページに記載の『ページ移動時に「保存されない」場合の対処』を参照してください。\n                #_im_progress {\n    pointer-events: none;\n}\n                この_im_progressは、何かの処理を背後で行なっているときに出てくるギアのマークの背景オブジェクトです。既定の状態では、pointer-eventsは既定値（auto）であり、ギアが出ている間にページ内をクリックしても、_im_progressがイベントを拾うので何も起こりません。この属性をnoneにすることで、ギアが出ている間でも背後に見えているボタンなどをクリックできるようになります。テキストフィールドの編集時にボタンを押すと、一瞬ギアが出るので、その間にボタンのクリックが受け付けない時間帯が発生します。これはタイミングと処理のスピードの問題で、一定した動作ではないかもしれません。\n                開発者としてはこの属性はnoneにしたいですし、以前はそうしていました。しかしながら、いくつかの案件で、「連打したらおかしくなる」と言われこの属性を規定値にしました。連打により、ページ構築途中の状態をクリックできてしまうようで、チェックボックスなどは確かに連打には弱いようです。しかしながら、連打を防ぐと、このタイトルのようにクリックを受け付けない瞬間が出てくるためいずれにしても使い勝手は良くありません。この調整は実際の案件に合わせるしかないという結論で、クリックを受け付けないということをINTER-Mediatorの既定値としています。\n            \n            \n                条件に応じてページ生成を行わないようにする\n                URLの検索パラメータに想定した項目がない場合にページを表示したくないかもしれません。その場合、INTERMediatorOnPage.doBeforeConstructメソッドに次のように記載します。この例では、idとpパラメータの両方がない場合、その後のページ構築をキャンセルするようにしました。ページ構築を行うかどうかは、INTERMediatorOnPage.isAutoConstructプロパティの値に応じます。つまり、通常はこのプロパティがtrueなのでページ構築をしますが、以下の場合はidとpパラメータのいずれかが存在しない場合ページ生成を行わなず、この後のデータベース接続などは行いません。\n               INTERMediatorOnPage.doBeforeConstruct = () =&gt; {\n  const params = INTERMediatorOnPage.getURLParametersAsArray()\n  if (!params['id'] || !params['p']) {\n    INTERMediatorOnPage.isAutoConstruct = false\n    return\n  }\n        :\n            \n             \n                Bootstrapのクラス名を自動生成されるボタンに適用する\n                INTER-MediatorのサイトをBootstrapを使ってデザインすることは可能です。実際に使って作っているサンプルもあります。ヘッダや各種要素に通常通りBootstrapのclassなどを適用すればOKです。しかしながら、削除や新規作成ボタンなどは自動的に作られるので、class属性が書けないと思ってしまいます。そのままだと、なんだか古いデザインのボタンになってしまい、ちょっとガッカリな感じです。そこで、JavaScriptを利用することでプロパティに追加するclassタグを記述できるようになっています。以下はその指定例です。buttonClassDeleteプロパティへの代入により、削除ボタンのclassに「btn btn-warning」が加わりますので、標準状態では黄色いボタンになります。以下のように、複製、削除、挿入、詳細、一覧に戻るのボタンのclassを追加するための変数があります。\n                \n                    INTERMediatorOnPage.doBeforeConstruct = function () {\n  INTERMediatorOnPage.buttonClassCopy = \"btn btn-info\"\n  INTERMediatorOnPage.buttonClassDelete = \"btn btn-warning\"\n  INTERMediatorOnPage.buttonClassInsert = \"btn btn-success\"\n  INTERMediatorOnPage.buttonClassMaster = \"btn btn-primary\"\n  INTERMediatorOnPage.buttonClassBackNavi = \"btn btn-primary\"\n};\n                \n            \n            \n                デバッグ情報をページ上に出さない\n                開発中はデバッグ情報を詳細にチェックしながら記述を調整することはよく行います。ページ上にデバッグ情報を出していますが、同時にブラウザの開発者向けツールでも表示できます。ページ上のデバッグ情報を消去するボタンはあるのですが、毎回押すのが面倒になってきます。その場合、以下のプロパティをtrueにすることで、デバッグ情報は開発者向けツールでは表示するものの、ページ上には表示しなくなります。\n                 \n                    INTERMediatorOnPage.doBeforeConstruct = function () {\n    INTERMediatorLog.suppressDebugMessageOnPage = true;\n};\n                \n           \n            \n                検索機能をANDにする\n                テキストフィールドなどにdata-im=\"_@condition:contextname:fieldslist:*match*\"のようにローカルコンテキストの指定を入れることで、指定したコンテキストに自動的に検索条件を挿入してデータベース処理をするので、検索機能を簡単に実装できます。ただし、その場合、いくつかのテキストフィールドを用意するとOR検索になります。これをAND検索にするには、以下のようなプロパティへの設定で可能にできます。\n                \n                    INTERMediatorOnPage.doBeforeConstruct = function () {\n        INTERMediator.lcConditionsOP1AND = false;\n        INTERMediator.lcConditionsOP2AND = true;\n};\n                \n            \n            \n                検索機能で値を区切って条件指定する\n                テキストフィールドなどにdata-im=\"_@condition:contextname:fieldslist:*match*\"のようにローカルコンテキストの指定を入れることで、指定したコンテキストに自動的に検索条件を挿入してデータベース処理をするので、検索機能を簡単に実装できます。この時、検索条件の値はテキストフィールド等に入力された通りになりますが、INTERMediator.lcConditionsOP3ANDにtrueを代入すると、テキストフィールドの値を半角あるいは全角のスペースで区切って複数の検索条件として与えることができます。このままだと区切った値のそれぞれの検索をORしますが、INTERMediator.lcConditionsOP3ANDに'AND'を代入するとそれぞれの検索をANDします。\n                \n                    INTERMediatorOnPage.doBeforeConstruct = function () {\n        INTERMediator.lcConditionsOP1AND = false;\n        INTERMediator.lcConditionsOP2AND = true;\n        INTERMediator.lcConditionsOP3AND = true;\n};\n                \n            \n            \n                マスター/ディテールページで新規レコード作成時に詳細ページに移動する\n                コンテキスト定義でnavi-controlキーで、masterやdetailなどを使って一覧と詳細ページを組んでいる場合、通常は一覧側に新規レコードを作成するボタンを表示させます。その場合、詳細ページに移動して入力等を行うため、一覧の中で新しいレコードを探さないといけないかもしれません。以下のようなプログラムをJavaScript記述可能な場所に書いておけば、新規レコード作成後に、新規作成したレコードの詳細ページに移動します。ここで、ifの条件にある「account_list」は、実際にレコードが作成されるコンテキストのnameキーの値を指定しておきます。また、moveDetailメソッドの引数は、「詳細ページのコンテキストのkey=newId変数の値」という検索条件のような文字列を指定します。これにより該当するレコードを詳細ページで表示します。\n                \n                    INTERMediatorOnPage.doAfterCreateRecord = (newId, contextName) =&gt; {\n  if (contextName == 'account_list') {\n    IMLibPageNavigation.moveDetail('account_id=' + newId)\n  }\n}\n                \n            \n            \n                一覧と詳細が別々のページである場合に新規レコード作成時に詳細ページに移動する\n                一覧と詳細ページを別々のページで組んでいる場合、通常は一覧側に新規レコードを作成するボタンを表示させます。詳細ページは、URLのパラメータにid=123のような記述を行なって特定のレコードを検索するようにします。新しいレコードを一覧ページで作った直後、詳細ページに移動して入力等を行うため、一覧の中で新しいレコードを探さないといけないかもしれません。以下のようなプログラムをJavaScript記述可能な場所に書いておけば、新規レコード作成後に、新規作成したレコードの詳細ページに移動します。ここで、ifの条件にある「account_list」は、実際にレコードが作成されるコンテキストのnameキーの値を指定しておきます。また、location.hrefに代入する文字列は、詳細ページの仕様に合わせたURLを指定します。\n                \n                    INTERMediatorOnPage.doAfterCreateRecord = (newId, contextName) =&gt; {\n  if (contextName == 'account_list') {\n    location.href = `index_detail.html?id=${newId}`\n  }\n}\n                \n            \n            \n                disabled属性を条件に応じて設定する\n                HTMLの属性にフィールドの値を設定する場合、data-im属性に指定するターゲット指定に「コンテキスト名@フィールド名@属性名」と記述することで可能です。しかしながら、disabled属性は、そこに設定する値でのグレーにするコントロールはできず、この属性が存在するかどうかで動作が決まり、他の属性と動作が異なります。こうした違いを本来はフレームワークで吸収したいところではありますが、Ver.9現在それは実現していません。ここで、フィールド、is_activeの値に応じて（\"\"やnull、0の場合はグレーにする）ボタンをグレーにするということを実現するための方法を示します。まず、コンテキストに、post-repeater属性を記述します。\n                IM_Entry(\n    [\n        [\n            'name' =&gt; 'myList',\n            'view' =&gt; 'person_list',\n            'table' =&gt; 'person',\n            'key' =&gt; 'person_id',\n            'post-repeater' =&gt; 'disablingButton', ....\n        ], ...\n                ページファイルでは、まず、調べたい値があるis_activeをページ上に展開するために、spanタグでこのフィールドの値を表示します。もし、その値がページ上に見えているのが好ましくない場合は、displayスタイル属性をnoneにしておきます。また、is_showの値に応じてグレーにしたい要素は、disablingというクラスにしておきます。\n                &lt;button class=\"disabling\" onclick=\"detailpage.html?id=\"\n    data-im=\"myList@person_id@#onclick\"&gt;\n&lt;/button&gt;\n&lt;span data-im=\"myList@is_active\" style=\"display:none\"&gt;&lt;/span&gt;\n                そして、以下のようなプログラムをJavaScriptで組み込みます。メソッド名は、コンテキスト定義のpost-repeater属性の値を指定します。リピーターの合成が終わったときに、引数repeatersにリピータの配列をセットしてこのメソッドが呼び出されます。INTERMediatorOnPage.getNodeIdsHavingTargetFromNodeは引数のリピータから、is_activeフィールドを展開した要素のid属性値の配列を取り出します。リピータ内部から取るので、言わば「特定の1つのレコード」について、is_activeを展開した要素が特定できます。ここでは要素は1つと仮定します。その値に応じて、値が0なら、そのリピータ内のクラス属性がdisablingの要素を取り出して、disabled属性をtrueにしてグレーにしています。\n                INTERMediatorOnPage.adjustOptions = (repeaters) =&gt; {\n  const ids = INTERMediatorOnPage.getNodeIdsHavingTargetFromNode(repeaters, 'myList@is_active')\n  if (ids.length &gt; 0 &amp;&amp; parseInt(document.getElementById(ids[0]).innerHTML) == 0) {\n    for (const repeater of repeaters) {\n      const nodes = repeater.getElementsByClassName('disabling')\n      for (const node of nodes) {\n        node.disabled = true\n      }\n    }\n  }\n}\n            \n            \n                サーバーに応じて設定を変える\n                params.phpファイルの設定について、データベース接続先が例えば手元ではlocalhostだけど、本番環境ではあるホスト名にしたいなど、稼働環境によって値を変えたい場合もあると思います。その場合は、PHPのhostname()関数を使って、params.php内でプログラムを記述します。例えば、params.phpにある$isSAML変数をホスト名によって切り替える方法はこのようなプログラムになります。hostname()の返り値は、そのホストにログインをしてhostnameコマンドを実施すれば得られます。\n                $isSAML = ((gethostname() == \\'inter-mediator.com\\') ? true : false);\n            \n            \n                Webサーバーから起動されたくないPHPファイル\n                cron等で稼働したり、メンテナンスで使うようなスクリプトは、Webサーバから起動されたくありません。念の為、Webサーバで起動されていない場合には何もしないで終わるような仕組みを組み込みたい場合は、php_sapi_name()関数を利用して判定可能です。Webサーバとして稼働させていれば、その返り値は 'server' になります。\n                 if (strpos(php_sapi_name(), 'server') !== false) {\n    echo \"Local execution only.\";\n    exit;\n}\n           \n            \n                \n                \n            \n        "
    },
    {
        "id": 38,
        "parent": "/ja/for-novices/",
        "path": "/ja/for-novices/trial.html",
        "title": "トライアル版の利用方法",
        "breadcrumb": "トライアル版の利用方法",
        "body": "\n            \n                はじめに\n                INTER-Mediatorの試用や学習用に、簡単な操作でサーバとして実行できるWebアプリケーションについての情報をこの文書に記載します。Dockerを利用するか、phpのサーバモード等で直接実行することを想定したWebアプリケーションです。後者の方法は「ダイレクトホスティング」と呼ぶことにします。いずれかの方法で稼働することができます。\n                Webアプリケーションでは、INTER-Mediatorのサンプルプログラムを稼働することができると同時に、稼働に必要なファイルをWebブラウザ上で編集して実行できるようになっており、自分でHTMLや設定を作って実行することもできます。INTER-Mediatorのハンズオンや学習用教材での利用を見込んでいます。\n                従来は試用や学習用にVMを用意していましたが、Ver.9以降はフリーかつプラットフォームに依存しないVM環境が整わないため、VMよりDockerベースに移行しました。Webアプリケーション自体は、INTER-Mediator Ver.10以降で利用できますが、基本的にはインストール作業をしたときの最新版が稼働するようになっています。\n            \n            \n                Dockerでインストールして稼働する\n                まず、お使いのプラットフォーム上でDocker Desktopを起動しておく必要があります。Docker Desktopのインストール方法はこちらを参考にしてください。Docker Desktopが稼働可能な状態になったら以下のコマンドを実行します。\n                git clone https://github.com/inter-mediator/IMApp_Trial\ncd IMApp_Trial\ndocker-compose up -d\n                コンテナのビルドに10分以上かかるかもしれません。しかし、これだけでINTER-Mediatorの開発環境が実行可能になりました。データベースを含むサーバ一式及びINTER-Mediatorのインストール等は全て自動的に行われています。\n                Creating network \"imapp_trial_default\" with the default driver\nCreating imapp_trial_db_1 ... done\nCreating php-apache_im    ... done\n                上のようなメッセージが確認できたら、Webブラウザで http://localhost:9080/ を開いてください。INTER-Mediatorのデモアプリのトップページが表示されます。トップページに解説がありますので、そちらを参照すれば使用方法等が示されています。\n                編集可能なページや定義ファイルはDockerコンテナの外側のファイルに格納されているので、永続的に表示されます。 MySQLはDockerコンテナとして起動し、スキーマも割り当て済みですが、DBは永続的ではないので、コンテナ起動後に追加したデータはIMコンテナを停止すると消えます。\n            \n            \n                ダイレクトホスティングによるインストール\n                OSにセットアップしたWebサーバやデータベースを利用して稼働する方法を「ダイレクトホスティング」と総称します。サーバやデータベースのソフトウエアにはさまざまなものがありますが、ApacheとMySQLを使用する想定でここでは手順を紹介しましょう。\n                準備\n                PHP、git、composer、MySQL、Node.jsをインストールして稼働できるようにしてください。\n                データベースにはINTER-Mediatorのサンプルデータベース（データベース名'test_db'）を以下のMySQL用スキーマで用意します。すでにINTER-Mediatorを使用している場合は、このサンプルDBを既にセットアップしていると思われるので、それをそのまま使用しても構いません。\n                https://raw.githubusercontent.com/INTER-Mediator/INTER-Mediator/master/dist-docs/sample_schema_mysql.txt\n                MySQLを用意し、rootパスワードを知っている場合、IMApp_Trialリポジトリをクローンした後、以下のようにtest_dbを設定することができます。\n                cd IMApp_Trial # カレントディレクトリがこのリポジトリのルートであると仮定します。\nmysql -u root -p &lt; vendor/inter-mediator/inter-mediator/dist-docs/sample_schema_mysql.txt\n# Homebrew ユーザは root のパスワードを設定しないかもしれないので、 -p パラメータを削除してください。\n# Windows ユーザは、ディレクトリの区切り文字を / から \\ または ¥ に変更する必要があります。\n                セットアップ\n                このWebアプリは、composerをベースにしています。IMApp_Trialリポジトリをクローンして、リポジトリのルートで以下のようにcomposerコマンドを実行します。\n                git clone https://github.com/inter-mediator/IMApp_Trial\ncd IMApp_Trial\ncomposer update\n                Windowsの場合の追加セットアップ\n                Windows Subsystem for Linux (WSL) があれば、macOS/Linux と同じように設定できます。 Windows PowerShellなどを使っていない場合、composer updateコマンドの最後でエラーになります。 IMApp_Trialのカレントディレクトリで、以下のコマンドを手動で実行する必要があります。 この2つのコマンドは、shを使ったシェルスクリプトですので、bashアプリケーションが自動的に立ち上がります。\n                cd .¥vendor¥inter-mediator¥inter-mediator\nnpm install\ncd .¥dist-docs\n./generateminifyjshere.sh\ncd ..¥..¥..¥..¥lib\n./trialsetup.sh\ncd ..\n                アプリケーションのスタートアップ\n                Webアプリを手っ取り早くホストするには、phpコマンドのサーバーモードが便利です。IMApp_Trialディレクトリがカレントディレクトにして、以下のコマンドを実行します。\n                php -S localhost:9000\n                これで、同じホストで実行されているブラウザから、 http://localhost:9000/ という url でアプリケーションにアクセスできるようになります。トップページに解説がありますので、そちらを参照すれば使用方法等が示されています。\n            \n        "
    },
    {
        "id": 39,
        "parent": "/ja/for-developers/",
        "path": "/ja/for-developers/sendmail10.html",
        "title": "メール送信(Ver.10)",
        "breadcrumb": "メール送信",
        "body": "\n            \n                はじめに\nINTER-Mediatorのメールを送る機能は、Ver.5までの仕組みと、Ver.6以降の仕組みが大きく異なっています。ここでは前者を「旧アーキテクチャ」、後者を「新アーキテクチャ」と呼びます。Ver.6を実装では、旧アーキテクチャの実装は残して新アーキテクチャも組み込み、相互に切り替えて運用できるようにしました。また、過去のアプリケーションとの互換性を考慮して、既定値では旧アーキテクチャでの稼働を規定値にしました。Ver.10では、既定値を新アーキテクチャとしましたが、旧アーキテクチャに切り替えることは可能です。しかしながら、今後は新アーキテクチャが使われることがメインになると想定して、新アーキテクチャのみをこの文書では紹介します。旧アーキテクチャでのメール機能の利用についてはメール送信(Ver.5)あるいはメール送信(Ver.6)をご覧ください。\n                メールはPHPのmail関数を使う方法と、メールサーバを利用する方法を使用できます。mail関数を使う場合UNIX系サーバならsendmailコマンドをたたく方法になります。SMTPサーバーを利用してメールを送信する場合、Ver.10まではswiftmailerを利用します。Ver.11で、symfony/mailerに切り替えています。\n            \n            \n                定義ファイルへの指定\n                \n                    [第1引数, コンテキスト定義]\n                    メール送信\n                \n               \n                    \n                    \n                        配列指定\n                        値\n                    \n                    \n                        キー\n                        インデックス\n                        下位のキー\n                    \n                    \n                    \n                    \n                        'send-mail'あるいは'messaging'\n                        'driver'\n                        \n                        メールを送信する場合は、値は'mail'、あるいはこのエントリーごと省略する（send-mailキーの場合は記述してはいけない）\n                    \n                    \n                        'read'\n                        \n                        コンテキストに対してレコードの取り出しを行った後にメールを送信する。\n                    \n                    \n                        'from'\n                        送信者名や送信者アドレスが含まれるフィールド名、あるいはアドレスの文字列。文字列内に「@@フィールド名@@」の記述があれば、フィールドのレコードに置き換わる\n                    \n                    \n                        'to'\n                        送信先が含まれるフィールド名、あるいはアドレスの文字列。文字列内に「@@フィールド名@@」の記述があれば、フィールドのレコードに置き換わる。複数の送信先はカンマで区切る\n                    \n                    \n                        'cc'\n                        Cc先が含まれるフィールド名、あるいはアドレスの文字列。文字列内に「@@フィールド名@@」の記述があれば、フィールドのレコードに置き換わる。複数の送信先はカンマで区切る\n                    \n                    \n                        'bcc'\n                        Bcc先が含まれるフィールド名、あるいはアドレスの文字列。文字列内に「@@フィールド名@@」の記述があれば、フィールドのレコードに置き換わる。複数の送信先はカンマで区切る\n                    \n                    \n                        'subject'\n                        件名が含まれるフィールド名、あるいは件名の文字列。文字列内に「@@フィールド名@@」の記述があれば、フィールドのレコードに置き換わる\n                    \n                    \n                        'body'\n                        メール本文が含まれるフィールド名、あるいは本文の文字列。文字列内に「@@フィールド名@@」の記述があれば、フィールドのレコードに置き換わる\n                    \n                    \n                        'template-context'\n                        メールの文面を得られるコンテキスト名と検索条件。テーブルに文面のテンプレートをセットしているものとする\n                    \n                    \n                        'store'\n                        送信したメールをここで指定したコンテキストに対して新規レコードを作成して保存する\n                    \n                    \n                        'attachment'\n                        添付するファイルへの相対パスの文字列、あるいはそれを含むフィールド名。文字列内に「@@フィールド名@@」の記述があれば、フィールドのレコードに置き換わる\n                    \n                    \n                        'f-option'\n                        UNIXでSMTPサーバを経由しない場合にtrueを指定すると、fromの指定が有効\n                    \n                    \n                        'body-wrap'\n                        右端の折り返しのバイト数\n                    \n                    \n                        'update'\n                        \n                        コンテキストに対してレコードの更新処理を行った後にメールを送信する。第3次元については、readと同様\n                    \n                    \n                        'create'\n                        \n                        コンテキストに対して新たなレコードを作るアクションを起こした後にメールを送信する。第3次元については、readと同様\n                    \n                    \n                \n                \n                    [第2引数, オプション設定]メール送信サーバー\n                \n                \n                    \n                    \n                        配列指定\n                        値\nparams.phpで変数名\n                    \n                    \n                        第1次元\n                        第2次元\n                    \n                    \n                    \n                    \n                        'smtp'\n                        'server'\n                        メール送信時に使用するサーバのホスト\n                        $sendMailSMTP\n                    \n                    \n                        'port'\n                        メール送信時に使用するサーバのポート\n                    \n                    \n                        'protocol'\n                        メール送信時に使用するプロトコルで、省略すると'smtp'を選択する。こちらのDSNのProtocolの指定となる（Ver.11で追加）\n                    \n                    \n                        'username'\n                        メール送信時に認証で使用するユーザー名\n                    \n                    \n                        'password'\n                        メール送信時に認証で使用するパスワード\n                    \n                    \n                        'encryption'\n                        通信処理の暗号化をする場合にその方法を指定する。'ssl'、あるいは'tls'を指定する（Ver.11以降は無視される）\n                    \n                    \n                \n               定義ファイルでの指定例を以下に示します。\n                \nIM_Entry(\n    &nbsp; &nbsp; array( &nbsp; // Contexts\n    &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;array(\n    &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;'name' =&gt; 'request',\n    &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;'send-mail' =&gt; array(\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;'create' =&gt; array(\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;     'from' =&gt; 'info@msyk.net',\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 'to' =&gt; '@@email@@',\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;'cc' =&gt; 'msyk@me.com',\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;'subject' =&gt; 'ビジネスマッチング申し込み',\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;'body' =&gt; '受け付けました。\\n本当です。',\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 'f-option' =&gt; true,\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;'body-wrap' =&gt; 76,\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;)\n    &nbsp; &nbsp; ),\n    &nbsp; &nbsp; array(   // Options\n    &nbsp; &nbsp; &nbsp; &nbsp; 'formatter' =&gt; array(...),\n    &nbsp; &nbsp; &nbsp; &nbsp; 'smtp' =&gt; array(\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;'protocol' =&gt; 'smtp',\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;'server' =&gt; 'mysmtp.msyk.net',\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;'port' =&gt; 587,\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;   'username' =&gt; 'msyktest@msyk.net',\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;'password' =&gt; 'oshienai',\n    &nbsp; &nbsp; &nbsp; &nbsp; )\n    &nbsp; &nbsp; ),\n    &nbsp; &nbsp; array('db-class' =&gt; 'PDO'),\n    &nbsp; &nbsp; false\n    );\n                \n            \n            \n                メールを送信するタイミングの指定\n                'send-mail'キーの配列の次のレベルのキーとして、'read' 'update' 'create'のいずれかを指定できます。それぞれ、データベースからの読み込み時、更新時、新規レコード作成時を意味し、コンテキストに対するそれぞれのタイミングでメールを送信します。いずれも、データベース処理が終了してからメールの送信にかかります。上記の例では、新規レコード作成時に、メールが送信されます。\n            \n            \n                メールの内容\n                メールの送信者はfromキー、宛先はto、cc、bccキー、件名はsubjectキー、本文はbodyキーで指定した文字列になります。一定の文字列で良い場合は単に記述するだけです。一方、全ての値でフィールドの値に置き換えるテンプレート処理が可能です。readの場合のメールだと、その時にviewキーのテーブルやビュー等で読み出した1つのレコードのフィールドを「@@フィールド名@@」の部分に置き換えてメールを作成することができます。create、updateの場合は対象レコードをviewキーのフィールドもしくはビューから取り出します。\n基本的にはメールはUTF-8でエンコードして送られます。定義ファイルはUTF-8を利用するので、日本語の文字列は通常通り記述して、UTF-8で保存すればその文字がメールで利用されます。ヘッダについては、base64のインラインエンコードを、ASCIIコード以外の文字について行います。本文はそのままですが、ヘッダのContent-TypeのcharsetにUTF-8という文字を付けます。つまり、本文はbase64等でのエンコードは行いません。\n本文は一定の長さで改行を入れます。既定値では72バイトですが、'body-wrap'キーで異なる値にできます。0に設定すると改行しません。ここで、バイト数ですが、実際のバイト数ではなく、日本語は2バイト、英語は1バイトと数えた結果で示しています。実際のエンコードはUTF-8なので、嘘と言えば嘘のカウントになりますが、おそらくこうして指定をすることに慣れている人が多いので、ここでは実態とは関係ない数値ではありますけども実用的という意味で「2バイトルール」でカウントしたものとします。\nUNIXでSMTPサーバーを使わない場合、通常はメールソースのFrom:は無視されて、UNIXアカウントそのものをFrom:として設定してしまいます。ただし、サーバー側で許可されていれば「'f-option' =&gt; true」の指定を定義ファイル内に記述することで、sendmailコマンドの-fパラメータを指定して、送信者の指定が可能です。\n            \n            \n                SMTPサーバーの指定\n                定義ファイルのIM_Entry関数の第3引数のオプション領域に'smtp'キーで配列を指定します。その他のキーは、前記の例の通りで、キーを見れば意味は分かると思います。もし、SMTP認証をしない場合は、serverとportだけを指定します。認証する場合は、server, port, username, passwordを指定します。\n                SMTPサーバーの指定は、params.phpファイルでも指定が可能です。変数名として、$sendMailSMTPの定義し、値は'smtp'の右側の配列と同様に指定をします。params.phpファイルでの指定よりも、定義ファイルの指定が優先されます。どこにもSMTPサーバーの設定がない場合には、mail関数での送信になります。\n                Windowsの場合、mail関数はSMTP利用するので、php.iniにサーバー情報などを書くことで対処できます。従って、'smtp'の指定やparams.phpファイルでの指定は一般には不要ですが、もし設定すれば、mail関数ではなく、swiftmailによるメール送信ができます。\n            \n            \n                Gmailのアカウントでメール送信する場合（Ver.11以降）\n                Gmailへの送信は、symfony/mailerの機能を使って送信します。ライブラリの「symfony/google-mailer」は、INTER-Mediatorのcomposer.jsonファイルに記述済みなので、通常はすでにインストールされているはずです。設定としては、prtocol、username、passwordのみを指定してください。serverに相当する値は背後で自動的にdefaultになります。params.phpファイルに指定する場合の例を示します。なお、パスワードはログインのためのパスワードではなく、AppPasswordによって発行されたコードを指定します。\n$sendMailSMTP = array(\n    \"protocol\" =&gt; \"gmail+smtp\",\n    \"username\" =&gt; \"msyk.nii83@gmail.com\",\n    \"password\" =&gt; \"himitsunopassword\",\n);\n           \n            \n                AWSのSESでメール送信する場合（Ver.11以降）\n                AWSのSES（Simple Email Service）での送信にはSMTPも利用できますが、APIを使った送信も可能です。送信処理は、symfony/mailerの機能を使って送信します。ライブラリの「symfony/amazon-mailer」は、INTER-Mediatorのcomposer.jsonファイルに記述済みなので、通常はすでにインストールされているはずです。設定としては、prtocol、username、passwordのみを指定してください。serverに相当する値は背後で自動的にdefaultになります。params.phpファイルに指定する場合の例を示します。なお、アクセスキーとシークレットキーは、AWSのIAMで作成したユーザに対して発行されたものを指定します。このユーザには、アクセス許可としてAmazonSesSendingAccessを指定します。\n$sendMailSMTP = array(\n    \"protocol\" =&gt; \"ses+https\",\n    \"username\" =&gt; \"yourACCESSKEY\",\n    \"password\" =&gt; \"yourSECRETKEY\",\n);\nAWS SESの利用にはいくつかポイントがあります。まず、Verified AddressというところにFromに指定するメールアドレスを登録します。ここに登録しないとエラーとなります。登録時、そのメールアドレスに対して確認メールが送信され、そこに記載されたリンクをクリックしないといけないので、メールの受信がができるアドレスである必要があります。そして、サービスを利用した段階では、SES自体がサンドボックスモードになっていて、Fromだけでなく送信先もVerified Addressである必要があります。原則として、サンドボックスモードでメール送信のテストをするので、必要なアドレスを全部登録しておきます。そして、実際に運用する段階で、プロダクションモードに変更しますが、設定だけではできず、Amazon側に申請する必要があります。メール送信の頻度や内容などを比較的詳しくレポートしないと追加情報を求められるので、そのつもりで申請に臨みます。また、申請は人間による処理をしているようで、即座に反映はされませんので注意が必要です。\nsymfony/mailerは既定値では、Irelandのリージョンつまり、eu-west-1を利用します。Verified Addressはリージョンごとに設定されるので、この設定とメーラが利用するリージョンを合わせないといけません。もし、東京リージョンをメール送信で利用したいのであれば、'server'キーの値に「default?region=ap-northeast-1」を指定します。そうすれば、東京リージョンに設定したVerified Addressでメール送信が可能です。\n           \n            \n                symfony/mailerがサポートするプロトコル（Ver.11以降）\n                symfony/mailerのドキュメントにあるUsing a 3rd Party Transportはもちろんサポートしていますが、追加のプロトコルを利用するためにはライブラをインストールしなければなりません。INTER-Mediatorは既定値ではGmailとAWS SESだけをインストールしてあります。\n            \n            \n                ファイルを添付する\n                ファイルを1つだけ追加できます。添付するには、media-root-dirキーの指定が必要です。そして、media-root-dirキーと、attachmentキーから得られるパスを繋いだ絶対パスのファイルを添付します。attachmentキーに「@@フィールド名@@」を用いてフィールド名を指定した場合、そのフィールドは、ファイルのアップロードコンポーネントを利用してアップロードした場合に自動的に設定されるパス名であることを想定しています。\n            \n            \n                送信結果をデータベースに残す\n                storeキーには、同じ定義ファイル内に定義した、レコード作成可能なコンテキストを指定します。メール送信を行うと、そのコンテキストに、新たにレコードを作って送信した結果を残せます。エラーがあって送れない場合でも結果を残します。なお、指定したコンテキストには、以下のフィールドがあるものとします。フィールド名は固定でカスタマイズはできません。フィールド名から、何が入力されるかは判別可能だと思います。\n                to_field、bcc_field、cc_field、from_field、subject、body、errors\n                あるテーブルの関連テーブルに送信結果を残す場合、relationキーを指定します。すると、上位のコンテキストの主キー値を自分自身の外部キーフィールドに設定できるので、作られたメール送信レコードに元のテーブルとの関連を残すことができます。ただし、operatorが=のものだけです。また、送信結果を残すコンテキストにqueryキーがあり、operatorが=のものがある場合、その値も初期値として設定されます。\n            \n            \n                データベースに入れたテンプレートにある文面でメールを作成する\n                メールの文面や送り先などをデータベースに入れておき、それを元にメールを作成して送付するには、template-contextキーを指定します。例えば、「mail_template@id=3」のように記述します。mail_templateは、同じ定義ファイルにある読み込み可能なコンテキストで、このコンテキストから読み出したデータについては、以下のようなフィールドがあるものとします。フィールド名は固定でカスタマイズはできません。フィールド名から、何が入力されているかは判別可能だと思います。\n                 to_field、bcc_field、cc_field、from_field、subject、body\n                 @以降は、コンテキストの中の検索条件を指定しますが、この記述は条件そのものではなく、=の前後で分離して、WHERE id = 3 のような検索条件で検索をします。実際には最初の1つのレコードだけを利用します。そのレコードからそれぞれのフィールドを取り出しますが、値そのままの場合もありますが、テンプレートのデータにある「@@フィールド@@」を、実際にメールを送るときのデータに置き換えることも可能です。\n           \n            \n                HTMLメールの送信\n                メールの文面の最初の文字列が &lt;html&gt; である場合、HTMLメールとして送信します。添付ファイルも1つまでは一緒に送れますが、添付ファイルをHTMLに埋め込みたい場合、本文の文面内で##image## と記述すればOKです。ただし、画像ファイルであるという前提で文面を作成してください。\n            \n            \n                メッセージングとしてメール送信\n                send-mailキーはVer.6でも利用できますが、メッセージ送信機能を拡張するにあたり、send-mailキーの代わりにmessagingキーを指定することもできます。その場合は、配列にdriverキーで値がmailのエントリーを入れるか、drivierキーを省略することでも構いません。\n            \n        "
    },
    {
        "id": 40,
        "parent": "/ja/for-developers/",
        "path": "/ja/for-developers/deffile.html",
        "title": "定義ファイルの詳細",
        "breadcrumb": "定義ファイルの詳細",
        "body": "\n            \n                定義ファイルについて\n                INTER-Mediatorは、HTMLのテンプレートである「ページファイル」と、データベースとのやり取りなどの動作を規定する「定義ファイル」を用意することで、データベースと連動したWebページを作成することができるフレームワークです。レポジトリのsamplesディレクトリにあるサンプルファイル内にある.phpファイルが定義ファイルの例であり、具体的な記述方法はサンプルファイルを参照していただくのが早いかと思われます。Ver.10までは、.phpファイルの定義ファイルだけをサポートしていましたが、Ver.11からは.yamlや.jsonもサポートするようになったので、改めて、定義ファイルに関することを１つのページにまとめました。\n                定義ファイルについてのルール\n                定義ファイルは、ページに必要なデータベース利用の設定をまとめたものというのが1つの視点であり、設定そのものに加えて、INTER-Mediatorのクライアント側のコードを提供するということも行なっています。フレームワークのダウンロードに関してはほぼ自動的に行われるので、原則としては定義ファイルには「ページ構築に必要な設定を記述する」ということで済みます。以下は典型的なページファイルの記述例です。この内容の.phpファイルをサーバ側に作成するので、処理自体はサーバサイドで行われます。ポイントは、最初にフレームワークの読み込みを行、その後に、IM_Entryという決められた関数の呼び出しを行うことです。\n                &lt;?php\nrequire_once ('INTER-Mediator/INTER-Mediator.php');\nIM_Entry( $tableDefs, $optionDefs, $dbDefs, true );\n?&gt;\n                この定義ファイルを、ページファイルで呼び出します。ページファイルと定義ファイルが同じディレクトリにあることが一般的ですので、scriptタグのsrcプロパティには、定義ファイルのファイル名だけを記述すれば良いでしょう。あとは、ページをロードするときに自動的に定義ファイルの設定に加えてフレームワーク自体もダウンロードされ、さらに自動的にページ構築に入ります。ページファイル構築については、『INTER-MediatorによるWebアプリケーションの概要』などをご覧ください。\n                &lt;html&gt;\n&lt;head&gt;\n&lt;script src=\"sample_form_MySQL_include.php\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n                :                \n&lt;td&gt;&lt;input type=\"text\" data-im=\"contact@datetime\"/&gt;&lt;/td&gt;\n                定義ファイル内の記述例\n                定義ファイルでは、IM_Entry関数を呼び出しますが、そこでは4つの引数があり、それぞれに配列や値などを設定することで、必要な動作のセットアップができるようになっています。そこに記述する内容は、『定義ファイルの記述方法』を参照してください。\n                以下は定義ファイルの例です。前述のように、IM_Entry関数の引数に変数を割り当てて、変数に代入しても良いのですが、設定は１箇所だけに記述すれば良いので、引数に配列をそのまま記述する方が手軽だと思われます。最初の引数をコンテキスト定義と呼んでいます。最初の引数は、コンテキスト定義の配列を指定します。コンテキスト定義自体は決められたキーワードを使った連想配列で指定します。以下の例では3つのコンテキストを定義しています。コンテキストは、nameキーの値で参照されるので例えば、person、contact、contact_wayという3つのコンテキストがあると認識します。IM_Entryの2つ目の引数は、オプション設定と呼ばれ、利用しているページ全体に対する設定を記述できます。ここでも決められたキーワードを利用した連想配列を記述しますが、以下の例では認証に関する設定だけが行われています。3つはデータベースへの接続設定ですが、設定はアプリケーション全体で使うことが多いため、params.phpファイルに指定するということが一般的です。ここでも連想配列で指定しますが、利用しているのがPDO、つまり、MySQLやPostgreSQLといったSQLサーバを使っていることを明記するために、エンジンの種類だけをここでは記述しています。4つ目の引数は整数を指定し、デバッグモードで動かすかどうかを指定しています。\n                require_once('../../INTER-Mediator.php');\nIM_Entry(\n    [\n        [\n            'records' =&gt; 1,\n            'paging' =&gt; true,\n            'name' =&gt; 'person',\n            'key' =&gt; 'id',\n            'query' =&gt; [['field'=&gt;'location', 'operator'=&gt;'&gt;', 'value'=&gt;'200'],],\n            'sort' =&gt; [['field' =&gt; 'id', 'direction' =&gt; 'asc'],],\n            'repeat-control' =&gt; 'insert delete',\n        ],\n        [\n            'name' =&gt; 'contact',\n            'key' =&gt; 'id',\n            'relation' =&gt; [\n                array('foreign-key' =&gt; 'person_id', 'join-field' =&gt; 'id', 'operator' =&gt; '=')\n            ],\n            'repeat-control' =&gt; 'insert delete',\n        ],\n        [\n            'name' =&gt; 'contact_way',\n            'key' =&gt; 'id',\n        ],\n    ],\n    [\n        'authentication' =&gt; array( // table only, for all operations\n            'user' =&gt; array('user1'), // Itemize permitted users\n            'group' =&gt; array('group2'), // Itemize permitted groups\n            'authexpired' =&gt; '100000', // Set as seconds.\n            'storing' =&gt; 'credential',\n        ],\n    ],\n    ['db-class' =&gt; 'PDO'],\n    false\n);\n\n                YAMLによる定義ファイル\n                前述のPHPで記述した定義ファイルは、PHPで記述するとは言うものの、事実上、連想配列の情報であり、ほぼスタティックなデータを供給することで事は足りるため、プログラムを行なって指定する必要はありません。そのため、PHPでは記述できるものの宣言的な記述による定義ファイルであると言えます。\n                YAMLで記述する定義ファイル\n                一方、INTER-Mediator Ver.11よりYAMLにより定義ファイルを記述できるようになりました。つまり、形態上も宣言的な記述であるということが言えるようになったのです。その場合、ページファイルの指定も若干変わります。前に示したPHPの定義ファイルと同等なYAMLファイルの定義ファイルは以下の通りです。ここでは、INTER-Mediator自体の読み込みや、IM_Entry関数の呼び出しは記述しません（記述できないです）。PHP版のIM_Entryの引数に与えている内容のみを、YAMLで記述します。ただし、4つの引数それぞれに対する情報は、contexts、options、connection、debugというキーを記述します。これらのキーワード以外は、PHP版と同等のキーワードが利用できます。なお、ファイル名は任意ではありますが、拡張子は.yamlないしは.ymlにします。\n                contexts: \n    -   name: person\n        records: 1\n        paging: true\n        key: id\n        query: [{field: location, operator: &gt;, value:200}]\n        sort: [{field: id, direction: asc}]\n        repeat-control: 'insert delete'\n    -   name: contact\n        key: id\n        relation:\n            -   foreign-key: person_id\n                operator: '='\n                join-field: id\n        repeat-control: 'insert delete'\n    -   name: contact_way\n        key: id\noptions:\n    authentication:\n        user: [user1]\n        group: [group2]\n        authexpired: '100000'\n        storing: credential\nconnection:\n    db-class: PDO\ndebug: false\n                YAMLの定義ファイルをページファイルで指定する\n                PHP版の定義ファイルだと、ページファイル側でscriptタグで読み込む必要がありました。同様に、定義ファイルの内容をページファイルに反映させるために、YAML版でもscriptファイルで読み込みが必要になります。そのとき、hrefは定義ファイルそのものではなく、INTER-Mediatorのルートにあるindex.phpを指定します。以下、INTER-Mediatorフォルダがどこにあるのかに応じた例を記述します。実際には、Webサーバのドキュメントルートからの絶対パスを記述することがわかりやすいと思われますが、もちろん、相対パスでも構いません。INTER-Mediatorディレクトリのルートにあるindex.phpをともかく参照します。\n                # ドキュメントルートにINTER-Mediatorフォルダがある場合\n&lt;script src=\"/INTER-Mediator/index.php\"&gt;&lt;/script&gt;\n# /libにINTER-Mediatorフォルダがある場合\n&lt;script src=\"/lib/INTER-Mediator/index.php\"&gt;&lt;/script&gt;\n# /lib/srcにINTER-Mediatorフォルダがある場合\n&lt;script src=\"/lib/src/INTER-Mediator/index.php\"&gt;&lt;/script&gt;\n# アプリケーション形式の場合（composerでINTER-Mediatorをインストール）\n&lt;script src=\"/vendor/inter-mediator/inter-mediator/index.php\"&gt;&lt;/script&gt;\n                この場合、YAMLファイル自体をどうやって認識するかが問題になります。scriptタグで、INTER-Mediator/index.phpを読み出す場合、定義ファイル名にはページファイル名と同じ名前をつけるのが一番手軽な方法になります。つまり、「ページファイル名.(yml|yaml|json)」という定義ファイル名にするということです。そして、その名前のファイルを、以下の順番で検索をします。以下を、「定義ファイルの検索パス」と参照します。\n\nドキュメントルート\nページファイルのあるディレクトリ\nparams.phpの$yamlDefFilePool変数で指定した絶対パスのディレクトリ\n\n                定義ファイルのファイル名が、ページファイルと同一ではない場合、INTER-Mediator/index.phpのURLにdeffile=というキーでパラメータを設定して、ファイルへの相対パスを記述します。以下はその記述例です。そして、定義ファイルの検索パスに関して順番にチェックして、存在すればそれを定義ファイルとして使います。検索パスのそれぞれの場所からの相対パスを、deffileキーの値として指定するの基本となります。\n                &lt;script src=\"/lib/src/INTER-Mediator/index.php?deffile=path_to/def_file.yaml\"&gt;\n                ページファイルと定義ファイルをYAMLベースで構築する方法としては、まずは、それら2つのファイルを同一フォルダに置き、同一mのファイル名で定義するのが基本です。そうすれば、ページファイル側でのscriptタグでは、単にINTER-Mediator/index.phpへの参照をするだけで構いません。YAMLファイルの置き場所やあるいはファイル名をページファイルと異なるものにしたい場合には、deffile=を指定したり、検索パス上のどこに配置するかを検討することになります。\n                PHPファイルだが設定をYAMLで定義する方法\n                定義そのものはYAMLで記述するものの、それをPHPファイルに配置することも可能です。そうすれば、PHPファイルでの定義ファイルと同様、ページファイルのscriptタグからは単にPHPの定義ファイルを呼び出せば良いでしょう。定義ファイルに機能を組み込むような方法もあり、例えば、Interne Explorerを排除する方法としては有効な方法になります。その場合は、プログラムがかけるPHPファイルが前提になるので、こうした手法も必要になってくるかもしれません。定義をYAMLで記述するPHPファイルの例は以下のようなものです。最初にフレームワークを読み込むことが必要で、続いて、変数$yamlにYAMLでコンテキスト定義などを構築します。そして、IM_Entry_YAML関数にYAMLのテキストを渡せばOKです。\n                &lt;?php\n\nrequire_once('/../../INTER-Mediator.php'); // INTER-Mediatorを読み込む\n$yaml = &lt;&lt;&lt;EOYAML // YAMLの定義をHereDoc形式で変数に代入\ncontexts: \n    -   name: person\n        records: 1\n        paging: true\n        key: id\n        query: [{field: location, operator: &gt;, value:200}]\n        sort: [{field: id, direction: asc}]\n        repeat-control: 'insert delete'\n    -   name: contact\n        key: id\n        relation:\n            -   foreign-key: person_id\n                operator: '='\n                join-field: id\n        repeat-control: 'insert delete'\n    -   name: contact_way\n        key: id\noptions:\n    authentication:\n        user: [user1]\n        group: [group2]\n        authexpired: '100000'\n        storing: credential\nconnection:\n    db-class: PDO\ndebug: false\nEOYAML;\nIM_Entry_YAML($yaml); // IM_Entry_YAML関数を呼び出す \n                JSONによる定義ファイル\n                YAMLによる定義ファイルについてここまでで説明したことは、全てJSONにも適用可能です。JSONはYAMLをより厳密にしたものであり、YAMLのパーサはJSONもパースすることできるので、あとはどちらで記述するかは好みの問題となるでしょう。JSONで記述した定義ファイルの例を挙げておきます。他の説明は、YAMLに関する説明を参照してください。\n                [\n    [\n        {\n            \"name\": \"person\",\n            \"records\": 1,\n            \"paging\": true,\n            \"key\": \"id\",\n            \"query\": [\n                {\n                    \"field\": \"location\",\n                    \"operator\": \"&gt;\",\n                    \"value\": \"200\"\n                }\n            ],\n            \"sort\": [\n                {\n                    \"field\": \"id\",\n                    \"direction\": \"asc\"\n                }\n            ],\n            \"repeat-control\": \"insert delete\",\n            }\n        },\n        {\n            \"name\": \"contact\",\n            \"key\": \"id\",\n            \"relation\": [\n                {\n                    \"foreign-key\": \"person_id\",\n                    \"join-field\": \"id\",\n                    \"operator\": \"=\"\n                }\n            ],\n            \"repeat-control\": \"insert delete\"\n        },\n        {\n            \"name\": \"contact_way\",\n            \"key\": \"id\"\n        },\n    ],\n    {\n        \"authentication\": {\n            \"user\": [\n                \"user1\"\n            ],\n            \"group\": [\n                \"group2\"\n            ],\n            \"authexpired\": \"100000\",\n            \"storing\": \"credential\"\n        }\n    },\n    {\n        \"db-class\": \"PDO\"\n    },\n    false\n]\n                定義ファイルにプログラムを追加する\n                PHPファイルで定義ファイルを構築すれば、単にIM_Entry関数を呼び出す以外にさまざまなプログラムを追加でき、場合によっては非常に便利に利用できます。ここでは、プログラム例をいくつか紹介しましょう。\n                Internet Explorerを排除する\n                INTER-Mediatorでは、ブラウザのバージョンを含めた判定が可能であり、一定以上のバージョンでないと処理に入らないような仕組みがあります。しかしながら、INTER-Mediator Ver.6以降はモダンなJavaScriptを利用しているため、Internet Explorerでは読み込むと即座にエラーになり、ブラウザ判定にすら入れません。2022年6月16 日にサポートが終了し、もっと以前よりも「使わない方が良い」ことをMicrosoft自身が頻繁にアナウンスしていることもあって、INTER-Mediator Ver.6以降はサポートしていない点については一定の理解が得られると思いますが、それでも、エラーで止まるのではなく、何かしら小綺麗なメッセージを出したいと思うところです。その場合、定義ファイルの冒頭で、以下のようにブラウザの判定を行い、Internet Explorerであれば別のページ（ここでは/ie.html）に強制的に移動してしまうようにする方法が有効です。定義ファイル自体の読み込みをscriptタグで実施していることを利用して、クライアントの挙動をサーバ側で制御してしまおうという手法です。\n                &lt;?php\n$userAgent = $_SERVER['HTTP_USER_AGENT'];\nif (stripos($userAgent, \\'MSIE\\') !== false || stripos($userAgent, \\'Trident\\') !== false) {\n    echo \"location.href=\\'/ie.html\\';\";\n    exit;\\n' +\n}\\n' +\n// 以下は通常の定義ファイルと同様\nrequire_once('lib/INTER-Mediator/INTER-Mediator.php');\n\n'IM_Entry(....\n                一定の記述でページの表示を行わなくする\n                決められた日時になると、ページが見えなくなるとか、あるいは逆の用途に、PHPの定義ファイルにプログラムを記述する方法があります。以下のプログラム例はコード内に記述された日時を超えると/endofservice.htmlにリダイレクトされます。また、定義ファイルの処理を行なっていないので、ページをそれ以前に表示できていたとしても、この時刻以降は更新処理ができないので、フィールドを描き戻してもエラーになりデータベースの更新はなされません。\n                $today = new DateTime();\n$loginLimit = new DateTime('2022-10-28 17:00:00');\nif ($loginLimit &lt; $today) {\n    echo \"location.href='/endofservice.html';\";\n    exit;\n}\n            \n        "
    },
    {
        "id": 41,
        "parent": "/ja/for-developers/",
        "path": "/ja/for-developers/localizing.html",
        "title": "ローカライズ",
        "breadcrumb": "ローカライズ",
        "body": "\n            \n                ローカライズとは？\n                INTER-Mediatorでは、ブラウザあるいはOSの言語に応じて表示内容を異なるものにする仕組みが組み込まれています。言語に応じて変更する仕組みはもちろんですが、システムが生成するメッセージを自由に変更することができるものも、特定のニーズへ対応するという点ではローカライズの一貫とも言えるでしょう。さらに、ページを多言語対応するための仕組みについて詳細に説明します。\n                メッセージのカスタマイズについて\n                メッセージのカスタマイズとしては、①システムが生成する文字列のカスタマイズ、②特定のHTML要素内の文字列を言語に応じて指定、③データベースから取り出した文字列の指定に大きく分かれます。本来ローカライズとなると、②③による仕組みを指すことが通常ですが、まずここでは①についてもまとめておきます。\n                ①については、[A] 定義ファイルで指定する文字列と、[B] メッセージを管理するクラスの定義文字列とその文字列のカスタマイズが可能です。①[A]は、例えば、repeat-controlキーにinsertというキーワードを指定すれば、「追加」ボタンが表示されますが、そのボタンの名前を定義ファイルのbutton-namesキー以下の配列で指定することができます。これについては、さまざまな側面でのカスタマイズが可能です。こちらのページにある定義ファイルのリファレンスを参照してください。\n                ①[B]は、PHPのプログラムに関わる話になります。INTER-Mediatorが表示するメッセージの一部については、PHPのクラスに指定されています。メッセージは、INTERMediator\\Message\\MessageStrings.phpファイルにあるMessageStringsクラスに定義されています。このクラスは英語のメッセージを定義していて、日本語についてはINTERMediator\\Message\\MessageStrings_ja.phpファイルに、MessageStrings_jaクラスとして定義されています。システムが割り当てた番号に応じてメッセージが表示されるので、同様な方法で日本語以外の言語についても定義が可能です。このクラスを修正すれば、任意のメッセージを表示することができますが、通常はフレームワーク内部のクラスを変更するのはかなり大変なことになります。そこで、アプリケーション単位で必要なメッセージだけを変更できるようにしています。そのためには、params.phpファイルに変数定義を行います。以下はその例です。\n                $messages['default'][1022] = \"We don\\'t support Internet Explorer. We\\'d like you to access by Edge or any other major browsers.\";\n$messages['ja'][1022] = \"Internet Explorerは使用できません。Edgeあるいは他の一般的なブラウザをご利用ください。\";\n                まず、$messages変数に配列として記述を行います。1次元目は言語です。英語については、'default'で指定をします。日本語は'ja'です。2次元目はメッセージの種類です。ここでは1022番のメッセージがイコールの右側の文字列に置き換わります。番号については、MessageStrings.phpクラスを参照して、該当するメッセージの番号を特定します。\n                言語に応じてHTML要素内の文字列を切り替える\n                前述の②の仕組みをここで説明します。ページ内に例えばタイトルを表示するとき、日本語のユーザは「請求書一覧」、英語のユーザは「Invoice List」と表示されるようにする仕組みです。まず、ページファイルの中の要素に、data-im-locale属性を指定を指定します。以下は例です。\n                 &lt;h1 data-im-locale=\"page|title\"&gt;Contact Management&lt;/h1&gt;\n&lt;table&gt;\n  &lt;thead&gt;\n  &lt;tr&gt;\n    &lt;th data-im-locale=\"category\"&gt;category&lt;/th&gt;...\n               一方、ページファイルが利用している定義ファイルのオプション指定の「terms/言語名」以下に、まず、言語名を2文字で記載して、さらにその下位の項目としてページファイルのdata-im-locale属性に指定したキーワードをキーとして値を記述します。以下は、YAML表記で示しますが、もちろん、PHPの配列で記述してもかまいません。\n                 options:\n  terms:\n    en:\n      header: INTER-Mediator - Sample - Form Style/MySQL\n      category: Category\n      check: Check\n      page:\n        title: Contact Management (Sample for Several Fundamental Features)\n    ja:\n      header: INTER-Mediator - サンプル - フォーム形式/MySQL\n      category: カテゴリ\n      check: チェック\n      page:\n        title: コンタクト先管理 (さまざまな機能を確認するためのサンプル)\n                ページファイルを表示してページを構築した後は、元々「category」と記述されているthタグのテキストは、日本語のブラウザで参照すると「カテゴリ」、英語のブラウザで参照すると「Category」となります。つまり、定義ファイルのtermsキーで指定した文字列に置き換わります。英語と日本語以外のブラウザで表示すると、ページ内容の要素のまま「category」と表示されます。\n                terms以下のキーは、階層的に配置することもできます。ページファイルのh1要素のdata-im-locale属性は「page|title」となっています。|でキーを区切って階層的に、つまり、pageキーの中のtitleキーでページに表示する文字列を指定できるので、分類をすることも可能です。\n                言語に応じてデータベースから得られた文字列を切り替える\n                前述の③の仕組みをここで説明します。以下のようにポップアップメニューが得られる要素がページファイルに記載されているとします。ポップアップの選択肢はoption要素を使っており、そこではcor_way_kindnameコンテキストが使われています。この要素は、Sample_formで使われているあるポップアップメニューの選択肢に応じて異なる選択肢を出すポップアップメニューで使われているちょっと複雑なものですが、ここではコンテキストとしてどのようなものが得られるかを表で示しますので、対照してください。\n                 &lt;select data-im=\"contact@kind\" class=\"_im_test-contact-kind\"&gt;\n  &lt;option data-im=\"cor_way_kindname@kind_id@value cor_way_kindname@name_kind\"\n     data-im-locale=\"way\"&gt;&lt;/option&gt;\n&lt;/select&gt;\n＊＊＊＊cor_way_kindnameコンテキストの結果＊＊＊＊\n+----+--------+---------+-------------+\n| id | way_id | kind_id | name_kind   |\n+----+--------+---------+-------------+\n|  1 |      4 |       4 | Talk        |\n|  2 |      4 |       5 | Meet        |\n|  3 |      5 |       6 | Calling     |\n|  4 |      4 |       7 | Meeting     |\n|  5 |      5 |       8 | Mail        |\n|  6 |      5 |       9 | Email       |\n|  7 |      6 |      10 | See on Web  |\n|  8 |      5 |      11 | See on Chat |\n|  9 |      6 |      12 | Twitter     |\n| 10 |      5 |      12 | Twitter     |\n| 11 |      6 |      13 | Conference  |\n+----+--------+---------+-------------+\n                option要素ではdata-im-localeが指定されていますが、さらにdata-imもある場合は、データベースから取り出した結果を、ブラウザの言語に応じて置き換えることを行います。ページ上に見えている要素の文字列を置き換えますが、置き換えた結果をデータベースに書き戻すことは行わず、あくまで「見えるもの」だけを置き換えるようにします。上記、ポップアップメニュー用に定義ファイルで以下のようなtermsキーの記述があるとします。termsキーの直下は言語を示す文字列、その次はdata-im-localeに指定したキーワード、さらにその下にデータベースから得られる文字列をキーとして指定します。\n                 options:\n  terms:\n    en:\n      way:\n        Calling: Telephone\n        Mail: Paper Mail\n        Email: Electronic Mail\n    ja:\n      way:\n        Calling: 電話\n        Mail: 手紙\n        Email: 電子メール\n                例えば、cor_way_kindnameコンテキストのid=6は「Email」です。この値がデータベースから取り出されると、termsキーの内容を探り、日本語のブラウザでは「電子メール」、英語のブラウザでは「Electric Mail」がポップアップメニューに表示されます。これらを選択した場合、value要素にはkind_idの値があるので、データベースに書き戻されるのは数値になります。\n                params.phpファイルに文字列置き換えの定義は可能\n                置き換える文字列の指定は、定義ファイルのoptions/terms以下だけでなく、params.phpファイルにも指定できます。つまり、複数のページで共通の置き換え文字列を指定することができます。params.phpファイルに$terms変数を定義して、定義ファイルの内容と同じ構成で配列を定義します。以下はその例です。\n                 $terms = [\n    'en' =&gt; [\n        'header' =&gt; 'INTER-Mediator - Sample - Form Style/MySQL',\n        'page' =&gt; [\n            'title' =&gt; 'Contact Management (Sample for Several Fundamental Features)',\n        ],\n    ],\n    'ja' =&gt; [\n        'header' =&gt; 'INTER-Mediator - サンプル - フォーム形式/MySQL',\n        'page' =&gt; [\n            'title' =&gt; 'コンタクト先管理 (さまざまな機能を確認するためのサンプル)',\n        ],\n        'category' =&gt; 'カテゴリ',\n        'check' =&gt; 'チェック',\n   ],\n];\n            \n        "
    },
    {
        "id": 42,
        "parent": "/ja/for-developers/",
        "path": "/ja/for-programmers/exporting.html",
        "title": "テーブル内容のエクスポート",
        "breadcrumb": "エクスポート",
        "body": "\n            \n                エクスポート機能の実装\n                メディアクラスとその拡張点において、「データ生成を指定したクラスにさせ生成結果を返す」という方法を利用することで、テーブルの内容やあるいはビューの内容などをCSVファイル等にエクスポートすることが可能です。そのような拡張クラスを作成すれば良いのですが、汎用的なエクスポートクラスを利用することで、より簡単にエクスポートを実装することができます。\n                汎用クラスを用いたエクスポート\n                aタグや、あるいはbuttonタグをクリックした後に、以下のリンクにアクセスします。そのページで使っている定義ファイルへのパスは、scriptタグのsrcに指定しているものと同じです。そのリンクにmediaパラメータを指定しますが、そのキーの値は、プロトコルとして「class」を指定し、続いて汎用エクスポートクラスのパスとして「INTERMediator\\DB\\Export」を指定し、さらにパスに利用するコンテキスト名をつなげます。コンテキスト名は、定義ファイルに定義されたコンテキストである必要があります。\n定義ファイル?media=class://INTERMediator\\DB\\Export/コンテキスト名(/条件...)\n                これにより、指定したコンテキストのデータを含むShift-JIS化したCSVファイルがダウンロードされます。aタグ等をクリックしても、ページ遷移はしないはずです。そのほか、CSVファイルの1行目にはフィールド名がそのまま入り、2行目からデータとなります。1つのコンテキストの結果が全部得られます。つまり、コンテキストに存在するフィールド全て、レコード全てが出力されます。ファイル名は「Exported-日付時刻」となります。また、改行コードは、0x0Aのみとなります。ページ上に表示しているコンテキストだと、例えば、20レコードずつ表示する設定になっていると思います。しかしながら、エクスポートでは全部のレコードが欲しいことになるかと思います。その意味では、ページ上のコンテキストとは別に、エクスポート用のコンテキストを用意する方が、ニーズに合致した結果が得られるでしょう。\n                エクスポート機能のカスタマイズ\n                エクスポートの処理をカスタマイズすることができます。例えば、以下のようなExportSampleクラスを、定義ファイルと同じディレクトリに、ExportSample.phpというファイル名で保存したとします。そうすれば、前述のエクスポートのリンク先は「定義ファイル?media=class://ExportSample/コンテキスト名」のようになります。既存のエクスポートのためのクラスを拡張しており、その動作を変更できるということになります。\n&lt;?php\n\nclass ExportSample extends \\INTERMediator\\DB\\Export\n{\n    protected $keysAndLabels = [\n        \"unitprice\" =&gt; \"単価\",\n        \"name\" =&gt; \"商品名\",\n        \"taxrate\" =&gt; \"消費税率\",\n        \"photofile\" =&gt; \"画像ファイル名\",\n        \"acknowledgement\" =&gt; \"画像謝辞\",\n        \"ack_link\" =&gt; \"謝辞リンク\",\n        \"id\" =&gt; \"ID\",\n        \"category_id\" =&gt; \"カテゴリID\",\n    ];\n\n    protected $fileNamePrefix = \"Exported-\";\n    protected $fileExtension = \"csv\";\n    protected $encoding = \"SJIS\";\n    protected $fieldSeparator = ',';\n    protected $quote = '\"';\n    protected $endOfLine = \"\\n\";\n\n    public function processing($contextData, $options){}\n}\n                まず、1行目のフィールド名のカスタマイズに加えて、取り出すフィールドのカスタマイズは$keysAndLabelsプロパティに連想配列で指定します。コンテキストのフィールド名として、出力に加えたいフィールドのフィールド名をキーとします。その値は出力結果の1行目に登場する名目のカラム名を指定します。\n                $fileNamePrefixは、ファイル名に指定する名前の前半部分を指定します。ファイル名の拡張子は$fileExtensionで指定します。出力データのエンコーディングは$encodingで指定します。フィールド区切りは$fieldSeparator、行区切りは$endOfLineで指定できます。文字列データのクオート記号は$quoteで指定します。これらは既定値のままで良いのであれば、定義する必要はありません。変更したい場合にのみ定義をします。\n                場合によっては、processingメソッドを指定して、処理プログラムを自分で書くこともできます。最初の引数には、コンテキストで得られた結果が連想配列の配列で得られるので、あとは自由に加工をして、echo等で出力すれば良いでしょう。また、元になっているExportクラスは、league/csvというライブラリを利用しています。INTER-Mediatorの中にもインストールしてあるので、その仕組みを使うことも検討すれば良いでしょう。なお、Exportクラスのprocessingメソッドを呼び出せば、通常のCSV出力が可能なので、上記ExportSampleクラスのprocessingメソッドでは、引数で得られたフィールドの内容を加工して、Exportクラスのprocessingメソッドを呼び出すということも可能です。\n            \n        "
    },
    {
        "id": 43,
        "parent": "/ja/for-programmers/",
        "path": "/ja/for-programmers/logging.html",
        "title": "ローカライズ",
        "breadcrumb": "データベース処理のログ記録",
        "body": "\n            \n                ログ作成機能の利用方法\n                INTER-Mediatorでは、デーベース処理は、クライアントからサーバーに対して送られて実施しています。その単位でのログ作成機能が組み込まれています。既定値ではログは作成しない状態になっているので、ログを作成するにはログ作成可能な状態にする必要があります。また、ログ参照のためのシンプルなビューアも用意してありますが、アプリケーションで利用するとなると、ログデータから独自の手法でアプリケーションに必要なデータの取り出しが必要になるでしょう。\n                ログ作成機能の実装\n                ログを保存するためのテーブルoperationlogを用意する必要があります。テーブルの名前はカスタマイズできません。例えば、MySQL向けには以下のように定義されています。INTER-Mediatorのディストリビューションにあるdist-docsディレクトリにあるデータベースごとのサンプルスキーマから取り出すと良いでしょう。なお、INTER-Mediatorが使用するのはerrorフィールドまでで、conditionNおよびfieldNフィールドは、カスタマイズした結果を保存するためのフィールドとなります。ログビューアは、samples/Log_Supportディレクトリに用意してありますので、適時改造して利用してください。\n                CREATE TABLE operationlog\n(\n    id            INT AUTO_INCREMENT,\n    dt            TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    user          VARCHAR(48),\n    client_id_in  VARCHAR(48),\n    client_id_out VARCHAR(48),\n    require_auth  BIT(1),\n    set_auth      BIT(1),\n    client_ip     VARCHAR(60),\n    path          VARCHAR(256),\n    access        VARCHAR(20),\n    context       VARCHAR(50),\n    get_data      TEXT,\n    post_data     TEXT,\n    result        TEXT,\n    error         TEXT,\n    condition0    VARCHAR(50),\n    condition1    VARCHAR(50),\n    condition2    VARCHAR(50),\n    condition3    VARCHAR(50),\n    condition4    VARCHAR(50),\n    field0        TEXT,\n    field1        TEXT,\n    field2        TEXT,\n    field3        TEXT,\n    field4        TEXT,\n    field5        TEXT,\n    field6        TEXT,\n    field7        TEXT,\n    field8        TEXT,\n    field9        TEXT,\n    PRIMARY KEY (id)\n) CHARACTER SET utf8mb4,\n  COLLATE utf8mb4_unicode_ci\n  ENGINE = InnoDB;\n                ログ作成機能の利用とカスタマイズ\n                ログの機能は、params.phpに定義した変数で指定します。以下は、関連する変数定義部分を集めたものです。まず、最初の$accessLogLevel変数に1あるいは2を代入すると、ログのテーブルにレコードを作り始めます。もちろん、operationlogテーブルへの書き込みができる状態になっている必要があります。\n                $accessLogLevel = 2; // false: No logging, 1: without data, 2: with data\n$dbClassLog = $dbClass; // データベースへの接続情報\n$dbDSNLog = $dbDSN;\n$dbUserLog = $dbUser;\n$dbPasswordLog = $dbPassword;\n$recordingContexts = false; // ログを取りたいコンテキスト名の配列\n$recordingOperations = false; // ログを取りたいオペレーションの配列\n$dontRecordTheme = false; // テーマのアクセスをログに取るかどうか\n$dontRecordChallenge = false; // 認証のチャレンジをログに取るかどうか\n$dontRecordDownload = false; // ファイルのダウンロードをログに取るかどうか\n$dontRecordDownloadNoGet = false; // ダウンロード時に$_GETをログに取るかどうか\n$accessLogExtensionClass = 'LoggingExt'; // 拡張クラスの名前\n                2行目の$dbClassLogから$dbPasswordLogまでは、ログのデータを書き込むときに利用するデータベースの接続情報です。通常は、使用するデータベースの中にoperationlogテーブルを設けるので、既存のデータを変数より単にコピーしているだけになります。異なるデータベースに書き込みたい場合には、ここがカスタマイズポイントになります。\n                最後の拡張クラスの指定を除き、他の変数は、何らかの制限を行うものです。例えば、cssやギアの画像の取り出しのアクセスを残す必要はないということであれば、$dontRecordThemeにtrueを設定します。特定のコンテキストのみ、ログを取りたい場合には、$recordingContexts = ['context_name']; のように、コンテキスト名の配列を指定します。$recordingOperationsで利用できるキーワードは、read、create、update、deleteなど、クライアントからの通信のaccess=パラメータに指定される文字列で、記録したい操作の文字列を配列で指定します。そのほかはコメントに記載の説明を参考にしてください。dontRecordで始まる変数はいずれも論理値を指定します。\n                ログの取得結果を検討する\n                実際に取得したログデータをまずは理解しましょう。以下に示したものが、operationlogテーブルの1つのレコードです。idなどのキーがフィールド名を示していて、その値がキーに対応して記述されています。以下の例は、読み出しのリクエストが発生した場合を示しています。\n                {'id':'72',\n 'dt':'2020-08-12 11:35:50',\n 'user':'user1', \n 'client_id_in':'43342bbf6e295752847fee311262dc9393ae0ce0', \n 'client_id_out':'5ceba592ac317f662c1dcd42d8fb73fc7ed63664', \n 'require_auth':'0',\n 'set_auth':'1', \n 'client_ip':'::1',\n 'path':'/samples/Sample_webpage/include_authAll_MySQL.php',\n 'access':'read', \n 'context':'testtable',\n 'get_data':'', \n 'post_data':'['access' =&gt; 'read','name' =&gt; 'testtable',\n   'field_0' =&gt; 'dt1','field_1' =&gt; 'vc1','field_2' =&gt; 'vc1','field_3' =&gt; 'vc1','start' =&gt; '0',\n   'records' =&gt; '10000',\n   'clientid' =&gt; '43342bbf6e295752847fee311262dc9393ae0ce0',\n   'authuser' =&gt; 'user1',\n   'response' =&gt; 'ae5cfb247c89f8fc6208a854a006fd883fab475d46ca6918dc85d6ebe8ca1975',\n   'notifyid' =&gt; 'f58e365f01b1ce05303512e127d3bafddf446ca75b3ed534d38495b928419be0',]', \n 'result':'[\n   'dbresult' =&gt; 'Query result includes 1 records.', // データをなしに設定した場合\n   'resultCount' =&gt; '1',\n   'totalCount' =&gt; '1',\n   'getRequireAuthorization' =&gt; true,\n   'challenge' =&gt; '09cd7c80adebaab86b7e99ba54455354',\n   'clientid' =&gt; '5ceba592ac317f662c1dcd42d8fb73fc7ed63664',\n   'requireAuth' =&gt; false,\n ]', \n 'error':'', }\n                まず、最初のidフィールドは、operationlogテーブルでの自動連番による主キーなので、データそのものではありません。dtフィールドは、サーバ側での発生時刻です。client_ipフィールドは、クライアントつまりブラウザが稼働しているホストのIPアドレスです。\n                ログが発生した理由は、path、context、accessからわかります。つまり、pathはどの定義ファイルで発生したものなのか、そしてcontextはコンテキストの名前、accessは処理の種類を示しています。そして、実際にやりとりしたデータは、get_data、post_data、resultの各フィールドに記述されます。いずれも配列をvar_export関数で文字列化して、それぞれフィールドには文字列として入力されています。get_data、post_dataが、クライアントからのリクエストで、resultがサーバのレスポンスになります。もちろん、$_GET、$_POSTの値が、それぞれget_data、post_dataフィールドに入ります。エラーが発生すれば、errorフィールドに文字列で情報が入力されます。\n                このログは、params.phpファイルの$accessLogLevel変数が1、つまり読み出したデータを含めないという設定になっているので、resultフィールドのdbresultキーの値は単に文字列のメッセージとなっています。変数値を2にすると、ここに読み出したレコードの配列が加わるので、かなり長い文字列になる可能性もあります。\n                認証の処理が行われたかどうかは、set_authフィールドの値でわかります。そして、ログインしているユーザ名はuserフィールドでわかります。client_id_inとclient_id_outは、それぞれ、認証のためにクライアントを識別するためのランダムなコードで、リクエストとレスポンスで使われている値になります。また、同じ値が、post_dataとresultにも見られます。\n                以下のログレコードの例は、フィールドの値を更新した時のものです。この例では、認証は行われておらず、set_authはnullになっています。path、context、accessを見ると、定義ファイル、コンテキスト名としてcontact、そして更新処理を示すupdateの文字列が見えています。どのレコードのどのフィールドを、どんな値に変更したのかは、post_dataから判断できます。condition0*の3つの項目が検索条件で、つまりはコンテキストcontactに対して、id=1という条件で検索をしたレコードが更新対象になります。そして、field*とvalue*を参照することで、summaryフィールドの値がTelephone2という文字列に変更されたことがわかります。\n                 {id: 28,\n  access: \"update\",\n  client_id_in: null,\n  client_id_out: null,\n  client_ip: \"::1\",\n  context: \"contact\",\n  dt: \"2022-04-08 10:46:03\",\n  error: null,\n  get_data: null,\n  path: \"/samples/Sample_form/include_MySQL.php\",\n  post_data: \"[\n    access =&gt; update,\n    name =&gt; contact,\n    condition0field =&gt; id, condition0operator =&gt; =, condition0value =&gt; 1,\n    field_0 =&gt; summary, value_0 =&gt; Telephone2,\n    notifyid =&gt; ce3d9dc918bb5220091cda9a93a9f7a8765ef95e518cc4aabed0ece9e6327f72\n  ]\",\n  require_auth: null,\n  result: \"[\n    dbresult =&gt; 'Query result includes 1 records.',\n    getRequireAuthorization =&gt; , requireAuth =&gt;\n  ]\",\n  set_auth: null,\n  user: null,\n}\n                このように、POSTデータをまとめて記録してしまっていますが、あまり細かい処理を入れてパフォーマンスに影響することを避けるためでもあります。しかしながら、データをログに入れるとかなり長いものになってしまうので、原則としては必要な情報のみをログに残すように調整をするのが良いと考えられます。\n                ログ保存結果のカスタマイズ\n                例えばデータの修正履歴を記録した場合、contextはフィールドがあるとして、どのレコードかを示す主キー値は、既定の状態ではフィールドに分離されていません。前述のように、post_dataフィールドの内容から求めることは不可能ではないものの、リレーションシップの対象とするデータは単独のフィールドに入っていないとパフォーマンスが相当悪くなりそうです。こうした用途を実現するために、operationlogテーブルのフィールドを増やすことができます。サンプルのスキーマにあるテーブルは、すでに適当にフィールドを増やした状態になっていますが、フィールド名などは任意にできるので、好みのフィールド構成にしてください。\n                そして、以下のようなクラスを作り、この場合だとLoggingExt.phpファイルに保存します。場所は定義ファイルと同じディレクトリがまずは確実です。params.phpファイルの$accessLogExtensionClass変数には、この作成したクラス名を指定します。このクラスは、INTERMediator\\DB\\Support\\OperationLogExtensionを拡張して定義します。\n                ログ処理のカスタマイズクラスは、extendingFields()とvalueForField($field)の2つのメソッドを実装しなければなりません。extendingFields()は追加するフィールドのフィールド名を配列で返します。valueForField($field)は引数に追加したフィールドのフィールド名が指定されて呼び出されるので、そのフィールドに保存したい値を返します。\n                以下の例では、condition0フィールドには、post_dataに入っているcondition0valueキーの値を取り出して返します。フィールドがいくつかあれば、ifあるいはswith等を用いて分岐させて、それぞれ要求されたフィールド名に応じた値を返すようにプログラムを作る必要があります。\n                class LoggingExt extends INTERMediator\\DB\\Support\\OperationLogExtension\n{\n    public function extendingFields()\n    {\n        return ['condition0','field0','field1']; // 追加するフィールドの配列\n    }\n\n    public function valueForField($field) // フィールドに対応する値を返す\n    {\n        if(strpos($field, 'condition') === 0) {\n            return isset($_POST['condition0value']) ? $_POST['condition0value'] : NULL;\n        } else if(strpos($field, 'field_') === 0) {\n            $n = substr($field, 6);\n            return isset($_POST['value_'.$n]) ? $_POST['value_'.$n] : NULL;\n        }\n    }\n}\n                現実にはpost_dataにどんなデータがやってくるのかを理解した上でないと、カスタマイズのためのクラスの記述は難しいでしょう。実際に記録されたログを見ながら検討をして、必要なデータを取り出すようにしましょう。\n                また、operationlogのテンプレートは追加フィールドは文字列で定義していますが、例えば、元々INT型だったフィールドの値を取り出して保存する場合は、追加フィールドもINT型にする方が、リレーションシップを構成することを考えれば望ましいと考えられます。\n                \n                \n                \n                \n            \n        "
    },
    {
        "id": 1001,
        "parent": "/ja/tutorial/",
        "path": "/ja/tutorial/proof-01.html",
        "title": "INTER-Mediatorの概要と演習の準備",
        "breadcrumb": "chapter 1",
        "body": "→Chapter 1INTER-Mediatorの概要と演習の準備この章は、INTER-Mediator Ver.10をもとに記載しました。まず最初に、INTER-Mediatorがどのようなフレームワークで、どういった用途に向くのかなどをまとめます。その後、2章以降での演習の環境を整える方法を説明します。→1-1INTER-Mediatorの特徴Webアプリケーションは、Webブラウザーで参照ができ、各種のデータをデータベースに保持するというのがおおまかな動きになります。そうした動作をさせるべく、基本的なプログラミングから始めるのがWebアプリケーション開発の原則ですが、フレームワークを使うことで効率的に開発ができるようになります。一方、フレームワークにはそのフレームワーク独自の開発モデルがあります。ここでINTER-Mediatorの特徴を、開発者向けに解説します。→→MVCフレームワークが主流のWeb開発　Webアプリケーションは古い時代はCGIと呼ばれ、Perlなどの言語を使い、BBSや製品情報ページのような動的にデータが埋め込まれるサイトがWebの黎明期から作られていました。その後、より高度なシステム開発を目指してオブジェクト指向技術が導入され、MVCフレームワークが主流となりました。MVCフレームワークは、サーバーサイドで稼働するソフトウェアを、モデル（Model）、ビュー（View）、コントローラー（Controller）というコンポーネントに分割して管理・開発する手法です。Web開発以前から存在した代表的なアーキテクチャですが、JavaEEでは、クライアントからのリクエストをコントローラーが受け付けて、データベースおよびそれを抽象化したモデルからデータを取り出し、それをビューに渡して整えるといった流れが確立されました。これを旧来のMVCと対比するために「MVC2」と呼ばれることもあります。　MVCモデルの導入により、複雑なプロセスが絡むシステム開発が、そうした方針がない時代に比べて系統的にできるようになり、より巨大なシステム開発へと発展しました。また、ソフトウェアを要素に分割するために、複数の開発者による作業も系統的にできるようになりました。そして、MVCアーキテクチャを採用したアプリケーションを作りやすいようなフレームワークへと発展してきています。当初はJavaが中心でしたが、Ruby on Railsが「設定よりも規約」というコンセプトを導入し、CakePHPをはじめとしたPHP言語ベースのものや、DjangoなどのPythonベースのもの、さらにはNode.jsとしてJavaScriptベースのサーバーサイドのフレームワークが登場しました。　これらのフレームワークの特徴は、データベースと連動するということです。データベースとしては、リレーショナルデータベースが主流ですが、最近ではNoSQLつまりキーバリューストア形式のものも実務に使われ始めています。つまり、Web上でデータベースを運用するためのアプリケーション開発を行うためのMVCフレームワークが、ソフトウェアの主要なジャンルとなってきたわけです。　MVCフレームワークは実績を重ねており、十分に実用的であることは疑う余地はありません。しかしながら、必ず手続き的なプログラミングが必要になります。プログラムは長さよりも、それを記述するための背景知識がどれくらい必要かということで、開発効率や、あるいはメンテナンスの効率が変わります。言語によるプログラミングの知識に加えて、フレームワークを利用する知識が必要になり、学習コストがかかると同時に、専門的に取り組む環境がないと十分な成果物を開発可能にはなれないということもあります。したがって、そのためにプログラミングの勉強を頑張るということも、もちろんひとつの選択肢です。　しかしながら、開発を効率良く行う、つまり少ない学習コストと、メンテナンス作業の軽減などを目指す方向もあります。Web以外の世界では、FileMaker ProやMicrosoft Accessといったデータベースアプリケーションソフトは、画面レイアウトとテーブルのフィールドを連動させるような仕組みで効率良くデータベースを利用するアプリケーションを開発できます。また、Microsoft Excelはエンドユーザー開発の中心的なアプリケーションであるとも言えます。こうした「手軽さ」をWeb開発でも実現できないのかと考えたのがINTER-Mediatorのきっかけです。→INTER-Mediatorの概要　Web黎明期には、HTML上に属性などを加えることで、データベース連動のWebアプリケーションを開発する仕組みが各社から発売されていました。現在でも残るものとしてはAdobe ColdFusionがありますが、FileMaker社もCDMLという言語でのWeb開発を、ファイルメーカーPro 6まではできるようにしていました。しかしながら、これらのフレームワークは今では主流どころかほとんど消えています。理由は明白で、簡単なアプリケーションしか作れなかったからです。手軽にフィールドのデータをWebページ上のテキストフィールドに見せることはできます。しかし、繰り返しや条件分岐などをページ上で行うためには、HTMLに定義されていない特別なキーワードを書かなければなりません。また、表示結果を修正できるようにするためには、表示結果がフォームとなってサブミットが可能になるようにするといったパズルのようなページ作成が必要でした。仮にそれらを頑張ってできたとしても、追加的な処理の記述が極めて限られています。ColdFusionは、HTML上でほとんど手続き的なプログラミング言語並みの記述力を有し、さらにサーバーサイドの処理をJavaで記述できるように複雑な仕組みを取り入れたことで現在でもシステム自体は残っているため、製品は販売されているのだと思われます。しかし、結果的には、最初からJavaやPHPで作っていた方が、シンプルに済んでいたかもしれません。　INTER-Mediatorでは、「→バインド」という仕組みを実現することで、データベース連動アプリケーションとして稼働します。「バインド」とは、Webページ上のテキストフィールドと、データベース内のテーブルのフィールドを論理的に結合する仕組みです。簡単な設定のみで、Webページ上のオブジェクトと、データベースの連携が可能になります。つまり、フィールドの値をページに表示し、ユーザーが編集すれば、その結果を書き戻すという処理です。一般には「バインド」と呼ばれるこうした処理は、FileMakerやAccessのようなデスクトップアプリケーションでは当たり前でした。Web関連のフレームワークではWebObjectsがそうした仕組みを持っていました。しかしながら、バインドの仕組みを持たないフレームワークが使われることも増えて、一時期はあまりなじみのない機能になっていました。最近では、AngularJSやKnockoutJSのようなフロントエンドのツールでバインドという仕組みが見直されています。INTER-Mediatorも、バインドのサポートが非常に重要な仕組みとなっています。　さらに、INTER-Mediatorでは、→繰り返しの処理も、特別なキーワードを記述しなくてもできるようになっています。詳細は次の章以降で説明しますが、例えばテーブルであれば、TRタグで1レコード分の表示領域を定義すれば、それをレコードの数だけ複製して繰り返せば良いのです。繰り返し対象になる要素群と、それを束ねる要素は確定できるので、結果として、データベースとバインドした要素があるTRレコードは、何も記述しなくても、レコードの数だけ複製されるということを実現しました。図1-1-1　INTER-Mediatorでのバインドと繰り返しの処理　また、この繰り返し可能な記述を階層化させること、例えば、テーブルの中のひとつのセルにまた別のテーブルがあるような構造を記述することで、リレーションシップに基づく関連レコードを内側のテーブルに表示させることができます。FileMakerで言えばポータルですが、2段階だけではなく、多重に実施することができます。こうした繰り返しや、さらにはリレーションシップに基づく関連レコードの繰り返しは、AngularJSやKnockoutJSにはない機能です。　INTER-Mediatorの大きな特徴は、HTMLの中に特有の記述を加えることで、データベースと連動するWebページが作成できることです。このWebページのテンプレートとなるHTMLファイルを「→ページファイル」と呼びます。ページファイルは純粋なHTMLで記述でき、結果的にその内容は宣言的に記述できます。→開発プロセスとコード作成　INTER-Mediatorでは、HTMLページ以外に、PHPでの設定ファイル「→定義ファイル」を作成します。直接記述する場合には、PHPの連想配列を記述することになり、文字列の記述や正しく区切るなどの文法知識の基本は知っておく必要はありますが、Webアプリケーション形式のエディターもあるので、必ずしもPHP言語での記述しかできないわけではありません。また、記述するのは単にキーと値のセットなので、繰り返しや条件を記述する必要はなく、宣言的な記述であると言えます。　このような別ファイルを用意する理由は、データベースからの取り出し設定の使い回しをするためです。ひとつの設定には単にテーブル名があるだけだけでなく、検索条件やソートの基準フィールドの指定もあります。これら、単なるテーブルそのものではなく、条件等によって意味付けられたリレーションであるとして「→コンテキスト」と呼びます。ひとつのコンテキストをページの複数の場所で利用したり、異なるページ間で共有できるように、HTMLページとは別に定義ファイルを作成します。　また、定義ファイルは、サーバーサイドに設置され、INTER-Mediatorにより中身を書き換えてクライアントに送り込まれます。したがって、データベース利用のためのパスワードなどを記述しても、その情報はクライアントには伝達されません。定義ファイルには、Webアプリケーションに設定する認証や認可のための記述も行います。しかしながら、設定ファイルはサーバー上に配置し、クライアントサイドで意図しない変更ができないようになっています。つまり、セキュリティを担保する設定ができるのも定義ファイルの存在理由です。　INTER-Mediatorのひとつのページは、ページファイルと定義ファイルから成ります。しかしながら、これらを作成する以前に、→データベースそのものの準備が必要です。つまり、実際のアプリケーションに応じたスキーマを定義し、それをデータベースに適用して、データの入出力が可能にしておく必要があります。したがって、要求定義を元にスキーマを定義するまでの上流工程については、一般的な開発と何ら変わりません。また、おおまかなスキーマ定義をするのではなく、きちんと詳細まで考慮したスキーマ定義をしておく方が、アプリケーション開発の効率は高くなります。INTER-Mediatorでは手続き的な言語での開発にありがちな、「後からなんとかする」という枠組みはあまり持ち合わせていません。きちんとした上流工程を踏むためには、業務分析やスキーマ定義は専門家に依頼するか、協力を要請することも必要でしょう。　実際の開発は、HTMLによるページファイルの構築からスタートし、必要なコンテキストを定義ファイルに記述しながら進めることになります。この2つのファイルの→宣言的な記述以外に、クライアントおよびサーバーの処理に手続き的なプログラムを追加することもできます。ただし、多くの一般的な処理は簡単な宣言記述をするだけで実現されるように設計してあります。まずは宣言的な記述で組み立てて、その範囲を超える場合には手続き的なプログラミングを行うことになるでしょう。　作成したWebページのメンテナンスも、ページファイルや定義ファイルの変更の範囲内であれば、宣言的な記述で可能です。特に、この部分を、業務システムであればエンドユーザーが比較的広範囲に行うことができると考えられます。宣言的な記述の部分は簡単に習得できますので、エンドユーザーによる取り組みが現実的になります。もちろん、手続き的なプログラミングの部分を変更したり、スキーマ変更が発生すると、メンテナンス作業は難しくなります。しかしながら、MVCタイプのフレームワークであれば、多くのメンテナンス作業は手続き的なプログラミングの修正で行います。一方、INTER-Mediatorでは、ページ構成の修正などはHTMLのページファイル内の宣言記述を修正するだけで済みます。INTER-Mediatorでは宣言的な記述での修正作業範囲内である場合が多くあります。ある程度の開発ができた段階から、メンテナンス作業を業務システムのエンドユーザーが行うことで、システムの価値を保持して継続的な利用を低コストで実現できます。　開発をどのように捉えてINTER-Mediatorを設計したのかという点については、開発者の新居雅行による「マニフェスト」や「製品の特徴」のページでも説明しています。また、開発プロセスに対するさらに詳細な検討は、新居雅行の博士論文「ユーザー開発や保守が可能なWebアプリケーションフレームワークの開発」（2014年に受理）をご覧いただくこともできます。→→手続き的なプログラミングが必要になる場合　INTER-Mediatorでは、手続き的なプログラミングによる機能拡張が可能です。サーバーサイドはPHP、クライアントサイドはJavaScriptで記述します。以前のバージョンでは、ややわかりづらいAPIが公開されていましたが、Ver.9でデータベース処理についての記述がシンプルにできるAPIを用意しているので、開発効率はバージョンを追うごとに高くなっています。　まず、サーバーサイドはMVCタイプではなく、アスペクト指向プログラミング（Aspect Oriented Programming）による拡張が可能です。データベースに対する処理を行う前後に、任意のプログラムを追加することができます。データベース処理前は、クライアントから送られる条件や、更新するデータを受け取り、それを加工することができます。クエリー結果や新規レコード、レコード更新した場合には、その処理後に、データベースのデータを受け取って、異なる形式にしてクライアントに送ることができます。例えば、集計処理を行うような仕組みを、元データの取り出しした直後に実装することで、サーバーサイドに付け加えることができるということです。データベースの出力は、連想配列の配列で得られ、その結果を同様に連想配列の配列で返せば良いので、扱うデータは配列です。連想配列では、フィールド名がキーでありそれに対する値がフィールドの値になったものです。　一方、クライアントサイドのプログラミングは、バインド以上の処理が必要なときに組み込みます。例えば、ボタンを押すことで、いくつかのレコードを作成したりあるいは特定の値に更新するといった処理がそれに相当します。クライアントプログラミング向けにはさまざまなAPIが用意されています。また、クリックに対応するDIV要素を確保したいときも、手続き的なプログラミングが必要です。検索機能の組み込みを手続き的なプログラミングを行わなくてもできる手法も用意されていますが、条件設定になんらかのロジックが含まれる場合にはプログラミングが必要になることもあるでしょう。→INTER-Mediatorに向く開発と向かない開発　INTER-Mediatorでは、データベース内のテーブルのフィールドと、ページ上の要素を直接結合するバインドを、手続き的なプログラミングをしなくても実現していることが特徴です。データベースの内容をそのままページに表示して、変更結果を書き直すような、複雑なロジックが絡まないようなアプリケーションであれば、容易に開発ができると言えます。そうしたシンプルなアプリケーションの例としては、Microsoft Excelのドキュメントファイルをファイルサーバーにおいて共有したり、メール添付で情報更新する業務が考えられます。こうした業務はWebアプリケーションとして簡単に実現できます。ドキュメントファイルをメールで回すような場合には、即時に情報が更新されないことや、たくさんのバージョンのファイルが作られることになり、データの管理のための仕事が増えるだけです。共有データベースで情報の一元化をすることで、ファイル単位での共有での問題点が解決します。　一方、同時に複数のテーブルを更新するようなロジックが複雑なアプリケーションの場合だと、INTER-Mediatorでも開発はできなくはありませんが、手続き的なプログラミングの機会が増えることになり、他のフレームワークと労力の上ではあまり変わらないことになります。また、他のフレームワークと手法がかなり違うため、プログラミングのインターフェースの部分の学習は、いくらかコストが高めになる可能性があります。なんでもプログラミングで解決するのではなく、宣言的な記述の範囲内で稼働する状態に、うまくプログラミングによる処理を連動させれば、開発に割く労力はいくらか少なくなることが考えられます。その意味では、他のフレームワークとは違う独特な方法での機能拡張を理解する必要があります。→→→→→INTER-Mediatorのサイトとコミュニティ　INTER-Mediatorは新居雅行が個人のプロジェクトとして2009年の年末に開始し、2010年初頭にオープンソースソフトウェアとして公開しました。2014年12月に「→INTER-Mediator Directive Committee」（以下、「Committee」）としてコアメンバーのコミュニティが結成され、そのコミュニティがリリースするソフトウェアという位置付けになっています。もちろん、開発を始めた新居雅行も、Committeeの一員であり、現在も主要なコミッター（開発者）でもあります。　現在、機能しているサイト等は、表1-1-1の通りです。メインサイトとマニュアルのサイトは同一のデザインになっています。ページ最上部のナビゲーション部分で、「INTER-Mediator」の部分をクリックするとinter-mediator.comへ、「Manual」をクリックするとinter-mediator.infoへ、「Community」の「Committee」をクリックするとinter-mediator.orgへ移動するようになっています。ドメイン/URL役割解説inter-mediator.comメインサイトINTER-Mediatorの特徴などを記載したサイトinter-mediator.infoマニュアル→→INTER-Mediatorのドキュメントを登録したサイトgithub.com/INTER-Mediator→レポジトリINTER-Mediatorのソースコードを公開するレポジトリ。Issue List等、→GitHubのさまざまな機能を活用しているinter-mediator.orgCommitteeINTER-Mediator Directive Committeeの紹介lab.inter-mediator.org研究室コミュニティ内などで発生したプロジェクトに関するサイト。2015年以降は活用されていないwww.facebook.com/groups/intermediator.japanese→Facebookグループ日本語での情報交換を行うためのグループ。主としてイベント告知等に利用www.facebook.com/groups/intermediator.englishFacebookグループ英語での情報交換を行うためのグループ。ただし、ほとんどメッセージはなしhttps://intermed-community.slack.com/SlackコミュニティSlackのコミュニティで、開発内容などのディスカッションはこちらで実施中表1-1-1　INTER-Mediatorのサイトとコミュニティ　INTER-Mediator Committeeは、GitHubを利用して、主として表1-1-2に示す4つのレポジトリを公開しています。レポジトリは「データの貯蔵庫」と思ってください。データベースの中に格納されたデータそのものはもちろん、それがどのような構造で何のためにあるのか、あるいはまた開発のための情報、さらにプログラムコードそのものまで、すべてを格納する場所のことです。これら以外に、INTER-Mediatorで利用するプラグインを個別のレポジトリで管理しています。また、サンプルアプリケーションもいくつか公開しています。　GitHubのINTER-Mediatorという名称の組織アカウントを利用しています。レポジトリへの移動は、Webサイトのページの最初にあるナビゲーションにある「Repository」から選択して移動することもできます。それぞれのレポジトリへの書き込み権限はCommitteeのメンバーが持っていますが、Committeeでない方々も、是非ともソースコードのコミットを「Pull Request」でお願いします。リクエストの出し方は、こちらのページにまとめてあります。レポジトリ内容INTER-Mediatorフレームワークソフトウェアの本体、サンプルコードなどのソースコードINTER-Mediator_WebSiteinter-mediator.comに公開するWebサイトおよび、labディレクトリでlab.inter-mediator.orgに公開するサイトのソースINTER-Mediator_Documentsinter-mediator.infoに公開するWebサイトのソースinter-mediator.github.ioGitHub Pagesの機能を使ったinter-mediator.orgサイトのソース表1-1-2　→→GitHubのレポジトリの内容→1-2演習を行うための準備本コースでは、手軽にINTER-Mediatorの演習に集中できるように、あらかじめINTER-Mediatorが稼働する環境一式をセットアップしたDockerコンテナを用意しました。この素材を以下、「演習環境」と呼ぶことにします。Webサーバーやデータベースシステムは既にこの中に実行可能な状態で準備してあります。最小限のインストール作業で、システム開発に取り組んでいただくことを意図したものです。コンテナはあくまでも学習用、開発用のもので、これを実際のWebアプリケーションとして公開するのは不適切です。本番稼働用のサーバーインストール方法や、セキュリティに関する考慮などについては、別の章で説明します。Chapter 2以降の演習を進めるための環境をここで整えておきましょう。→PC/Macを用意してDocker Desktopを入手する　コンピュータの上で、あたかも別のコンピュータが稼働するような仕組みのDockerは、サーバ構築などで利用されています。さまざまな設定作業をファイルに記述でき、単にコマンドを少し入れるだけで、一定のセットアップをおこなったサーバが自分のPC/Macで稼働できるような仕組みです。Dockerを利用するために、さまざまな仕組みをパッケージ化したDocker Desktopをインストールしてください。Windowsはこちら、Macはこちらのページからダウンロードして利用できます。指示通りにインストールを行なってください。以下はDocker Desktopを利用しているものとして説明をしますが、Docker Composeが稼働すればいいので、Linuxを含む各種プラットフォームでは、Docker Compose のインストールにしたがって、Docker Composeが稼働できるようにして方法もあります。なお、Docker Desktopはフリーソフトウェアではなく、一定の条件では有償となりますので注意してください。　いずれのプラットフォームを使う場合でも、gitコマンドは利用できるようにしておいてください。Macでは、Xcodeのコマンド版をインストールするのが早いでしょう。Xcodeをダウンロードして起動すれば、自動的にコマンドラインツールのインストールもなされます。Windowsでは、git for windowsなどでインストールします。→FileMaker Serverを使用する場合の準備　本コースでの演習作業は、MySQLあるいは→FileMaker Serverを利用して行うことを想定しています。INTER-MediatorはPostgreSQLやSQLiteでも利用できますが、一部を除いてMySQLと基本的には同一ですので、PostgreSQLやSQLiteをターゲットにしている方も、まずはMySQLでの運用を学習してください。あるいは、MySQLで稼働させてみた上で、他のデータベースでも同様に動くというところを確認するのも良いでしょう。これらのSQLサーバーは、INTER-Mediator-Serverにインストールされており、利用するデータベースの設定を変えるだけで切り替えて使えます。　FileMaker Serverについては、独自にセットアップをお願いします。FileMaker Serverのデベロッパー版をMacあるいはWindows PCにインストールをして、演習環境を利用すれば、Mac/PC側のFileMaker Serverを利用する設定で作業を行えるようにします。FileMakerのデベロッパー版は、FileMaker Developer Subscription（年間9,000円）に加入すれば入手できます。評価版での利用も可能ですが、利用できる評価期限が短いので、デベロッパー版を入手して作業することをお勧めします。　FileMaker Serverで利用される方は、さらに、→→サンプル用のデータベース「→TestDB.fmp12」をこちらのリンク先よりダウンロードして、FileMaker Serverで公開をしておいてください。管理者のユーザー名は「admin」、パスワードは「1234」です。設定は全て終わっているので、ダウンロードして公開するだけで大丈夫です。FileMakerのData APIを利用して、データベースアクセスを行います。そのため、FileMaker Server 18以降を想定しています。　本コースでは、FileMaker Serverの操作方法や、FileMakerの利用方法は細かくは説明しません。しかしながら、FileMaker ServerはVer.13以降、さらに稼働させるのが大変なソフトウェアになってしまっています。本コースの読者の方に対しては、FileMaker Serverの稼働方法等についてもINTER-Mediatorが使えるように筆者がサポートしますので、トラブルでうまくいかない場合には、状況を教えていただければ、作業のアドバイスを行います。→INTER-Mediatorを使ったアプリケーションIMApp_Trial　Dockerを利用して、INTER-Mediatorを使ったアプリケーションを稼働する仕組み、つまり演習環境を、独自のレポジトリで用意しています。GitHub上にあるIMApp_Trialです。これは名前から分かるように、INTER-Mediatorの仕様を簡単に行えるように意図したものです。しかしながら、本書では目的が開発の演習でもあるので、「演習環境」と呼ぶことにします。ある書き込み可能なディレクトリをカレントディレクトとして、リスト1-2-1のコマンドを入れればセットアップが行われます。なお、最後のdocker-composeコマンドの実行に10分あるいはそれを超える時間がかかるかもしれませんが、原則としてじっと待っていればいいのでしょう。リスト1-2-1　演習環境をセットアップするコマンドgit clone https://github.com/INTER-Mediator/IMApp_Trial.git\ncd IMApp_Trial\ndocker-compose up -d　セットアップが終了した後のDocker Desktopの画面を図1-2--1に示します。また、画面コマンドの出力例をリスト1-2-2に示します。出力結果は多いので途中省略があります。git cloneコマンドは間違えなければ動作するとは思われますが、docker-composeコマンドは時間もかかるので若干心配になるかもしれません。コマンドの最後でエラーが出ずに、「Creating imapp_trial_db_1」「Creating php-apache_im」がそれぞれコンテナ名で、この2つのコンテナが稼働していてdoneとなっていれば基本的にセットアップは成功しています。なお、Windowsではサーバー動作するコンテナが新たに起動するので、実際にポートを利用して良いかというダイアログボックスがセキュリティ確保のために表示されます。もちろん、使用する側のボタンを選択してください。図1-2-1　Docker Desktopで稼働したコンテナが確認できるリスト1-2-2　セットアップコマンドによる出力例% git clone https://github.com/INTER-Mediator/IMApp_Trial.git\nCloning into 'IMApp_Trial'...\nremote: Enumerating objects: 203, done.\nremote: Counting objects: 100% (203/203), done.\nremote: Compressing objects: 100% (112/112), done.\nremote: Total 203 (delta 118), reused 163 (delta 82), pack-reused 0\nReceiving objects: 100% (203/203), 142.77 KiB | 7.14 MiB/s, done.\nResolving deltas: 100% (118/118), done.\n% cd IMApp_Trial\n% docker-compose up -d\nCreating network \"imapp_trial_default\" with the default driver\nPulling db (mysql:latest)...\nlatest: Pulling from library/mysql\nc1ad9731b2c7: Pull complete\n\t:\nDigest: sha256:548da4c67fd8a71908f17c308b8ddb098acf5191d3d7694e56801c6a8b2072cc\nStatus: Downloaded newer image for mysql:latest\nBuilding php-apache\n[+] Building 163.1s (12/12) FINISHED                                                                                                                                     \n =&gt; [internal] load build definition from Dockerfile.   0.0s\n =&gt; =&gt; transferring dockerfile: 1.12kB      0.0s\n =&gt; [internal] load .dockerignore  0.0s\n =&gt; =&gt; transferring context: 2B  0.0s\n =&gt; [internal] load metadata for docker.io/library/php:8.1-apache    3.0s\n =&gt; https://github.com/mlocati/docker-php-extension-installer/releases/latest/download/install-php-extensions     0.0s\n =&gt; [1/7] FROM docker.io/library/php:8.1-apache@sha256:6e5b705dc5bb7edea76c6adf18dad193f00efe2ad22ad2b5656126c54a56875f     7.3s\n =&gt; =&gt; resolve docker.io/library/php:8.1-apache@sha256:6e5b705dc5bb7edea76c6adf18dad193f00efe2ad22ad2b5656126c54a56875f    0.0s\n =&gt; =&gt; sha256:c55b9325d50a6a15795a0bf8eb56f88b60d5d87593e6e180651961ba144a7ccc 3.04kB / 3.04kB      0.0s\n\t:\n =&gt; [2/7] ADD https://github.com/mlocati/docker-php-extension-installer/releases/latest/download/install-php-extensions /usr/local/bin/    0.0s\n =&gt; [3/7] RUN chmod +x /usr/local/bin/install-php-extensions &amp;&amp; sync     &amp;&amp; install-php-extensions @composer-2.3.5      10.3s\n =&gt; [4/7] RUN apt-get update     &amp;&amp; apt-get install -y unzip git nodejs npm     &amp;&amp; apt-get install -y zlib1g-dev libpng-dev libjpeg62-turbo-dev     &amp;&amp; docker-php  65.8s \n =&gt; [5/7] RUN rm -rf /var/www/html/* &amp;&amp; git clone https://github.com/INTER-Mediator/IMApp_Trial /var/www/html    1.4s \n =&gt; [6/7] RUN chown -R www-data /var/www       0.3s \n =&gt; [7/7] RUN cd /var/www/html; composer update     71.3s \n =&gt; exporting to image   3.6s \n =&gt; =&gt; exporting layers    3.6s\n =&gt; =&gt; writing image sha256:02ecfbe1ea38d707a89376d71741ede60f0b1c0453a20ea94813320a0e2b0187     0.0s\n =&gt; =&gt; naming to docker.io/library/php-apache_im        0.0s\n\nUse 'docker scan' to run Snyk tests against images to find vulnerabilities and learn how to fix them\nWARNING: Image for service php-apache was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.\nCreating imapp_trial_db_1 ... done\nCreating php-apache_im           ... done　以後は、基本的にDocker Desktopを起動すれば、演習環境は利用できます。また、落とすということをしておきたいのなら、Docker Desktopを終了します。システムの再起動後も同様です。→演習環境の起動と基本的な利用方法　演習環境が起動したら、Webブラウザで接続して、演習環境を利用しましょう。ブラウザーは、INTER-Mediatorに対応した、HTML5対応のものであればなんでもかまいません。そして、https://localhost:9080/に接続をします。図1-2-2のように、「INTER-Mediator X - VM for Trial」と書かれたページが見えれば、演習環境は稼働しているということになります。図1-2-2　演習環境の説明ページが見えるかどうかを確認する　説明ページにある「サンプルプログラム」から、INTER-Mediatorのディストリビューションに含まれているサンプルを実際に動かすことができます。クリックしたページではさまざまなサンプルへのリンクを集めてあり、MySQLの列のリンクをクリックして確かめてみることもできます。　本コースでの演習作業は、MySQLを利用して行うことを想定しています。INTER-MediatorはPostgreSQLやSQLiteさらにはFileMaker Serverでも利用できますが、一部を除いてMySQLと基本的には同一ですので、PostgreSQLやSQLiteをターゲットにしている方も、まずはMySQLでの運用を学習してください。あるいは、MySQLで稼働させてみた上で、他のデータベースでも同様に動くというところを確認するのも良いでしょう。　もし、演習環境の説明ページがうっすらと見えていて、処理中を示すギアのアイコンがいつまでも回っている場合、データベースが稼働していないかもしれません。その場合は少し待ってください。MySQLのコンテナ内は初めて起動するときには初期化が必要です。初期化には1分弱程度かかる模様で、その間はデータベースとしての稼働がされていません。稼働が終わるまでしばらく待ってください。→演習環境のコンテナに関して　演習環境のコンテナは2つ用意してあります。ひとつはMySQL、もうひとつはPHPが稼働するapache2が動いており、INTER-Mediatorは後者の環境にインストールされています。apache2が動くコンテナの「php-apache_im」は、php:8.1-apacheという名前のイメージをもとにしたものです。今後はPHPの変化によりバージョンが異なるものを利用する可能性もあります。このコンテナにはINTER-Mediatorはもちろんですが、他に必要な素材（composerやnode、PHPのライブラリなど）もセットアップされています。9080番ポートを開いて、そこからapache2にアクセスができるようになっています。もし、どうしてもそのポートが使われていて変えたい場合は、IMApp_Trialレポジトリのルートにあるdocker-compose.yamlファイルの設定で別の番号のポートにもできます。なお、80や443などそれ以外のポートは開いていないません。　演習環境では、実際にページファイルや定義ファイルを作ることができるようになっています。Webブラウザで、HTMLのエディタや、さらに定義ファイル向けにフォーム形式の画面で編集ができるアプリケーションが含まれています。それら作成したファイルは、IMApp_Trialレポジトリのルートにあるsrcフォルダ以下に入っています。コンテナの中で動くWebサーバでファイルの内容を修正したりができますが、実際にはコンテナの外部のこれらのファイルで保存されています。したがって、コンテナを停止しても、ファイルの内容は保持されています。　MySQLのコンテナ「imapp_trial_db_1」は、mysql:latestというイメージをもとにしたものです。実際のデータベースが使用するファイルは、IMApp_Trialのlib/docker/mysql/db以下に作成します。つまり、コンテナ外部にデータベース管理のためのファイルが作られるので、コンテナを停止しても、データベースの内容は保持されます。また、INTER-Mediatorのサンプル等の稼働に必要なデータベースは、lib/docker/mysql/initdb/sample_schema_mysql.sqlというファイルをスキーマとして、初めてコンテナを起動するときにこのファイルから読み込みがされるようになっています。このMySQLのコンテナへは、apache2のコンテナから接続できればよく、INTER-Mediatorのデータベース接続情報も、コンテナ間を仮想ネットワークでつながるように設定をしてあります。ただ、それだと直接接続するのがやりにくいので、13306番ポートを外部に開放して、そこから直接データベースに接続できるようになっています。つまり、3306ポートは開いていないので、別途MySQLが稼働していても、IMApp_TrialのMySQLコンテナは稼働するはずです。PC/Macでmysqlコマンド、つまりMySQLのクライアントが動く状態であれば、次のコマンドで、コンテナのデータベースに接続ができます。この場合は、INTER-Mediatorのサンプル等で使っているtest_dbデータベースへの接続となります。リスト1-2-3　コンテナのMySQLにPC/Mac側から接続するmysql -u web -h 127.0.0.1 -P 13306 --password=password test_db→演習環境内の→→INTER-Mediatorのアップデート　INTER-Mediatorの本体は頻繁にアップデートしています。演習環境にセットアップされたINTER-Mediatorを最新のものに更新するには、コンテナにコマンドラインでログインして操作します。　ひとつの方法は、Docker Desktopからコマンドラインを開いて、そこでコマンドを入力します。Docker DesktopのContainersのパネルに「imapp_trial」という項目があり、その左の＞マークをクリックして、さらに下位の項目を出して、「php-apache_im」を探します。その行にポインタを移動すると、右側に操作ボタンが見えるので、左から2つ目のチップヒントがOPEN IN TERMINALのボタンをクリックします。図1-2-3　コンテナのコマンドラインを呼び出す　すると、Macではターミナルが起動して、コマンド入力可能な状態になります。プロンプトは#になっていますが、これはコンテナ内のUbuntu OSのルートとしてコマンド入力できる状態になっていると思ってください。ここで、図1-2-4のようにコマンドを入力します。「pwd」コマンドで、/var/www/htmlがルートになっていることを確認し、「composer update」コマンドを入れてしばらく待ちます。これで、現状の最新版のINTER-Mediatorがあれば、INTER-Mediatorはそれに置き換わります。図1-2-4　アプリケーションをcomposerで更新する　なお、コンテナを作ったばかりの場合、通常の場合アップデートは必要ありません。しかし、この後、少しずつ本コースを進められたとき、演習を実施するためのINTER-Mediatorのバージョンの指定がある場合があります。ご利用中の演習環境が古い場合、アップデートをしていただくことで、演習が可能になる場合があります。また、INTER-Mediator側で小規模な部分的改善を行うこともあり得ます。そのようなときに、ここでの記述を参考にして最新版にアップデートしてください。INTER-Mediatorのバージョンは、https://localhost:9080/に接続したときのページの最初の部分に「INTER-Mediator」に続いて記述されています。あるいはそのページの末尾のINTER-Mediatorのクレジット表示のバージョン番号や日付にも参照してください。　また、INTER-Mediatorのアップデートに伴い、→→サンプルデータベースも更新する必要がある場合があります。これについては、なんらかの更新が必要なときにはIMApp_TrialのREADME-ja.mdファイルに必要に応じて記載をしますので、そちらのドキュメントを参照してください。→→→データベースの初期化　データベースのコンテナを作ったときに、演習環境が稼働するようにデータベーススキーマを適用して、少しですが、データも入力されています。このデータベースの初期状態に戻したい時は、まず、Docker Desktopで、db-1というコンテナを停止します。Containersの画面で、imapp_trialの左側にある＞をクリックして、所属するコンテナを表示し、db-1の右の方にあるSTOPと表示されるボタンをクリック位して停止します。図1-2-5　コンテナを止め、ファイル削除後に起動する　その後、IMApp_Trialレポジトリのルートから、lib/docker/mysql/dbとディレクトリを下ったところにあるファイルをすべて削除します。そして、再度、Docker Desktopで、db-1コンテナの項目を見ると、STARTボタンだけがあるので、このSTARTボタンをクリックします。起動後、1分程度の時間がかかるのでしばらく待つと、利用できるようになります。データベースのセットアップの様子を見たい場合は、Docker Desktopの画面の「db-1」の文字の部分をクリックすると、ウインドウ内にコンソール出力を表示するようになります。\n"
    },
    {
        "id": 1002,
        "parent": "/ja/tutorial/",
        "path": "/ja/tutorial/proof-02.html",
        "title": "データベースへのクエリーと一覧表示",
        "breadcrumb": "chapter 2",
        "body": "→Chapter 2データベースへのクエリーと一覧表示この章は、INTER-Mediator Ver.10をもとに記載しました。一部、Ver.11に関する記述もあります。まず最初にシンプルなページを作りながら、設定した内容がどのように機能するのかを少しずつ見ていくことにしましょう。この章と次の章は、主に、データベースにあるデータをWebページの上に展開するための設定を見ていきます。また、演習環境の利用方法を詳しく説明しますので、次の章以降は、演習環境の使用方法についてはあまり触れません。この章の中で十分に理解してから次に進むようにしてください。→2-1→→データベースからの取り出し設定データベースからのクエリ（あるいは読み出し）の処理は、データベースを利用する基本でもあります。加えて、単に読み出し結果をブラウザー上に表示するだけでなく、見やすく表示させるということも重要です。レイアウトを厳密に構成できることがHTMLの特徴ですから、データベースの内容をきれいに構成してWebブラウザーで表示させることが可能になります。最初に、さまざまな設定のための基本について解説します。→INTER-Mediatorとデータベース　INTER-Mediatorは、→データベースを利用したWebアプリケーション開発のためのフレームワークです。INTER-Mediatorとデータベースは別々の存在として、インストール等されている必要があります。また、INTER-Mediatorでのアプリケーションを作る上では、データベース上にアプリケーションの稼働が可能な→テーブル設計等（一般には「→スキーマ設計とその適用」）が完了している必要があります。テーブルの作成など、データベース側の運用を直接サポートする機能は現在のVer.10のINTER-Mediatorには含まれていません。　→→利用可能なデータベースは大きく分けて2種類があります。PHP言語でのデータベース抽象化レイヤーのひとつである「→PDO（→PHP Data Objects）」を利用する方法と、→FileMaker Serverを利用する方法です。PDOでは、さらにデータベースエンジンごとにドライバーが内部で用意されていますが、Ver.10現在、→MySQL、→PostgreSQL、→SQLite、→SQL Serverの4つのデータベースをサポートしています。そして、SQL Serverを除く3つのデータベースエンジに関して、開発時にテストケースを適用して確認をしています。PDOがサポートするその他のデータベースエンジン（例えば、Oracleなど）は、理論上は利用可能ですが、開発側でテストを実施していないために実際にサンプル等での動作保証はできません。原則、いずれもSQLデータベースである点での違いは薄いのですが、細かな点での記述方法の違いなどもあり、INTER-Mediatorで提供された素材そのままで運用することを誰も確認していない状況と考えてください。　FileMaker Serverについては、XML共有を利用する方法と、FileMaker Data APIを利用する方法をサポートしています。XML共有を使うために、FX.phpというライブラリを利用します。そのため、XML共有を使う場合はかなり古いFileMaker Serverであっても稼働はします。FileMaker Data APIを使う場合はVer.18以降のFileMaker Serverを利用するようにしてください。それ以前のData APIは使えなくはないのですが、ライブラリのFMDataAPIのバージョンを古くするなどの対処が必要になります。　なお、本コースでは、原則として、演習環境で動作するMySQLを利用して演習を進め、データベースエンジンごとに違いがある部分については、その都度説明をします。実際にデータベースを利用して開発をされた方はご存知の通り、同じSQLデータベースでも、けっこう違いが大きいものです。INTER-Mediatorでのデータベースの扱いとしては、ひとつの考え方として、「INTER-Mediatorが必要なSQLステートメントを生成してデータベースに投げる」というイメージを考えてください。そのため、INTER-Mediator側の作業に入ると、データベースは完全に抽象化されて、データベースごとの違いを意識せずとも使えるようになっています。概念的に同じ特性を持つデータベースとして考えて差し支えないものになっています。INTER-Mediatorがデータベースエンジンの間の細かな違いを吸収していると考えてけっこうです。特に、基本的にSQLデータベースではないFileMakerとMySQLを、同じような手法で利用できるようになっています。→PDOでの接続に必要な情報　MySQLを始めとするPDOを利用した→接続で必要になる情報は、必要な設定を行う前に確認しておく必要があります。MySQLとPostgreSQLについては、ソケット経由での接続と、TCP/IPのポートに対して接続する方法があります。データベースとWebサーバーが同一のホストの場合、どちらでも利用できます。異なるホストの場合は、ポート接続を行います。SQLiteについては、ファイルを直接読み書きしているので、同一のホストである必要があります。　いずれのデータベースについても、データベースエンジン自体の指定だけでなく、「→データベース名」の指定が必要になります。一般に、データベースエンジンは、データベースを運用するソフトウェアを示す用語ですが、ひとつのデータベースエンジンは、同時に複数のデータベースを運用することが可能です。SQLデータベースでは、ひとつのデータベースの中に、複数のテーブルやビューといったエンティティを定義でき、テーブルには複数のフィールドが定義されていて、データの記録ができるようになっています。　INTER-MediatorでPDOを利用する場合、合計5つの設定項目を確定させる必要があります。これらの実際の設定方法は、この後に、演習の中で行うことにします。コロン（：）の左側が設定の種類を示すキーワードで、右側はその設定値です。キーワードはINTER-Mediatorで決められたものですが、値は状況により変わります。PDOを使う場合には、→db-classに対する値は「PDO」で一定です。dsnは、データベースに接続するためのさまざまな情報をひとまとめにしたもので、すぐ後に説明します。→userと→passwordは、データベースを利用するために必要なアカウントの情報で、データベースのセットアップ時に指定しているものです。→optionsには、一般には設定はなにもしなくてもかまいません。リスト2-1-1　MySQLを利用する場合のデータベース設定（ソケットを利用する接続の場合）\ndb-class：PDO\ndsn：mysql:unix_socket=/var/run/mysqld/mysqld.sock;dbname=test_db;charset=utf8mb4\nuser：web\npassword：password\noptions：（設定不要）\n\n（ホスト名を指定する接続の場合）\ndsn：mysql:host=localhost;dbname=test_db;charset=utf8mb4\n　→dsnについて説明をします。dsnは、半角のセミコロン（；）で区切った文字列で、それぞれは「キーワード=値」の形式のデータが含まれたものです。dsnは→Data Source Nameの略ですが、単に名前だけでなく、さまざまな情報を指定します。最初の「→mysql」は、データベースエンジンの種類であり、MySQLの場合は常に「mysql」です。　→ソケットを使う場合には、「→unix_socket=パス」の形式で記述します。パスは、セットアップの方法やあるいは設定ファイルの書き方で変わってきます。TCP/IPのポートに接続する場合には、「→host=ホスト名」によってデータベースエンジンが稼働しているホストのIPアドレスやホスト名、FQDN等を指定します。通常は、MySQLはポート番号3306で稼働していますが、既定のポート番号の場合はポート番号の指定は不要です。サーバーの設定により異なるポートで運用している場合には「→port=ポート番号」の記述も追加します。unix_socketとhostの指定は両立せず、どちからのみを指定するのが原則です。　接続先のデータベースは「→dbname=データベース名」で指定します。データベース名は、実際に使うデータベース名に変更します。本コースでは、サンプルアプリケーションを稼働するためのデータベース「test_db」をそのまま利用しますので、常に「dbname=test_db」で利用します。　データベースで利用する→文字セットを「→charset=文字セット名」で記述します。MySQLの場合は、このdsnの設定に文字セットを可能な限り設定することをお勧めします。一般には、文字セット名は「utf8」でかまいませんが、絵文字や一部の漢字にあるような4バイトのUnicode文字もサポートするために「→utf8mb4」という文字セットをMySQL Ver.5.5.3以降でサポートする記述を利用します。これ以前のMySQLでは、utf8しか使えません。4バイトの文字というのは、32ビットコードという意味ではなく、UTF-8での文字表現で4バイトを使用する文字ということです。従来からよく利用されてきた一般的な文字列の多くは日本語の場合UTF-8では3バイトになります。しかしながら、「𥔎」という文字は、Unicodeでは、U+2550Eというコードが割り当てられており、UTF-8でエンコードした場合、F0 A5 94 8Eという4バイトでの表現となります。OSがサポートする文字種が増えているだけに、可能な限りutf8mb4で運用する方が望ましいと言えます。　MySQLとの接続に必要なアカウントの作成と、アクセス権の設定は、例えばリスト2-1-2のように行います。このユーザー「web」はlocalhost経由での接続が許されており、さらに→GRANTステートメントで指定されたステートメントの実行のみが、データベースtest_dbに対して定義されています。リスト2-1-2　MySQLでユーザーに対してデータ処理権限を与える→CREATE USER 'web'@'localhost' →IDENTIFIED BY 'password';\nGRANT SELECT, INSERT, DELETE, UPDATE ON TABLE test_db.* TO 'web'@'localhost';　→PostgreSQLを利用する場合の設定はリスト2-1-3の通りです。MySQLと原則同一ですが、データベースエンジンが違うので、dsnの書き方が異なり、「→pgsql」で始めます。userとpasswordは、データベース側に定義した利用可能なアカウントを指定します。文字セットの指定は、INTER-Mediator側の指定では行わないでも一般には大丈夫です。データベースの設定でエンコード指定が行われているのが一般的です。なお、PHPのマニュアルによると、PDOを利用したPostgreSQL利用時にソケット接続するためには、dsnを「pgsql:user=web dbname=test_db password=password」のように記述すれば良いとなっていますが、INTER-Mediatorでは利用しているAPIの都合上、Ver.10現在、この方法での接続はできません。hostを利用して接続先を指定してください。リスト2-1-3　PostgreSQLを利用する場合のデータベース設定db-class：PDO\ndsn：pgsql:host=localhost;port=5432;dbname=test_db\nuser：web\npassword：password\noptions：（設定不要）リスト2-1-4　PostgreSQLでのユーザー定義とアクセス権設定の例CREATE USER web PASSWORD 'password';\nGRANT ALL PRIVILEGES ON SCHEMA im_sample TO web;\nGRANT ALL PRIVILEGES ON im_sample.person TO web;\nGRANT ALL PRIVILEGES ON im_sample.postalcode TO web;\n\t\t:　→SQLiteを利用する場合、データベース自体はファイルとして提供され、ドライバーがそのファイルに直接的にやりとりすることになります。リスト2-1-5に設定をまとめますが、ファイルアクセスということが原則のため、データベース自体にアカウントの仕組みはなく、userとpasswordは指定する必要がありません。dsnには、SQLiteを使用することを示す「→sqlite:」の文字列と、それに続いて→→データベースファイルの絶対パスを記述します。設定はこれだけです。エンコードについても、SQLite Ver.3ではデータベース自体がUTF-8を前提としているため、特に指定する必要はありません。リスト2-1-5　SQLiteを利用する場合のデータベース設定db-class：PDO\ndsn：sqlite:/var/db/im/sample.sq3\nuser：（設定不要）\npassword：（設定不要）\noptions：（設定不要）　SQL Serverでのデータベース設定はdsnはシンプルにserverキーでホストを指定し、databaseキーでデータベース名を指定するだけで可能です。また、GRANTも現在のデータベース内のオブジェクトにまとめて設定することができるので、シンプルな記述で可能です。リスト2-1-6　SQL Serverを利用する場合のデータベース設定db-class：PDO\ndsn：sqlsrv:server=localhost;database=test_db\nuser：web\npassword：password\noptions：（設定不要）リスト2-1-7　SQL Serverでのアクセス権の設定例CREATE DATABASE test_db COLLATE Japanese_CI_AI;\nUSE test_db;\nCREATE LOGIN web WITH PASSWORD='password', CHECK_POLICY=OFF;\nCREATE USER web;\nGRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE TO web;\nGO→→→FileMaker Serverへの接続　FileMaker Serverは、→Web公開エンジンの設定をしておく必要があります。単にサーバーをインストールするだけではなく、Web共有可能にセットアップしなければなりません。また、→WebDirectについては、有効にしておく必要はありません。もちろん、INTER-Mediatorとは別にWebDirectを利用するのであれば、オンにしておきます。図2-1-1　FileMaker Serverの管理コンソールでWeb公開エンジンを有効にする　FileMaker Data APIを利用する場合は、やはりFileMaker Serverの管理コンソールで、FileMaker Data APIを有効にしておく必要があります。図2-1-2　FileMaker Serverの管理コンソールでFileMaker Data APIを有効にする　一方、XML共有を利用する場合は、FileMaker Serverをセットアップした後、そのコンピュータ上で以下のようにコマンドを入力する必要があります。これらのコマンドによって、→XML共有と→PHP共有が有効になります。を有効にしておく必要があります。コマンド入力後、FileMaker Serverの管理コンソールにログイン可能なユーザ名とそのパスワードを指定する必要があります。リスト2-1-8　SQL Serverでのアクセス権の設定例fmsadmin set cwpconfig enablexml=true\nfmsadmin set cwpconfig enablephp=true　PHPの稼働についても、バージョンごとに方法が異なり、FileMaker Server Ver.19の最新版に関してPHPはFileMaker Serverとは別にセットアップが必要になっています。なお、本コースの購入者の方々に対しては、FileMaker Serverそのもののサポートも行いますので、うまく稼働ができない場合には、筆者まで連絡を取ってください。　FileMaker Serverで公開するデータベースについては、XML共有もしくはData APIからのアクセスができるようにしておく必要があります。「ファイル」メニューの「管理」の「セキュリティ」を選択して、初期状態にあるadmin以外に、新たにユーザーを作成するのが良いでしょう。また、ゲストでの運用も可能な限り行わない方が良いでしょう。ここでは、webという名前のユーザーを選択しています。そして、このユーザーはデータの入出力ができればいいので、最大でも「データ入力のみ」のアクセス権セットを選択しておきます。可能であれば、より権限の狭いアクセス権セットにする方が好ましいでしょう。図2-1-3　INTER-Mediatorから利用する専用のユーザーを定義する　そして、INTER-Mediatorから利用するユーザーの→アクセス権セットについては、FileMaker Pro上で拡張アクセス権の設定を行います。XML共有を使う場合には、「→XML Web共有でのアクセス - FMSのみ (fmxml)」および「→PHP Web共有でのアクセス - FMSのみ (fmphp)」の拡張アクセス権を設定します。Data APIを使用する場合には、「→FileMaker Data APIでのアクセス - FMSのみ (fmrest)」のチェックをオンにします。このように、アクセス権の設定が変わるので、「データ入力のみ」のアクセス権セットを既定値のまま保持したい場合は、このアクセス権セットを複製して、複製した方のセットをINTER-Mediatorから利用するユーザーに割り当ています。さらに、このデータベースをFileMaker Proから開くには、「→FileMakerネットワークによるアクセス (fmapp)」もチェックを入れます。INTER-Mediatorに付属しているTestDB.fmp12では、adminユーザーにのみ「FileMakerネットワークによるアクセス」のチェックを入れてあります。図2-1-4　データベースのユーザーに対して拡張アクセス権を許可する　FileMaker Serverおよびデータベースに関して以上の準備をすれば、INTER-Mediator側の設定を決めることができます。FIleMakerデータベースについては、リスト2-1-9のような項目を設定します。設定項目は多くなりますが、FileMaker ServerのXML共有あるいはData APIを利用するための設定を基本的にすべて設定可能にしているためです。それぞれの場合の設定例を示します。リスト2-1-9　FileMaker Serverを利用する場合のデータベース設定db-class：FileMaker_FX\n→database：TestDB\nuser：web\npassword：password\n→server：192.168.56.1\nport：80\n→protocol：http\n→datatype：FMPro12\n\ndb-class：FileMaker_DataAPI\ndatabase：TestDB\nuser：web\npassword：password\nserver：localhost\nport：443\nprotocol：https\ncert-verifying：true　db-classは、INTER-MediatorにFileMaker Server用の機能を利用するように指定する部分と考えてください。XML共有を使う場合には、FileMaker_FX、DataAPIを使う場合にはFileMaker_DataAPIを指定します。databaseは、FileMaker Serverで公開されているデータベースのファイル名を指定します。拡張子はあってもなくてもかまいません。userとpasswordは、FileMakerのデータベースに定義した、データの読み書き可能なアカウントのものを指定します。serverは、FileMaker Serverが稼働しているホストのIPアドレスや、あるいはホスト名を指定します。同一のサーバーであればlocalhostや127.0.0.1を指定します。portは、FileMaker Serverの設定に依存しますが、一般には80ないしは443になると思われます。そして、protocolもFileMaker Serverの設定に依存しますが、一般にはhttpあるいはhttpsになると思われます。FileMaker Data APIについては、原則としてhttpsで443ポートにする必要があります。datatypeはXML共有の場合にのみ必要で、サーバーのバージョンに応じたものを指定するような雰囲気もあるかもしれませんが、FMPro12以降は特に動作に違いはありませんので、あまり気にすることはありません。「FMPro12」等を設定しておけば当面は問題ないと思われます。cert-verifyingはData APIの時に必要で、FileMaker Serverへの接続において、httpsの証明書の検証を行うかどうかです。既定値はtrueで行うようになっていますが、その場合serverがlocalhostだった場合に証明書のセットアップが事実上できないことになります。そこで、cert-verifyingをfalseにすることで、証明書は使うが検証はしない状態にできます。この場合、証明書はFileMaker Serverがセットアップ時に用意したものになっている可能性もあります。要するに、暗号化は行うけどサーバのホスト名の検証が省略されるということです。原則として、テスト運用等での利用にとどめてください。→このセクションのまとめ　このセクションでは、INTER-Mediatorで使用するデータベースに関して、INTER-Mediatorに設定する情報にどのようなものがあるかを紹介しました。ここで集めた情報を実際に設定する方法は、この後引き続いて説明を行います。→2-2ページ構築のための基本設定　サンプルデータベースにある郵便番号のテーブルからその一覧を表示するWebページを作成します。フィールドの値をページ上に表示させることや、複数のレコードが取得された場合の繰り返し処理を説明します。ここでは、さまざまな設定をひとつひとつ追っていくことにします。→→→Webページの基本構成　INTER-Mediatorで作成するWebページは、最終的にはブラウザーでアクセスした結果、データベースの内容が表示されたり、あるいはデータベースへの入力や編集ができるようになっている必要があります。そうした働きの全体像を示したのが図2-2-1です。Webアプリケーションとして共通の処理をフレームワークとして提供し、用途によって異なる部分をその都度開発するというの基本です。まず、開発に先立って、スキーマが適用されたデータベースがあることが前提です。これら以外に、HTMLで記述する「→ページファイル」と、PHPで記述する「→定義ファイル」を用意します。図2-2-1　INTER-Mediatorと開発物の構成　ページファイルは、実際にブラウザーが解釈してレイアウトされたページとしてレンダリング可能なHTMLであり、最終的なページを構成するためのテンプレート、つまり、データを埋め込む前の状態を記述したものと考えてください。例えば、データベースの内容を表にしたいのなら、TABLE、TR、TDといったタグで、1レコード分の表示をどのようにするのかをHTMLで記述するのが典型的な例です。　一方、定義ファイルには、データベースの接続に関する設定を始めとして、さまざまな動作の設定を記述します。ページファイルにすべてを記述しない理由のひとつは、ある種の設定の共通化を行う場合を想定しているからです。例えば、ひとつの定義ファイルを複数のページファイルで利用するといった状況です。さらに、HTMLのタグは設定が多くなると可読性が落ちます。そのため、ページファイルには定義ファイルのどの設定を使うのかを記述するというのが基本的な考え方になります。また、後で説明するように、データベースにあるデータを単にテーブルとして扱うのではなく、「→コンテキスト」として、抽象化された対象として取り扱うことが動作の基礎をなしており、定義ファイルはコンテキストを定義するファイルとして存在しています。　図2-2-1では、フレームワークが提供する部分と、さらにフレームワークの動作を拡張したり、間に入って処理系の違いを仲介するデータコンバーターなどの拡張を示す部分についても記載があります。これらの拡張コンポーネントについては、コースの後半に解説を行います。ここよりいくつかの章は、ページファイルや定義ファイルを作成することで実現する範囲の機能を説明します。　実際に稼働させると、ページファイルとフレームワークの一部がブラウザーにダウンロードされて、ページの生成を始めます。その途中で必要に応じてデータベース処理を行います。→定義ファイルに定義するコンテキスト　実際のファイルの記述方法を説明する前に、まず、「→コンテキスト」の概念を説明しましょう。図2-2-2は、コンテキストを中心とした、INTER-MediatorによるWebページの構成です。データベースのデータをそのままページに持ち込むではなく、コンテキストという中間的なものを定義します。コンテキストの実体、すなわち、コンテキストから得られるデータは、→→テーブル形式のデータ（つまり、「→リレーション」）と考えてください。図2-2-2　コンテキストの概念　このコンテキストは、テーブルと同一ではなく、意味が付加されたテーブル形式のデータです。ここでの意味というのは、具体的には検索条件や並べ替えフィールドの指定、そしてそれらの条件を適用した結果、得られたテーブル形式のデータを示すものです。つまり、成り立ちに意味があるデータです。例えば、住所録のテーブルがあるとします。その中で、利用者が興味があるのは、「学校の同期生」「家族と親戚」「取引先関係」など、その一部のデータであり、一部を抽出するためには意味をきちんと定義しなければなりません。住所録に対してなんらかの意味を与えることによって、得られるデータをコンテキストとします。もちろん、適切なフィールドの定義や、きちんとしたデータの入力など、さまざまな条件を満たさないと、コンテキストは完成しませんが、テーブルそのものではなく、意味を付与したコンテキストを中心にして、Webページを構成するという手法をINTER-Mediatorでは採用しています。　そして、ページファイルの一部分が、コンテキストに対応付けられます。その規則についてはこの後すぐに説明をします。実際にブラウザー上で構成されるHTMLは、テンプレートとしてのページファイルの内容と、コンテキストで得られるデータを合成したものです。→→→定義ファイルの記述方法　定義ファイルはPHPで記述します。PHPの文法を駆使したプログラムを記述するのではなく、主として、キーと値のセット（連想配列）による、コンテキストの定義やデータベースの接続のための設定などを記述します。したがって、プログラムを作成する知識は必要ではありませんが、一方でPHPのルールに従った連想配列を記述する必要があるため、基本文法についてはある程度知っていると作業はスムーズでしょう。リスト2-2-1は定義ファイルの記述例です。リスト2-2-1　定義ファイルの記述例&lt;?php\nrequire_once('INTER-Mediator/INTER-Mediator.php');\n\nIM_Entry(\n    // ここから第1引数\n    array(\n        array(\n            'name' =&gt; 'postalcode', 'table' =&gt; 'postalcode', 'view' =&gt; 'postalcode',\n            'records' =&gt; 10, 'maxrecords' =&gt; 100,\n            'paging' =&gt; true, 'key' =&gt; 'id',\n            'query' =&gt; array(\n                array( 'field' =&gt; 'f3', 'value' =&gt; '1%', 'operator' =&gt; 'LIKE' )\n            ),\n            'sort' =&gt; array(\n                array( 'field' =&gt; 'f3', 'direction' =&gt; 'ASC' )\n            ),\n            'repeat-control' =&gt; 'confirm-insert confirm-delete',\n        ),\n    ),\n    // ここから第2引数\n    array(\n    ),\n    // ここから第3引数\n    array( 'db-class' =&gt; 'PDO', 'dsn' =&gt; 'mysql:host=localhost;charset=utf8mb4', \n             'user' =&gt; 'web', password =&gt; 'password' ),\n    // ここから第4引数\n    2\n);　定義ファイルは拡張子が.phpのファイルに保存します。そして、中身はPHP言語なので、冒頭には「&lt;?php」の記述があります。続くrequire_onceにより、INTER-Mediatorの本体を読み込みます。サーバーのファイルシステム上で、この定義ファイルと、INTER-MediatorフォルダーにあるINTER-Mediator.phpファイルとの間の相対パスを記述します。この例の場合は定義ファイルと同じフォルダーにINTER-Mediatorフォルダーがあるので、指定のようなパスになります。そして、定義ファイルの残りの部分は、→IM_Entry関数の呼び出しです。この関数の呼び出しを行うことは常に決まっています。引数は表2-2-1に示します。連想配列のキーに相当する文字列はすでに決められたものとなっており、決められていないキーは、デバッグ時にはエラーを出すようにしています。キーに指定する文字列とその機能は、本コースで順次説明します。引数設定する値解釈される内容1→コンテキスト定義の配列コンテキスト定義は連想配列で記述する2→オプション設定の配列コンテキスト外部に設定する内容3→データベース接続の配列データベース接続に必要な情報4→デバッグ情報falseならデバッグしない、2ならデバッグ情報をページ上に表示する表2-2-1　IM_Entry関数の引数　もし、PHPのプログラムのファイルを直接開いて編集したくない場合には、INTER-Mediator内に組み込みの「→定義ファイルエディター（Definition File Editor）」も用意していますので、こちらをお使いください。INTER-Mediatorの演習環境では簡単に定義ファイルを利用できるようになっています。このエディターは、Webアプリケーションの形式になっており、ブラウザーでデータを入力して保存できるようになっています。INTER-Mediatorの演習環境上では、各ファイルやディレクトリに適切なアクセス権が設定されているので保存が可能ですが、Webブラウザーの稼働ユーザーの権限で、定義ファイル自体に書き込みが可能になっていないと、書き込み時にエラーが出ます。その場合はファイルのアクセス権を改めて調べてみてください。図2-2-3　Webアプリケーションとして稼働する定義ファイルエディター　この後の演習で、実際に、ファイルの内容を編集する方法も含めて、作業手順を示しながら、作成方法を学習します。→→→ページファイルの記述方法　ページファイルは、拡張子が.htmlで、HTMLで記述するWebページのテンプレートとなるファイルです。まず、ヘッダーセクションでは、定義ファイルを、SCRIPTタグで読み込みます。定義ファイルはPHPで記述されたファイルですが、Webサーバー経由、つまりスクリプトが実行した結果は、JavaScriptのプログラムが返されます。拡張子は.phpですが、MIMEタイプはtext/javascriptで返される、JavaScriptのプログラムであり、それがINTER-Mediatorのクライアントサイドで稼働するプログラムの本体になります。　以上の点から、ページファイルのヘッダーからBODYタグの部分は、リスト2-2-2のような書き方が一般的な記述方法になります。もちろん、ヘッダーには他にスタイルシートの読み込みやMETAタグ、他のJavaScriptのプログラムの読み込みがあってもかまいません。定義ファイルをSCRIPTタグで読み込む部分が必須の記述になります。リスト2-2-2　定義ファイルがdef01.phpの場合のページファイルの例&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt;\n    &lt;title&gt;INTER-Mediator Sample&lt;/title&gt;\n    &lt;script type=\"text/javascript\" src=\"def01.php\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n\t:　なお、Ver.5.4-devの途中までは、INTER-Mediatorを動作させるきっかけを記述する必要がありました。「→INTERMediator.construct(true);」というJavaScriptのプログラムを記述する必要があったのです。そのために、→→BODYタグのonload属性か、SCRIPTタグないしは別途拡張子が.jsのファイルを用意して、そこで→window.onloadに対して無名関数を定義するなど行っていました。Ver.5.4-devの途中より、このconstructメソッドの呼び出しは自動的に行われるようになりましたので、記述の必要は無くなりました。　実際にデータベースのデータを表示するのは、BODYタグの内部になります。ここでは、コンテキストに「postalcode」という名前のコンテキストがあり、そこには、f3、f7、f8、f9といったフィールドがあることが既知であるとします。このとき、以下のように記述を行います。一般的なHTMLでのTABLEタグを利用したテーブルですが、一般的なページとの違いは、→data-im属性があることです。data-im属性の値は「コンテキスト名@フィールド名」と記述します。すると、最初のTDタグ要素では、postalcodeコンテキストから得られたレコードのf3フィールドの値が、TDタグ要素のテキスト要素、つまり、&lt;td&gt;と&lt;/td&gt;の間に挟み込まれるといった処理をINTER-Mediatorが行います。リスト2-2-3　ページファイルのボディ部の記述例&lt;body&gt;\n&lt;table&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;&lt;th&gt;f3&lt;/th&gt;&lt;th&gt;f8&lt;/th&gt;\n    &lt;th&gt;f9&lt;/th&gt;&lt;th&gt;f10&lt;/th&gt;&lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;td data-im=\"postalcode@f3\"&gt;&lt;/td&gt;\n      &lt;td data-im=\"postalcode@f7\"&gt;&lt;/td&gt;\n      &lt;td data-im=\"postalcode@f8\"&gt;&lt;/td&gt;\n      &lt;td data-im=\"postalcode@f9\"&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/body&gt;　もし、ここで、postalcodeコンテキストが→→複数のレコードからなる場合はどうなるでしょうか？　INTER-Mediatorは、TBODYタグの内部のTRタグ要素を、レコードごとに用意して、追加します。つまり、この場合はTRタグ要素がひとつありますが、レコードが10個あれば、TRタグ要素は10個並び、レコードの順に前からTBODYタグ要素の子要素として追加されて行きます。このとき、繰り返されるTRタグ要素を「→リピーター」、その親要素であるTBODYタグ要素を「→エンクロージャー」と呼びます。つまり、エンクロージャーの子要素にあるリピーターが、レコードの数だけ繰り返すということをINTER-Mediatorは行います。　表2-2-2のようないくつかのレコードがコンテキストから得られた場合、INTER-Mediatorはクライアントサイドでリスト2-2-4のようなタグ要素を生成します。その結果、テンプレートとしてのページファイルの内容にコンテキストで得られたデータを合成して、ブラウザーの画面に表示されることになります。idf3f7f8f911000000東京都千代田区以下に掲載がない場合21020072東京都千代田区飯田橋31020082東京都千代田区一番町41010032東京都千代田区岩本町51010047東京都千代田区内神田:::::表2-2-2　postalcodeコンテキストから得られたリレーションの例リスト2-2-4　いくつかのレコードのデータを合成した結果&lt;body&gt;\n&lt;table&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;&lt;th&gt;f3&lt;/th&gt;&lt;th&gt;f8&lt;/th&gt;\n    &lt;th&gt;f9&lt;/th&gt;&lt;th&gt;f10&lt;/th&gt;&lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;td data-im=\"postalcode@f3\"&gt;1000000&lt;/td&gt;\n      &lt;td data-im=\"postalcode@f7\"&gt;東京都&lt;/td&gt;\n      &lt;td data-im=\"postalcode@f8\"&gt;千代田区&lt;/td&gt;\n      &lt;td data-im=\"postalcode@f9\"&gt;以下に掲載がない場合&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td data-im=\"postalcode@f3\"&gt;1020072&lt;/td&gt;\n      &lt;td data-im=\"postalcode@f7\"&gt;東京都&lt;/td&gt;\n      &lt;td data-im=\"postalcode@f8\"&gt;千代田区&lt;/td&gt;\n      &lt;td data-im=\"postalcode@f9\"&gt;飯田橋&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td data-im=\"postalcode@f3\"&gt;1020082&lt;/td&gt;\n      &lt;td data-im=\"postalcode@f7\"&gt;東京都&lt;/td&gt;\n      &lt;td data-im=\"postalcode@f8\"&gt;千代田区&lt;/td&gt;\n      &lt;td data-im=\"postalcode@f9\"&gt;一番町&lt;/td&gt;\n    &lt;/tr&gt;\n            :\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/body&gt;　ここではTDタグにdata-im属性を記述しましたが、DIVやSPAN、Pなどの汎用的なタグにも記述できます。また、タグのテキストだけでなく、タグの属性にもフィールドのデータを差し込むことができます。ここでは、エンクロージャーとしてのTBODYとリピーターとしてのTRの組み合わせの中で、TRタグの内部にdata-im属性を持つタグ要素が存在しています。INTER-Mediatorはdata-im要素を持つタグ要素を「リンクノード」として識別し、リンクノードの上位ノードを検索して、リピーターの範囲を決めます。そして、そのリピーターの中で使われているコンテキストを求めてデータベースアクセスし、得られた結果を合成するといった動作を行います。→演習データベースの内容をリスト表示する　以下、演習を通じて、データベースに入力されている郵便番号の情報を、Webページ上に一覧表示をしてみます。演習は、演習環境を利用している前提で手順を記載しますので、実際にお手元で作業を行ってみてください。→→データベースの内容を確認する（MySQL）　まず最初に、データベースの内容をチェックします。MySQLについては以下のようにして、コマンドラインで参照しますが、コマンドラインに慣れていない方は、画面ショットの最後の結果だけを見て、データベースの中身を確認するだけでもかまいません。1macOSの場合は「ターミナル」アプリケーション、Windowsの場合はPowerShellなどを利用して、MySQLが稼働しているコンテナに接続します。このコンテナはホストOSから接続できるよに、13306番ポートを開けてあります。ターミナルの場合は、次のようにコマンドを入力します。ユーザ名とパスワードをコマンドラインにふくめてあります。mysql -u web -h 127.0.0.1 -P 13306 --password=password test_db2コマンドが成功すると、MySQLのプロンプトになります。例えば、以下のようなSQLコマンドを実行して、データベースの中身を見てみます。select * from postalcode limit 6;3データベースを見ると、以下のような特徴があることが分かります。データベースtest_dbに、postalcodeテーブルがあるこのテーブルのフィールド構成は、f3が郵便番号、f7〜9が都道府県・市区町村・町域名となっているフィールドidは整数値で、レコードを特定する一意な値が設定されているフィールドmemoがあり、データは入っていない。このフィールドは文字列型であるデータベースの内容を確認する（FileMaker）　FileMaker Server上のサンプルデータベース「TestDB.fmp12」を開き、「postalcode」レイアウトを参照してみます。FileMaker Proで開いて確認しておきましょう。データベースTestDBに、postalcodeテーブルおよび同名のTOCがあり、postalcodeレイアウトで表示されているこのテーブルのフィールド構成は、f3が郵便番号、f7〜9が都道府県・市区町村・町域名となっているフィールドidは整数値で、レコードを特定する一意な値が設定されているフィールドmemoがあり、データは入っていない。このフィールドは文字列型である→→定義ファイルを編集する1ここからの作業は、Webブラウザー上で行います。ブラウザーで、「http://localhost:9080」に接続します。「トライアル用のページファイルと定義ファイル」という見出し部分を画面スクロールさせて表示してください。2「def01.phpを編集する」をクリックします。このdef01.phpというファイルは、定義ファイルです。すると、def01.phpファイルを編集する定義ファイルエディターが開きます。（本コースでは、用意されたリンクの1番目から利用しますが、もし、他の用途で1番目を利用しているのなら、例えば、def11.phpを利用するなど、別の番号のセットを使用してください。その場合ソースコードの記述が変わる部分がありますが、可能な限り注記します。）3Contextsの中のQueryと書かれ背景がグレーの部分を特定します。そして、その次の行の右の方にある「削除」をクリックして、Queryの設定がある行を削除します。4「レコードを本当に削除していいですか？」とたずねられるので、OKボタンをクリックします。5同様に、Sortingの次の行にある「削除」ボタンを押し、確認にOKボタンをクリックして、こちらの設定も削除しておきます。6repeat-controlの右のテキストフィールドを削除して空白にします。そして、Tabキーを押して、次のフィールドに移動します。定義ファイルエディターは、テキストフィールドを修正したとき、別のテキストフィールドに移動するときに書き戻しを行います。原則として、テキストフィールド修正後にはTabキーを押して確定することとします。7Database Settingsに設定を行います。『2-1　データベースからの取り出し設定』で説明した設定項目に従って入力を行います。[MySQL]の場合db-classは「PDO」のままでかまいません。dsnに「mysql:host=db;dbname=test_db;charset=utf8mb4」と入力します。そして、userに「web」、passwordに「password」と入力します。[FileMaker]の場合db-classを「FileMaker_DataAPI」に書き換えます。databaseは「TestDB」、userに「web」、passwordに「password」、serverに「gateway.docker.internal」、portに「443」、protocolに「https」、cert-vefifyingに「false」と入力します。最後にTabキーを押して、確定することを忘れないでください。　MySQLの場合、ApacheやPHPが稼働しているコンテナから、MySQLが稼働しているコンテナへ接続が必要です。この場合、コンテナ間をつなぐ仮想ネットワーク上で利用できる名前があります。「db」は、仮想ネットワークで使えるMySQLコンテナのサーバ名です。Docker Composerの設定ファイルで定義されています。gateway.docker.internalはコンテナからホストOSを参照可能なサーバ名で、Docker自身がこの名前でのアクセスを提供しています。→→ページファイルを編集する1「http://localhost:9080」で開いたページに戻ります。通常、定義ファイルエディターは異なるタブあるいは異なるウインドウに表示されるので、「http://localhost:9080」のページは別のタブあるいはウインドウにあるはずです。そちらに切り替えます。2「page01.htmlを編集する」をクリックします。このpage01.htmlというファイルは、ページファイルです。すると、page01.htmlファイルを編集するページファイルエディターが開きます。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）3まずは、表の基本構造を考えます。page01.htmlを以下のように変更します。単にTABLEタグで表を作り、THEAD、TBODYを明示しています。まだここではINTER-Mediatorによるデータベースアクセスは行っていません。なお、スタイルについては特に意味はありませんので、自由に設定してかまいません。&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt;\n    &lt;title&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;table&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;&lt;th&gt;郵便番号&lt;/th&gt;&lt;th&gt;住所&lt;/th&gt;&lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            &lt;tr&gt;&lt;td&gt;1111111&lt;/td&gt;&lt;td&gt;東京特許許可局&lt;/td&gt;&lt;/tr&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;4「http://localhost:9080」で開いたページに戻ります。別のタブあるいはウインドウにあるはずです。そちらに切り替えます。5「page01.htmlを表示する」をクリックします。page01.htmlファイルが別のタブあるいはウインドウで開きます。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）この段階では、単にHTMLで定義した通りに見えています。ここまでの作業で、「http://localhost:9080」で開いたページ、def01.phpの編集ページ、page01.htmlの編集ページ、page01.htmlを開いたページの4つのタブあるいはウインドウが見えていると思われます。これらのタブやウインドウは閉じないでそのままにして、必要に応じて切り替え、更新等をすることで作業を継続できますので、以後はこの4つのページを切り替えて作業します。6「page01.htmlを編集する」で開いたページファイルエディターのページに切り替えて、HTMLのコードを以下のように修正します。追加修正する部分は太字で示しています。&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt;\n  &lt;title&gt;&lt;/title&gt;\n  &lt;script type=\"text/javascript\" src=\"def01.php\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;table&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;&lt;th&gt;郵便番号&lt;/th&gt;&lt;th&gt;住所&lt;/th&gt;&lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            &lt;tr&gt;\n              &lt;td data-im=\"postalcode@f3\"&gt;&lt;/td&gt;\n              &lt;td&gt;\n                &lt;span data-im=\"postalcode@f7\"&gt;&lt;/span&gt;\n                &lt;span data-im=\"postalcode@f8\"&gt;&lt;/span&gt;\n                &lt;span data-im=\"postalcode@f9\"&gt;&lt;/span&gt;\n              &lt;/td&gt;\n          &lt;/tr&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n&lt;/body&gt;データベースからの取り出し結果の表示1「page01.htmlを表示する」で表示したページに切り替えます。そして、画面の更新を行います。アドレスバーの左右にあるボタンなどを利用して、画面を更新します。2次のように、グレーのボックスで何かたくさん表示されました。これは、現在デバッグモードになっており、データベースとのやりとりの部分を細かくログとして表示しています。途中を見ると、どんなSQL（あるいはRESTリクエスト）が発行されて、どんなデータが得られたかなどが分かります。消すには、ページの最初にある「clear」ボタンをクリックします。3テーブルのページが表示されました。データベースの内容が、テーブルの中に表示されていることを確認してください。4「def01.phpを編集する」によって表示された定義ファイルエディターのページを表示します。一番下のDebugの部分の「2」を「false」に書き換えて、Tabキーを押して値を確定させます。5「page01.htmlを表示する」で表示したページに切り替えます。画面の更新をします。デバッグ情報は表示されなくなり、ページの要素としての表だけが見えています。作成したファイルの確認　演習環境で変更するページファイルや定義ファイルは、IMApp_Trialレポジトリの中のsrcフォルダに存在します。ページファイルの中身は、ページファイルエディター上で見えるものと同じですが、定義ファイルのそのものの内容を確認してみます。1演習環境をセットアップしたときに用意したレポジトリのフォルダを開きます。2レポジトリの直下のsrcフォルダにあるdef01.phpとpage01.htmlが、この演習で作成したファイルです。&lt;?php\n//todo ## Set the valid path to the file 'INTER-Mediator.php'\nrequire_once('INTER-Mediator/INTER-Mediator.php');\n\nIM_Entry(array (\n  0 =&gt; \n  array (\n    'name' =&gt; 'postalcode',\n    'table' =&gt; 'postalcode',\n    'view' =&gt; 'postalcode',\n    'records' =&gt; 10,\n    'maxrecords' =&gt; 100,\n    'paging' =&gt; true,\n    'key' =&gt; 'id',\n  ),\n),\narray (\n),\narray (\n  'db-class' =&gt; 'PDO',\n  'dsn' =&gt; 'mysql:host=localhost;dbname=test_db;charset=utf8mb4',\n  'user' =&gt; 'web',\n  'password' =&gt; 'password',\n),\nfalse);\n?&gt;　定義ファイルの中身と、定義ファイルエディターの設定の対比をしてみてください。連想配列のキーに相当する部分はページ上では固定された文字列となっており、値に相当する部分が入力可能なテキストフィールドになっています。ここで見えているデータベース接続に関するキーと値は『2-1　データベースからの取り出し設定』ですでに説明した通りです。コンテキストの設定については、この後に説明をします。　なお、定義ファイルを構成する上では、「0 =&gt;」のような、数値のインデックスはあってもなくてもかまいません。手作業で定義ファイルを作成するときには省略しますが、定義ファイルエディターが機械的にファイルを生成するので、余計な記述が含まれてしまっています。演習のまとめ定義ファイルとページファイルを作成することで、データベースの内容をWebページ上に表示できます。定義ファイルは、データベース接続に関する設定や、コンテキストの定義があります。ページファイルはWebページのテンプレートとなります。フィールドのデータを挿入したいタグ要素に、data-im属性でコンテキスト名とフィールド名を記述します。ヘッダー部のSCRIPTタグを利用して、定義ファイルをJavaScriptとして呼び出して、ページに組み込みます。データベースの内容をページの中に埋め込むページ合成の処理は、ページロードしたときに自動的に行われます。→コンテキストの定義内容について　ここまでの演習で作成した定義ファイルdef01.phpのコンテキスト定義の部分を解説しましょう。まず、コンテキストの定義は、PHPではひとつの連想配列となっています。その要素として、→nameキーによる値は必ず必要です。nameキーは文字通りコンテキストの名称であり、ページファイルのリンクノードで、どのコンテキストのデータを取り出すのかを示すために利用します。nameキーの名前は、一般的にはプログラミング言語の変数命名規則に則って付けておくのが問題は少ないでしょう。一部に稼働する場合があるかもしれませんが、nameキーの値には空白文字を入れないようにしてください。　実際に利用するデータベースは、読み出し、つまりクエリーのときには→viewキーで指定した値を利用します。つまり、viewキーには、データベースのテーブルやビューの名前を指定します。しかしながら、viewキーの値がない場合には、nameキーの値を使います。　一方、編集やレコード作成、レコード削除といった書き込み処理の場合は、→tableキーで指定した値を利用します。こちらはテーブルを指定するのが一般的と思われます。このtableキーの値も指定がなければ、nameキーの値を利用します。　以上のように、viewやtableキーにより、読み書き対象のデータベース側のエンティティを個別に指定はできますが、もし、postalcodeテーブルがあるとして、nameキーの値が「postalcode」で、→→viewやtableキーを省略しているとしたら、postalcodeテーブルに対して読み書きを行います。これが一番シンプルな定義になります。さらにsourceキーもデータベース側のエンティティを指定するのに利用できますが、こちらはすぐ後の『データベース上での同一エンティティであることを示すsourceキー』で説明します。　viewやtableを別に用意しているのは、同一のテーブルでも、状況により（つまり、コンテキストにより）、異なる結果を得たい場合に対応します。同じpostalcodeでも、「新宿区の郵便番号」と「足立区の郵便番号」というコンテキストを伴う利用がある場合、nameキーはそれぞれsinjuku_postalcode、adachi_postalcodeとしておき、viewはいずれも同じpostalcodeにするという使い方が考えられます。そして、次のセクションで説明する検索条件を適切に指定をしていれば、それぞれのコンテキストは名前に従った結果が得られるということになります。　なお、FileMakerでは、viewやtableキーの値としては、→レイアウト名を指定します。→TO名（リレーションシップのタブで定義するボックスの名称）やテーブル名ではないので、注意をしてください。FileMaker ServerのXML共有およびFileMaker Data APIの制約があり、レイアウトを経由する方法でのWeb利用しかできません。　→keyキーに対する値は、その→→テーブルの主キーを指定します。複数のフィールドは指定できません。ただし、読み出しのみの場合には、この設定はなくてもかまいませんが、編集や削除の処理で、この値を利用します。また、挿入時にも挿入したレコードを特定するためにこの設定を利用します。つまり、更新処理がなければkeyキーの設定は不要ですが、更新処理が行われる場合には必須です。FileMakerの場合、「'key' =&gt; '-recid'」という指定が可能です。これは、システムが背後でレコードに自動的に割り振る通し番号を主キーとして利用する設定です。　→recordsキーは、検索結果の中からいくつのレコードを実際に取り出すのかということを指定するものです。postalcodeテーブルには何千ものレコードがありますが、10レコードだけが表示されています。この場合、たまたま検索して得られた先頭から10レコードを取り出しています。→maxrecordsは、recordsの値を動的に変更する仕組みを使う上で、この数値以上は絶対に上回らないようにするという設定です。いずれも、省略すると、非常に大きな数字を設定します。しかしながら、何万のレコードを一度にページに表示しようとすると多大な時間がかかってしまいます。通常はなんらかの制限が必要ですので、この数値は適切な値を与えておくのが良いでしょう。　pagingキーの値については、別のセクションで説明します。→データベース上での→同一エンティティであることを示す→sourceキー　Ver.5.3より、コンテキスト定義に、sourceキーの指定ができます。データベース上のエンティティ名に関連するキーとしては、name、view、tableがあり、それらに加えてsourceも利用できます。データベースから読み出しを行うときには、INTER-Mediatorが背後でSQLステートメントを生成していると考えてください（FileMaker Serverは別の方法です）。その時、FROM句に指定されるビューやテーブルの名前は、viewキーがあればその値、なければnameキーの値が使われます。CREATE/UPDATE/DELETコマンドの対象は、tableキーの値で、それがなければnameキーが使わます。例えば、nameキーにテーブル名があれば、そのテーブル名を指定しての読み書きはviewとtableキーの指定はしなくてもできます。しかしながら、表示は何かのビューを使い、更新はそのビューではない特定のテーブルを指定したいような場合に対処できるように、viewとtableキーとして異なる名前を指定できます。　しかし、これだけでは問題があります。あるテーブルのあるレコードのあるフィールドが、ページ上の複数のリンクノードに展開された場合、それが例えば両方ともテキストフィールドであるとします。この時、一方の値を変えると、フィールド更新のためのサーバー通信が行われるとともに、クライアントサイドで同一フィールドとバインドしている別のリンクノードの値を更新します。その時、何を手掛かりにして反映させるコンテキストを探しているかといえば、「viewないしはnameキーの値が同じだが異なるコンテキスト」です。例えば、住所録的なpeopleテーブルがあり、同一ページに全レコードの一覧と、その中で男性の一覧の両方があったとします。前者のコンテキストは、name=allmembers, view=people、後者のコンテキストはname=malemembers, view=peopleとして適切なqueryキーの条件を与えればいいでしょう。こうすれば、同一テーブルから異なるコンテキストを生成して、内容が異なる一覧を1ページ内で生成できます。この時、男性の一覧にあるレコードは、必ず全員のレコードの一覧にもあります。どちらもviewキーがpeopleなので、男性のレコードのひとつのフィールドを変更すると、対応する全員の一覧にあるレコードのフィールド値も更新されます。以下、この動作は「→連動」と呼びます。同一のviewキーの値を持つコンテキスト同士なので、INTER-Mediatorにとっての手がかりがあります。　しかしながら、データベースのスキーマに置いて、peopleをもとにした→ビューeveryoneとsomeoneが定義してあったとします。それらで表を作るとしたら、nameやviewを使うにしても、everyoneとsomeoneという名前がそれぞれのコンテキスト定義に登場はしますが、コンテキスト定義から各々が同一のpeopleテーブルから導出されていることは分かりません。そうなると、同一のレコードがそれぞれの一覧に見えていて、一方の値を変更したとしても、その変更結果を伝達する手がかりがなく、連動はできません。　このような時にはそれぞれのコンテキスト定義にsourceキーの値を指定して、一方のコンテキストを、name=everyone, source=people、もう一方はname=someone, source=peopleと定義します。ページファイル側は、everyoneあるいはsomeoneをdata-im属性に利用する点は変わりありません。このsourceの設定により、2つのコンテキスト定義から得られるコンテキストは、同一のテーブルから来ていることがINTER-Mediatorに伝わるので、それぞれのリンクノードに見えているフィールド値がユーザーインターフェース上で連動できようになります。→PHPファイル以外の定義ファイルについて　INTER-Mediator Ver.11で、定義ファイルについてはYAMLでの記述を可能にしました。YAMLに対応したことで自動的にJSONでの記述も可能になっています。なお、YAMLで記述可能ではありますが、トレーニングコース（本チュートリアル）では、従来からのPHPファイルで定義ファイルを記述する方法で進めることにします。また、定義ファイルエディタについてはPHPファイルでの従来からの手法にのみ対応していますので、そのこともあってチュートリアルではYAMLでの構築は紹介しません。YAMLを利用した定義ファイルについての詳細は定義ファイルの詳細を参照してください。　前の演習で作成した定義ファイルと同様なYAML形式の定義ファイルは、例えば以下のようになります。ページファイルのファイル名は「page01.html」なので、以下の内容のファイルをpage01.htmlと同じディレクトリに「page01.yaml」というファイル名で保存しておくのが手軽な方法になります。この時、ページファイルのhead部にあるscriptタグによる定義ファイルの読み込み部分は、「/INTER-Mediator/index.php」を参照するようにします。この場合は、ページファイルと定義ファイルのファイル名が同じであることを前提に処理が進められます。リスト2-2-5　前の演習で作ったPHPの定義ファイルと同等なYAMLによる定義ファイルcontexts:\n  - name: postalcode\n    table: 'postalcode\n    view: postalcode\n    records: 10\n    maxrecords: 100\n    paging: true\n    key: id\noptions: {}\nconnection:\n  db-class: PDO\n  dsn :mysql:host=localhost;dbname=test_db;charset=utf8mb4\n  use: web\n  password: password,\ndebug: 0→このセクションのまとめ　INTER-Mediatorを使ったWebページ構築の基本である、定義ファイルとページファイルを作成することを説明しました。定義ファイルはPHPのプログラムですが、キーと値を与えるデータのセットであり、定義ファイルエディターを利用すればプログラミング言語に従った記述はしなくてもかまいません。定義ファイルの大きな目的は、コンテキストの定義とデータベースへの接続の定義です。コンテキストという中間的な存在を定義して、その内容をページファイルに埋め込みます。ページファイルでは、data-im属性により、コンテキスト名とフィールド名を指定して、フィールドのデータの埋め込みを行います。他に、定義ファイルのSCRIPTタグによる読み込みと、INTER-Mediatorを稼働するきっかけの1行のプログラムの記述が必要です。テーブルの中にdata-im属性を持つリンクノードを定義すれば、レコードの数だけTRタグ要素を複製するため、複数のレコードをページ上に展開する動作も行われます。コンテキストの定義では、name、table、viewという3つのエンティティを指定するキーがあり、同一のテーブルに対して異なる名前のコンテキストを定義して、ページファイル側で使い分けることもできます。recordsキーの値により、レコード数を制限できます。→2-3JavaScriptプログラムの記述INTER-Mediatorは定義ファイルとページファイルの記述で多くのことができますが、一部の機能やあるいは複雑な処理を構築したいような場合には、JavaScriptによるプログラムが必要になることがあります。ここでは、ページファイルや別のファイルに記述するJavaScriptのプログラムについて基本的なことと、本コースでこの後に出てくるJavaScriptによる機能の呼び出しのための基本的なことを記述します。なお、言語についての説明は本コースでは行いません。→JavaScriptについての知識の確認　すでに→JavaScriptについての知識がある方や、これから勉強する方もいらっしゃると思います。INTER-Mediatorで使用するJavaScriptのプログラムを記述するために、どのような知識が必要なのかをまとめておきました。変数や制御構造といった言語の基本の知識はもちろん必要です。特に、配列とオブジェクトについては、読み解いたり記述ができるようになっておいてください。JavaScriptでのオブジェクト指向プログラミングの手法は、既存のオブジェクトの利用ができる程度に習熟しておいてください。プロパティの利用はもちろん、メソッドの置き換えや追加を「変数.メソッド名 = function (parameters) {...}」といった記法で行えることなどを知っておきましょう。HTMLの要素に対する処理は、DOM（Document Object Model）を基本としています。ただし、INTER-MediatorではDOM処理のための汎用的な仕組みもあるので、ある程度概念として知っておけばよく、DOMを駆使するほどのプログラミングは必要とはしていません。また、原則として既存のタグ要素をオブジェクトとして参照することがほとんどです。少なくともdocument.getElementById(id属性値)で、特定の要素を参照できることは知っておきましょう。AJAXに関連する処理は、アプリケーション開発で直接記述することは、INTER-Mediatorを使う範囲ではありません。APIを用意しています。→INTER-Mediatorが定義する変数　INTER-MediatorのAPIについては、本コースで少しずつ説明しますが、表2-3-1のようなグローバル変数がすでに定義された状態になります。ほとんどは、グローバル変数であり、変数が参照するのはオブジェクトです。IMLibContextのみ、クラスとして定義されておりその実態は関数で、実際に利用するときにはそのときに定義した異なる変数名になります。また、INTER-Mediator自体ではそのほかにも変数は定義していますが、APIとして利用するグローバル変数を表にまとめました。グローバル変数名用途→INTERMediator一番中心になるオブジェクト。ページ合成を行う→INTERMediatorLib機能を構築する際のサポートを行うような小規模の機能をまとめたオブジェクト→INTERMediatorOnPage認証などHTMLページに連動するような機能のクラスで、メソッドの拡張もここで行うものが多い→INTERMediator_DBAdapterデータベースサーバーに対してのやりとりを行うオブジェクト→IMLibUIレコード追加などのユーザーインターフェースから利用できる機能をまとめたオブジェクト→IMLibContext（クラス）データベースから取り出した結果を保持するモデルに相当するオブジェクト→IMLibContextPoolIMLibContextクラスの集合を管理するオブジェクト。APIはこちらのオブジェクトに定義→IMLibLocalContextデータベースと独立した、クライアントだけに存在するコンテキスト→IMParts_CatalogJavaScriptのコンポーネントを利用するときに使用するオブジェクト表2-3-1　INTER-Mediatorで定義される主要な変数　なお、これらの変数がいつ定義されるかというと、定義ファイルをSCRIPTタグで読み込むときです。定義ファイルはPHPのプログラムとして記述しますが、INTER-Mediatorはその定義ファイルのプログラムを実行することにより、JavaScriptのプログラムを生成してクライアントに伝達します。したがって、拡張子は.phpだけれども、ブラウザーにとってはMIMEタイプがtext/javascriptとなっているJavaScriptのプログラムがサーバーから返ってきたように見えるので、そこで実行が開始されて、これらの変数が定義されます。→JavaScriptを記述する3つの代表的な場所　JavaScriptのプログラムを記述するには、①タグ要素の特定の属性内、②ページファイルのヘッダー、③別ファイルの3つの方法があります。タグ要素の属性内においては、何行にも渡るようなプログラムを記述するのはかえって見づらくなります。通常はひとつあるいは数個の処理ステップで終わらせるような作り方をします。　リスト2-3-1のように、ページファイル（HTMLファイル）のヘッダー部分に、SCRIPTタグでJavaScriptのプログラムを記述することができます。HTMLのコードがダウンロードされて、解析される段階で、SCRIPTタグの内容が実行されると考えれば良いでしょう。したがって、ここでのプログラムを実行する段階では、まだ、ページの要素がロードされた状態にはなっていません。そこで、ロードされたときに実行される関数を定義したり、関数の定義があるのが一般的です。リスト2-3-1　ヘッダーに記述するJavaScriptプログラム&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt;\n  &lt;title&gt;&lt;/title&gt;\n  &lt;script type=\"text/javascript\" src=\"def01.php\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\"&gt;\n  INTERMediatorOnPage.doBeforeConstruct = function () {\n    var params = INTERMediatorOnPage.getURLParametersAsArray();\n    INTERMediator.clearCondition(\"postalcode\");\n    if (params[\"q\"]) {\n      INTERMediator.addCondition(\"postalcode\",\n         {field: \"f3\", operator: \"LIKE\", value: params[\"q\"]});\n    }\n  }\n  &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n         :\n&lt;/body&gt;\n&lt;/html&gt;　ヘッダー部のSCRIPTタグで記述するJavaScriptのプログラムは、リスト2-3-2のように、別のファイル（page01.js）に記述することもできます。これにより、HTMLとJavaScriptという2つの言語が混在することはなくなり、ファイルはひとつ増えるものの、別々に管理ができます。JavaScriptのプログラムが長くなると、別々のファイルになっている方が、それぞれのファイルの内容を把握しやすくなるでしょう。JavaScriptのプログラムを記述するファイルは拡張子が.jsのファイルで、JavaScripitのプログラムそのものを記述します。すると、それを呼び出しているSCRIPTタグが解析された段階で、ファイルに記述したプログラムが実行されると考えてください。jsファイルのエンコードは、ページファイルのエンコードと同一にするのが基本です。なお、閉じタグの「&lt;/script&gt;」を記述する必要があり、「&lt;script type=\"text/javascript\" src=\"page01.js\" /&gt;」といった空要素による表現は行いません。空要素にすると、Internet ExplorerやFirefoxで、SCRIPTタグの内容が無視されていたため、空要素にしない記述にしています。HTMLの定義では、内容を持つタグで内容が何もない場合は空要素の記述にはしないとされており、バグというわけではありません。空要素にしても稼働するブラウザーが、拡大解釈していると考えるべきです。リスト2-3-2　別のファイルに記述するJavaScriptのプログラム============================ page01.html\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt;\n  &lt;title&gt;&lt;/title&gt;\n  &lt;script type=\"text/javascript\" src=\"def01.php\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"page01.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n         :\n&lt;/body&gt;\n&lt;/html&gt;\n============================ page01.js\nINTERMediatorOnPage.doBeforeConstruct = function () {\n  var params = INTERMediatorOnPage.getURLParametersAsArray();\n  INTERMediator.clearCondition(\"postalcode\");\n  if (params[\"q\"]) {\n    INTERMediator.addCondition(\"postalcode\",\n       {field: \"f3\", operator: \"LIKE\", value: params[\"q\"]});\n  }\n}→このセクションのまとめ　このセクションでは、知っておきたい範囲のJavaScriptのプログラムの知識と、INTER-Mediatorで定義されているグローバル変数、そして、プログラムを具体的にどこに記述するのかといったことを説明しました。→2-4レコードを移動するナビゲーションたくさんのレコードを決められた数だけのレコードを表示して、表示範囲を切り替えるような機能はWebサイトではよく見られるものです。こうした機能は「ページネーション」と呼ばれます。この機能もINTER-Mediatorではプログラミングの必要はありません。あるid属性を持ったノードが、ページネーションのためのナビゲーションにかわります。しかしながら、そのままだと見栄えがよくありませんので、CSSの設定も必要です。→→→ページネーションの生成　ページネーションのユーザーインターフェースをページ内に表示させるには、定義ファイルのコンテキストの定義中で、→pagingキーによる値をtrueにします。そのpagingキーがtrueになっているコンテキストの表示範囲をページネーションコントローラーで管理をします。このpagingキーは、複数のコンテキストを定義した場合、その中のひとつのコンテキストだけに指定する必要があります。複数のコンテキストでpagingキーの値がtrueの場合、どのコンテキストに適用されるかは定かではありません。　定義ファイル側でpagingキーの設定を行った上で、ページファイルの中に、→id属性が「→IM_NAVIGATOR」のタグ要素を追加します。要素の種類はなんでもかまいませんが、帯状のコントロールを表示したいのであれば、DIVタグを使うのが便利でしょう。id属性がIM_NAVIGATORのタグ要素の子要素として、ページを前後するボタン等が追加されます。複数のページネーションを設定したい場合には、class属性がIM_NAVIGATORのタグ要素を定義します。例えば、ページトップとボトムにそれぞれページネーションが欲しいような場合にはその方法が使えます。複数のページネーションは同一の機能となります。　以上の動作を演習で追っていきます。→演習ページネーションのナビゲーションを表示する　この章で作成している定義ファイルdef01.phpとページファイルpage01.htmlに対してそのまま編集を続けます。定義ファイルにはpostalcodeというコンテキストひとつだけ定義されていて、pagingキーの値がtrueになっていました。その状態から、ページファイルを変更して、ページネーションが表示されるようにします。ページファイルの変更1Webブラウザーで「http://localhost:9080」を開きます。すでに開いている場合には、そのタブを確認します。2「def01.phpを編集する」「page01.htmlを編集する」「page01.htmlを表示する」のリンクをクリックして、それぞれのタブを開きます。もし、すでに開いている場合には、そのタブを確認します。3「page01.htmlを編集する」をクリックして開いたタブあるいはウインドウをで、HTMLの編集を行います。以下のように、BODYタグの後に、DIVタグを追加します。&lt;body&gt;\n  &lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n    &lt;table&gt;4「page01.htmlを表示する」をクリックして表示したタブあるいはウインドウで、画面の更新を行います。すると、テーブルの上部に現在表示中のレコード番号、ページ指定のボックスなどが表示されました。テーブルの上部のグレーの帯の部分が、ページネーションのコントローラーです。全部で3654のレコードがあり、その中の1〜10レコード目のデータが現在表示していることを示します。5「&gt;」ボタnは、次のページを表示することを示しています。クリックすると、11〜20レコード目、21〜30レコード目、31〜40レコード目と、10レコードずつ先を表示するようになります。6「&gt;&gt;」ボタンは、最後のページを表示することを示しています。クリックすると、3651〜3654レコード目、つまり、一連のレコードの最後のレコードを含む一群が表示されています。最後なので10レコードとは限らず、ここでは4レコードが表示されています。演習のまとめid属性がIM_NAVIGATORとなっている要素が、INTER-Mediatorによりページネーションのコントロールになります。ページネーションのコントロールに必要なスタイルは、テーマの中に設定されているので、通常はそのまま表示されます。定義ファイルのコンテキスト定義で、pagingキーの値がtrueのコンテキストに対して、一定数ずつのレコードを表示します。1ページ内のレコード数は、コンテキスト定義のrecordsキーの値で指定ができます。→→→ページネーションのカスタマイズ　ページネーションのコントロールのボタンは、SPANタグで表現していますが、例えば、クリック可能なボタンは、class属性がIM_NAV_infoに指定されています。このように、要素に対するクラス設定が自動的になされているので、対応するセレクタに対するスタイルを記述することで、ある程度のカスタマイズは可能です。表2-4-1に、あらかじめ設定されているクラスをまとめておきます。なお、#IM_NAVIGATORについては、当初からつけられたid属性に対応するもので、このセレクタも利用できます。なお、ページネーションのスタイルはテーマの機能と連動しています。具体的なカスタマイズ方法は、『5-6　スタイルの設定を自動化するテーマ』でも説明します。スタイルシートのセレクタページネーションの該当部分#IM_NAVIGATORコントローラーの外側.→IM_NAV_panelコントローラー全体span.→IM_NAV_info文字を表示する部分span.→IM_NAV_buttonボタンになる部分（機能するボタン）span.I→M_NAV_disabled機能しないボタンの部分表2-4-1　ページネーションで割り当てられたスタイルシートのセレクタ　さらにページネーションの中の文言についてもカスタマイズが可能ですが、JavaScriptでのプログラミングが必要になります。JavaScriptのプログラミングについては、『Chapter 6　JavaScriptでのプログラミング』で説明をしますが、ここではその内容を踏まえて結果のみ記載しておきます。　具体的には、→INTERMediator.→navigationLabelに配列を設定することで、ページネーションの各要素に対するカスタマイズが可能です。配列のインデックスと対応する箇所は表2-4-2に示します。INTERMediator.navigationLabelに何も設定しない場合には、表の既定値が画面に見えます。なお、インデックス9のレコード追加などのボタンについては、コンテキスト定義でのbutton-namesキーでの指定で、既定値ではない名前を設定できます（『3-3　レコードの追加・削除・複製』の『挿入と削除のコントロール』を参照）。インデックス設定対象既定値非表示0最初のレコードに戻る&lt;&lt;インデックス0〜31前のページに戻る&lt;無関係2次のページに進む&gt;無関係3最後のレコードに進む&gt;&gt;無関係4レコード番号の直前レコード番号インデックス4〜75レコード番号の範囲の間の文字列-無関係6レコード番号範囲と全レコード数の間の文字列/無関係7全レコード数の後の文字列（空文字列）無関係8更新ボタンの名称更新インデックス89レコード作成などのボタン作成や削除などレコード操作のボタンインデックス910まとめ保存のボタン保存インデックス1011ログアウトボタンの名称ログアウトインデックス11表2-4-2　JavaScriptによる要素のカスタマイズ　INTERMediator.navigationLabelへの配列の設定は、ページ合成よりも前である必要があるので、INTERMediatorOnPage.doBeforeConstructに代入する関数内部で記述します。記述方法の例としては、例えばリスト2-4-1のような形式になります。INTERMediator.navigationLabelの右辺に要素が12ある配列を記述しますが、最後のnullが続く部分は省略してもかまいません。それぞれの要素が、表2-4-2のインデックスに対応します。要素がnullだと既定値のままになります。要素に文字列を指定すると、その文字列に置き換わります。インデックスが0、4、8、9、10、11についてはfalseを指定することで、ページネーションの中の要素を表示しなくなります。リスト2-4-1ではインデックスが8のものがfalseになっているので、「更新」ボタンが非表示になり、他の要素はそのまま表示します。リスト2-4-1　ページネーションのカスタマイズを行うページファイルの例&lt;head&gt;\n&lt;script type=\"text/javascript\"&gt;\nINTERMediatorOnPage.doBeforeConstruct = function () {\n\tINTERMediator.navigationLabel = [null, null, null, null, null, null, null, null, false];\n}\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;/body&gt;　例えば、INTERMediator.navigationLabel = [\"最初\", \"前\", \"次\", \"最後\"] のように指定すると、&lt;&lt;ボタンは「最初」ボタンなどと変更されます。INTERMediator.navigationLabel = [false, null, null, null, null, null, null, null, null] だと、インデックスの0〜3のものが非表示となり、ページを前後するボタンが画面には出てこなくなります。→このセクションのまとめ　ページネーションは、pagingキーの値をtrueにしたひとつのコンテキストに対して構築され、機能します。また、そのコンテキスト定義のrecordsキーの値に応じて、1ページあたりのレコード数が決まります。ページファイルでは、id属性にIM_NAVIGATORを指定したDIVタグ要素などを配置しておけば、その場所にページネーションのコントロールが構築されます。スタイルシートによって、コントロール内部の要素のカスタマイズができますが、ボタン名などはJavaScriptを利用してカスタマイズが可能です。→2-5検索と並べ替えに関する設定実際の業務において、データベースの内容を単に表示するだけで事足りる事例はほとんどありません。通常はさまざまな→検索条件や→並べ替えの条件を指定したりします。こうした設定はINTER-Mediatorでは、定義ファイル上に設定することができます。ここでは固定的な条件を定義ファイル上に記述する方法を紹介しましょう。実行時に条件が決まるような場合には、JavaScriptから設定を行います。→定義ファイルへの条件設定　データベースへのクエリーを行うとき、SQLではWHERE句やORDER BY句で、検索条件やソート対象フィールドを指定します。INTER-Mediatorでは、その設定を行う場所として、まず、コンテキスト中を利用できます。リスト2-5-1はひとつのコンテキスト定義だけを抜き出した設定例です。PHPでの記述がファイルに対してそのまま記述されたものですが、実際の設定は定義ファイルエディターで可能ですので、設定時のキー名とその値を記述する後半の記述で理解しても良いでしょう。→queryおよび→sortキーに対する値を設定しますが、設定項目が複数あり、その項目がさらに複数あるので、「連想配列の配列」で記述します。後半の記述では、ひとつの塊を示すために、[ ] で囲みます。リスト2-5-1　定義ファイルでの検索条件とソート対象フィールドの指定（PHPでの記述）array(\n\t'name' =&gt; 'postalcode',\n\t'query' =&gt; array ( \n\t\tarray ( 'field'=&gt;'f3', 'operator'=&gt;'like', 'value'=&gt;'16%' ),\n\t\tarray ( 'field'=&gt;'f8', 'operator'=&gt;'=', 'value'=&gt;'新宿区' )\n\t),\n\t'sort' =&gt; array ( \n\t\tarray ( 'field'=&gt;'f3', 'direction'=&gt;'desc' )\n\t)\n)\n\n（項目のみに注目した記述）\nname：postalcode\nquery：\n\t[field：f3、operator：like、value：16%]\n\t[field：f8、operator：=、value：新宿区]\nsort：\n\t[field：f3、direction：desc]　sortキーの配列は、→field、→directionの2つのキーを持ちます。リスト2-5-1ではひとつの連想配列だけでしたが、複数の連想配列を記述した場合、順番に、並べ替えのキーとして利用します。fieldの指定は必ず必要ですが、directionは省略すると昇順と解釈します。→ascが→昇順、→descが→昇順で、サポートするすべてのデータベースはこの書き方で問題ありません（FileMakerでは置き換えを内部で行います）。　queryキーの配列の中は、→field、→operator、→valueの3つのキーを持ちます。それぞれ文字通り、コンテキストの元になるテーブルやビューにあるフィールド名と、検索条件に含める演算子、そして値を指定します。リスト2-5-1の最初の連想配列の場合は、MySQL向けであり、「`f3` like '16%'」というSQLステートメントの断片が記述されます。フィールド名や、値は、実際にデータベースアクセスする前にエスケープ処理を行っているので、この段階での記述ではエスケープ処理の必要はありません。　演算子および値については、データベースエンジンに依存します。例えばMySQLの場合、[field：f3、operator：like、value：16%] により、「16で始まるf3フィールドのデータのあるレコード」が検索されます。→%という記述や→like演算子は、MySQLに準拠したものです。したがって、queryキーの記述は、データベースごとによる違いがどうしても発生します。MySQLは多数の演算子をサポートしていますが、FileMakerで使用できるものとの対応は表2-5-1の通りです。MySQLの列のlike演算子は、likeと値に%を含む記述を行うことを意味しており、_は何らかの文字列に置き換わります。同等な条件をFileMaker Server向けに作成するには、[field：f3、operator：bw、value：16] となります。なお、「→IS NULL」および「→IS NOT NULL」については、operatorにこの記述を行い、valueには何も書かないでおきます。なお、cnやbwといった演算子は、XML共有やPHP共有で使われていたものです。FileMaker Data APIへの対応時に、過去との互換性を確保するために、db-classがFileMaker_FXの場合と同じ検索条件が使えるようにしたため、XML共有特有の演算子が利用できます。しかしながら、FileMaker Data API特有の演算子も利用できます。MySQLFileMaker_FX条件判断→=eq等しいlike '%_%'→cn含むlike '_%'→bwデータで始まるlike '%_'→ewデータで終わる→&gt;→gtより大きい→&gt;=→gteより大きいか等しい→&lt;→ltより小さい→&lt;=→lteより小さいか等しい→!=→neq等しくない表2-5-1　operatorに使える演算子をMySQLとFileMakerで比較　値については、ワイルドカードに対する文字列がデータベースに依存することが注意点です。また、→→FileMakerの場合で、完全一致にするには、operatorをeqにして、値は「=値」の形式にする必要があります。また、FileMakerで、「フィールド=値1→...値2」の形式で検索条件を与えるには、operatorを→asis、値を「値1...値2」と指定してください。　日付データについては、データベースエンジンの記述法に従ってください。MySQLなどのSQLデータベースでは「2015-05-25 12:00:00」のような年月日の順に-で結ぶSQLでのルールに従います。FileMakerの場合は、月/日/年の記述つまり「5/25/2015 12:00:00」という記述を行います。　queryの配列が複数ある場合、単に並べて記述されていれば、それらは、ANDで結ばれます。つまり、リスト2-5-1のような条件がある場合には、「`f3` like '16%' and `f8` = '新宿区'」となり、「f3フィールドが16で始まり、かつ、f8フィールドが新宿区」のレコードが抽出されます。　もし、→OR条件で記述したい場合は、次のように記述します。2番目の配列により、「ANDとORを入れ替えるという考え方」を適用しています。→__operation__も→exも決められたキーワードで、その通りの文字列で記述します。以下の場合、「`f3` like '16%' or `f8` = '新宿区'」という条件が生成されます。なお、FileMakerの場合は検索条件に式を記述することができないので、__operation__を記述すると、「すべての演算子がORとなる」という動作になります。FileMakerの場合は「ex」あるいは「or」というキーワードが使えます。FileMakerでORを導入するときは、デバッグモードでどんな検索がされているかを確認しながら設定を行うことをお勧めします。リスト2-5-2　検索条件でOR演算を行う場合query：\n\t[field：f3、operator：like、value：16%]\n\t[field：__operation__、operator：ex]\n\t[field：f8、operator：=、value：新宿区]　さらに複雑な条件を設定した例はリスト2-5-3の通りです。fieldが→__operation__の場合は、そこまででいったん式をまとめるという意味合いがあります。通常は、andでまとめた式をorでつなげますが、operatorがexの場合は、orでまとめた式をandでつなげるという逆動作になります。なお、複雑な式の記述はここまでです。理論的には、すべての論理式が→論理和標準形ないしは→論理積標準形で表現できるという定理があるので、この仕様ですべての論理式が記述できると言えるかと思われます。しかしながら、さまざまなロジックが絡む判定がアプリケーションにはつきものです。INTER-Mediatorではこの条件設定以外にもさまざまな手法がありますが、場合によっては、データベースが持つ機能、例えば、ビューを作ったり、ストアドプロシージャを使ったり、FileMaker Serverの場合はスクリプトの呼び出しを行うなどを利用することで、より適切な解決策になることも考えられます。リスト2-5-3　複雑な条件の指定query：\n\t[field：age、operator：&gt;、value：19]\n\t[field：year、operator：&gt;、value：1980]\n\t[field：__operation__]\n\t[field：age、operator：&lt;、value：39]\n\t[field：year、operator：&lt;、value：2006]\n生成される条件：(age &gt; '19' and year &gt; '1980') or (age &lt; '39' and year &lt; '2006')\n\nquery：\n\t[field：age、operator：&gt;、value：19]\n\t[field：year、operator：&gt;、value：1980]\n\t[field：__operation__、operator：ex]\n\t[field：age、operator：&lt;、value：39]\n\t[field：year、operator：&lt;、value：2006]\n生成される条件：(age &gt; '19' or year &gt; '1980') and (age &lt; '39' or year &lt; '2006')　定義ファイルをPHPのコードとして記述するとき、queryキー内の配列のvalueキーに表2-5-2のようなキーワードを利用することができます。定義ファイルエディターでは、IM_TODAYなどと記述すると、その文字列そのものになりますので、この記述は定義ファイルを別のテキストエディターで開くなど、PHPのコードとして直接編集する場合にだけご利用ください。キーワード置き換わる値IM_TODAY今日現在の日付IM_NOWいま現在の日時表2-5-2　valueキーに指定できるキーワード→JavaScriptで→→検索条件を付加する方法　コンテキストに記述した検索条件やソート条件は、そのコンテキストに対して常に適用される条件になります。これに対して、アプリケーション稼働時に決まるような検索条件を、JavaScriptで付与する手法も用意されています。JavaScriptを利用する方法を使うと、コンテキストの条件に、さらにプログラムで条件をプラスすることができます。例えば、来週締め切りを迎えるプロジェクトを表示させるといったことが可能になります。　具体的には、条件を付与して、ページの合成を行うのが基本です。リスト2-5-4はその例です。diaryというコンテキストへのクエリーを行うときに、「`theDate` &lt;= '2015-01-01'」という検索条件を付与します。コンテキストで決定される条件全体に対して、and条件で、JavaScriptで指定した条件が追加されます。addConditionメソッドは2つの引数を取り、最初がコンテキスト名、次が条件です。条件は、これまで通りfield、operator、valueというプロパティに対する値を指定したオブジェクトです。リスト2-5-4　JavaScriptで検索条件を付与した例&lt;script type=\"text/javascript\"&gt;\nINTERMediatorOnPage.doBeforeConstruct = function () {\n\tINTERMediator.→addCondition(\"diary\", {field: \"theDate\", operator: \"&lt;=\", value: \"2015-01-01\"});\n\tINTERMediator.→addSortKey(\"diary\", {field: \"theDate\", direction: \"asc\"});\n}\n&lt;/script&gt;　現在設定されている検索条件を得るには、INTERMediator.→additionalConditionを利用します。addtionalConditonプロパティに配列が入っています。例えば、リスト2-5-5の実行により、INTERMediator.additionalCondition[\"diary\"]の値が「{field: \"theDate\", operator: \"&lt;=\", value: \"2015-01-01\"}」となります。このプロパティはオブジェクトに保持されるので、明示的に消すまで消えません。したがって、条件が変わるような場合、「INTERMediator.additionalCondition = [];」によって一度クリアする必要がある場合も出てくると考えられます。　並べ替え条件の付与は、同様にINTERMediator.addSortKeyメソッドを利用します。また、参照は、INTERMediator.→additionalSortKeyプロパティを利用します。→演習データベース検索に条件を追加する　この演習では、コンテキストに検索条件やソート対象フィールドの設定を付与して、その条件が適用されて検索されていることを確認します。コンテキストに検索条件を追加する1Webブラウザーで「http://localhost:9080」を開きます。すでに開いている場合には、そのタブを確認します。2「def01.phpを編集する」「page01.htmlを編集する」「page01.htmlを表示する」のリンクをクリックして、それぞれのタブを開きます。もし、すでに開いている場合には、そのタブを確認します。3「def01.phpを編集する」をクリックして表示されるタブあるいはウインドウを表示します。ここで、Contextsに、nameがpostalcodeの定義が設定されているのを確認し、Queryの下の「追加」ボタンをクリックします。追加していいかどうかをダイアログボックスでたずねるので、OKボタンをクリックします。4Queryの下に新たな設定項目が追加されました。最初は適当なデータが入っています。5新たに作成されたQueryの次の行の部分で、fieldには「f8」、operatorには「=」、valueには「豊島区」をキータイプします。最後のテキストフィールドにキータイプした後、Tabキーを押して、設定内容を確定しておきます。（FileMakerでも=の指定は可能です）6「page01.htmlを表示する」をクリックして表示されるタブあるいはウインドウを表示します。今までは千代田区などのデータが見えていましたが、豊島区だけのデータになりました。また、レコード数もぐっと減って83レコードとなっています。コンテキストに指定した検索条件、つまりf8フィールドが豊島区のものだけに絞られていることが確認できました。7「def01.phpを編集する」をクリックして表示されるタブあるいはウインドウを表示します。Queryの次の行の検索条件を変更します。最後のテキストフィールドにキータイプした後、Tabキーを押して、設定内容を確定しておきます。MySQLの場合は、fieldには「f3」、operatorには「like」、valueには「16%」をキータイプします。FileMakerの場合には、fieldには「f3」、operatorには「bw」、valueには「16」をキータイプします。8「page01.htmlを表示する」をクリックして表示されるタブあるいはウインドウを表示します。検索条件通り、f3フィールドが「16」で始まるものだけのデータになりました。コンテキストにソート対象フィールドを追加する1「def01.phpを編集する」をクリックして表示されるタブあるいはウインドウを表示します。ここで、Contextsに、nameがpostalcodeの定義が設定されているのを確認し、Sortingの下の「追加」ボタンをクリックします。追加していいかどうかをダイアログボックスでたずねるので、OKボタンをクリックします。2Sortingの下に新たな設定項目が追加されました。最初は適当なデータが入っています。3新たに作成されたSortingの次の行の部分で、fieldには「f3」、directionには「desc」をキータイプします。最後のテキストフィールドにキータイプした後、Tabキーを押して、設定内容を確定しておきます。4「page01.htmlを表示する」をクリックして表示されるタブあるいはウインドウを表示します。検索条件通り、f3フィールドが「16」で始まるものだけのデータに絞られていますが、加えて、f3フィールドのデータの逆順に並べ替えられています。演習のまとめコンテキストには検索条件をqueryキーで付与できます。検索条件は、フィールド、演算子、値を与えることで定義できます。コンテキストにはソート対象フィールドをsortキーで付与できます。フィールド名と、昇順か降順かを与えて定義します。→ユーザーインターフェースの定義だけで検索条件を付与する　データベースの内容を一覧するときに、検索結果を適用するという仕組みを一切プログラムを書かずに実現するために、ボタンやテキストフィールド、あるいは一般的なノードに対して機能を割り当てるという機能があります。要素の→data-im属性を利用して、→ローカルコンテキスト（クライアントサイドでデータを記録する一種の「モデル」で、名前は「→_」）に特別なキー名でバインドすることで、機能が割り当てられます。以下は具体例でその機能を説明します。検索条件を付与するテキストフィールド　クエリー時に検索条件を付加するための記法の例がリスト2-5-5です。検索条件は通常、テキストフィールドにキータイプして、returnキーを押して検索されることを期待します。そこで、リスト2-5-5のようなdata-im属性を持ったINPUTタグ要素を記述します。この要素は、コンテキストの外に記述します。中に記述すると、繰り返されてしまうので、外側に記述するのが一般的と思われます。data-im属性の@以前は、ローカルコンテキストを示す_を指定します。@以降は、コロン（:）で4つのセクションに分かれます。それぞれのセクションに記入する内容は、表2-5-3にまとめました。リスト2-5-5　検索条件のテキストフィールドの記述例&lt;input type=\"text\" data-im=\"_@condition:postalcode:f3,f7,f8,f9:*match*\"&gt;セクション例記述内容第1セクション→conditionこの文字列「condition」と記述する第2セクションpostalcodeコンテキスト名第3セクションf3,f7,f8,f9フィールド名。カンマ区切りで複数の指定も可能で、その場合はOR条件。FileMakerのフィールド名に含まれる「::」は、「;;」に置き換えて指定第4セクション→*match*演算子（記述可能な演算子：= != &lt; &gt; &lt;= &gt;= →*match →match* *match*）表2-5-3　検索条件のテキストフィールドに指定する内容　最初の2つのセクションは、説明通りです。3つ目のセクションのフィールド指定はカンマで区切って複数指定も可能です。複数指定をすると、それぞれのフィールドに対して同じ値の検索条件をORで与えます。演算子は、データベースエンジンに関わらずに、表に示した演算子を記述します。matchを含む演算子は、*の位置に応じて、順に→後方一致（*match）、→前方一致（match*）、→部分一致（*match*）に対応します。　リスト2-5-5で示したテキストフィールドに、例えば「新宿」と入れてEnterキーを押すと、例えばMySQLを使っている場合には「f3 LIKE '%新宿%' OR f7 LIKE '%新宿%' OR f8 LIKE '%新宿%' OR f9 LIKE '%新宿%'」検索条件がコンテキストに付加されて、再度検索を行い、そのコンテキストのエンクロージャー内が更新され、検索結果が表示されます。　テキストフィールドが空白のときには、\"\"やNULLでの条件を設定するわけではなく、このテキストフィールドによる検索条件自体の設定が行われません。　同様なテキストフィールドを2つ以上配置すると、それぞれのテキストフィールドで決まる検索条件に対して、andでの検索が行われます。また、このとき、テキストフィールドが空白だった場合、そのテキストフィールドに対する検索条件は、やはり設定されません。　2つのテキストフィールドをorで結びたい場合や、あるいは空白時に特別な処理をしたいような場合には、単にテキストフィールドを配置した上で、その値を取り出し、addConditionメソッドを使うなどするJavaScriptのプログラムを実行して、検索処理を実施するようにします。→→表示件数を指定するポップアップメニュー　リスト2-5-6のポップアップメニューを選択すると、レコードの表示件数をポップアップの選択肢で指定でき、選択と同時にコンテキストが更新されます。data-im属性に指定する「→limitnumber」が決められた名前で、コロンより後にはコンテキスト名を記述します。そして、選択肢のためにOPTIONタグ要素を並べますが、選択した項目のvalue属性の値が、表示件数となります。このポップアップメニューのchangeイベントにより、コンテキストを更新します。リスト2-5-6　ページあたりの表示件数を選択するポップアップメニュー&lt;select type=\"text\" data-im=\"_@limitnumber:postalcode\"&gt;\n\t&lt;option value=\"5\"&gt;5件ずつ&lt;/option&gt;\n\t&lt;option value=\"10\"&gt;10件ずつ&lt;/option&gt;\n\t&lt;option value=\"30\"&gt;30件ずつ&lt;/option&gt;\n&lt;/select&gt;→→コンテキストの更新ボタン（検索ボタン）　リスト2-5-7のボタンをクリックすると、指定したコンテキストが更新されます。つまり、「検索」ボタンとして機能するということです。「→update」が決められた名前で、コロンより後にはコンテキスト名を記述します。clickイベントにより、コンテキストの更新します。リスト2-5-7　コンテキストの更新ボタン&lt;button data-im=\"_@update:postalcode\"&gt;検索ボタン&lt;/button&gt;→→並べ替えフィールドの指定　リスト2-5-8のSPANタグ内の▲をクリックすると、f3フィールドの昇順で並べ替えを行います。記述するタグはSPANに限らず、onclick属性が適用できるのであれば、なんでもかまいません。clickイベントにより指定したコンテキストが更新されます。　@以降は、コロン（:）で4つのセクションに分かれます。それぞれのセクションに記述する内容は、表2-5-4に記載します。ここで、同一のコンテキストに対する「addorder」の機能を持った要素は連動します。例えば「f3で昇順」の後に「f9の降順」を選択すると、「f9の降順」を最優先とし、続くキーとして「f3で昇順」を設定します。最後に設定した条件が最優先になるようになっています。リスト2-5-8　フィールドの並べ替えを指定&lt;span style=\"cursor: pointer\" data-im=\"_@addorder:postalcode:f3:asc\"&gt;▲&lt;/span&gt;セクション例記述内容第1セクション→addorderこの文字列「addorder」を記述する第2セクションpostalcodeコンテキスト名第3セクションf3フィールド名。ひとつのみ第4セクションasc昇順ならasc、降順ならdesc表2-5-4　並べ替えるタグ要素に指定する内容→演習検索のユーザーインターフェースを作成する　この演習では、検索条件やソート対象フィールドのユーザーインターフェースをページファイル上に定義して、そのユーザーインターフェースが期待通りの動作をすることを確認します。検索条件を与えるテキストフィールド1Webブラウザーで「http://localhost:9080」を開きます。すでに開いている場合には、そのタブを確認します。2「def01.phpを編集する」「page01.htmlを編集する」「page01.htmlを表示する」のリンクをクリックして、それぞれのタブを開きます。もし、すでに開いている場合には、そのタブを確認します。3「def01.phpを編集する」をクリックして表示されるタブあるいはウインドウを表示します。Queryの次の行の検索条件の右側にある「削除」ボタンをクリックします。また、Sortingの次の行にある「削除」ボタンをクリックします。4QueryおよびSortingの次の行に項目がなにもない状態になっていることを確認します。5「page01.htmlを編集する」をクリックして表示されるタブあるいはウインドウを表示します。BODYタグの次の行に、検索のためのユーザーインターフェースに関する記述を追加します。&lt;body&gt;\n  検索：&lt;input type=\"text\" data-im=\"_@condition:postalcode:f8,f9:*match*\"/&gt;\n  &lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n    &lt;table&gt;6「page01.htmlを表示する」をクリックして表示されるタブあるいはウインドウを表示します。レコードの個数が3654なので、すべてのデータが見えています。ここで、ページの冒頭に「検索」と書かれたテキストフィールドがあることを確認します。7検索のテキストフィールドに「青」と入力して、Enterキーを押します。すると、全レコード数が55になり、検索された一覧を見ると、f8ないしはf9に、「青」という文字が含まれた住所のみが検索されていることが分かります。8検索のテキストフィールドに「赤」と入力して、Enterキーを押します。同様に、f8ないしはf9に、「赤」という文字が含まれた住所のみが検索されていることが分かります。その他の検索用ユーザーインターフェース要素1「page01.htmlを編集する」をクリックして表示されるタブあるいはウインドウを表示します。ページネーションのDIVタグ要素の前に、以下のように追加します。また、テーブルのヘッダー部分も追加します。&lt;body&gt;\n  検索：&lt;input type=\"text\" data-im=\"_@condition:postalcode:f8,f9:*match*\"/&gt;\n  &lt;button data-im=\"_@update:postalcode\"&gt;検索&lt;/button&gt;\n  レコード数：&lt;select data-im=\"_@limitnumber:postalcode\"&gt;\n  &lt;option value=\"5\"&gt;5&lt;/option&gt;\n  &lt;option value=\"10\" selected=\"selected\"&gt;10&lt;/option&gt;\n  &lt;option value=\"20\"&gt;20&lt;/option&gt;\n  &lt;/select&gt;\n  &lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n    &lt;table&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n              &lt;th&gt;\n                郵便番号\n                &lt;span style=\"cursor: pointer\" data-im=\"_@addorder:postalcode:f3:asc\"&gt;▲&lt;/span&gt;\n                &lt;span style=\"cursor: pointer\" data-im=\"_@addorder:postalcode:f3:desc\"&gt;▼&lt;/span&gt;\n              &lt;/th&gt;\n              &lt;th&gt;住所&lt;/th&gt;\n          &lt;/tr&gt;\n        &lt;/thead&gt;2「page01.htmlを表示する」をクリックして表示されるタブあるいはウインドウを表示します。「検索」ボタンをクリックすれば、検索が行われることを確認します。そして、ポップアップメニューから「20」を選択します。31ページあたり20レコードになりました。以後、20ページ表示の状態が保持されます。4「郵便番号」の右の「▼」をクリックすると、郵便番号の降順（大きいものが最初に来る）での並べ替えが行われました。5「郵便番号」の右の「▲」をクリックすると、郵便番号の昇順（小さいものが最初に来る）での並べ替えが行われました。演習のまとめ検索条件を与えるテキストフィールドを、ページファイルへの設定のみで用意できます。同様に、検索ボタン、1ページの件数、並べ替え指定の要素も、ページファイルへの設定のみで用意できます。→複数の検索枠に関する処理　ここまでは、data-im=\"_@condition:...\" が設定されているテキストフィールドがひとつだけでした、これらが2つ以上ある場合や、あるいはひとつの枠内でキーワードを分離して、それぞれにどのような複合条件を生成するのでしょうか？　これについては、JavaScriptのプロパティの値を利用して、カスタマイズ可能です。ページ合成時に設定してもいいですし、あるいはプログラム処理をして検索するような場合には、プロパティ設定を都度都度行うということも可能です。次のようなプロパティが用意されています。プロパティ既定値設定値INTERMediator.lcConditionsOP1ANDfalse単一のim-data属性に含まれるフィールドの並びに対しての条件は通常はORだが、trueにすればANDにするINTERMediator.lcConditionsOP2ANDfalse異なるテキストフィールド間の検索条件は通常はORだが、trueにすればANDになる。INTERMediator.lcConditionsOP3ANDfalsefalseなら検索キーワードをそのまま指定、trueなら検索キーワードを空白で分解してORで結合、'AND'なら分解してANDで結合表2-5-5　　変数の解釈だけではわかりにくいと思われるので、ちょっと複雑ですが、設定例で見てみましょう。検索窓としては、次のようなものが3つあったとします。検索窓に入力した検索キーワードは、value属性で表示します。ここで、testtableコンテキストが定義されており、そのコンテキストでは、queryキーに「num1 &gt; 0」という検索条件が設定されていたとします。なお、_@condition: で追加する検索条件と、コンテキスト自体に設定されている検索条件は、常にANDで結合されます。リスト2-5-9　プロパティの値と生成されるSQLステートメント# 検索条件のテキストフィールドが3つある\n&lt;input data-im=\"_@condition:testtable:num1:&gt;=\" value=\"10\"&gt;\n&lt;input data-im=\"_@condition:testtable:num1:&lt;=\" value=\"99\"&gt;\n&lt;input data-im=\"_@condition:testtable:vc1,vc2,vc3:*match*\" value=\"test word\"&gt;\n\n# .lcConditionsOP1AND = false, .lcConditionsOP2AND = false, .lcConditionsOP3AND = false（既定値）\nSELECT * FROM `testtable` WHERE ((`num1` &gt; 0))\n    AND ( \n        (`num1` &gt;= 10)\n        OR (`num2` &lt;= 99)\n        OR((`vc1` LIKE '%test word%'\n              OR `vc2` LIKE '%test word%'\n              OR `vc3` LIKE '%test word%')));\n\n# .lcConditionsOP1AND = true, .lcConditionsOP2AND = false, .lcConditionsOP3AND = false\nSELECT * FROM `testtable` WHERE ((`num1` &gt; 0)) \n    AND (\n        (`num1` &gt;= 10)\n        OR (`num2` &lt;= 99)\n        OR ((`vc1` LIKE '%test word%'\n            AND `vc2` LIKE '%test word%'\n            AND `vc3` LIKE '%test word%')));\n\n# .lcConditionsOP1AND = false, .lcConditionsOP2AND = true, .lcConditionsOP3AND = false\nSELECT * FROM `testtable` WHERE ((`num1` &gt; 0)) \n    AND (\n      (`num1` &gt;= 10)\n      AND (`num2` &lt;= 99)\n      AND ((`vc1` LIKE '%test word%'\n               OR `vc2` LIKE '%test word%'\n               OR `vc3` LIKE '%test word%')));\n\n# .lcConditionsOP1AND = false, .lcConditionsOP2AND = false, .lcConditionsOP3AND = true\nSELECT * FROM `testtable` WHERE ((`num1` &gt; 0))\n    AND ( \n        (`num1` &gt;= 10)\n        OR (`num2` &lt;= 99)\n        OR (((`vc1` LIKE '%test%'\n                OR `vc2` LIKE '%test%'\n                OR `vc3` LIKE '%test%')\n            OR (`vc1` LIKE '%word%'\n                OR `vc2` LIKE '%word%'\n                OR `vc3` LIKE '%word%'))))\n\n# .lcConditionsOP1AND = false, .lcConditionsOP2AND = false, .lcConditionsOP3AND = 'AND'\nSELECT * FROM `testtable` WHERE ((`num1` &gt; 0))\n    AND ( \n        (`num1` &gt;= 10)\n        OR (`num2` &lt;= 99)\n        OR(((`vc1` LIKE '%test%'\n                  OR `vc2` LIKE '%test%'\n                  OR `vc3` LIKE '%test%')\n             AND (`vc1` LIKE '%word%'\n                 OR `vc2` LIKE '%word%'\n                 OR `vc3` LIKE '%word%'))))→→→SQLの集計処理　INTER-Mediatorはコンテキスト定義やあるいは動作上の状況から自動的にSQLステートメントを生成します。通常のリレーション取得はそれでもいいのですが、SUM関数などを使う集計処理（アグリゲーション）を行うようなSQLを生成させたいことがあるでしょう。集計処理を伴うビューを利用してその結果から検索をして必要な集計結果を取り出すこともできますが、その方法では集計として不要なレコードの処理も行うことになるかもしれません。そこで、コンテキスト定義やあるいはその他の検索条件の指定も含めたSQLコマンドの記述ができるようになっています。　SQLコマンドの記述ができるように、コンテキスト定義に→aggregation-select、→aggregation-from、→aggregation-group-byという3つのキーが記述できます。これらのキーがあると、viewキーはSQL生成では無視されます。また、読み込み処理のみをサポートし、更新等の処理は行えないコンテキストとなるので、tableキー、keyキーは実質的に使われません。aggregation-select、aggregation-fromは両方とも指定する必要があります。これらのキーを設定すると、コンテキストからの読み込みに次のようなSQLを生成します。つまりaggregation-で始まるキーに加えて、query、relation、sort、recordsキーの値や、JavaScriptで動的に追加した検索条件などが加味されたSQLのSELECTステートメントが生成されてデータベースに送られます。リスト2-5-10　生成されるSQLステートメントSELECT [aggregation-selectの値]\nFROM [aggregation-fromの値]\nWHERE [query, relation, その他による検索条件]\nORDER BY [sort, その他によるソート条件]\nGROUP BY [aggregation-group-byの値]\nLIMIT [recordsの値]\nSTART [オフセット値]　なお、STARTについては、引き渡しは実装しましたが、Ver.5.3現在、0でのみ利用してください。つまり、ページネーションは利用できないということです。パフォーマンスを考慮して、レコード数のカウントは、SQLの結果の数と同じにしてあるので、結果的に1ページ分しか出てこないでしょう。これは、後々改良をすることとします。また、このコンテキストは、PDOでしか利用できず、FileMaker Serverでは利用できません。　この機能によるパフォーマンス向上の効果を説明しましょう。例えば、大量の売り上げデータがあって、月ごとに集計したいとします。集計する方法は、SQLだけでなく、計算プロパティを使う方法ありますが、大量なので、処理を効率的にしたいため、データベース側で集計したいとします。aggregation-*キーがない場合には、月ごとの売り上げ集計結果が1レコードとなるようなビューを作成しておき、検索条件（例えば、年と月を指定）をビューに適用することになります。しかし、そのような動作だと、一旦ビューを構築するために全部のデータの集計を行うこともあり、一部のデータだけを使うという動作にならず、十分なパフォーマンスが得られません。しかし、aggregation-selectに「→SUM(price)」のような記述が含まれていれば、WHERE句で対象月に絞り込んでクエリーを実施した上で集計されるので、全部のデータを取り出して処理をするということはなく、より最適化されたSQLが発行されます。　FROMを独立して指定できるようにしているので、ここに、「テーブル名 →JOIN テーブル名 ON 条件」という記述によるテーブル結合もできます。aggregation-*キーはそのまま指定されるようになっていて、とりあえず、現状ではフィールド名のクォートなどはしていません。セキュリティ的に問題になる可能性もありますが、クライアントのユーザーによって改変できない内容なので、構築時に注意をしておけば基本的には問題ないでしょう。→このセクションのまとめ　データベースへのクエリーでは、検索条件やソート対象フィールドの指定が欠かせません。INTER-Mediatorでは、コンテキストへの設定、およびJavaScriptでの動的な設定をサポートします。加えて、ユーザーインターフェース要素へのルールに従った記述により、例えばテキストフィールドを配置するだけで検索条件を設定する機能を追加することもできます。→2-6設定ファイルparams.phpコンテキストなどを記述する定義ファイルにはさまざまな設定が可能ですが、さらに全ての定義ファイルあるいはページファイルに対して設定が可能なファイルが用意されています。ファイル名は決め内で「params.php」となっています。同一の設定は、定義ファイルよりもparams.phpの方が優先されるので、共通の設定はもちろんparams.phpに設定することで、各定義ファイルでの記述をしなくても設定が適用されるようになります。→→params.phpについて　INTER-Mediatorで作成するアプリケーションの設定は、ほとんどが定義ファイルに記述できます。定義ファイルには複数のコンテキストを記述できます。ひとつのページファイルに対してひとつの定義ファイルを作るのが基本ですが、複数のページファイルからひとつの定義ファイルを利用するのもかまいません。一般的なアプリケーション開発ではたくさんの定義ファイルを作るのが一般的な状況でしょう。そうなると、その中で共通の設定をどこかにまとめて書きたくなります。特に、データベースへの接続設定は、さまざまな場所に記述できますが、データベースの接続設定はアプリケーション全体で一通りしかないこともあり、そうならばひとつの場所に1回だけ記述するのが適切です。　こうした、「定義ファイルをまたがった設定」をサポートするために、ファイル名を決め打ちしたparams.phpファイルを利用できます。「INTER-Mediator」フォルダーすなわちレポジトリのルートにparams.phpファイルがあり、PHPでのプログラムで記述されています。プログラムファイルではありますが、実際には変数に値を設定している程度のものなので、クォーテーションの対応や行の最後のセミコロンを忘れない限りは大きく間違えることはないでしょう。しかしながら、サーバーの状況によって設定を変えるなどはプログラムでも実現可能です。　params.phpファイルは、いくつかの置き場所が利用できます。次の順序でparams.phpを探し、最初に見つかったファイルだけを利用します。最初の2つは、params.phpファイル自体をINTER-Mediatorと分離して定義できるので、後からINTER-Mediatorをアップデートしてもparams.phpファイルは上書きされず、そのまま残ります。INTER-Mediatorが「vendor/inter-mediator/inter-mediator」というパスに存在する場合、vendorと同じレベルのlibフォルダー直下のparams.php。この設定は、INTER-Mediatorの「アプリケーション形式」（INTER-Mediator自体をcomposerでインストールする場合）を想定しています。INTER-Mediatorのひとつ上の階層のフォルダにあるparams.php、つまり、INTER-Mediatorフォルダと同じ場所にあるparams.phpINTER-Mediatorフォルダにあるparams.php→→データベース接続情報の管理　データベースへの接続の基本的なことは『2-1　データベースからの取り出し設定』で、そして実際に定義ファイル上での記述方法は『2-2　ページ構築のための基本設定』で説明してきました。この設定をparams.phpを使って共通化する方法を説明しましょう。　まず、定義ファイルのIM_Entryの第3引数に指定する連想配列のキーをリスト2-6-1にまとめましたが、それに対応するparams.php内での変数名と対比して示しました。キー値params.phpでの変数名'db-class'→データアクセスクラスの名前（例：PDO、FileMaker_DataAPI）$dbClass'dsn'[PDO]接続時に指定する→DSN$dbDSN'option'[PDO]オプション指定。array型で指定$dbOption'database'[FileMaker_DataAPI]→データベース名$dbDatabase'user'[PDO][FileMaker_DataAPI]→ユーザー名$dbUser'password'[PDO][FileMaker_DataAPI]→パスワード$dbPassword'server'[FileMaker_DataAPI]→サーバーアドレス（例：127.0.0.1）$dbServer'port'[FileMaker_DataAPI]→サーバーポート（例：80）$dbPort'protocol'[FileMaker_DataAPI]サーバーへの→接続プロトコル（例：HTTP）$dbProtocol'datatype'[FileMaker_DataAPI]サーバーがサポートするデータ形式（例：FMPro14）$dbDataType'cert-vefifying'[FileMaker_DataAPI]→サーバー証明書の検証を行うかどうか（既定値はtrue）$certVerifying表2-6-1　データベース接続情報に記述できる配列のキー　例えば、リスト2-6-1は、INTER-Mediatorに含まれているparams.phpの内容です。そして、リスト2-6-2は、定義ファイルのIM_Entry関数の第3引数で、db-classキーしか設定していません。この定義ファイルでは、db-classは「PDO」が指定されていますが、その他の情報は、リスト2-6-1から取得します。PDOで実際に使用される設定は、DSN、ユーザー名、パスワードです。それぞれ、変数の$dbDSN、$dbUser、$dbPasswordに代入されているものが、実際にページ合成等で利用されます。この場合、$dbServerから$dbProtocolまでの変数はFileMakerの場合だけに使われる変数なので、実際の作動時には無視することになります。リスト2-6-1　INTER-Mediatorフォルダーにあるparams.phpの冒頭部分&lt;?php\n$dbClass = 'PDO';\n\n$dbUser = 'web';\n$dbPassword = 'password';\n\n$dbServer = '127.0.0.1';\n$dbPort = '80';\n$dbDataType = 'FMPro12';\n$dbDatabase = 'TestDB';\n$dbProtocol = 'HTTP';\n\n$dbDSN = 'mysql:unix_socket=/tmp/mysql.sock;dbname=test_db;charset=utf8';\n$dbOption = array();\n\t:リスト2-6-2　定義ファイルのIM_Entry関数の第3引数array(\n    'db-class' =&gt; 'PDO',\n),　データベース接続に対する設定は、コンテキスト定義、IM_Entry関数の第3引数、そしてparams.phpのいずれでも設定が可能です。コンテキスト定義内でも、db-classなどのキーで指定可能で、この設定はそのコンテキスト単独に適用されます。IM_Entry関数の引数だと定義ファイルのコンテキストすべてに適用されます。params.phpだと複数の定義ファイルすべてに渡って設定が適用されます。もちろん、値が「PDO」の設定もparams.phpに記述することはできるのですが、定義ファイル内にデータベースエンジンの種類が分かる記述があった方が、定義ファイルの編集時に参照しやすいという効果もあります。効率の良い設定方法を採用して、運用管理をしましょう。→設定ファイルparams.phpに記述するアプリケーションの動作に関する設定　データベースの接続以外にparams.phpファイルに指定できる変数のうち、アプリケーションの動作に関するものを表2-6-2にまとめました。それぞれ、実際の説明のところでも、params.phpファイルへの指定が可能な点を記載しますので、設定方法は、解説を参考にしてください。INTER-Mediatorに含まれているparams.php（レポジトリにあるものはこちらをクリック）には、コメントにしているものが多いものの、すべての変数が定義されているので、コメントを外したり、あるいは値を書き換えるだけで通常は利用できると思われます。値の指定例も、INTER-Mediatorに含まれるparams.phpに記載があります。変数名既定値用途$prohibitDebugModefalsetrueなら→デバッグモードに一切入らないようにする$appLocale\"ja_JP\"→→アプリケーションのロケール$appCurrency\"JP\"→→アプリケーションの通貨。省略時は$appLocaleの設定に対応する$defaultTimezone（未定義）PHPの設定ファイルの不備などで、PHPのdate_default_timezone_setが適切になされていないときに指定する→タイムゾーン表2-6-2　params.phpに記述できるアプリケーション動作の変数→INTER-Mediator自身や定義ファイルの→→呼び出しパスをカスタマイズする　INTER-Mediatorの動作自体を変更したいと考える場合に利用可能なparams.phpの設定を表2-6-3にまとめました。通常、これらの設定を変更する必要があるときはほぼないとは思いますが、サーバーの状況や動作を改造したいなどの場合に使える可能性があります。変数名既定値用途$documentRootPrefix（未定義）→→定義ファイルへのパスに追加の文字列が必要な場合に指定する$scriptPathPrefix\"\"(空文字列)$_SERVER['SCRIPT_NAME']が正しいパスを返さないとき、パスの前につける文字列$scriptPathSuffix\"\"(空文字列)$_SERVER['SCRIPT_NAME']が正しいパスを返さないとき、パスの後につける文字列$callURL（未定義）定義ファイルでダウンロードされたスクリプト内部で、さらに定義ファイルを別のパスで呼び出す場合のURL表2-6-3　params.phpに記述できる動作設定の変数　INTER-Mediator自身へのアクセスをクライアントから行うために、INTER-Mediatorフォルダーのルートを識別する必要があります。定義ファイルで呼び出されたクラス（GenerateJSCode.php）内では、自分自身のサーバー上での絶対パスから、$_SERVER['DOCUMENT_ROOT']によって得られたWebサーバーのルートへの絶対パスを取り除くことで、クライアントから見たINTER-Mediatorフォルダーのルートを求めています。しかしながら、共有サーバーを利用するような場合に、パスのズレが発生してしまうことがあります。その場合、params.phpファイルに$documentRootPrefixを定義して、$_SERVER['DOCUMENT_ROOT']で得られる前に設定するパスを記述します。こうして、パスのズレを修正することができます。なお、INTER-Mediatorのパスは、スタイルを設定するテーマの機能でのみ利用されているため、パスのズレがあっても、基本的な動作は行います。　定義ファイルはサーバー側で実行します。PHPの仕組みにより、$_SERVER['SCRIPT_NAME']によって、自分自身、つまりサーバー上で稼働している定義ファイルのパスが分かります。このパスは、Webサーバーのルートからのパスです。クライアント側にロードされたINTER-MediatorのJavaScript部分は、この値をもとに、定義ファイルを何度もクライアントから呼び出します。　しかしながら、クライアント側からの呼び出しパスが、$_SERVER['SCRIPT_NAME']によって得られた値と異なることがあります。例えば、ユーザーのホームフォルダーにあるpublic_htmlフォルダーをルートにする「~user」といったチルダとユーザー名を記述したURLを記述する場合があります。この時にparams.phpファイルに記述する$scriptPathPrefix、$scriptPathSuffixを利用して、$_SERVER['SCRIPT_NAME']によって得られた値の前後に文字列を追加したり、$callURLによってクライアントから定義ファイルを呼び出すパスを完全に違うものにすることができます。これらの方法で、正しくクライアントから定義ファイルを呼び出すようにすることができるようになります。　params.phpファイルに記述する$callURLは、定義ファイルの呼び出しURLを変更できます。通常は、定義ファイルの呼び出しURLは自動的に処理されるのですが、他のフレームワークと連動してINTER-Mediatorを利用するような場合には、こうした設定が必要になるかもしれません。なお、この変数の利用においては、INTER-Mediatorのソースおよび対象とするフレームワークのソースを読み込んだ上での改造が必要な場合になります。本書では詳細は説明しません。→このセクションのまとめ　params.phpファイルへは、データベースの設定などを記述することができ、通常はこの設定を、アプリケーション全体、すなわち複数の定義ファイルを設定するのと同じ効果が得られます。データベース設定以外にも設定可能な項目もありますが、データベース設定で利用されることが多いでしょう。「INTER-Mediator」フォルダーの中だけでなく、同じ階層にparams.phpを配置することもできます。「INTER-Mediator」フォルダーの入れ替えをアップデート時に行うとすれば、「INTER-Mediator」フォルダーと同じ階層にparams.phpを置く方が間違えて消してしまう危険性は低くなります。\n"
    },
    {
        "id": 1003,
        "parent": "/ja/tutorial/",
        "path": "/ja/tutorial/proof-03.html",
        "title": "データベースの更新を行うページ",
        "breadcrumb": "chapter 3",
        "body": "→Chapter 3データベースの更新を行うページこの章は、INTER-Mediator Ver.11をもとに記載しました。前の章ではデータベースの内容をページに表示する方法を説明しました。続いて、ページ上で入力したり、あるいは新たなレコードを作成する方法について説明をします。バインドの仕組みを利用することで、手続き的なプログラムを記述しなくても、ページ上のデータを修正した結果がデータベースに反映されます。→3-1更新可能なテキストフィールドWebページ上にテキストフィールドを配置すると、通常はそのままで更新可能な状態になります。もちろん、データベースのアクセス権等の動作上の状況を満たしている必要がありますが、INTER-Mediaotrはテキストフィールド上のデータを修正したときに、そのデータをデータベースに書き戻すことができるようになっています。→→更新が可能なタグ要素　INTER-Mediatorで作成したWebページでは、→INPUT、→TEXTAREA、→SELECTの各タグで記述されたリンクノード（data-im属性があるタグ要素）については、更新すなわちそこに見えているデータを変更することによってデータベースへ変更結果を反映させることが可能です。それぞれのタグ要素は、INTER-Mediatorによって、自動的にid属性が設定されます。元からid属性がある場合にはそれを利用しますが、重複の可能性があれば書き換えるといった動作になります。そして、自動設定されたid属性をもとにして、それぞれの要素が、どのコンテキストの、どのレコードの、どのフィールドから得られたものなのかを内部で記録します。　タグ要素に表示された値が変更されたときに、逆にそれらの情報を利用して、データベースを更新します。そのため、元のテーブルのどのレコードなのかを特定するために、テーブルのキーフィールドの指定が必要です。つまり、定義ファイルのコンテキストの中で、keyに対応した値が正しく指定されていなければなりません。INTER-Mediatorではクライアントサイドで、例えば→keyの値が「id」だとしたら、「id=23」のような形式で内部的ではレコードを特定する情報を記録します。ここでの「23」はidフィールドの値の例です。つまり、検索条件式のような記録をするということです。　定義ファイルのコンテキストでは、→tableキーによる値が、更新時のエンティティとなります。tableキーを指定しないと、→nameキーが更新するエンティティになります。テーブルに対して、読出しと書込みをそのまま行うなら、nameキーのみを指定することでも読出しと更新はできます。しかしながら、ビューに対しては書込みができない場合もあります。そのため、読み込み時と書込み時で異なるエンティティを指定できるようにしました。また、同一のテーブルでも用途によって異なるnameキーの値を付けるという考え方もあるので、読出しはview、書込みはtableキーで指定したエンティティに対して処理を行うというルールで構築します。→テキストフィールドやテキストエリアの更新の動作　→valueChangeイベントを利用して更新処理が行われます。例えばチェックボックスならクリックしたときに更新が行われます。一方、テキストフィールドやテキストエリアは、Tabキー等でフォーカスが移動したときに、データベースへの更新が行われます。これらのテキスト表示コンポーネントに関しては、自動的に更新する処理も組み込まれています。最後に入力をしてから、約5秒後に、自動的にデータベースへの更新が行われます。つまり、フォーカスを移動するか5秒程度待つことで、データベースには反映されるという動作になります。これらの動作は、→「何もしなくても自動的に保存される」という動作を目指したものです。　テキストフィールドとテキストエリアに関しては、INTER-Mediator独自の→アンドゥ機能が実装されています。通常は、Command+ZあるいはCtrl+Z等で、ブラウザが提供するアンドゥが稼働しますが、リンクノードについては、フィールド内にフォーカスがある状態で→Ctrl+Shift+Zを押すことで、そのフィールドの値はページを表示した直後の値に戻ります。フィールドが書き換えられている場合には、データベース側の変更も行います。→→楽観的→ロックの実装　データベースの更新処理においては、複数のユーザーが同時に参照して書き込むような場合の競合の問題が発生します。通常、データの更新は、読み出した結果を、時間が経過して変更されるという流れになります。2人のユーザーAとBがそれぞれ、同一のテーブルの同一のフィールドを変更しようとした場合、Aの読み込み→Bの読み込み→Bの変更→Aの変更といった順序で処理がなされたとします。すると、Bが変更した結果は、最後のAの変更によって上書きされてしまいます。もちろん、これで問題がないという用途もあるかもしれませんが、一般には「先に保存した方が消えて無くなる」のは問題のひとつです。　FileMakerを通常のアプリケーションとして利用した場合、Aが読み込み編集中の処理になった段階で、Bは編集作業に入ることができなくなります。こうした動作を「悲観的ロック」と呼びます。つまり、誰か1人だけがひとつの対象（この場合はフィールド）を編集可能にするという制御をするという手法です。この方法は有効ですが、インターネットを経由した接続の場合、突然の切断の可能性はそこそこ高く、ステートレスなHTTPの場合、切断の検出は一概にはうまく行きません。誰かが編集作業を始めた後、ネットワークが切断してしまったらデータベースはロックされたままになってしまい、以降の共同作業ができなくなってしまうこともあります。そこで、Webアプリケーションでは「楽観的ロック」という手法を実装するのが一般的です。楽観的ロックは、「読み出したデータに変更がなければ更新する」というルールです。　AとBが同時に同じレコードを編集しようとしているとします。最初は「data」だったデータを、その後Bによって「changeb」に変更しようとしたとします。このとき、フィールドの値はまだ「data」なので、Bの更新作業は成功します。しかしながら、次にAが更新しようとするときに、データベース側の値を得ると「changeb」に変わっているので、ユーザーA側では元々のデータの「data」と、現在の値の「changeb」を比べて違うことを手掛かりにして、「他のユーザーが変更した」ことが検知できるのです。ここで、INTER-Mediatorは「データが変わっており本当に変更していいのか？」と問い合わせるので、ユーザーAは、そこでのボタン選択で、キャンセルも上書きもできるようにしています。なお、もちろん、この場合に、ユーザーBが、同じ値「data」に変更したとしても、それはユーザーAは検知できませんが、これは変更していないのも同然とみなすこともできます。厳密な意味での→排他制御ではないとも言えますが、一般的なアプリケーションではなんの排他制御をしないよりも遥かに安全であり、実用的な意味では十分なことが多いと思われます。　INTER-Mediatorでは、更新処理の前に、再度データベースへのクエリーを発行して、対象とするレコードのフィールドの値に変更がないかどうかを確認します。この処理は自動的に行われて、他のユーザーが変更している形跡があれば、ダイアログボックスでそのまま上書きするか、更新をキャンセルするかをたずねます。　なお、この楽観的ロックを行わないように、確認なく更新をしたい場合には、INTERMediatorクラスの→ignoreOptimisticLockingプロパティを設定して、ページを構築します。例えば、ページ合成を行う前に呼び出されるメソッドをリスト3-1-1のように記述します。INTERMediatorOnPage.doBeforeConstructについては、『8-5　ブラウザーを判断するページ』の最後に解説があります。リスト3-1-1　楽観的ロックを行わない場合INTERMediatorOnPage.doBeforeConstruct = function () {\n    INTERMediator.ignoreOptimisticLocking = true;\n}→演習Webページのテキストフィールドで更新する　INTER-Mediatorの演習環境を利用して、データの書き戻しを伴うページの作成を行います。新たなページを作成して、更新の動作を検証します。テキストフィールドとテキストエリアのあるページ1ここからの作業は、Webブラウザー上で行います。ブラウザーで、「http://localhost:9080」に接続します。「トライアル用のページファイルと定義ファイル」というタイトルの部分を特定します。2「def02.phpを編集する」をクリックし、定義ファイルエディターでdef02.phpファイルを編集します。（もし、他の用途で2番目を利用しているのなら、例えば、def11.phpを利用するなど、別の番号のセットを使用してください。その場合ソースコードの記述が変わる部分がありますが、可能な限り注記します。）3Contextsの中のQueryと書かれた部分を特定します。そして、その次の行の右の方にある「削除」をクリックして、Queryの設定がある行を削除します。4「レコードを本当に削除していいですか？」とたずねられるので、OKボタンをクリックします。5同様に、Sortingの次の行にある「削除」ボタンを押し、確認にOKボタンをクリックして、こちらの設定も削除しておきます。6nameを「person」、keyを「id」とします。tableとviewはデータベースに応じて次のように設定します。Contextsのその他のテキストフィールドは空白にします。[MySQL]の場合table、viewともに「person」と入力します。personは定義されているテーブルです。[FileMaker]の場合table、viewともに「person_layout」と入力します。FileMakerではテーブル名やTO名ではなく、レイアウト名を指定します。7Database Settingsに設定を行います。[MySQL]の場合db-classは「PDO」のままでかまいません。dsnに「mysql:host=db;dbname=test_db;charset=utf8mb4」と入力します。そして、userに「web」、passwordに「password」と入力します。[FileMaker]の場合db-classを「FileMaker_DataAPI」に書き換えます。databaseは「TestDB」、userに「web」、passwordに「password」、serverに「gateway.docker.internal」、portに「443」、protocolに「https」、cert-vefifyingに「false」と入力します。8Debugについては、「false」にすると、デバッグ情報が出なくなります。なお、デバッグ情報をみながら動作を確認したい方は、「2」のままにしてこの後の作業を行ってください。9「http://localhost:9080」で開いたページに戻り「page02.htmlを編集する」をクリックし、ページファイルのpage02.htmlを編集するページファイルエディターが開きます。HTMLでの記述内容を以下のように変更します。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）&lt;!DOCTYPE html&gt;\n&lt;!--\n/*\n * INTER-Mediator Ver.@@@@2@@@@ Released @@@@1@@@@\n * \n *   Copyright (c) 2010-2015 INTER-Mediator Directive Committee, All rights reserved.\n * \n *   This project started at the end of 2009 by Masayuki Nii  msyk@msyk.net.\n *   INTER-Mediator is supplied under MIT License.\n */  --&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;script type=\"text/javascript\" src=\"def02.php\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;table border=\"1\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;name&lt;/th&gt;&lt;th&gt;mail&lt;/th&gt;&lt;th&gt;category&lt;/th&gt;&lt;th&gt;ckecking&lt;/th&gt;\n      &lt;th&gt;location&lt;/th&gt;&lt;th&gt;memo&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"person@name\" /&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"person@mail\" /&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;textarea data-im=\"person@memo\"&gt;&lt;/textarea&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n &lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;10「http://localhost:9080」で開いたページに戻り、「page02.htmlを表示する」をクリックします。page02.htmlファイルが別のタブあるいはウインドウで開きます。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）テキストフィールドに見えているデータは、データベースに入力されているデータです。ページ上から更新できることを確認する1name列の適当なデータを書き換えます。以下の図は2つ目のテキストフィールドを書き換えました。2Tabキーを押すなどして、次のフィールドに移動します。このときに、INTER-Mediatorは自動的にデータベースへの書き戻しを行います。3一度、「page02.htmlを表示する」で開いたページを閉じます。その後、「http://localhost:9080」で開いたページで「page02.htmlを表示する」をクリックし、再度Webページを表示します。すると、書き換えたデータが、テキストフィールドに見えていることを確認できます。つまり、データベース上のデータが更新されています。楽観的ロックの動作を確認する1状況が分かりやすいように、別のブラウザーを起動します。ここまでの手順では、Safariで作業をしていましたが、Firefoxを起動します。新たに開いたブラウザー側で、同じページを開きます。元のブラウザーのアドレスバーのURLをコピーして、新たに開いたブラウザーのアドレスバーにペーストし、同一のページを開いてください。どうしてもひとつのブラウザーしかない場合は、「page02.htmlを表示する」をもう一度クリックして、同じブラウザー内で、同一のページを2つ開いてください。2最初のブラウザー（この例ではSafari）で、あるレコードのあるフィールドを変更します。ここでは2レコード目のnameフィールドを変更しました。Tabキーでフィールドを移動して確定しておきます。3後から起動したブラウザーに切り替え、同一のテキストフィールドで異なるデータに変更します。その後に、Tabキーを押して、変更結果を確定します。4警告が表示されました。このFirefoxは英語モードで稼動しているので、メッセージは英語で出ています。読み出したデータ、自分が変更しようとしているデータ、別のユーザーが変更したデータを示しています。ここで、OKボタンをクリックすると、自分が変更しようとしているデータで上書きされます。Cancelをクリックすると、更新処理がキャンセルされます。5OKやCancelボタンによる動作が期待通りかをいろいろと作業をしてみて、楽観的ロックの仕組みを確認しましょう。2つのページをまず、両方とも更新をした上で、作業を進めると良いでしょう。FileMaker Serverを使っている場合、FileMaker Proでデータを変更している途中の状態で、Webページ上からデータの編集をしてみましょう。いろいろな条件でどのようになるかを確認しておきましょう。テキストエリアの動作を確認する1「page02.htmlを表示する」で開いたページのmemo列には、TEXTAREAタグによるテキスト入力が可能になっています。適当なレコードで、文字列を入力します。ここでは、改行も入力してみます。入力後にTabキーを押します。2ブラウザーのページを更新してみます。すると、入力した文字列がそのままテキストエリアに見えていて、実際にデータベースに入力されたことが分かります。3データベースに実際に改行コードが入力されていることも確認しましょう。MySQLの場合は、以下の手順で、コマンドを入力して確認してみますが、コマンドラインに慣れていない方は、結果も示しますので、結果をご覧ください。FileMaker Serverの場合は、TestDB.fmp12を開き、「person_layout」で実際のデータを参照すればすぐに分かりますので、FileMaker Pro上で確認をしてください。4macOSの場合は「ターミナル」アプリケーション、Windowsの場合はTeraTermなどのSSHで接続可能なアプリケーションを利用してMySQLが稼働するコンテナに接続します。ユーザー名は「web」、パスワードは「password」です。ターミナルの場合は、次のようにコマンドを入力します。mysql -u web -h 127.0.0.1 -P 13306 --password=password test_db5ログインできるデータベースへのコマンドを入力することができます。mysql&gt; のプロンプトに続いて、以下のようにコマンドを入力して、リターンキーを押します。select name,memo from person;コマンドプロンプトで例えば以下のコマンドを入力すると、16進数表示でデータを参照できます。これにより、改行は16進コードの2行目の2バイト目にあり、0x0aという通常のコードで記録されていることが分かります。$ mysql -u web -p -r -h 127.0.0.1 -P 13306 --password=password -D test_db -e 'select memo from person where id=1'|xxd\nmysql: [Warning] Using a password on the command line interface can be insecure.\n00000000: 6d65 6d6f 0ae6 9c80 e588 9de3 81ae e8a1  memo............\n00000010: 8c0a e694 b9e8 a18c e381 97e3 819f e382  ................\n00000020: 880a                                     ..演習のまとめテキストフィールドやテキストエリアにdata-im属性を記述してリンクノードとすれば、データの表示だけでなくデータベースの更新も行えます。コンテキストには、keyキーによるキーフィールドの指定が必要になります。データの更新時には楽観的ロックが自動的に稼動します。→→時刻の扱いについて　単一の→時間帯で使う場合にはあまり問題にならないかもしれませんが、時刻の問題は非常に複雑です。つまり、時差をどのように扱うのかということが大きな問題になる場合もあります。最近は日本だけで使うアプリケーションでも、サーバの設定がUTCであったりすることもあり、その時間差ということが問題になるかもしれません。例えば、予定表のアプリケーションで、11:00amに開始となっていたとします。日本ではそのまま見えることが期待する一方、イギリスでは2:00amと表示されるべきなのか、それとも11:00amと表示させるべきなのかはアプリケーションの要求次第ということもあります。そのため、→時差が発生した、あるいは発生しなかったという場合の対処については知っておく必要があります。　時間に関する設定は、params.phpにあります。→$defaultTimezoneは、→→サーバ側のタイムゾーンを指定します。日本だと 'Asia/Tokyo'、世界標準時だと'UTC'を設定します。右辺の文字列は、PHPのマニュアルの「サポートされるタイムゾーンのリスト」のページに記載されています。サーバOSのタイムゾーンがUTCの場合は、この値を'UTC'にすることがひとつの解決策です。つまり、この設定をサーバの時間帯に合わせるということです。リスト3-1-2　時間帯に関するparams.phpファイルでの設定$defaultTimezone = 'Asia/Tokyo';\n$follwingTimezones = true; // 既定値はtrue　→$follwingTimezonesをオンにすると、タイムゾーンと→ローカル時間を考慮した次のような動作になります。まず、データベースから得れた時刻を含むデータは、$defaultTimezoneの値を手がかりにUTCの時刻あるいは日付時刻に変換して、クライアントに送付します。クライアントは、サーバから送り込まれる時刻や日付時刻はUTCであると仮定します。そして、それを表示するとき、data-im-format属性を指定すると、ブラウザのローカル時間に合わせて変換した日付時刻を画面上に表示します。書き込む時は逆の処理を行います。こうして、サーバの時間帯と、ブラウザの時間帯がそれぞれ考慮した日付時刻表示となります。もし、inputタグで、type属性に「datetime-local」を指定している場合には、data-im-format属性の値は「datetimelocal」としてください。この変数は、Ver.11の途中から、trueにしています。falseにして生のままの動きにするとかえって混乱するのではないかと思われ、trueを既定値にしました。→→まとめて更新処理を行う　最初にまず説明したいことは、通常はまとめて処理をする必要はないと考えています。テキストフィールドを更新するたびにデータベースアクセスするのは、待たされる時間が長くなるのではないかという心配はあるかもしれません。しかしながら、単一レコードの更新なので、よほど低速通信中でない限りはそんなに遅くはなりません。また、更新のデータベース処理は非同期処理をしているので、一般的なWebページのような「待ち」にはならないはずです。　しかしながら、どうしても、まとめて保存をしたい方は、まとめて保存という仕組みを限定的ながらサポートをしています。まず、この仕組みを利用する場合は、ページネーションのコントロールを表示します。コンテキストの定義の中でpagingキーの値をtrueにします。ページファイルには、id属性が「IM_NAVIGATOR」である、ページネーションのコントロールを生成する場所を指定するタグを作っておきます。そして、IM_Entryの2つ目の引数の配列内に、→transactionキーで値が「none」の要素を追加します。定義ファイルエディターでこの項目を設定する場合は、ページ最上部の「Show All」ボタンをクリックしてください。リスト3-1-3は定義ファイルでの設定場所を要約したものです。リスト3-1-3　一括保存する場合の定義ファイルの例&lt;?php\n//todo ## Set the valid path to the file 'INTER-Mediator.php'\nrequire_once('INTER-Mediator/INTER-Mediator.php');\n\nIM_Entry(array (\n  array (\n    'name' =&gt; 'person',\n    'key' =&gt; 'id',\n    'view' =&gt; 'person',\n    'table' =&gt; 'person',\n    'paging' =&gt; true,\n  ),\n),\narray (\n  'transaction' =&gt; 'none',\n),\narray (\n  'db-class' =&gt; 'PDO', ....\n),\nfalse);　この設定により、ページネーションのコントロールに、「保存」ボタンが表示されます。修正のたびにデータベースへの保存は行わず、ボタンを押したときだけに保存が行われます。なお、この方法を使うとまとめて保存されますが、保存の処理は最適化されていません。単純に1フィールドずつ更新処理のためのサーバーアクセスを実行し、一連の処理をまとめてやるだけのものです。変更フィールドが大量になると、それなりに時間がかかるものと思われます。→→→更新を行わないようにする　ここまでのところで、INTER-Mediatorではテキストフィールドに表示した値を変更すると自動的にデータベース更新がかかるバインドの処理が利用できるということが大きな特徴であることを説明してきました。一方で、データベースの内容は表示させたいものの、更新処理をしたくない場合もあるでしょう。その場合、タグ内に「data-im-control=\"→unbind\"」と記述することで、データベースへの更新処理をしなくなります。→このセクションのまとめ　テキストフィールド、テキストエリアについては、リンクノードとして定義していれば、フィールドのデータを表示するだけでなく、ユーザーの編集作業により、書き換えたデータを元のレコードのフィールドに更新をかけます。このとき、楽観的ロックの仕組みも利用できるため、マルチユーザー動作の基本的な処理も、ページ上のタグ要素に単にdata-im属性を記述するだけで実現できています。テキストエリアもサポートし、改行の入力にも対応しています。→3-2チェックボックス、ラジオボタン、ポップアップメニューテキスト以外のフォームで使うコントロールについて解説をします。特に、チェックボックスとポップアップメニューはよく利用されるものです。データベースの値とこれらのコントロールの状態を対応づけることや、更新した状態、選択肢を用意する方法などを解説します。→→チェックボックス　HTMLのルールでは、チェックボックスは、type属性が「checkbox」の→INPUTタグ要素です。INTER-Mediatorでは、そのタグに、data-im属性でコンテキストとフィールドを指定してバインドすることで、データベースの内容に応じたチェックボックスを作成することができます。INTER-Mediatorで利用する場合には、value属性を指定することが必須です。チェックボックスをオンにしたら、value属性に指定した値をフィールドに書き込みます。チェックボックスをオフにしたら、そのフィールドの値をSQLデータベースの場合はNULL、FileMakerの場合は\"\"にします。例えば、チェックボックスの名前が「チェック欄」などとなっていても、→value属性値を「1」にしておけば、フィールドには1かNULLのどちらかしか設定されません。したがって、チェックボックス名とは関係なく数値フィールドにすることもできます。もちろん、チェックボックスの名前と同じvalue属性を設定してもかまいませんが、その場合は、フィールドは文字列型にする必要が出てくるでしょう。チェックボックスのフィールドを表示するときには、フィールドのデータとvalue属性が一致していれば、チェックが入るようになります。そのため、value属性が「1」で、データベースのフィールドにあるデータが「2」の場合にはチェックは入りません。→→ラジオボタン　HTMLのルールでは、ラジオボタンは、type属性が「radio」のINPUTタグ要素です。一般にはラジオボタンがひとつということはあり得ないので、複数のボタンが並び、どれかひとつをオンにすると、他はオフになるのが一般的です。そうした動作をさせるために、ラジオボタンのグループをまとめる属性として→name属性があり、同一のname属性のラジオボタンがセットとして動作する仕組みになっています。　INTER-Mediatorでは、そのタグに、data-im属性でコンテキストとフィールドを指定してバインドすることで、チェックボックスと同様にデータベースの内容に応じたラジオボタンを作成することができます。同一のフィールドにバインドしたラジオボタンには、自動的に同一のname属性が設定されるので、グループとして動作します。複数のレコードを含む一覧の中にラジオボタンがあれば、レコードごとに、同一フィールドにバインドした複数のラジオボタンに同一のname属性がつけられます。そして、レコードごとに異なるname属性値を持ちますので、レコードごとに選択されるボタンは分離されます。　その他の動作は、チェックボックスと同様です。ラジオボタンも→value属性を設定しますが、選択したラジオボタンのvalue属性値がフィールドに書き込まれます。一連のセットのラジオボタンのvalue属性値を異なるものにしておくことで、フィールドのデータに応じた値のボタンが選択されるようになります。ラジオボタンも、実際にデータベースに保存されるデータは、value属性の値になるので、もちろん、文字列でもいいのですが、数値に対応付けておいて数値型のフィールドとバインドしてもいいでしょう。→→ポップアップメニューおよび→リスト　HTMLのルールでは、SELECTタグによってポップアップメニューやリストを構成でき、選択肢はOPTIONタグを利用して記述をします。INTER-Mediatorの場合は、SELECTタグにdata-im属性を指定して、指定したコンテキストのフィールドとのバインドを行います。その結果、フィールドの値に応じてポップアップメニューが選択され、ユーザーがメニュー選択すると、その項目の値にフィールドの値が書き換わります。　フィールドに設定する値は、→OPTIONタグのvalue属性に記述します。OPTIONタグのテキストが実際に見える文字列になりますが、→value属性はそれと同じでもいいですし、整数と対応付けてもかまいません。したがって、バインドするフィールドはどんなデータを記録するのかに応じて、文字列型かあるいは数値型を選択することになります。　ポップアップメニューは未選択の状態がないため、データがないときのポップアップメニューの選択項目の処理として、状況に応じた処理が必要になりますが、INTER-MediatorではデータがないNULLの状態のときには何も表示しないという動作を行います。なお、後からフィールドのクリアをするような場合には、OPTIONタグでクリアに相当する項目を用意しなければなりません。　選択肢自体をテーブルから取り出すようなことももちろん可能です。これについては、『4-3　複数のコンテキストとリレーションシップ』にあるリレーションシップについての知識が必要ですので、そちらで説明をします。　リストの場合、複数の項目を選択するリストも動作上は可能ですが、その場合のバインド処理については正しく行われないので、リストの場合は単独項目の選択でご利用ください。→演習テキスト以外のコントロールを設定する　チェックボックス、ラジオボタン、ポップアップメニューを実際にページ上に表示して、フィールドのデータを更新できるところを確認してみます。チェックボックスをページに用意する1前の演習の続きで行います。定義ファイルエディター、ページファイルエディター、ページがそれぞれタブあるいはウインドウで開いていることを確認します。もし、定義ファイルエディターやページファイルエディターが開いていない場合には、Webブラウザーで「http://localhost:9080」を開き、「def02.phpを編集する」「page02.htmlを編集する」「page02.htmlを表示する」のリンクをクリックして、それぞれのタブを開きます。2「page02.htmlを編集する」をクリックして開いたページファイルエディターで、page02.htmlのHTMLを次のように変更します。（追加部分を太字にしますが、その他の変わらない部分は一部省略します。）&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;script type=\"text/javascript\" src=\"def02.php\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;table border=\"1\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;name&lt;/th&gt;&lt;th&gt;mail&lt;/th&gt;&lt;th&gt;category&lt;/th&gt;&lt;th&gt;ckecking&lt;/th&gt;\n      &lt;th&gt;location&lt;/th&gt;&lt;th&gt;memo&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"person@name\" /&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"person@mail\" /&gt;&lt;/td&gt;\n      &lt;td&gt;\n        &lt;select data-im=\"person@category\"&gt;\n        &lt;option value=\"1\"&gt;Family&lt;/option&gt;\n        &lt;option value=\"2\"&gt;Class Mate&lt;/option&gt;\n        &lt;option value=\"3\"&gt;Collegue&lt;/option&gt;\n      &lt;/select&gt;\n      &lt;/td&gt;\n      &lt;td&gt;\n        &lt;input type=\"checkbox\" data-im=\"person@checking\" value=\"1\"/&gt;\n      &lt;/td&gt;\n      &lt;td&gt;\n        &lt;input type=\"radio\" data-im=\"person@location\" value=\"1\"/&gt;Domestic\n        &lt;input type=\"radio\" data-im=\"person@location\" value=\"2\"/&gt;International\n        &lt;input type=\"radio\" data-im=\"person@location\" value=\"3\"/&gt;Neighbor\n        &lt;input type=\"radio\" data-im=\"person@location\" value=\"4\"/&gt;Space\n      &lt;/td&gt;\n      &lt;td&gt;&lt;textarea data-im=\"person@memo\"&gt;&lt;/textarea&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;3「page02.htmlを表示する」をクリックして開いたページで更新をするなどして、page02.htmlを表示します。すると、ポップアップメニュー、チェックボックス、ラジオボタンが見えています。4メニュー選択や、チェックボックスのオン/オフ、ラジオボタンの選択を行います。もちろん、応答しますが、ページを更新することで、直前と同じ状態になり、データが記録されていることが分かります。フィールドに設定される値を確認する1実際にフィールドにどのようなデータが入力されているのかを見てみましょう。SQLコマンドをターミナルから叩いてもいいのですが、せっかくですからINTER-Mediatorを使ってその変化を確認してみましょう。「def02.phpを編集する」をクリックして表示される定義ファイルエディターの画面を呼び出します。2Contextsのタイトルの下にある「追加」ボタンをクリックします。すると、nameが「= new context = 」という新しいコンテキストの枠が追加されます。3新しくできたコンテキストで、nameを「personlist」にします。keyの値として「id」を入力します。tableとviewは、MySQLの場合は「person」、FileMakerの場合は「person_layout」にします。4「page02.htmlを編集する」をクリックして開いたページファイルエディターで、page02.htmlのHTMLを次のように変更します。（追加部分を太字にしますが、その他の変わらない部分は一部省略します。）            :\n      &lt;td&gt;&lt;textarea data-im=\"person@memo\"&gt;&lt;/textarea&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;table border=\"1\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;name&lt;/th&gt;&lt;th&gt;mail&lt;/th&gt;&lt;th&gt;category&lt;/th&gt;&lt;th&gt;ckecking&lt;/th&gt;\n      &lt;th&gt;location&lt;/th&gt;&lt;th&gt;memo&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;td data-im=\"personlist@name\"&gt;&lt;/td&gt;\n      &lt;td data-im=\"personlist@mail\"&gt;&lt;/td&gt;\n      &lt;td data-im=\"personlist@category\"&gt;&lt;/td&gt;\n      &lt;td data-im=\"personlist@checking\"&gt;&lt;/td&gt;\n      &lt;td data-im=\"personlist@location\"&gt;&lt;/td&gt;\n      &lt;td data-im=\"personlist@memo\"&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;5「page02.htmlを表示する」をクリックして開いたページで更新をするなどして、page02.htmlを表示します。チェックボックスやラジオボタン、ポップアップメニューを選択してみて、下半分のテーブルに見える値が変化することを確認します。上のテーブルも、下のテーブルも、同一のレコードの同一のフィールドを表示しています。INTER-Mediatorではこのように、異なるタグ要素に配置したものでも、同一のデータを表示している場合には、一方を変更すると他方も変更するような動作を自動的に行います。こうした機能もバインドの動作のひとつです。2つのテーブルはそれぞれ同じテーブルを基にしていますが、異なるコンテキスト名を設定している点に注意をしてください。演習のまとめチェックボックスとラジオボタンは、data-im属性とvalue属性を指定してタグを定義することで、バインドしつつ、値の更新が可能です。ポップアップメニューはSELECTタグにdata-im属性を指定してバインドし、選択肢を記述するOPTIONタグのvalue属性でフィールドに保存する値と対応付けます。同一ページ上で、同じレコードの同じフィールドの値をバインドによって表示されていれば、一方を変更するともう一方も自動的に変更されます。→このセクションのまとめ　このセクションでは、チェックボックス、ラジオボタン、ポップアップメニューの構築方法を説明しました。INPUT、SELECT、OPTIONタグを利用し、いずれもdata-im属性を指定してバインドすることで、データベースの値とユーザーインターフェースが連動します。value属性の値が、実際にフィールドに記録される値になります。→3-3レコードの追加・削除・複製→→→→→→ここまで、データの表示と更新を見てきましたが、残る処理は新規作成と削除です。これらを行うために、定義ファイルで設定を加えます。すると、その定義に関連した適切な場所に、削除と挿入のためのボタンが自動的に作られます。ただし、新規にレコードを作成するというのは単に空欄を作ればいいだけではすまないこともあります。その場合は、JavaScriptによるプログラムと併用することを検討する必要があります。Ver.5.2以降でサポートする「複製」についても説明しましょう。→挿入と削除が可能なコンテキスト　定義ファイルに指定するコンテキストでは、tableキーで指定したエンティティに対して、レコードの挿入や削除の処理が実施されます。tableキーが記述されていない場合には、nameキーの値をエンティティとして利用します。同時に、keyキーにより、そのエンティティでの主キーあるいはそれに準じるフィールド名を指定する必要があります。レコード削除の場合は、どのレコードを削除するのかを特定するために、主キーのフィールドの指定は必須です。一方、レコードの挿入だけなら特に主キーの扱いは不要ではありますが、INTER-Mediatorでは、新たにレコードを作った時にそのレコードの主キー値を得て、そのレコードを表示します。1レコードだけを表示させるように設定してあれば、編集可能な状態で開くことができます。つまり、新たに挿入されたレコードの主キー値を得るために、キーフィールド名をkeyキーに指定する必要があります。　ここで、PostgreSQLについては、連番を主キーフィールドに設定する仕組みを「シーケンス」と呼ばれるオブジェクトを使って実現しています。テーブル自体に自動連番の機能はなく、連動して稼働するシーケンスオブジェクトが「次の値」を返すという仕様になっています。したがって、レコード挿入時に新たに作られたレコードにおけるkeyキーで指定したフィールドの値は、シーケンスの値から取り出す必要があります。そのため、PostgreSQLについては、シーケンスオブジェクト名を明示的にコンテキスト内で指定できるようになっています。定義ファイルエディターでも、「Sequence」のラベルで記入欄があります。以下、PostgreSQLの場合のみ、コンテキストへの追加の指定が必要になります。手法としては、自分で定義したシーケンスオブジェクトを使う場合と、自動で用意するシーケンスオブジェクトを使用する場合があります。なお、SERIAL型を利用する場合は、シーケンスオブジェクトの認識を自動的に行うため、sequenceキーの指定は不要です。→→→挿入と削除のコントロール　定義ファイルに記述する手法として、コンテキスト内の→repeat-controlキーに、表3-3-1のような値を与える方法があります。これにより、適当な場所を選んで、「追加」ボタンや「削除」ボタン、「複製」ボタンを追加することができます。複数の値を空白で区切って指定することもできるので、それぞれのボタンをいずれも表示することができます。repeat-controlキーの値動作→insert「追加」ボタンをリピーターの後に追加する→insert-top「追加」ボタンをリピーターの前に追加する→delete「削除」ボタンを追加する→confirm-insert「挿入」ボタンをリピーターの後に追加する。ボタンを押した後、挿入していいかどうかを確認する→confirm-insert-top「挿入」ボタンをリピーターの前に追加する。ボタンを押した後、挿入していいかどうかを確認する→confirm-delete「削除」ボタンを追加する。ボタンを押した後、削除していいかどうかを確認する→copy「複製」ボタンを追加する→confirm-copy「複製」ボタンを追加する。ボタンを押した後、複製していいかどうかを確認する→copy-CCCC「複製」ボタンを追加する。複製時にリレーションシップで関連付けられたコンテキストCCCCについても複製を行う→confirm-copy-CCCC「複製」ボタンを追加する。複製時にリレーションシップで関連付けられたコンテキストCCCCについても複製を行う。ボタンを押した後、複製していいかどうかを確認する表3-3-1　repeat-controlキーに指定可能な値　→「削除」ボタンは、レコードごとに付与されます。言い換えれば、ひとつのリピーターに対して、ひとつのボタンが付与されます。ボタンは、リピーターの末尾に付与されます。もし、リピーターがTRタグ要素であるのなら、その内部のTDタグが並んでいるはずですが、最後にひとつ、中身が空のTDタグ要素（つまり「&lt;td&gt;&lt;/td&gt;」）を追加しておけば、そのセルにボタンが挿入されます。「削除」ボタンは、→IM_Button_Deleteというclass属性が付与されるので、ボタンのスタイルのカスタマイズは、このクラス名をセレクタとして使用したCSSの定義を記述します。　→「追加」ボタンは、コンテキストに対してひとつ付与されます。こちらも、言い換えれば、ひとつのエンクロージャーに対して、新たなレコードを作成するボタンが付与されます。挿入ボタンの挿入は位置は、エンクロジャーがTBODYの場合は、TFOOT領域に新たにTRタグ要素を作り、その中の最初のTDタグ要素の中にボタンを生成します。キーワードに「-top」が含まれていれば逆にTHEAD領域に新たなTRタグ要素を作り、その中のTD要素の中にボタンを生成します。テーブルではないエンクロージャーの場合には、最後のリピーターの後に追加します。「-top」があれば、リピーターの前に追加します。「追加」ボタンは、→IM_Button_Insertというclass属性が付与されるので、ボタンのスタイルのカスタマイズは、このクラス名をセレクタとして使用したCSSの定義を記述します。　→「複製」ボタンは、「削除」ボタンと同様にレコードごとに付与され、配置の方法は「削除」ボタンと同様です。クリックすると、対応するレコードの複製が行われ、それぞれのフィールドの値が複製された新しいレコードが作成されます。ただし、定義ファイルのコンテキスト定義にあるkeyキーで指定したフィールド、および、データベースでのテーブル定義において既定値が設定されているフィールドについてはコピーを行いません。keyキーで指定したフィールドは自動的に連番を設定することを想定して、複製対象のフィールドから除外しています。「削除」ボタンは、IM_Button_Copyというclass属性が付与されるので、ボタンのスタイルのカスタマイズは、このクラス名をセレクタとして使用したCSSの定義を記述します。「copy-」に続いて別のコンテキストのnameキーで指定した名前を指定した場合を考えてみましょう。現在のコンテキストとの間でリレーションシップが定義されていれば、関連するレコードのコピーも同時に行います。これについては、『4-3　複数のコンテキストとリレーションシップ』の演習で説明します。　これらのボタン名称は、ブラウザーの言語に応じて、「削除」や「Delete」と変化しますが、独自に名前をつけたい場合には、定義ファイルのコンテキスト定義において、→\"button-names\"キーに指定する連想配列で、そのコンテキストに登場するボタン名のカスタマイズが可能です。リスト3-3-1や図3-3-1のように、コンテキストの定義に設定を行えば、例えば削除のためのボタンの名称は「レコード削除」ボタンとなります。定義ファイルでは、ページ冒頭のShow Allボタンをクリックして、設定項目を表示して設定してください。リスト3-3-1　button-namesキーの定義ファイル上での設定例IM_Entry(array (\n  array (\n    'name' =&gt; 'person',\n    'key' =&gt; 'id',\n    'view' =&gt; 'person',\n    'table' =&gt; 'person',\n    'repeat-control' =&gt; 'confirm-insert confirm-delete copy',\n    'records' =&gt; 10,\n    'maxrecords' =&gt; 100,\n    'button-names' =&gt; array (\n      'insert' =&gt; 'レコード追加',\n      'delete' =&gt; 'レコード削除',\n      'copy' =&gt; 'レコード複製',\n    ),\n  ),図3-3-1　button-namesキーの定義ファイルエディターでの設定例→演習挿入と削除のコントロールを追加する1前の演習の続きで行います。定義ファイルエディター、ページファイルエディター、ページがそれぞれタブあるいはウインドウで開いていることを確認します。もし、定義ファイルエディターやページファイルエディターが開いていない場合には、Webブラウザーで「http://localhost:9080」を開き、「def02.phpを編集する」「page02.htmlを編集する」「page02.htmlを表示する」のリンクをクリックして、それぞれのタブを開きます。2「def02.phpを編集する」をクリックして開いた、def02.phpファイルの定義ファイルエディターのページを表示します。personコンテキストのrepeat-controlキーの値に「confirm-insert confirm-delete」とキータイプします。Tabキーで移動して、次のテキストフィールドに移動し、設定値を書き込んでおきます。3「page02.htmlを表示する」のリンクをクリックして表示されるページを開きます。つまり、page02.htmlを実際に開きます。もともと開いていたのなら、更新ボタンにより更新します。前の演習の最後に比べて、「削除」ボタンがレコードの右端に、「追加」ボタンがテーブルの最後に追加されているのが分かります。4適当なレコードの右端にある「削除」ボタンをクリックします。「confirm-delete」が設定なので、削除前にダイアログボックスが表示されて、ほんとうに削除していいかをたずねます。5OKボタンをクリックすると、実際にレコードが削除されます。6「追加」ボタンをクリックします。「confirm-insert」が設定なので、挿入前にダイアログボックスが表示されて、ほんとうにレコードを作成していいかをたずねます。7OKボタンをクリックすると、実際にレコードが追加されました。8新しく作られたレコードのテキストフィールドに入力すると、もちろん、入力した値はそれぞれのフィールドに記録され、データベースに保存されます。→→ページネーションに「追加」ボタンを表示する1「def02.phpを編集する」をクリックして開いた、def02.phpファイルの定義ファイルエディターのページを表示します。personコンテキストのpagingキーの値を「true」にします。Tabキーで移動して、次のテキストフィールドに移動し、設定値を書き込んでおきます。2「page02.htmlを編集する」をクリックして開いた、page02.htmlのページファイルエディターのページを開きます。次のように、ページネーションコントロールの追加を行います。&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;script type=\"text/javascript\" src=\"def02.php\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n&lt;table border=\"1\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;name&lt;/th&gt;&lt;th&gt;mail&lt;/th&gt;&lt;th&gt;category&lt;/th&gt;&lt;th&gt;ckecking&lt;/th&gt;\n      &lt;th&gt;location&lt;/th&gt;&lt;th&gt;memo&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n\t\t:3「page02.htmlを表示する」のリンクをクリックして表示されるページを開きます。つまり、page02.htmlを実際に開きます。もともと開いていたのなら、更新ボタンにより更新します。ページネーションがある場合、追加のためのボタンは、ページネーション上に、コンテキスト名を伴い「レコード追加」ボタンをとして配置されます。4「def02.phpを編集する」をクリックして開いた、def02.phpファイルの定義ファイルエディターのページを表示します。personコンテキストのrecordsキーの値を「1」にします。この設定により、personコンテキストは1レコードずつ表示され、事実上「カード型」のレイアウトのような動作になります。Tabキーで移動して、次のテキストフィールドに移動し、設定値を書き込んでおきます。1レコードごとに表示する場合のレコード追加1「page02.htmlを表示する」のリンクをクリックして表示されるページを開きます。つまり、page02.htmlを実際に開きます。もともと開いていたのなら、更新ボタンにより更新します。「レコードの追加」「レコードの削除」ともに、ページネーション側に表示されるようになりました。1レコード単位の場合のみ、削除ボタンもページネーションに表示されます。2ページネーションにある「レコード追加 : person」ボタンをクリックします。レコードを追加していいかどうかをたずねられるので、OKボタンをクリックします。3内容が空白のレコードが表示された状態になりました。全レコード数は1になっています。この前はレコード数が3だったのですが、新たに1レコードが加わり、テーブルには4レコードあります。しかしながら、1レコードずつ表示しているときには、新規に作成されたレコードだけが検索された状態になります。4もちろん、新しいレコードのフィールドに入力できます。5ページネーションにある「更新」ボタンをクリックすると、4レコード中の最初のレコードが表示されます。「&gt;&gt;」ボタンをクリックして、最後のレコードに移動すると、今、新たに作成されたレコードが見えています。レコードの「複製」ボタンを設置する　レコードの複製の機能は、Ver.5.2より搭載していますが、MySQLでの搭載のみです。FileMaker等は将来の実装予定項目となっています。1「def02.phpを編集する」をクリックして開いた、def02.phpファイルの定義ファイルエディターのページを表示します。personコンテキストのrepeat-controlキーの値を「copy」にします。paging、records、maxrecordsの値は空欄にしておきます。Tabキーで移動して、次のテキストフィールドに移動し、設定値を書き込んでおきます。2「page02.htmlを編集する」をクリックして開いた、page02.htmlのページファイルエディターのページを開きます。次のように、ページネーションのコントロールを出力する部分をコメントにします。&lt;body&gt;\n&lt;!-- &lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt; --&gt;\n&lt;table border=\"1\"&gt;3「page02.htmlを表示する」のリンクをクリックして表示されるページを開きます。つまり、page02.htmlを実際に開きます。もともと開いていたのなら、更新ボタンにより更新します。「複製」ボタンが各レコードの右側に表示されます。4例えば、上から2番目のレコードの「複製」ボタンをクリックすると、そのレコードが複製されて、リストの最後に見えています。実行時の状態によって画面の内容は変わりますので、実際に複製された内容はご利用しているブラウザー上で確認してください。5「def02.phpを編集する」をクリックして開いた、def02.phpファイルの定義ファイルエディターのページを表示します。personコンテキストのpagingを「true」、recordsを「1」にします。Tabキーで移動して、次のテキストフィールドに移動し、設定値を書き込んでおきます。6「page02.htmlを編集する」をクリックして開いた、page02.htmlのページファイルエディターのページを開きます。次のように、ページネーションのコントロールを出力する部分をコメントにしていましたが、コメントを取り除きます。&lt;body&gt;\n&lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n&lt;table border=\"1\"&gt;7「page02.htmlを表示する」のリンクをクリックして表示されるページを開きます。つまり、page02.htmlを実際に開きます。もともと開いていたのなら、更新ボタンにより更新します。ページネーション側に「複製」ボタンが表示されています。8ページネーションコントロールにある「レコード複製：person」というボタンをクリックします。レコードがひとつ増え、コピーされたレコードが表示される状態になりました。つまり、1レコードずつ表示している場合には、複製と新規レコードは同様な動作を行います。演習のまとめコンテキストにrepeat-controlキーに対する値を記述すれば、レコードの削除や新規レコード作成、レコード複製のためのボタンが自動的に挿入されます。単に削除やレコード追加するだけでなく、確認をしたのちに削除や追加を行うユーザーインターフェースも指定できます。ページネーションがあれば、レコード追加ボタンはページネーション上に追加されます。1レコードずつ表示しているコンテキストの場合、レコード追加したり複製をすると、新しいレコードだけが検索された状態でページは表示されます。→新規レコードの→→フィールドの初期値　レコードを新規に作成したとき、データベースエンジン側に設定された既定値はもちろん機能して、指定に従ってフィールドに値が設定されます。加えて、定義ファイルに指定するコンテキストの中に→default-valuesキーによる値を追加することで、コンテキスト単位でレコードを作成したときにフィールドに設定される値を指定できます。fieldキーとvalueキーを持つ連想配列のさらに配列にしたものが、default-valuesキーの値として設定可能です。　リスト3-3-2は定義ファイルをPHPのコードで見た場合での設定例です。同一の設定を定義ファイルで行う場合には、図3-3-2になります。定義ファイルエディターのページの冒頭にあるShow Allボタンをクリックすることで、Default Valuesの設定項目が表示されるので、その下にある「追加」ボタンをクリックして項目を追加し、テキストフィールドの値を書き直します。　コンテキストがこの状態で新しいレコードを作成すると、nameフィールドには「Jon Doe」、mailフィールドには「msyk@msyk.net」という値がレコード作成時には自動的に設定されます。もし、コンテキストにqueryキーによる検索条件が設定されているとき、場合によっては新規レコードを作成しても、条件に合わないで、コンテキストとして取り出されない可能性があります。その場合は、default-valuesの指定により、新規レコードでもqueryの条件に合うようにレコードを作るということで対処できるでしょう。リスト3-3-2　default-valuesキーの定義ファイル上での設定例IM_Entry(array (\n  array (\n    'name' =&gt; 'person',\n    'key' =&gt; 'id',\n    'view' =&gt; 'person',\n    'table' =&gt; 'person',\n    'repeat-control' =&gt; 'confirm-insert confirm-delete',\n    'paging' =&gt; true,\n    'records' =&gt; 10,\n    'maxrecords' =&gt; 100,\n    'default-values' =&gt; array (\n      array ( 'field' =&gt; 'name', 'value' =&gt; 'Jon Doe', ),\n      array ( 'field' =&gt; 'mail', 'value' =&gt; 'msyk@msyk.net', ),\n    ),\n  ),図3-3-2　default-valuesキーの定義ファイルエディターでの設定例　さらに、フィールドの既定値をJavaScriptのプログラムで動的に設定する方法もあります。INTERMediatorオブジェクトにある→additionalFieldValueOnNewRecordプロパティを利用します。このプロパティは、コンテキスト名をプロパティ名としたオブジェクトを参照します。例えば、ページファイルのヘッダー部にあるSCRIPTタグ要素のプログラムをリスト3-3-3のように記述したとします。ここでは、historyというコンテキストで新しいレコードを作成すると、startdateフィールドに今日の日付を初期値として設定します。→additionalFieldValueOnNewRecordに続いて、コンテキスト名を [ ] で指定します。右辺の値は、fieldキーとvalueキーを持つオブジェクトです。fieldキーにはフィールド名を指定し、valueキーには値を指定します。この場合は、正確には、ページを開いた日付になります。なお、FileMakerの場合は、日付の文字列を「月/日/年」形式にしなければなりません。リスト3-3-3　レコード作成時の既定値指定のプログラム例INTERMediator.additionalFieldValueOnNewRecord\n  [\"history\"] = {\n    field: \"startdate\", \n    value: new Date().toISOString().substr(0, 10)\n  };\n　もし、新規レコード時に値を設定するフィールドが複数ある場合、fieldおよびvalueキーを持つオブジェクトの配列で記述をします。リスト3-3-4はその例です。新しくhistoryコンテキストにレコードを作ったとき、startdateおよびenddateフィールドに、今日の日付が入力されます。リスト3-3-4　レコード作成時の既定値が複数フィールドある場合INTERMediator.additionalFieldValueOnNewRecord\n  [\"history\"] = [\n    { field: \"startdate\", \n      value: new Date().toISOString().substr(0, 10) },\n    { field: \"enddate\", \n      value: new Date().toISOString().substr(0, 10) },\n  ];　なお、これらフィールドの初期値に関する設定は新規レコード作成時だけでなく、レコード複製時にも適用されます。→論理削除に対応する　定義ファイルのコンテキスト定義に、→soft-deleteキーによる値を追加すれば、→論理削除（→Soft Delete）に対応します。論理削除とは、レコードの削除操作においては実際にレコードを削除するのではなく、フラグとなるフィールドになんらかの値を代入して、削除したことにする手法です。soft-deleteキーの値を「true」にするのが基本です。そのときは、コンテキストのもとになっているテーブルにあるdeleteフィールドを、削除したかどうかのフラグに使います。soft-deleteキーの値を文字列にすると、その文字列がフラグとなるフィールド名になります。　soft-deleteキーが設定されるとフラグとなるフィールドが、数値の1のものが削除されたレコードであると判断します。それ以外のものは削除されていないものと判断します。repeat-controlキー等で付与した「削除」ボタンは、実際にはレコード削除はしないで、フィールドに1を設定するだけにします。削除とみなさないレコードでは、そのフィールドの値はNULLあるいは\"\"でかまいません。したがって、初期値を特に設定はする必要はありません。　論理削除が設定されたコンテキストに対してクエリーを行うとき、「delete != 1」という検索条件が必ず付与されるので、検索結果からは論理的に削除されたレコードは排除される仕組みになっています。　なお、論理削除されたレコードを参照したい場合は、別のコンテキストを定義してください。もちろん、そのコンテキストでは、soft-deleteキーは設定しないでおきますし、場合によってはqueryキーの値を利用して、deleteが1のレコードに最初から絞り込んでも良いでしょう。そして、復活させるためのユーザーインターフェースを、例えばポップアップメニューで作成するなどしてください。　実際に、INTER-Mediatorの演習環境を利用して、論理削除の動作の確認をしてみます。以下のページは、page06.html、def06.phpを利用しましたが、すでにこのファイルを使っている場合には、異なる番号のファイルを利用してください。定義ファイルは、図3-3-3のように作成しました。personテーブルを使用したコンテキストを2つ「person」と「personall」定義します。図はMySQLに対応するもので、FileMakerの場合は、tableおよびviewキーの値を「person_layout」と設定してください。personコンテキストはsoft-deleteキーの値を「checking」としています。これは、テーブルに定義された数値型のフィールドです。このフィールドを、削除のフラグとして利用するということをこれで宣言しています。personallコンテキストではsoft-deleteキーの値はなく、queryキーも設定されていないので、原則としてすべてのレコードが出力されます。図3-3-3　論理削除のテストを行う定義ファイル　ページファイルはリスト3-3-5のように作成しました。それぞれのコンテキストをTABLEタグで一覧表示しています。テーブルが左右に並ぶように、style属性を設定してあります。その他はこれまでに説明してきたことと特に違いはありません。リスト3-3-5　論理削除のテストを行うページファイル&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;script type=\"text/javascript\" src=\"def06.php\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;table style=\"float:left\" border=\"2\"&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;td data-im=\"personall@name\"&gt;&lt;/td&gt;\n      &lt;td data-im=\"personall@checking\"&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;table style=\"float:left\" border=\"1\"&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"person@name\"/&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;br clear=\"all\"/&gt;\n&lt;/body&gt;\n&lt;/html&gt;　実際にページを表示してみます。図3-3-4では、左側のテーブルに、全レコードが表示されていて、1レコード目のcheckingフィールドが「1」であることが分かります。右側は、論理削除の設定が機能しているため、checkingフィールドの値が「1」のレコードは当初から見えていません。最初からcheckingが「1」のレコードがない場合は、以降の説明を参考にレコードを増やして確認してみてください。図3-3-4　論理削除を設定したコンテキストのレイアウト結果　ここで右側のテーブルの下にある「追加」ボタンを押して、レコードを追加します。追加後は、ブラウザーのページの更新を行って、再度ページの構築を行ってください。そして、右側のテーブルで新規レコードに対するnameフィールドのテキストフィールドがあるので、そこに適当な名前を入力しておきます。図3-3-5　新しいレコードを追加した　この状態で、右側のテーブルの新しいレコードに対応する「削除」ボタンをクリックします。すると、右側のテーブルでレコードが消えますが、フィールドの反映された値を確認するために、ブラウザーのページの更新を行って、再度ページの構築を行ってください。そうすれば、後から追加したレコードのcheckingフィールドの値が「1」になっていることが分かります。つまり、「削除」ボタンでは削除は行われず、データベースに対して行う処理はchekingフィールドに「1」を設定するだけになります。図3-3-6　レコードの削除を行ったが実際には消えていない　論理削除を加味したコンテキストと加味しないコンテキストを同時に表示するようなことは、実際の業務で作られることはまずないと思われます。ここで、確認のための更新作業を行うことは、実用上は大きな問題にはならないと考えます。→PostgreSQLでの→シーケンスオブジェクト　このセクションの最初にも説明したように、→PostgreSQLではレコード挿入操作の動作を他のデータベースと揃えるために、シーケンスオブジェクトの名前をコンテキストに→sequenceキーで指定する必要があります。　まず、シーケンスオブジェクトを自分で定義する場合を考えます。リスト3-3-6は、スキーマ定義の一部分です。まず、CREATE SEQUENCEでserialというシーケンスオブジェクトを定義しています。そして、personテーブルのidフィールドでは、シーケンスオブジェクトのserialより新たな値を得て、それを初期値にしています。最後の方には、GRANTステートメントで、この場合のユーザーwebに対して権限を与えていますが、テーブルへの権限だけでなく、シーケンスオブジェクトへの権限も適切に与えることを忘れないようにします。リスト3-3-6　シーケンスオブジェクトを伴うスキーマの一部CREATE SEQUENCE serial START 1000;\nCREATE TABLE person (\n    id INTEGER DEFAULT nextval('serial'),\n    :\n}\nGRANT ALL PRIVILEGES ON im_sample.serial TO web;\nGRANT ALL PRIVILEGES ON im_sample.person TO web;　定義ファイルの記述方法として、PHPでの一部分を示します。リスト3-3-7のように、sequeceキーで、シーケンスオブジェクトの名前を指定します。なお、ここでの「im_sample」はスキーマ名です。定義にスキーマ名を含めるかどうかは、データベースの設計次第でもありますが、INTER-MediatorのPostgreSQLのサンプルでは、データベースのエンティティは「スキーマ名.エンティティ名」という形式で記述しました。リスト3-3-7　シーケンスオブジェクトの指定を含むコンテキスト定義array(\n    'records' =&gt; 1,\n    'paging' =&gt; true,\n    'name' =&gt; 'person',\n    'view' =&gt; 'im_sample.person',\n    'table' =&gt; 'im_sample.person',\n    'key' =&gt; 'id',\n    'repeat-control' =&gt; 'insert delete',\n    'sequence' =&gt; 'im_sample.serial',\n),　一方、テーブル定義を行う時に、フィールドの型をSERIAL型で定義して、自動的にシーケンスオブジェクトを用意するという手法もあります。このとき、CREATE SEQUENCEによるオブジェクトの定義は不要ですが、「テーブル名_フィールド名_seq」というシーケンスオブジェクトが自動的に作られて、初期値が1になっています。例えば、im_sampleスキーマのpersonテーブルのidフィールドがSERIAL型だったとします。すると、person_id_seqというシーケンスオブジェクトが自動的に作られます。自動的に作られるオブジェクトにもアクセス権の設定を記述する必要があります。ただし、この場合は、sequenceキーの指定は不要です。→このセクションのまとめ　レコードの削除やレコード作成は、コンテキストにrepeat-controlキーで値を指定することで、自動的にボタンを生成することができます。ボタンの位置や、あるいは確認をするかどうかなどは、指定値によりある程度はカスタマイズが必要です。ページネーションが表示されていれば、ページネーション上にレコード作成ボタンが表示されます。コンテキストのrecordsキーの値が1の場合に新規レコードを作成すると、新規レコードだけが検索された状態になり、ボタンを押せば新規レコードだけが表示されるといった動作になります。→3-4入力専用のPost Onlyモードアンケートの記入などのような、入力専用のページを作成することもできます。ボタンをクリックすると、コンテキストに新しいレコードを作ることができます。→ページファイルでの違い　→入力専用モード（あるいは「→Post Onlyモード」）で動作させる場合には、定義ファイルは通常通り作成し、新規レコード作成できる状態になっていればOKです。具体的には、tableキーあるいはnameキーで指定される書き込み時のテーブルが、実際に存在して書き込み可能になっていれば動作します。定義ファイルでは、動作のバリエーションのための指定を加えることができますが、これはこの後に説明します。　Post Onlyモードのページも、通常のページファイルと同様に作成します。これまでに説明した部分でもFORMタグは使っていませんが、Post Onlyモードでも同様です。ただし、エンクロージャーに相当するタグ要素にdata-im-control属性を設定して、値は「→post」とします。また、レコード作成のボタン（以下、「→登録ボタン」と記述します）が必要ですが、BUTTONタグの要素に対して、→data-im-control属性を設定して、こちらも値は「post」とします。この2つの点が通常のデータベースの内容を表示するページと異なりますが、後は同様です。なお、原則として、ひとつのエンクロージャーに1セットのリピーターという構成になります。リピーター内部のリンクノードは、通常通り、data-im属性に「コンテキスト名@フィールド名」の値を設定します。コンテキスト定義に指定したvalidationキーの設定についても適用されます。　→チェックボックスと→ラジオボタンをグループとして動作させることもできます。その場合、data-im属性ではなく、→data-im-group属性に「コンテキスト名@フィールド名」の値を設定します。ラジオボタンであればどれかひとつの要素だけが選択されますが、チェックボックスは複数の要素をオンにすることで、それらの要素のvalue属性値を改行で区切った値をデータベースに送り込みます。FileMakerの→チェックボックスセットに似た機能です。　Post Onlyモードでは、data-im-control属性に「post」を指定したエンクロージャーの外部にあるエンクロージャーに対しては、普通にページ合成ができるので、データベースアクセスの結果と、入力フォームを混在させることもできます。また、入力フォームの内部のエンクロージャーも同様に通常通り処理されるので、ポップアップメニューの選択肢をデータベースから取り出して配置することなど、通常のページと同様な処理ができます。つまり、ページファイルの中にあるひとつのコンテキストだけをPost Onlyモードで動作させることができます。このとき、データベースの新規レコードを作成に使うコンテキストの範囲はそのコンテキストに加えて、コンテキストの中にある別のコンテキストの領域も探します。　階層化したコンテキストの動作を説明するために、具体的に説明しましょう。まず、商品申し込み用紙のようなページを作るとします。申し込み用紙に相当するPost Onlyモードのコンテキストを「request」とします。その中で、商品一覧を「products」コンテキストから取り出して表示します。商品一覧の中に商品を選択するチェックボックスを配置し、そのチェックボックスはrequestコンテキストに含むようにして選択結果を新しいレコードに加えたいとします。ページファイルをリスト3-4-1のように記述します。リスト3-4-1　別のコンテキストを含むPost Onlyモードのコンテキスト&lt;table&gt;\n&lt;tbody data-im-control=\"post\"&gt;\n&lt;tr&gt;&lt;th&gt;名前&lt;/th&gt;&lt;td&gt;&lt;input type=\"text\" data-im=\"request@name\"&gt;&lt;/td&gt;&lt;/tr&gt;\n&lt;tr&gt;&lt;th&gt;住所&lt;/th&gt;&lt;td&gt;&lt;input type=\"text\" data-im=\"request@addr\"&gt;&lt;/td&gt;&lt;/tr&gt;\n&lt;tr&gt;&lt;th&gt;メール&lt;/th&gt;&lt;td&gt;&lt;input type=\"text\" data-im=\"request@mail\"&gt;&lt;/td&gt;&lt;/tr&gt;\n&lt;tr&gt;&lt;th&gt;商品&lt;/th&gt;&lt;td&gt;\n\t&lt;table&gt;\n\t&lt;tbody&gt;\n\t&lt;tr&gt;\n\t\t&lt;td&gt;&lt;input type=\"checkbox\" data-im-group=\"request@selection\"\n\t\t\t\tdata-im-control=\"unbind\"\n\t\t\t\tdata-im=\"products@product_id@value\"&gt;&lt;/td&gt;\n\t\t&lt;td data-im=\"products@name\"&gt;&lt;/td&gt;\n\t&lt;/tr&gt;\n\t&lt;/tbody&gt;\n\t&lt;/table&gt;\n&lt;/td&gt;\n&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;td&gt;&lt;button data-im-control=\"post\"&gt;送信&lt;/button&gt;&lt;/td&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;　実際にページを表示するとき、外側のテーブルのrequestコンテキストはPost Onlyモードで動作するので、基本的にそのまま展開されるだけです。しかしながら、内側のテーブルではproductsコンテキストがあるので、複数のレコードを取り出していくつかの行に展開します。各行には、チェックボックスと、おそらく商品名がそれぞれセル内に表示されているでしょう。チェックボックスのvalue属性は、product_idフィールドの値が設定されます。　ここで、「送信」ボタンをクリックすれば、外側のテーブルの内部にあるdata-imおよびdata-im-group属性がrequestコンテキストの要素だけでなく、内部のコンテキスト、つまり内側のテーブルの中のdata-imおよびdata-im-group属性がrequestコンテキストの要素も収集して、データベースに送り込みます。このときのデータベースに送られるINSERT文を模式的にMySQLの文法で記述すると、リスト3-4-2のようになります。productsコンテキストでは、いくつかの商品がチェックボックスとともに見えていて、そのうち、product_idが21と44と32のチェックボックスを選択していたとします。selectionフィールドは改行で区切られます。このフィールドを保存するには、SQLデータベースの場合は文字列型にしておく必要があります。なお、この結果を持って、さらに別のテーブルにレコードを作りたい場合には、『8-1　サーバーサイドでの処理の追加』以降で説明するアドバイス定義クラスをPHP言語でのプログラミングで記述する必要があります。リスト3-4-2　レコード作成時のSQLステートメント例INSERT INTO request \nSET name='Someone', addr='Anywhere', mail='foo@bar.com', selection='21\\n44\\n32'　ただし、このように、データベースの値を適用したチェックボックスを用意しつつ、その結果をPost Onlyモードで利用する場合でも、チェックボックスは通常のコンテキストであるproductsコンテキストで展開しているため、product_idフィールドとバインドしてしまいます。ここでは、単に表示だけよく、値の収集はrequestコンテキストとして稼働するので、チェックボックスのオン/オフで、データベース更新する必要はありません。そこでタグの中に「data-im-control=\"→unbind\"」と記載してバインドをしないようにして、データベースへの更新処理を行わないようにしています。→登録ボタンを押した後の動作の設定　ここまで設定したPost Onlyモードのコンテキストの場合は、登録ボタンを押した後、ページはそのままなので、何度もボタンを押されてしまう可能性があります。その都度レコードが作成されてしまい、意図しない動作を引き起こします。そこで、表3-4-1のような設定を、コンテキストに加えます。これにより、ボタンを押したら、ボタンが即座に消えて、2回押されることはほぼなくなります。また、その後にメッセージを出したり、別のURLに移動できるので、入力者に対する適切なユーザーインターフェースを構築することができます。なお、これらの動作の前に、データベースに新しいレコードを作成します。コンテキストで使用できるキー動作→post-reconstructこの設定があれば、登録ボタンを押した後に→→ページの再合成を行う。値はなんでも良いが論理値として定義されているので、trueを指定する。post-dismiss-messageが指定されていれば、4秒後に再合成する→post-dismiss-message入力型フォームにおいて、登録ボタンを押した後に、ボタンを消してここに記述した→→メッセージの文字列を表示する。文字列はSPANタグでclass属性が「→IM_POSTMESSAGE」のタグ要素に含まれている→post-move-url入力型フォームにおいて、登録ボタンを押した後に、ここで指定した→→URLにページを移動させる。指定しない場合にはページ移動はない。post-dismiss-messageが指定されていれば、4秒後に移動する表3-4-1　登録ボタンをクリックした後の動作　いずれも、画面更新や別のURLへの移動までの動作時間は4秒としましたが、その時間を変更したい場合には、INTER-Mediatorで参照されるオブジェクトのwaitSecondsAfterPostMessageプロパティの値を設定してください。単位は秒です。リスト3-4-3は指定例で、例えば、ページ合成前に実行されるメソッドに記述をします。INTERMediatorOnPage.doBeforeConstructについては、『8-5　ブラウザーを判断するページ』の最後に解説があります。リスト3-4-3　ページの再合成までの時間を10秒にするINTERMediatorOnPage.doBeforeConstruct = function () {\n\tINTERMediator.waitSecondsAfterPostMessage = 10;\n}　登録ボタンをクリックした後に独自のプログラムを追加したい場合は、リスト3-4-4のような記述でメソッドを定義します。例えば、データベースに新規レコードを作成する際に、独自の判定ルールに合致している場合だけ新規レコード作成を認めるといった運用が考えられます。表3-4-1に示したメッセージ表示、ページ再合成、ページ移動が定義ファイルに設定されていた場合、それらよりも前に、以下に定義した関数を実行します。processingBeforePostOnlyContextは、データベースへの書き込み前に実施され、返り値がfalseだとデータベース処理を行わず、ページ移動なども行いません。processingAfterPostOnlyContextはデータベース処理後に実行され、返り値は指定しません。リスト3-4-4　データベースへの書き込み前後に行う処理の記述INTERMediatorOnPage.processingBeforePostOnlyContext\n  = function(node){\n\t  // any program here.\n\t  return true;\n     };\nINTERMediatorOnPage.processingAfterPostOnlyContext\n  = function(node){\n\t   // any program here.\n     };→演習Post Onlyモードのページを作成する　実際にPost Onlyモードのページを作成して、その動作を見てみましょう。ここでは、新しくページを作りますが、これまでに使ってきたpersonテーブルに入力するので、入力した結果はこの章のこれまでの演習で作ってきたページを利用します。Post Onlyモードのページの作成1ブラウザーで、「http://localhost:9080」に接続します。「トライアル用のページファイルと定義ファイル」というタイトルの部分を特定します。すでに開いているのなら、そのタブあるいはウインドウを開きます。2「def03.phpを編集する」をクリックし、定義ファイルエディターでdef03.phpファイルを編集します。（もし、他の用途で3番目を利用しているのなら、例えば、def11.phpを利用するなど、別の番号のセットを使用してください。その場合ソースコードの記述が変わる部分がありますが、可能な限り注記します。）3Contextsの中のQueryと書かれた部分を特定します。そして、その次の行の右の方にある「削除」をクリックして、Queryの設定がある行を削除します。4「レコードを本当に削除していいですか？」とたずねられるので、OKボタンをクリックします。5同様に、Sortingの次の行にある「削除」ボタンを押し、確認にOKボタンをクリックして、こちらの設定も削除しておきます。6nameを「person」、tableとviewはデータベースに応じて次のように設定します。Contextsのその他のテキストフィールドはkeyはid、recordsは1,pagingはtrue、その他は空白にします。[MySQL]の場合table、viewともに「person」と入力します。personは定義されているテーブルです。[FileMaker]の場合table、viewともに「person_layout」と入力します。FileMakerではテーブル名やTOC名ではなく、レイアウト名を指定します。7Database Settingsに設定を行います。[MySQL]の場合db-classは「PDO」のままでかまいません。dsnに「mysql:host=db;dbname=test_db;charset=utf8mb4」と入力します。そして、userに「web」、passwordに「password」と入力します。[FileMaker]の場合db-classを「FileMaker_DataAPI」に書き換えます。databaseは「TestDB」、userに「web」、passwordに「password」、serverに「gateway.docker.internal」、portに「443」、protocolに「https」、cert-vefifyingに「false」と入力します。8Debugについては、「false」にすると、デバッグ情報が出なくなります。なお、デバッグ情報をみながら動作を確認したい方は、「2」のままにしてこの後の作業を行ってください。9「http://localhost:9080」で開いたページに戻り「page03.htmlを編集する」をクリックし、ページファイルのpage03.htmlを編集するページファイルエディターが開きます。HTMLでの記述内容を以下のように変更します。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;script type=\"text/javascript\" src=\"def03.php\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;table&gt;\n  &lt;tbody data-im-control=\"post\"&gt;\n    &lt;tr&gt;\n      &lt;th&gt;name&lt;/th&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"person@name\"/&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;mail&lt;/th&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"person@mail\"/&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;category&lt;/th&gt;\n      &lt;td&gt;\n        &lt;select data-im=\"person@category\"&gt;\n          &lt;option value=\"1\"&gt;Family&lt;/option&gt;\n          &lt;option value=\"2\"&gt;Class Mate&lt;/option&gt;\n          &lt;option value=\"3\"&gt;Collegue&lt;/option&gt;\n      \t&lt;/select&gt;\n      &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;td&gt;&lt;button data-im-control=\"post\"&gt;Register&lt;/button&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;10「http://localhost:9080」で開いたページに戻り「page03.htmlを表示する」をクリックし、ページを表示します。フォーム要素を持つテーブルが、記述通りに動作して、ページが作成されています。11適当に入力して、Registerボタンをクリックします。クリック後、この状態では特にページに変化はありません。12page02.htmlを表示します。すでに開いている場合には、そのタブあるいはウインドウに切り替えて、ページの更新をします。開いていない場合には「http://localhost:9080」で開いたページに戻り、「page02.htmlを表示する」をクリックします。確かに、前の手順で登録した内容が追加されています。登録後に状態を表示するページにする1「def03.phpを編集する」をクリックして表示したページのタブあるいはウインドウを開き、定義ファイルエディターでdef03.phpファイルを編集します。Show Allボタンをクリックして、表示項目数を増やします。personコンテキストの中にある、post-reconstructを「true」、post-dismiss-messageに「投稿しました」と入力します。2page03.htmlを表示します。すでに開いている場合には、そのタブあるいはウインドウに切り替えて、ページの更新をします。適当に入力して「Register」ボタンをクリックすると、即座に、post-dismiss-messagに指定した文字列が表示されます。34秒後にページが更新され、新規入力できる初期画面に戻りました。演習のまとめエンクロージャーと登録ボタンにdata-im-control属性を設定し、値を「post」にすれば、データベースの内容を合成しない、Post Onlyモードのコンテキストがページ上に構築されます。登録ボタンをクリックすると、テキストフィールドなどに入力した内容をフィールドの値とした新しいレコードが作成されます。ボタンを押した後にメッセージを表示したり、あるいはページの再合成が可能なので、二重登録を避けることができます。→Post Onlyモードと「→確認画面」が不要な理由　INTER-Mediatorでは、Post Onlyモードによる新規レコード作成に対応しています。通常、フォームで入力するときには、入力結果を改めて別の画面に明示し、入力者に確認をさせて、OKかあるいは修正するというユーザーインターフェースが一般的です。もちろん、そのような動作をPost Onlyモードで実現してもよいのですが、開発者としてはその機能は不要と考えます。　Web情報を検索してみると、確認画面に対する否定的な意見がいくらかある一方で、確認画面の作り方というサイトは大量に出てきます。現状、確認画面は作って当たり前というのがどうも業界の一般常識なのでしょうか？　ただし、なぜ、必要なのかという積極的な説明を明確にしたサイトは筆者が探した中にはありませんでした。一方、不要であるという主張に対する理由には「出したところで見ている人はほとんどいないだろう」という消極的な理由を挙げているものがほとんどです。確認フォームが必要な理由　まず、一般的なWebフォームではなぜ確認が必要なのかということがあります。当然の理由として、入力したものを「確認したいから」、あるいは「確認する必要があるから」ということになりますが、理由はもう少し掘り下げて考えないといけません。おそらく、過去からのいろいろな経験の積み重ねで次のような理由があるからでしょう。フォームのページでは入力した情報がすべて見えているとは限らない入力した情報以外のものを表示したい（販売サイトの合計金額や送料など）ReturnキーやEnterキーによって、submitボタンが押されたのと同じになり、意図せずサブミットしてしまうときにやり直しが効かない積極的な理由はない、一般にそうだからとか、とにかく確認させたいといった理由　これらを順次検討しましょう。まず、最初の理由、つまりすべての要素が見えていないというのは、大昔の解像度の低いWebページを作っていた時代では確かにあったかもしれません。テキストフィールド枠が40文字しかない画面で、それ以上の文字入力を許している場合、入力後に全体を確認する必要があります。ユーザーは垂直方向はもちろん、水平方向にもスクロールしないと文字が見えません。そのような状況で、念のため一度全部、ページに見せるということは確かに必要でした。　しかしながら、現在は解像度が高いディスプレイが一般的になり、一覧性が高まりました。また、スマホのように画面表示領域が小さいデバイスの場合には、1ページにすべてを詰め込むような設計は避けられています。現在はデザインが重視されており、入力中に今自分が入力したものが見えないようなレイアウトは、一般にはデザインが悪いと言わざるを得ないでしょう。もし、この理由でフォームの確認画面が必要なら、まず、フォーム自体を見直す必要があります。入力中に全体像が分かるようにしてあれば、わざわざ確認画面を出す必要はなくなるでしょう。項目が多くなると、スクロールしないとすべてが見えないから、確認画面が必要という議論もあるかもしれません。しかしながら、その場合は、確認画面自体もスクロールが必要になることが一般的ではないでしょうか？　とにかく、入力フォームの段階で、確認ができるレベルでページを作っておくのが最善策であることを目指すのが適切な対処だと考えます。　2つ目は、入力したもの以外の情報を確認したいという理由です。例えば、販売サイトでの合計や送料等の表示があります。これは、入力した結果の確認画面の話でしょうか？　違います。これは、システムが生成した結果を利用者が確認する画面のことで、入力の確認画面の議論と混同してはいけません。　3つ目の理由は、古い時代のフォームでは、入力途中にReturnキーに触れてしまって意図せずサブミットされることがありました。テキストフィールドにフォーカスがあるときにReturnキーを押すと、自動的にそれを含むFORMタグのsubmitボタンがクリックしたものとみなされるのは一般的な動作です。他のフレームワークならともかく、INTER-MediatorはテキストフィールドでReturnを押しても、設定やあるいはプログラムを追加しない限りsubmit的な動作は起こりません。つまり、INTER-Mediatorであれば、Returnで意図せずサブミットされることはありません。逆に、Returnでサブミットしたいのなら、何かしらの記述を追加しなければなりません。　4つ目の理由は、積極的な理由がなく、そう言われているからやるというものです。積極的な理由もなく、何かをするのでしょうか？　理由がないのが理由ということに対しては、エクスキューズの必要すらないと考えます。本当に利用者のことを真剣に考えているのであれば、何か理由があるはずです。ユーザーにとって特別なメリットがないのに機能を組み込むのは開発者側の勝手な思い込みではないでしょうか？それでも“従来手法”を求められたら？　INTER-Mediatorでシステムを作る場合、それでも「確認」ページの作成を求められたらどうしましょうか？　確認の実装方法として、「ボタンを押したらダイアログボックスで短いメッセージを出して確認」があります。新たなページを作るのではなく、単に入力フォームの内容が書き込みされるということを促して、人間の手による応答が入ればいい程度のような場合です。　この場合は、Post Onlyモードで入力ページを作成します。そして、データベースへの書き込みに行く前に実行するメソッドを定義して、そこでダイアログボックスを表示します。例えば、ページファイルのヘッダー部にあるSCRIPTタグ要素のプログラムをリスト3-4-5のように記述したとします。ページファイル内でPost Onlyモードのリピーターがあり、そこでボタンをクリックすると、ここに定義した→processingBeforePostOnlyContextメソッドが呼び出されます。このメソッドがfalseを返せば、データベース処理等は何も行いません。→confirm関数はダイアログボックスを表示し、OKをクリックすればtrue、キャンセルをクリックすればfalseを返します。リスト3-4-5　入力前にダイアログボックスで確認する&lt;script type=\"text/javascript\" src=\"def03.php\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;\nINTERMediatorOnPage.processingBeforePostOnlyContext \n  = function(node) {\n    return confirm(\"本当に入力していいでしょうか？　\" \n                 + \"しつこいようですが、やっちゃいますよ\");\n  }\n&lt;/script&gt;　これ以上の仕組み、例えば、確認用の別のページを見せるような手法については、少し複雑になります。次にそのヒントについて説明をします。→→→確認付きの入力フォームの作成方法　以上のように、入力結果を新規レコードとして残すような入力フォームでは、INTER-Mediatorで適切なデザインをしていれば、確認画面が必要な積極的な理由はありません。しかしながら、発注側の要求は常に論理的とは限りません。ここまでに記載したような説明をしたとしても、「やっぱり確認ページが欲しいです」という場合もあるでしょう。その場合の一般的な対処法についてまとめておきます。　まず、いわゆる「確認ページ」が欲しいという場合には、入力および確認のための要素をすべて1ページに作り、CSSのdisplay属性を利用していずれか一方を表示するような仕組みにして、Post Onlyモードで新規レコードを作成するという方法があります。この方法は、複数のページを経由して書き込みをするような場合にも応用できます。　確認ページ付きのPost Onlyモードのページの例を示します。INTER-Mediatorの演習環境の適当なWebページのセット（例えば、def21.phpとpage21.html）等に入力すれば確認できます。定義ファイルは図3-4-1のように、入力結果を受け付けるsurveyという名前のコンテキストが定義されているとします。Database Settingsのセクションは、これまでの演習で紹介したように指定します。このコンテキストには、フィールドにはQ1とQ2が少なくともあるとします。ページファイルはリスト3-4-6に示します。図3-4-1　使用しているコンテキストリスト3-4-6　確認を伴うPost Onlyモードのページ&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;style&gt;\n        .input {\n            display: table-row;\n        }\n        .confirm {\n            display: none;\n        }\n    &lt;/style&gt;\n    &lt;script type=\"text/javascript\" src=\"def21.php\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n    function toConfirm()\t{\n      var textNode, value, textNode;\n      value = document.getElementById(\"Q1Input\").value\n      textNode = document.createTextNode(value);\n      document.getElementById(\"Q1Confirm\").appendChild(textNode);\n      value = document.getElementById(\"Q2Input\").value\n      textNode = document.createTextNode(value);\n      document.getElementById(\"Q2Confirm\").appendChild(textNode);\n      toggle(\"none\", \"table-row\");\n    }\n\n    function toInput()\t{\n      document.getElementById(\"Q1Confirm\").innerHTML = \"\";\n      document.getElementById(\"Q2Confirm\").innerHTML = \"\";\n      toggle(\"table-row\", \"none\");\n    }\n\n    function toggle(inputDisplay, confirmDisplay) {\n      var body, nodes, i;\n      body = document.getElementsByTagName(\"BODY\")[0];\n      nodes = INTERMediatorLib.getElementsByClassName(body, \"input\");\n      for (i = 0 ; i &lt; nodes.length ; i ++)  {\n        nodes[i].style.display = inputDisplay;\n      }\n      nodes = INTERMediatorLib.getElementsByClassName(body, \"confirm\");\n      for (i = 0 ; i &lt; nodes.length ; i ++)  {\n        nodes[i].style.display = confirmDisplay;\n      }\n  }\n  &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;table&gt;\n&lt;tbody data-im-control=\"post\"&gt;\n&lt;tr class=\"input\"&gt;\n    &lt;th&gt;Q1&lt;/th&gt;\n    &lt;td&gt;&lt;input type=\"text\" data-im=\"survey@Q1\" id=\"Q1Input\" /&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr class=\"input\"&gt;\n    &lt;th&gt;Q2&lt;/th&gt;\n    &lt;td&gt;&lt;input type=\"text\" data-im=\"survey@Q2\" id=\"Q2Input\"/&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr class=\"input\"&gt;\n    &lt;th&gt;&lt;/th&gt;&lt;td&gt;&lt;button onclick=\"toConfirm()\"&gt;確認&lt;/button&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr class=\"confirm\"&gt;\n    &lt;th&gt;Q1&lt;/th&gt;&lt;td id=\"Q1Confirm\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr class=\"confirm\"&gt;\n    &lt;th&gt;Q2&lt;/th&gt;&lt;td id=\"Q2Confirm\"&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr class=\"confirm\"&gt;\n    &lt;th&gt;&lt;/th&gt;\n    &lt;td&gt;\n        &lt;button onclick=\"toInput()\"&gt;戻る&lt;/button&gt;\n        &lt;button data-im-control=\"post\"&gt;書き込み&lt;/button&gt;\n    &lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;　実際にページを表示した結果が、図3-4-2です。最初、2つのフィールドに対するテキストフィールドが見えているので、適当にキータイプをします。そして、「確認」ボタンをクリックすると、確認のための表示に切り替わります。ここで、「戻る」ボタンだと、テキストフィールドの表示に戻り、「書き込み」ボタンをクリックすると、Post Onlyモードの動作として、レコードを新たに作成し、Q1およびQ2フィールドは、それぞれテキストフィールドに入力した値になります。図3-4-2　ページの表示例　プログラム部分を解説します。それぞれのボタンから呼び出されるJavaScriptのプログラムにあるtoggle関数は、classの値に応じて引数の値をCSSのdisplay属性に設定します。display属性が「table-row」なら行として表示、「none」であれば非表示になります。class属性がconfirmの行は、ヘッダー部のSTYLEタグの定義により、ページを表示したときには非表示になります。→INTERMediatorLib.getElementsByClassNameは、INTER-Mediatorによって提供されるメソッドで、最初の引数で指定したタグ要素（この場合は、BODYタグ要素）以下の要素（ノード）を検索し、2つ目の引数で指定した名前のclass属性を持った要素の配列を得るものです。これ以外は、JavaScriptの標準的なメソッドや関数を利用したものです。　toConfirm関数では、テキストフィールドに入力した文字列を、確認用のセルの値に設定し、表示する行を切り替えています。Post Onlyモードでは、data-im属性があっても、id属性は変更されずに定義通りに残ります。id属性を手掛かりにして、テキストフィールドを参照しvalue属性で入力した文字列を取得しています。なお、DOMのAPIでは、プログラムにあるようにテキストノードを生成して、appendChildで子要素として設定するといったややこしいことを行う必要があります。jQueryを使えばもっと短く記述できますので、そちらに慣れているのならjQueryも併用しましょう。原則、INTER-MediatorとjQueryは共存できるはずです。toInput関数は表示する行を切り替えればいいのですが、何度も行き来すると、確認用のセルに、つどつどテキストフィールドの値が追加されることになるので、入力用のセルを表示する前にいったん確認用のセルはクリアしています。　なお、このままでは、バリデーションの実装に悩むところです。バリデーションのルールに合わなくても、toConfirm関数を実行して、確認ページに遷移してしまいます。確認ページではバリデーションの結果は得られません。　解決方法として、INTER-Mediatorのバリデーション機能を統合するのもひとつの方法ですが、もっと明確な方法もあります。toConfirm関数では、実質的には入力したデータをひとつひとつ変数に取り出しています。であるならば、かえって、JavaScript上で確認処理を実装したほうがより明確ですし、正しくないときの処理も自由に組み込めます。発展させるなら、そちらの方向がより良い方法と考えられます。→処理結果を伴う場合の対処　ECサイトにあるような、商品申し込みをした後に、送料が計算されて出てくるようなアプリケーションを考えてみましょう。こうした確認用のページは発注者から見れば「入力フォーム」かもしれませんが、状況に応じて（あるいは一定の）送料が付加される点では、単なる入力ページではなく、何らかの処理を行うページであり、入力フォームの確認ということとは動作上は意味合いが違うということはこれまでに説明しました。　では、そういうページはどう作ればいいのでしょうか？　これらについて、画一的な方法はありません。そのアプリケーションに応じた作り方をしなければならないと考えます。もし、一定の「送料」を付加するだけなら、直前の『確認付きの入力フォームの作成方法』で紹介した方法の応用でできるでしょう。確認ページでは、送料を追加で表示します。データベース側に送料の金額をフィールドに入れたい場合には、typeがhiddenのINPUTタグを用意してフィールドにバインドしておき、JavaScriptのプログラムでそこに設定を行います。　さらに複雑なロジックが絡む場合の対処法については、さまざまなプログラミングテクニックが絡むので、『6-5　Post Onlyモードと連動した処理』で実例として示します。→このセクションのまとめ　Post Onlyモードという仕組みで、入力専用のページの作成が可能です。エンクロージャーおよび内部のボタンに、data-im-control属性がpostのものを用意するのが基本で、これにより、テキストフィールド等に入力したデータを、新規レコードとして指定したコンテキストに追加できます。ボタンを押した後にメッセージを表示したり、別のページに移動する仕組みも定義ファイルで実装できます。バリデーションや、リピーター内部にエンクロージャーを指定したマスター参照による選択肢の構築なども可能です。なお、一般には、入力後の処理をする仕組みも含めて「入力フォーム」と呼ばれることが多いのですが、INTER-Mediatorでは処理を含む場合、Post Onlyモードだけの仕組みでは思った通りの動作ができないかもしれません。その場合は、Post Onlyモードを使わないという選択肢も考慮すべきです。→3-5バリデーションデータの入力や更新時には、ユーザーの入力した結果を検証し、間違いであることが分かればデータベースへの入力をしないで、ユーザーに修正を求めたいことがあります。こうした一連の機能を→バリデーションと呼びます。INTER-Mediatorではコンテキストへの定義の追加でバリデーションの設定が可能です。→コンテキスト定義に設定するバリデーション　コンテキストの定義では、→validationキーによって指定が可能です。値は、field、rule、message、notifyをキーに持つ連想配列を要素とした配列です。これは、queryキーなどと同様な形式です。定義ファイルエディターでは、ページの冒頭にある「show all」ボタンを押すことで、設定項目が表示されます。連想配列に指定する内容は表3-5-1の通りです。キー指定する値動作→fieldフィールド名のみデータ確認を行うフィールド名→ruleJavaScriptの式入力値は変数value、ノードへの参照は変数targetに入っているものとして、式を組み立てることができる。式の結果がtrueならそのまま処理を進める→message文字列正しくない場合に表示するメッセージ。ruleで指定した式の結果がfalseなら、messageの文字列を表示して値を元に戻す→notify（省略、以下のもの以外）ダイアログボックスでメッセージを表示する→inlineノードの直後に文字列としてmessageをSPANタグ（クラスは_im_alertmessage）で追加する→end-of-sibling兄弟ノードの最後にmessageをSPANタグ（クラスは_im_alertmessage）で追加する表3-5-1　validationキーの値に指定する連想配列　fieldでは、コンテキスト内に現れるフィールド名を指定します。ruleには式を記述しますが、変数valueとtargetをいきなり記述できます。例えば、リスト3-5-1のようなvalidationキーの値を記述した場合、フィールドnameとバインドしたテキストフィールド全てで、データの変更を行ったときに、「length(value) &gt; 1」という式を計算します。式の記述については『4-4　計算プロパティの設定』で解説をしますが、lengthは文字列の長さを求める関数です。つまり、テキストフィールドに入力された文字列を調べて、1より大きい場合はtrueになり、そのままフィールドの値が更新されて何もメッセージは出しません。しかしながら、文字列が1文字だけの場合ではruleの式はfalseになります。すると、messageやnotifyで指定されたメッセージが表示されます。リスト3-5-1　validationキーを指定したコンテキストの例IM_Entry( array (\n  array (\n    'name' =&gt; 'person',\n    'key' =&gt; 'id',\n    'view' =&gt; 'person',\n    'table' =&gt; 'person',\n    'validation' =&gt; array (\n      array (\n        'field' =&gt; 'name',\n        'rule' =&gt; 'length(value) &gt; 1',\n        'message' =&gt; '2文字以上入力してください',\n      ),\n    ),\n  ),図3-5-1　ダイアログボックスでメッセージを表示した例　ダイアログボックス以外のメッセージの表示方法として、ページ上にテキストノードを追加する方法があります。テキストフィールドの右側などに、「文字を入力してください」といったようなメッセージが表示されます。このときは、notifyキーの値を指定してください。テキストを赤文字にしたいなどのスタイルを指定したい場合には、テキスト自体のclass属性が_im_alertmessageとなっているので、このクラス名に対するセレクタをCSSで記述すれば良いでしょう。→演習バリデーションを組み込む　Post Onlyモードのページの作成1ブラウザーで、「http://localhost:9080」に接続します。「トライアル用のページファイルと定義ファイル」というタイトルの部分を特定します。すでに開いているのなら、そのタブあるいはウインドウを開きます。2「def04.phpを編集する」をクリックし、定義ファイルエディターでdef04.phpファイルを編集します。（もし、他の用途で4番目を利用しているのなら、例えば、def11.phpを利用するなど、別の番号のセットを使用してください。その場合ソースコードの記述が変わる部分がありますが、可能な限り注記します。）3Contextsの中のQueryと書かれた部分を特定します。そして、その次の行の右の方にある「削除」をクリックして、Queryの設定がある行を削除します。4「レコードを本当に削除していいですか？」とたずねられるので、OKボタンをクリックします。5同様に、Sortingの次の行にある「削除」ボタンを押し、確認にOKボタンをクリックして、こちらの設定も削除しておきます。6nameを「person」、tableとviewはデータベースに応じて次のように設定します。[MySQL]の場合table、viewともに「person」と入力します。personは定義されているテーブルです。[FileMaker]の場合table、viewともに「person_layout」と入力します。FileMakerではテーブル名やTOC名ではなく、レイアウト名を指定します。7Contextsにあるkeyは「id」、pagingは「true」、repeat-controlは「confirm-insert confirm-delete」、recordsは「1」とします。その他のテキストフィールドは空白にします。8Database Settingsに設定を行います。[MySQL]の場合db-classは「PDO」のままでかまいません。dsnに「mysql:host=db;dbname=test_db;charset=utf8mb4」と入力します。そして、userに「web」、passwordに「password」と入力します。[FileMaker]の場合db-classを「FileMaker_DataAPI」に書き換えます。databaseは「TestDB」、userに「web」、passwordに「password」、serverに「gateway.docker.internal」、portに「443」、protocolに「https」、cert-vefifyingに「false」と入力します。9Debugについては、「false」にすると、デバッグ情報が出なくなります。なお、デバッグ情報をみながら動作を確認したい方は、「2」のままにしてこの後の作業を行ってください。10「http://localhost:9080」で開いたページに戻り「page04.htmlを編集する」をクリックすれば、ページファイルのpage04.htmlを編集するページファイルエディターが開きます。HTMLでの記述内容を以下のように変更します。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;script type=\"text/javascript\" src=\"def04.php\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n  &lt;table&gt;\n    &lt;tbody&gt;\n      &lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;td data-im=\"person@id\"&gt;&lt;/td&gt;&lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;th&gt;name&lt;/th&gt;\n        &lt;td&gt;&lt;input type=\"text\" data-im=\"person@name\"&gt;&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;th&gt;mail&lt;/th&gt;\n        &lt;td&gt;&lt;input type=\"text\" data-im=\"person@mail\"&gt;&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/tbody&gt;\n  &lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;データを判定してエラーを表示する1「def04.phpを編集する」をクリックして表示したページのタブあるいはウインドウを開き、定義ファイルエディターでdef04.phpファイルを編集します。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）2Show Allボタンをクリックして、表示項目数を増やします。personコンテキストの中にある、Validationsの「追加」ボタンをクリックします。項目を作成して良いかどうかを確認されるので、OKをクリックします。3Validationsの設定枠が作られます。ここで、fieldは「name」、ruleは「length(value)&gt;0」、messageは「空欄はだめです！」と入力します。notifyは空欄にします。変更後、Tabキーを押して、確実に変更結果が書き込まれるようにします。4「http://localhost:9080」で開いたページに戻り「page04.htmlを表示する」をクリックし、ページを表示します。personテーブルの一部のフィールドが編集可能な状態で表示されるページが作成されています。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）5ページネーションのコントロールにある「レコード作成: person」をクリックして、新たにレコードを作ります。レコードを作成して良いかどうかを確認されるので、OKをクリックします。6Validationsの設定があるnameフィールドのテキストフィールドをクリックして、入力しようとします。7何も入力しないで、Tabキーを押して、次のフィールドに移動しようとしてみます。すると、「空欄はだめです！」というメッセージが表示されます。「閉じる」をクリックしても、元のnameのテキストフィールドに文字カーソルが点滅しており、次のフィールドに移動しません。つまり、Validationsの設定にあるruleを評価し、現在のvalueは \"\" なので、length(\"\")の結果が0になって、不等式が成り立たなくなり、値が不正と判定してメッセージを表示しているのです。8nameフィールドに適当に何か入力してTabキーを押すと、次のフィールドに移動します。入力された値は \"test\" なので、Validationsのrulesの条件式がtrueとなって条件式が成り立つので、想定された正しい範囲の値が入力されたと判定して、警告等は表示せず先に進みます。インラインでエラー表示1「def04.phpを編集する」をクリックして表示したページのタブあるいはウインドウを開き、定義ファイルエディターでdef04.phpファイルを編集します。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）2定義されているpersonコンテキストのValidationsの設定を変更します。設定が見えていない時には、ページ上部の「Show All」ボタンをクリックしてください。そして、notifyの設定を「inline」とします。3「page04.htmlを表示する」をクリックして表示したページのタブあるいはウインドウを開き、page04.htmlをブラウザーに表示します。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）4ブラウザーの更新ボタンをクリックして、修正したコンテキストの結果を反映させます。5ページネーションコントロールの「&gt;&gt;」をクリックするなどして、直前に作成したレコードに移動します。そして、nameフィールドを表示しているテキストフィールドの文字列を削除して何も文字が入力されていない状態にして、Tabキーを押します。すると、Validationsの設定のruleを満たさない状態になりますが、メッセージはダイアログボックスではなく、ページ内に文字列として表示されます。すでに作られているレコードを編集するページでValidationsの設定をした場合、判定は、設定に含まれているフィールドに対するテキストフィールドなどで編集したり、あるいはクリックするなどして編集しようとした後など、そのフィールドに対して何らかのアクションを取った時にしか判定を行いません。Post Onlyモードでのバリデーション1「page04.phpを編集する」をクリックして表示したページのタブあるいはウインドウを開き、ページファイルエディターでpage04.phpファイルを編集します。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）2すでに存在するtableタグのテーブルのすぐ後に、以下のPost Onlyモードの領域を作成します。もちろん、ここまでに表示したのと同じpersonコンテキストへの新規レコードを作成を行うPost Onlyモードの領域です。このコンテキストには、すでにValidationsの設定が行われていることに注目してください。  &lt;table&gt;\n    &lt;tbody data-im-control=\"post\"&gt;\n      &lt;tr&gt;\n        &lt;th&gt;name&lt;/th&gt;\n        &lt;td&gt;&lt;input type=\"text\" data-im=\"person@name\"&gt;&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;th&gt;mail&lt;/th&gt;\n        &lt;td&gt;&lt;input type=\"text\" data-im=\"person@mail\"&gt;&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;th&gt;&lt;/th&gt;\n        &lt;td&gt;&lt;button data-im-control=\"post\"&gt;入力&lt;/button&gt;&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/tbody&gt;3「page04.htmlを表示する」をクリックして表示したページのタブあるいはウインドウを開き、page04.htmlをブラウザーに表示します。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）4ブラウザーの更新ボタンをクリックして、修正したページの結果を反映させます。5新たに追加したテーブルのnameフィールドのテキストフィールドをクリックして、何も入力せずにTabキーを押します。すると、エラーメッセージが表示され、次のフィールドには進みません。6ブラウザーの更新ボタンをクリックして最初から作業を始めるとします。新たに追加したテーブルの「入力」ボタンをクリックします。すると、やはりメッセージが表示され、入力処理には以降しません。Post Onlyモードの場合は、データベース処理を行う前に、コンテキストに定義されたValidationsの設定を全てチェックします。演習のまとめValidationsの設定により、指定したフィールドの値が一定の条件を満たさない場合にはエラーメッセージを表示することができます。条件には式を記述します。式では、フィールドの値を示すvalue変数や、HTML要素を参照するtarget変数を利用できます。標準ではダイアログボックスでエラーメッセージを表示しますが、設定により、HTMLページ内にメッセージを表示することができます。→バリデーション機能の利用と注意点　バリデーションの仕組みは、ユーザーインターフェースの応答を重視して、クライアントサイドのみで実施されるようになっています。しかしながら、JavaScriptを利用してサーバーへ直接データを投入することにより、定義したバリデーションを無視したデータ入力ができることになります。この点は問題としては捉えていますが、実現方法に懸念すべき点が多く、Ver.5.7の開発を行っている2017年後半における計画では、先のメジャーアップデートであるVer.6系列で実現する考えです。　Post Onlyモードの場合、複数のフィールドの値をもとに判断をするようなバリデーションを実装したいときには、JavaScriptを利用する必要があります。JavaScript関連の章の『6-5　Post Onlyモードと連動した処理』『Post Onlyモードで利用できるAPI』で解説します。　演習でもありましたが、バリデーションの機能はレコード編集時には、そのテキストフィールドにフォーカスが入らないと実施されません。「確定」ボタン的なものを持たないユーザーインターフェースなので、そのような動作になります。しかしながら、空欄のままになっては困るということもあるかと思います。その場合、エンクロージャーの処理を終了したときに呼び出されるメソッド（『6-4　ページ合成に割り込む処理の追加』で説明）に、特定のフィールドをフォーカスするようなメソッドを組み込むことで実現できるでしょう。→このセクションのまとめ　入力したデータが正しいかどうかを判定して、正しくない場合にはエラーメッセージを出す機能が組み込まれています。一般にはバリデーションと呼ばれる機能で、定義ファイルには、特定のフィールドの値を元に判断する設定を記述することができます。一方、複数のフィールドを元にバリデーションを行うには、JavaScriptのプログラミングが必要です。\n"
    },
    {
        "id": 1004,
        "parent": "/ja/tutorial/",
        "path": "/ja/tutorial/proof-04.html",
        "title": "コンテキストに対する理解を深める",
        "breadcrumb": "chapter 4",
        "body": "→Chapter 4コンテキストに対する理解を深めるこの章は、INTER-Mediator Ver.12をもとに記載しました。3章まででシンプルなWebページを構築して、INTER-Mediatorの動作を見てもらいました。この章では、定義ファイルやページファイルの設定をさらに細かく見ていきます。定義ファイルのもっとも重要な設定要素は、「コンテキスト」です。コンテキストをどのように作成するのかが、INTER-Mediatorでのサイト制作のポイントになります。→4-1ターゲット指定ページファイルでは、フィールドのデータを表示するためにタグのdata-im属性に指定を行うことを説明しましたこの指定は単にテキストを要素に設定するだけでなく、さまざまなバリエーションを持っています。それらを説明し、実際に演習で確認してみましょう。→リンクノードにおける→ターゲット指定　data-im属性を指定して、データベースのフィールドとバインドした要素を「リンクノード」と呼ぶことはすでに説明した通りです。この→data-im属性の値を「ターゲット指定」と呼ぶことにします。つまり、この値は、データベースやあるいは属性の何に対する設定なのかを示すものということで、「ターゲット」という名前をつけています。　「ターゲット指定」は「コンテキスト名@フィールド名@ターゲット」が基本的な形式です。コンテキスト名と、コンテキストより得られるリレーションに含まれるフィールド名は、必ず指定します。最後の「@ターゲット」は省略可能です。本コースのこれまでの箇所では、すべて「@ターゲット」部分を省略していました。複数のターゲット指定をdata-im属性の値に設定することも可能です。その場合は、半角のスペースで区切ります。リスト4-1-1は、2つのターゲット指定を持つリンクノードの例です。リスト4-1-1　2つのターゲット指定を持つリンクノードの例&lt;span data-im=\"person@name person@bgcolor@style.backgroundColor\"&gt;&lt;/span&gt;　「@ターゲット」の部分に指定可能な要素は、表4-1-1に示しました。ターゲット指定の「@ターゲット」部分を省略した場合の動作を説明します。この場合、通常は、その要素のテキスト要素として、フィールドの値を設置します。DIVやH1などのタグではフィールドの値をそのタグ要素のテキスト要素として設定します。　一方、フォームで使うINPUT、SELECT、TEXTAREAでは「@ターゲット」部分を省略した場合、そのタグの種類に応じて、適切な属性やあるいはテキスト要素への設定を行います。例えば、type=\"text\"のINPUTタグ要素やSELECT要素の場合は、value属性に設定します。チェックボックスやラジオボタンの場合は、value属性と比較をして、チェックのオン/オフを行います。TEXTAREAタグでは、テキスト要素として設定をします。つまり、データが、ページ上に見えるようにするには、一般には、「@ターゲット」部分を省略すればよいということです。@ターゲット動作省略テキストノードあるいはvalue属性などの“目に見える状態”にする属性名その要素の指定した属性に、フィールドの値を設定する→style.スタイル名スタイル名はJavaScriptでのスタイル名。フィールドの値を指定したスタイル属性として設定する→innerHTMLフィールドの値を、その要素のinnerHTMLプロパティへ設定するnodeTextフィールドの値を、その要素のnodeTextプロパティへ設定する（基本動作は省略時と同様）→#____ターゲット指定を#で始めると、現在のデータに追記する→$____ターゲット指定を$で始めると、現在のデータの中にある$を、フィールドのデータに置き換える。複数のターゲット指定がある場合、前から順番に処理される表4-1-1　@ターゲットに指定可能な要素　リスト4-1-2には、リンクノードと、フィールドのデータを合成した結果の例を記載します。→の右側が、フィールドのデータを合成した結果で、変更されたタグの記述が実際にページ上で解釈されることになります。その結果、データベースの内容を表示することはもちろん、データベースの内容によってスタイルを変更したり、あるいは関数呼び出しのパラメーターの指定もできるようになっています。リスト4-1-2　ターゲット指定の例（フィールド値がvalだったとする）&lt;td data-im=\"tbl@f1\"&gt;&lt;/td&gt;\n　→　&lt;td data-im=\"tbl@f1\"&gt;val&lt;/td&gt;\n&lt;td data-im=\"tbl@f1@align\"&gt;&lt;/td&gt;\n　→　&lt;td data-im=\"tbl@f1\" align=\"val\"&gt;&lt;/td&gt;\n&lt;td data-im=\"tbl@f1@innerHTML\"&gt;&lt;/td&gt;\n　→　&lt;td data-im=\"tbl@f1\"&gt;*val*&lt;/td&gt;\n&lt;td data-im=\"tbl@f1@style.backgroudColor\"&gt;&lt;/td&gt;\n　→　&lt;td data-im=\"tbl@f1\" style=\"background-color: val;\"&gt;&lt;/td&gt;\n&lt;input type=\"text\" data-im=\"tbl@f1\"/&gt;\n　→　&lt;input type=\"text\" data-im=\"tbl@f1\" value=\"val\"/&gt;\n&lt;td class=\"cell \" data-im=\"tbl@f1@#class\"&gt;&lt;/td&gt;\n　→　&lt;td class=\"cell val\" data-im=\"tbl@f1@#class\"&gt;&lt;/td&gt;\n&lt;td class=\"cell \" data-im=\"tbl@f1@#class tbl@f2\"&gt;&lt;/td&gt;\n　→　&lt;td class=\"cell  val1\" data-im=\"tbl@f1@#class tbl@f2\"&gt;val2&lt;/td&gt;\n&lt;span onclick=\"doClick($)\" data-im=\"tbl@f1@$onclick\"&gt;&lt;/span&gt;\n　→　&lt;span onclick=\"doClick(val)\" data-im=\"tbl@f1@$onclick\"&gt;&lt;/span&gt;→FileMakerの場合のターゲット指定のフィールド名　FileMakerでは、ひとつのレイアウトに複数のTO（リレーションシップのタブで定義するボックス）に含まれるフィールドを配置します。レイアウトに割り当てられたTOにあるフィールドは、単にフィールド名のみで指定できます。しかしながら、レイアウトに割り当てたTOとは異なるTOのフィールドの場合、原則として「TO名::フィールド名」の形式で記述します。　したがって、TO名が長いと、ターゲット指定が「Patient@病棟マスター_表示用::背景色@style.backgroundColor」のようなとてつもなく長い表示になりがちです。この場合、Patientコンテキストが指定するレイアウトに割り当てたTOとは別の「病棟マスター_表示用」という名前のTOにある「背景色」フィールドを、このタグ要素の背景色に設定するという設定となります。このセクションの最後に紹介したエイリアス名を定義する方法もありますが、長い名前がページファイルから定義ファイルに移るだけで、長い記述をしなくても済むわけではありません。→ターゲット指定についての注意点　「@ターゲット」の指定がない場合や、textNodeを指定した場合は、DOMの「テキストノード追加」の仕組みを使います。そのため、追加する文字列が、HTMLのタグであっても、タグとしては解釈せず、例えば、「&lt;」は「&amp;lt;」として追加され、テキストエリアであれば、タグ文字列として見えます。この状態では、フィールドのデータは、単に表示されるのであって、何か処理をされることはありません。しかしながら、@innerHTMLを使用した場合は、細心の注意を払ってください。この場合、フィールドのデータに、JavaScriptのプログラムがあれば、実行されてしまい、セキュリティホールになりえます。しかしながら、innerHTMLの機能がないと、HTMLの断片をフィールドに保持して、そのHTMLに従ったレイアウトをするような用途に使えなくなります。@innerHTMLを使用する場合は、不特定多数の人がデータベースへの入力ができるようにすることはまず避けましょう。責任ある人だけがデータの書き込みができるようにしておくことで、一定の範囲で悪意のあるスクリプトの混入は防ぐことができます。SCRIPTタグを抜くことでも、この危険性をいくぶん避けることはできますが、属性内にもスクリプトの書き込みができる場合があり、JavaScriptのプログラムを完全に排除することは、難しいと考えます。結論としては、@innerHTMLを使う場合には、システム全体のセキュリティ上の問題がないかをよく考えた上で使用をするということになります。→演習ターゲット指定のバリエーション　演習環境を利用して、データの書き戻しを伴うページの作成を行います。新たなページを作成して、更新の動作を検証します。テキストフィールドとテキストエリアのあるページ1ここからの作業は、Webブラウザー上で行います。ブラウザーで、「http://localhost:9080」に接続します。「トライアル用のページファイルと定義ファイル」というタイトルの部分を特定します。2「def05.phpを編集する」をクリックし、定義ファイルエディターでdef05.phpファイルを編集します。（もし、他の用途で5番目を利用しているのなら、例えば、def11.phpを利用するなど、別の番号のセットを使用してください。その場合ソースコードの記述が変わる部分がありますが、可能な限り注記します。）3Contextsの中のQueryと書かれ背景がグレーの部分を特定します。そして、その次の行の右の方にある「削除」をクリックして、Queryの設定がある行を削除します。4「レコードを本当に削除していいですか？」とたずねられるので、OKボタンをクリックします。5同様に、Sortingの次の行にある「削除」ボタンを押し、確認にOKボタンをクリックして、こちらの設定も削除しておきます。6name、table、viewともに「postalcode」、keyを「id」、pagingを「true」、recordsを「5」とします。Contextsのその他のテキストフィールドは空白にします。7Database Settingsに設定を行います。[MySQL]の場合db-classは「PDO」のままでかまいません。dsnに「mysql:host=db;dbname=test_db;charset=utf8mb4」と入力します。そして、userに「web」、passwordに「password」と入力します。[FileMaker]の場合db-classを「FileMaker_DataAPI」に書き換えます。databaseは「TestDB」、userに「web」、passwordに「password」、serverに「gateway.docker.internal」、portに「443」、protocolに「https」、cert-vefifyingに「false」と入力します。8Debugについては、「false」にすると、デバッグ情報が出なくなります。なお、デバッグ情報をみながら動作を確認したい方は、「2」のままにしてこの後の作業を行ってください。9「http://localhost:9080」で開いたページに戻り「page05.htmlを編集する」をクリックし、ページファイルのpage05.htmlを編集するページファイルエディターが開きます。HTMLでの記述内容を以下のように変更します。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）&lt;!DOCTYPE html&gt;\n&lt;!--\n/*\n * INTER-Mediator Ver.@@@@2@@@@ Released @@@@1@@@@\n * \n *   Copyright (c) 2010-2015 INTER-Mediator Directive Committee, All rights reserved.\n * \n *   This project started at the end of 2009 by Masayuki Nii  msyk@msyk.net.\n *   INTER-Mediator is supplied under MIT License.\n */  --&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;script type=\"text/javascript\" src=\"def05.php\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n  &lt;table&gt;\n    &lt;thead&gt;\n      &lt;tr&gt;&lt;th&gt;Postal Code&lt;/th&gt;&lt;th&gt;Place&lt;/th&gt;&lt;th&gt;Memo&lt;/th&gt;&lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n      &lt;tr&gt;\n        &lt;td data-im=\"postalcode@f3\"&gt;&lt;/td&gt;\n        &lt;td&gt;\n          &lt;span data-im=\"postalcode@f7\"&gt;&lt;/span&gt;\n          &lt;span data-im=\"postalcode@f8\"&gt;&lt;/span&gt;\n          &lt;span data-im=\"postalcode@f9\"&gt;&lt;/span&gt;\n        &lt;/td&gt;\n        &lt;td&gt;\n          &lt;input type=\"text\" data-im=\"postalcode@memo\"/&gt;\n        &lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/body&gt;\n&lt;/html&gt;10「http://localhost:9080」で開いたページに戻り、「page05.htmlを表示する」をクリックします。page05.htmlファイルが別のタブあるいはウインドウで開きます。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）テキストフィールドに見えているデータは、データベースに入力されているデータです。memoフィールドのみ編集可能な状態になっています。ここまでは、以前に作ったページから大きな違いはありません。ここでも、スタイルシートは、INTER-Mediatorのサンプルの中にあるものをそのまま利用しています。そのため、ページネーションのコントロールのボタンはそれらしく見えています。フィールドの値を要素のスタイルに指定する1「page05.htmlを編集する」をクリックして表示したタブあるいはウインドウを表示します。もし、閉じていたら「http://localhost:9080」で開いたページに戻り、「page05.htmlを編集する」をクリックします。ページファイルのコードを以下のように変更します。f8フィールドとバインドしているSPANタグ要素のdata-im属性に、「memoフィールドの値を、スタイル属性のcolorとして設定する」という定義が加わりました。    &lt;tbody&gt;\n      &lt;tr&gt;\n        &lt;td data-im=\"postalcode@f3\"&gt;&lt;/td&gt;\n        &lt;td&gt;\n          &lt;span data-im=\"postalcode@f7\"&gt;&lt;/span&gt;\n          &lt;span data-im=\"postalcode@f8 postalcode@memo@style.color\"&gt;&lt;/span&gt;\n          &lt;span data-im=\"postalcode@f9\"&gt;&lt;/span&gt;\n        &lt;/td&gt;\n        &lt;td&gt;\n          &lt;input type=\"text\" data-im=\"postalcode@memo\"/&gt;\n        &lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/tbody&gt;2「page05.htmlを表示する」をクリックして表示したタブあるいはウインドウを表示します。そして、ページ内容の更新を行ってください。もし、閉じていたら「http://localhost:9080」で開いたページに戻り、「page05.htmlを表示する」をクリックします。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）3Memoの列にあるテキストフィールドに、HTMLのスタイルシートのcolorに対応した値（red、#888888、など）を入力してみます。区名に対応するf8フィールドのSPANタグ要素にのみ、colorのスタイルが適用されていますが、値はmemoフィールドから取り出されています。結果として、Memo列のテキストフィールドに設定した文字列が、f8フィールドの文字色として設定されています。追加したターゲット指定が「postalcode@memo@style.color」となっていることを改めて確認してください。これにより、memoフィールドの値が、そのタグ要素のスタイル属性colorに対して適用されるということです。既存のデータに接続する設定1演習環境が稼働していて、サンプルの画像をブラウザーで表示できることをまず確認します。ブラウザーで新しいタブあるいはウインドウを開いて、次のURLを入力し、画像が表示されることを確認します。タブの追加は、タブの並びの一番右にあるボタンで通常は行えます。（こちらをクリックすることで、以下のURLを開くことができます。）http://localhost:9080/vendor/inter-mediator/inter-mediator/samples/Sample_products/images/tomatos.png2「page05.htmlを編集する」をクリックして表示したタブあるいはウインドウを表示します。もし、閉じていたら「http://localhost:9080」で開いたページに戻り、「page05.htmlを編集する」をクリックします。ページファイルのコードを以下のように変更します。新たにIMGタグが追加されましたが、src属性は、前に確認したURLのファイル名の直前までの相対パスになっています。IMGタグ要素のdata-im属性はmemoフィールドの内容をsrc属性につなげるという設定ですが、「#」があるので、すでに入力されている属性値に、memoフィールドの文字列を追加することになります。    &lt;tbody&gt;\n      &lt;tr&gt;\n        &lt;td data-im=\"postalcode@f3\"&gt;&lt;/td&gt;\n        &lt;td&gt;\n          &lt;span data-im=\"postalcode@f7\"&gt;&lt;/span&gt;\n          &lt;span data-im=\"postalcode@f8\"&gt;&lt;/span&gt;\n          &lt;span data-im=\"postalcode@f9\"&gt;&lt;/span&gt;\n          &lt;img src=\"/vendor/inter-mediator/inter-mediator/samples/Sample_products/images/\"\n               data-im=\"postalcode@memo@#src\"/&gt;\n        &lt;/td&gt;\n        &lt;td&gt;\n          &lt;input type=\"text\" data-im=\"postalcode@memo\"/&gt;\n        &lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/tbody&gt;3「page05.htmlを表示する」をクリックして表示したタブあるいはウインドウを表示します。そして、ページ内容の更新を行ってください。もし、閉じていたら「http://localhost:9080」で開いたページに戻り、「page05.htmlを表示する」をクリックします。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）4Memoの列にあるテキストフィールドに、画像ファイル名を入力してみます。INTER-Mediatorの演習環境には、以下のファイル名の画像ファイルが、src属性に指定したディレクトリに存在するので、これらの文字列をmemoフィールドにキータイプして入力し、Tabキーでフィールドを移動すると、即座に画像が出てきます。なお、画像が出てこない場合には、画面の更新を行ってください。galia-melon.pngmela-verde.pngonion2.pngorange_1.pngtomatos.pngmemoフィールドの文字列として画像のファイル名のみを入力します。すると、もともとsrc属性にある「/vendor/inter-mediator/inter-mediator/samples/Sample_products/images/」と、ファイル名（例えば「tomatos.png」）が結合された「/vendor/inter-mediator/inter-mediator/samples/Sample_products/images/tomatos.png」がsrc属性の値になります。このパスは、存在する画像ファイルへのURLと解釈できるので、IMGタグ要素に画像が表示されます。innterHTMLによるHTML要素の表示1「page05.htmlを編集する」をクリックして表示したタブあるいはウインドウを表示します。もし、閉じていたら「http://localhost:9080」で開いたページに戻り、「page05.htmlを編集する」をクリックします。ページファイルのコードを以下のように変更します。新たにIMGタグが追加されましたが、src属性は、前に確認したURLのファイル名の直前までの相対パスになっています。IMGタグ要素のdata-im属性はmemoフィールドの内容をsrc属性につなげるという設定ですが、「#」があるので、すでに入力されている属性値に、memoフィールドの文字列を追加することになります。    &lt;tbody&gt;\n      &lt;tr&gt;\n        &lt;td data-im=\"postalcode@f3\"&gt;&lt;/td&gt;\n        &lt;td&gt;\n          &lt;span data-im=\"postalcode@f7\"&gt;&lt;/span&gt;\n          &lt;span data-im=\"postalcode@f8\"&gt;&lt;/span&gt;\n          &lt;span data-im=\"postalcode@f9\"&gt;&lt;/span&gt;\n          &lt;div data-im=\"postalcode@memo@innerHTML\"&gt;&lt;/div&gt;\n        &lt;/td&gt;\n        &lt;td&gt;\n          &lt;input type=\"text\" data-im=\"postalcode@memo\"/&gt;\n        &lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/tbody&gt;2「page05.htmlを表示する」をクリックして表示したタブあるいはウインドウを表示します。そして、ページ内容の更新を行ってください。もし、閉じていたら「http://localhost:9080」で開いたページに戻り、「page05.htmlを表示する」をクリックします。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）3Memoの列に、HTMLの文字列を適当に入力してみます。例えば、Bタグで囲った文字列は太字になります。HRタグで水平線が引けます。3行目には箇条書きのタグとして「&lt;ul&gt;&lt;li&gt;a&lt;/li&gt;&lt;li&gt;b&lt;/li&gt;&lt;/ul&gt;」と入力しています。演習のまとめdata-im属性に指定するターゲット指定では、コンテキスト名およびフィールド名だけでなく、@で区切った3つ目の「ターゲット」を指定することができます。ターゲットには、「style.スタイル名」で、スタイル要素を指定することができます。つまり、フィールドの値を、スタイルの値として設定することができます。ターゲットには属性名を指定することができ、フィールドの値を属性の値に設定することができます。ターゲット指定の最初に#を付与すれば、現状の値にフィールドの値を追加します。ターゲットにinnerHTMLを利用すると、フィールドに含めたHTMLの文字列を、HTMLとしてレンダリングした結果を、指定したタグ要素の子要素として追加します。→innerHTMLを使う場合のセキュリティ　→innerHTMLを使用することでHTMLで文字列などを記録できて便利と思うかもしれませんが、セキュリティ的な面での考慮が必要です。もし、フィールドのデータにSCRIPTタグが入っていたとしたら、そのページ内のさまざまな要素にJavaScriptでのプログラムから参照でき、第三者のサーバーに送信するということも可能です。自分ではそういうプログラムを作らないと思っていても、状況によってはそうしたことが可能になります。　例えば、誰でも書き込めるBBSにおいて、HTMLでのメッセージを許可したとします。悪意のある利用者が、何の変哲もないメッセージに見せかけて、メッセージの中にスクリプトを仕掛けたとします。そのスクリプトは、メッセージを読んだ別の人のブラウザーでも実行されます。スクリプトは、例えばクッキーをすべてどこかのサーバーに送るようなものかもしれません。もちろん、今時の通販サイトでは他のドメインからのクッキー利用ができないようにしているのが普通ですが、そうではないようなサイトもあるかもしれません。そうなると、「BBSに任意のスクリプトを書き込めるようにしている」ということから、メッセージを読んだ人のブラウザーに残っているどこかのサイトのパスワードやあるいはクレジットカード情報を取り出して集める可能性がゼロではなくなります。これを、→XSS（→クロスサイトスクリプティング攻撃）と呼びます。　したがって、innerHTMLを使用すると、XSSの可能性が発生します。しかしながら、フィールドにデータを書き込み可能なユーザーを限定し、そのユーザーが悪意がないと仮定すれば、問題は発生しません。例えば、Webサイトのコンテンツを管理する→CMS（Contents Management System）のような用途だと、サイトを運営している限定されたメンバーだけが書き込み権限があり、不特定多数のユーザーが書き込みはできません。サイト運営者は善意がありかつサイト自体に問題が発生させることを起こさないという仮定があれば、脅威にならないと言えます。　もし、HTMLの書き込みを許可しつつ、ユーザーがすべて善意で行動することを保証できない場合には、フィールドの内容から、SCRIPTタグを抜き取るという手法も考えられます。しかし、JavaScriptの多岐に渡る有用性をすべて封じて「スクリプトを取り除」いてしまうと、せっかくの使い勝手が損なわれてしまいます。　例えば、マウスポインタが入ったイベントをトリガーにスクリプトを動かす必要性もあり、JavaScriptを完全に取り除くのが良いのかどうかは疑問です。別の考え方としては、SPAN/DIV/Pなど、安全なタグと属性を残すようなフィルタをかけるという手段があります。　なお、「安全を確保するためのフィルタ」は、『4-6　データコンバータークラスを使ったフィールド単位の変換』で説明するデータコンバーターで実現できます。データコンバーターを利用すれば、クライアント側の操作でセキュリティバリアの回避はできません。しかしながら、INTER-MediatorはVer.5.1現在、そのコンバーターについては用意はしていません。セキュリティの要件はサイトごとに異なり、標準的なコンバーターを用意する必要性は薄いと考えます。→長いターゲット指定を短いキーワードで記述　ターゲット指定は長くなりがちです。特にFileMakerでポータルの中にある別のTOを参照するような要素はかなり長い記述になります。そこで、ターゲット指定のエイリアス名の定義を、定義ファイル内でできるようにしてあります。IM_Entry関数の第二引数の連想配列において、aliasesキーで指定した配列でエイリアスを指定できます。リスト4-1-3がその指定例です。→aliasesキーの配列は、キーがエイリアス名、値がターゲット指定となるような連想配列の配列です。複数のエイリアスを指定してもかまいません。リスト4-1-3　aliasesの指定例IM_Entry(\n    array( ...... /* コンテキスト指定 */ ....... ),\n    array(\n         \"aliases\" =&gt; array(\n             array( \"bkcolor\" \n             =&gt; \"Patient@病棟マスター_表示用::背景色@style.backgroundColor\" ))\n    ),\n    array( ...... /* データベース接続指定 */ ....... ),\n    false\n);　このような定義があると、data-im属性に「bkcolor」とだけ指定すれば、「Patient@病棟マスター_表示用::背景色@style.backgroundColor」と指定したのと同じことになります。→このセクションのまとめ　ターゲット指定には、コンテキスト名とフィールド名だけでなく、3つ目の要素を指定できます。これにより、タグ要素の属性やスタイルシート属性、あるいはinnerHTMLプロパティに、フィールドの値を設定できます。また、#によって既存の値に追加したり、$によって既存の値の中にある$と置き換えるということもできます。→4-2ページを合成するときのルールテーブルの1行分がレコードの数に応じて複製される…という最も分かりやすいモデルでこれまで見てきました。しかしながら、これだけではさまざまなアプリケーションの開発には制約があります。この考え方を一般的にしたものがエンクロージャーとリピーターというモデルです。まず、このモデルについて説明をします。→→→エンクロージャーとリピーターの識別　本コースのこれまでのところで、説明してきたことですが、ここで一般的な動作として改めて動きを紹介します。　まず、データベースとユーザーインターフェースとの連携は、一般には「バインド」と呼ばれます。データベースの内容と、ユーザーインターフェースとして表示したオブジェクトとの間で連携が取れる、つまり、フィールドのデータを表示し、場合によってはユーザーインターフェース側で見ているデータを修正すると、それがきっかけとなってデータベースの更新が行われる状況を「バインド」と呼びます。INTER-Mediatorは、リンクノード（data-im属性によるターゲット指定が設定されたタグ要素）によって、バインドの仕組みが利用できます。　INTER-Mediatorは、ページファイルを探索して、リンクノードがあるかどうかを探します。リンクノードがひとつでも見つかると、自分より上位のノード、つまり、自分を含んでいるタグ要素を上層に向かって探索し、「リピーター」であるノードを探します。表4-2-1には自動的にリピーターと識別しうるタグ要素についてまとめておきました。また、表4-2-2に記載したように、TRやLI、OPTIONタグでなくても、→data-im-control属性で値を「repaeter」と指定すれば、DIVやSPANなど別のタグでもリピーターになります。テーブルのTRタグだけでなく、箇条書きのLIやポップアップメニューのLIタグがリピーターになりますし、data-im-control=\"repater\"であるタグ要素は何でもリピーターになることができます。そして、リピーターの1階層上位にあるノードを「エンクロージャー」と識別します。こちらも、表4-2-1にまとめました。あるいは、表4-2-2にあるように、data-im-control=\"enclosure\"と指定したタグ要素もエンクロージャーとなります。原則としてリピーターの親要素がエンクロージャーになりますが、DIVがエンクロージャー、その内部のSPANがリピーターなら、それぞれのタグにdata-im-control要素で「enclosure」ないしは「repater」の値を指定します。ページでの形態エンクロージャーリピーターリンクノードになるうる要素表TBODYTR任意の要素番号リストOLLILIないしはLIの内部の要素箇条書きULLILIないしはLIの内部の要素ポップアップ、リストSELECTOPTION要素OPTION要素そのもの表4-2-1　INTER-Mediatorが属性なしでも識別するエンクロージャーとリピーターdata-im-control属性の値動作→enclosureエンクロージャー→repeaterリピーターnoresultレコードがひとつもない場合のリピーター→ignore_enc_rep指定のあるタグ要素はエクロージャーあるいはリピーターとしては判別しない→headerヘッダー（リピーターを繰り返す前に挿入）→separatorリピーターとリピーターの間に挿入→footerフッター（リピーターを繰り返した後に挿入）表4-2-2　タグ要素のdata-im-control属性に指定可能な値　エンクロージャーが決まると、続いて、そのエンクロージャーに対するリピーターになりうるノードを収集します。例えば、リンクノードが含まれるTRタグがあると、その上位のTBODYがエンクロージャーになりますが、TBODYに含まれるすべてのTRをひとつのリピーターとします。つまり、1レコードが複数のTRで構成される行に分割されていてもかまいませんし、単に装飾のためだけのTR/TDで構成されたHTMLコード群が含まれても、それらもリピーターの一部として識別します。ただし、表4-2-2に示されたdata-im-control属性の値を持つリピーターの場合はこれに限りません。この表にある項目は、本セクションの最後の方の『検索結果がない場合の表示』と『間に割り込む特殊なリピーター』、さらに次のセクションの最後の『エンクロージャーやリピーターであることを無視する』で説明します。しばらくは「エンクロージャー」「リピーター」があって、リピーター内部にあるリンクノードがデータベースのフィールドとバインドするという状況で説明をします。　本コースのこれまでのところでは、TBODY/TRによるエンクロージャー/リピーターの利用を中心としてきました。つまり、TRタグ内にリンクノードがあれば、そのTRタグ要素は、属性などに何も指定しなくても、リピーターであるという識別を行います。INTER-Mediatorは、リピーターであるという識別を行った上で、改めてリピーター内部を探し、リンクノードのリストを作ります。リンクノードはひとつと限りませんが、このひとつのリピーターの中で利用するコンテキストに関しては、「一番多く使われているコンテキスト名」を選択し、そのコンテキストが展開されているリピーターであると識別します。そこで、リンクノードを集めて、一番多く使われているコンテキスト名を採用し、そのひとつのコンテキストを取得して展開します。したがって、使用頻度が2番目以降のコンテキスト名が指定されているリンクノードは、バインド動作は行わず、INTER-Mediatorは原則として無視します。　テーブル以外にも、エンクロージャー/リピーターに関して、いくつかの組み合わせをサポートします。特に、SELECT/OPTIONタグ要素によるポップアップメニューはよく利用されます。このとき、SELECTタグ要素はバインド可能なリンクノードであり、同時にエンクロージャーになりえます。つまり、OPTIONタグ要素がバインドしていれば、SELECTタグ要素はエンクロージャー、OPTIONタグ要素はリピーターになり得ます。この、「リピーターの中にエンクロージャーがある」という状況については、『4-3　複数のコンテキストとリレーションシップ』で詳しく説明をします。　箇条書きや番号リストなども、エンクロージャーやリピーターとして識別します。さらに、任意のタグについてdata-im-control属性を記述し値として「enclosure」もしくは「repeater」と指定すれば、それぞれ、エンクロージャーとリピーターになります。DIVとSPANや、ARTICLEとSECTIONなど、いろいろな組み合わせでの構成が可能です。→実際のページ合成　INTER-Mediatorでは、エンクロージャーとリピーターの識別を行い、レコードに応じて、リピーターを複製することで、複数のレコードの表現が可能です。その様子を実際のコードやデータを当てはめながら、解説しましょう。　まず、郵便番号と住所が入力されたテーブル「postalcode」があったとします。それを、同一の「postalcode」というnameキーの値を持つコンテキストで利用可能になっているとします。そのとき、表4-2-3のように、コンテキストpostalcodeからの検索結果が得られているとします。フィールド名は1行目の通りです。pcodeaddress102-0094千代田区紀尾井町121-0813足立区竹の塚161-0035新宿区中井表4-2-3　postalcodeテーブルの内容　ページファイル内の該当するソース部分を図4-2-1に示します。ここでは、data-im属性があるリンクノードが2つ含まれるリピーターのTRタグ要素と、その親要素であるエンクロージャーのTBODYタグ要素が識別されます。リンクノードのターゲット指定では、postalcodeコンテキストのみが記述されているのでpostalcodeコンテキストに対してクエリーが実行されます。クエリー結果は、表4-2-3の通りだとします。図4-2-1　エンクロージャーとリピーターの識別　データベースのデータを表示するために行う最初の作業は、リピーターをいったん取り除いて、保持することです（図4-2-2）。エンクロージャーの子要素は、TBODYの場合TR要素のみなので、結果としてTBODYの中身は空になり、いったん何もない表になります。取り除いたリピーターは、以後、複製の元として使えるように残されています。図4-2-2　リピーターの取り除きと保持　表4-2-3に示すクエリー結果について、1行目のレコードから順番に処理をします。1レコード目が存在するので、図4-2-3に示すように、①まずリピーターの複製を用意し、②複製のリンクノードにレコードのフィールドのデータを挿入し、③レコードを挿入したリピーターをエンクロージャーの子ノードとして追加します。こうして、1レコード分に相当するテーブルの1行が生成されます。図4-2-3　1レコードを合成する作業　同様に、2レコード目が存在します。そこで、図4-2-4のように、リピーターの複製、フィールドの値の挿入、そしてエンクロージャーへの複製したリピーターの追加を行い、2レコード目も合成されました。これで、表には2行分が表示されることになります。図4-2-4　2レコード目の合成　そして、3レコード目を合成した結果が図4-2-5です。ここで、クエリー結果が3レコードなら、処理が終わり、ページファイルの状態から、クエリー結果のデータを合成したテーブルが作られたことになります。図4-2-5　3レコード目の合成　ページ合成時には他にもいくつか準備をする必要があります。例えば、バインドしたものがテキストフィールドなどのユーザーインターフェースに関連するタグ要素であれば、クライアント側でデータを修正したときのイベントを受け取ってデータベースに更新を行うためにさまざまな準備が必要です。バインドを行った時点でのデータや、そのレコードを特定するために、定義ファイルのコンテキストにおいてkeyキーで指定したフィールドに設定されている値などを、INTER-Mediatorの側で用意した変数に記録しています。実際には、バインドした先のノードのタグに関わらず、データベースから取得したデータや、それを挿入した先などのさまざまな情報を、背後で行っています。これらは、JavaScriptのレベルでの利用が可能なものもありますので、『6-3　データベースへの書き込みを直接行う』で説明します。→検索結果がない場合の表示　ここまでの手順では基本的に何か検索される状態を見てきました。ここで、条件を与えてもレコードがまったく得られない場合、つまり検索結果の→レコード数が0の場合の対処を紹介します。リピーター要素がテーブルであった場合、これまでの動作だと、レコード数が0であったときには、中身の何もないテーブルが作られてしまいます。しかしこうした場合は、「レコードがありません」などの表示をするのが一般的でしょう。そのときには、リピーターの中にあるdata-im-control属性が「→noresult」のものを用意します。テーブルの場合は、「&lt;tr data-im-control=\"noresult\"&gt;&lt;td&gt;.....&lt;/td&gt;&lt;/tr&gt;」といったリピーターを用意します。data-im-control属性が「noresult」の場合、通常のレコードに合成するときには、そのタグ要素は削除されます。そして、レコードが0のときには、data-im-control属性が「noresult」のものだけをエンクロージャーの子ノードとして追加します。リスト4-2-1はページファイルの作成例です。リスト4-2-1　検索結果がないときのノードを追加した例&lt;table&gt;\n    &lt;thead&gt;\n    &lt;tr&gt;&lt;th&gt;郵便番号&lt;/th&gt;&lt;th&gt;住所&lt;/th&gt;&lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n    &lt;tr data-im-conrtrol=\"noresult\"&gt;\n        &lt;td colspan=\"2\"&gt;検索条件に合致するレコードはありません&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td data-im=\"postalcode@pcode\"&gt;&lt;/td&gt;\n        &lt;td data-im=\"postalcode@address\"&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;→間に割り込む特殊なリピーター　TBODYタグをエンクロージャーとした場合、data-im-control属性のないTRタグはすべてリピーターになります。しかしながら、data-im-control属性がそれぞれ「header」「separator」「footer」のTRタグ要素を用意すると、文字通りヘッダーは最初、フッターは最後、セパレーターは途中に配置されます。例えば、レコードが3つあれば、次のように展開されます。リスト4-2-2　ヘッダー、フッター、セパレーターを挿入した結果&lt;tbody&gt;\n    &lt;tr data-im-control=\"header\"&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;/tr&gt;\n    &lt;tr data-im-control=\"separator\"&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;/tr&gt;\n    &lt;tr data-im-control=\"separator\"&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;/tr&gt;\n    &lt;tr data-im-control=\"footer\"&gt;&lt;/tr&gt;\n&lt;/tbody&gt;　この仕組みは、元はあるフィールドに対して3つのレコードで「A」「B」「C」という値が設定されている時「A, B, C」のように表示したいためにseparator値の動作として実装しましたが、ヘッダーとフッターも同時に実装しました。なお、TBODYの直下のタグ要素はTR要素のみですが、DIVやSPANで展開したときには、data-im-controlがrepeaterのものはリピーターとして、その属性の値がない場合があります。その場合、data-im-control属性のない要素は合成前に取り残されることになり、事実上、ヘッダーと同じ位置に配置されることになります。headerの値が設定されたタグ要素があれば、何も設定されていないタグ要素はheaderのタグより前に来ます。→このセクションのまとめ　INTER-Mediatorは、エンクロージャー/リピーターというタグ要素を識別することで、自動的にレコードの数だけ行が確保されるなどの動作を行います。このセクションでは、どんなタグ要素がエンクロージャー/リピーターになることができ、実際にレコードに応じてタグ要素が増殖される動作を説明しました。また、レコードがないときの特別な表示の方法についても説明しました。→4-3複数のコンテキストとリレーションシップ　データベースを利用する場合、リレーションシップがあることで、さまざまな用途に展開できることは長年の実績で証明されています。INTER-Mediatorではリレーションシップの展開をクライアントで行い、ページ上で関連レコードをその都度サーバーから取得して合成するという手法をとっています。そのベースになる仕組みは、リピーターの中にエンクロージャーがあると、そこで異なるコンテキストの展開を始めることができる点です。その際に、リレーションシップを考慮したり、あるいはしなかったりといった動作を選択できます。→→→階層的に定義可能なエンクロージャー/リピーター　INTER-Mediatorは、エンクロージャーとリピーターによる合成を、階層的に展開できます。リピーターの中にエンクロージャーが含まれている場合、リピーター合成後に、そのエンクロージャー内の合成処理に進み、階層的にいくらでも深くデータベースの取得と展開ができます。一番典型的な例は、テーブルでのTRタグの中に、TABLEタグで定義したテーブルが含まれている場合で、それぞれのTRタグ以下にそれぞれリンクノードが存在するような形になります。　ただし、階層化をやりすぎるとパフォーマンスの低下が懸念されます。単純化した説明をすれば、INTER-Mediatorは、エンクロージャーの数だけデータベース接続を行ってクエリーを行います。エンクロージャーの数は、ページファイルに存在する数よりも、一般には多くなります。リピーターにエンクロージャーが含まれていれば、リピーターが複製された数だけエンクロージャーは増えます。したがって、リピーターの中にエンクロージャーがあるような場合、上位のリピーターに20個のレコードがあれば、内部のエンクロージャー向けのデータベース接続が20回行われます。その、内部のエンクロージャー向けのデータベース処理が重い、つまりアクセスに時間がかかったり、結果の数が多いといった場合には、パフォーマンスの低下が懸念されるものと思われます。その20回のアクセスが、毎回決まり切ったマスターからの取り出しであるなら、一般にはデータベースのクエリーはキャッシュが効きますので、ある程度速度低下が抑えられます。INTER-Mediator自体のキャッシュも制限が多いものの機能しますので、これを有効に使うことを考慮すべきです。場面に応じた、さまざまな手法でのパフォーマンス向上を図る必要があります。特に、FileMakerの場合、サーバーの応答時間がMySQLなどに比べて桁違いに遅いので、多数・大量のデータベース処理をいかに最適化するかが設計のポイントにもなります。FileMakerの場合は、このセクションの最後の方で、その対処法を説明しましょう。→→リレーションを伴うページの合成　あるリピーター（上位のリピーター）にエンクロージャー（下位のエンクロージャー）があり、異なるコンテキストに対するクエリーが定義ファイルで定義されていたとします。上位のリピーターに対応するひとつのレコードの合成が終わってエンクロージャーに追加された後、含まれる下位のエンクロージャーに関する合成処理が始まります。　このとき、上位、および下位のエンクロージャーに対応するクエリー処理は、それぞれのコンテキストに定義された検索条件等に従い、基本的に独立して行われます。常に一定の選択肢をマスターテーブルから取り出すようなポップアップメニューではそうした利用方法がよく行われます。この場合、ポップアップメニューで「どれを選択しているのか」を示す数値が上位のエンクロージャー内にあるいずれかのフィールドで、下位のエンクロージャーとリピーターはSELECTおよびOPTIONタグに相当します。このとき、上位／下位のエンクロージャーは独立したデータベース処理を行えば問題ないはずです。つまり、下位のエンクロージャーのためのデータベース処理は、「常に同じもの」を必要としているからです。　一方、下位のエンクロージャーに関連したページ合成を行うときに、リレーションシップを考慮することができます。そのためには、下位のエンクロージャーで使用されるコンテキスト定義において、→「relation」キーによる値が定義ファイル上で定義されている必要があります。「realation」キーがなければ、独立したデータベースアクセスを行いますが、「relation」キーがあれば上位のリピーターに対応したレコードと関連したデータを取り出して、展開することができます。すなわち、名前通りリレーションシップに基づくデータベースアクセスを行うということです。結果として、1対多のような展開がエンクロージャー/リピーターの階層化とコンテキスト定義への「relation」キーの設定により、クライアントサイドで行われます。　「relation」キーに指定する値は、表4-3-1のようなキーに対する値を持つ連想配列の配列です。SQL的な説明をすれば、「relation」キーのあるコンテキストに対するクエリーにおいて、「AND [foreign-key] [operator] [join-fieldの値]」という検索条件が付加されるということになりますが、この様子は後の演習で実際に値を見ながら改めて確認することにしましょう。キー意味→foreign-key内側のコンテキストでの照合フィールドで、通常は→外部キー→operatorforeign-keyによるフィールド名とjoin-fieldによるフィールドの値を結ぶ演算子→join-field外側のコンテキストでの→照合フィールドで、通常は外部キーに対応するキー。このフィールドの値を実際の展開には使うので、取得したレコードの中にこのフィールドの値が存在する必要がある表4-3-1　コンテキストのrelationキーに指定する配列のキー→演習リレーションを伴うページの作成　エンクロージャー/リピーターの階層化や、リレーションシップを考慮した関連レコードの検索などを、実際の演習で確認していくことにします。ここで使用するデータベースは、INTER-Mediatorのサンプルにも使われているもので、若干複雑です。最初に、データベースの内容を確認した上で、実際の演習に取り掛かることにします。元になるデータベースの確認　演習に利用するデータベースを確認します。表4-3-2にテーブルをまとめました。MySQLはテーブル名そのままを使いますが、FileMakerでは、定義ファイルに指定するのは表の中の「レイアウト名」になるので、使用するデータベースに合わせて必要な情報を得てください。一番基本的なテーブルは、1人の人間を1レコードをとして管理するpersonです。その1人の人に対して、複数のコンタクト記録があるとして、その記録をcontactテーブルに残します。したがって、personの1レコードに対して、contactへの多重度は「0..*」（0個、1個、...多数、となり得るという意味）となります。そして、contactテーブルにはwayとkindという2つの整数フィールドがあり、それぞれのマスターテーブルとなるwayとkindテーブルのid値を設定するのを基本とします。wayは「direct」などの直接のコンタクトか、間接的なものなのかを示します。kindは、「電話」「メール」など、手段を示します。テーブル名TO名レイアウト名テーブルの役割personperson_toperson_layout1人の人間を1レコードをとして管理contactcontact_tocontact_toそれぞれのpersonとのコンタクト記録contact_waycontact_waycontact_wayコンタクト方法の分類contact_kindcontact_kindcontact_kind具体的なコンタクト方法cor_way_kindcor_way_kindcor_way_kindwayとkindの対応付け表4-3-2　利用するテーブルの概要　利用するテーブルのうち、contact_way（表4-3-3）、contact_kind（表4-3-4）、cor_way_kind（表4-3-5）については、INTER-Mediator-Serverでは最初からレコードが設定されており、そのまま利用するので、それらのテーブルに入っているレコードおよびフィールドについて、それぞれの表で見てみましょう。cor_way_kindテーブルは、wayとkindの関係が多対多になるため、それらを1対多の関係に分解するための中間的な対応付けのためのテーブルです。contact_wayテーブルの「Direct」つまり直接的なコンタクトは、idフィールドの値が「4」です。cor_way_kindテーブルで、way_idフィールドが「4」のレコードは3つあり、それぞれのkind_idフィールドの値は「4」「5」「7」となっています。そして、contact_kindテーブルのidフィールドが「4」「5」「7」のレコードは、「Talk」「Meet」「Meeting」です。つまり、Directな（直接的な）コンタクトとしては、Talk（会って話した）、Meet（ばったり会った）、Meeting（会議で会った）の3つのレコードに関連しているということです。この演習ので、「wayの選択肢に応じてkindの選択肢が設定される」というデーマで、この多対多の関連付けのためのテーブルcor_way_kindを利用します。idname4Direct5Indirect6Others表4-3-3　contact_wayテーブルidname4Talk5Meet6Calling7Meeting8Mail9Email10See on Web11See on Chat12Twitter13Conference表4-3-4　contact_kindテーブルidway_idkind_id1442453564475586597610851196121051211613表4-3-5　cor_way_kindテーブル　テーブル間の連携、つまり外部キーがどのフィールドと結合するのかを示したのが図4-3-1です。FileMakerにはそれぞれのテーブル間の関連を図式する機能（リレーションシップ）があります。図はその様子を示したものですが、MySQLでも同様な関連になっていると考えてください。ボックスにはTO名（テーブル名）と、フィールドのいずれも見えるようにしてあります。MySQLの場合はテーブルを示すひとつのボックスの名前は単にテーブルと考えてもらってかまいません。図4-3-1　FileMakerでのデータベースのリレーションシップ　実際のデータについても、FileMakerで確認します。レイアウトにperson_to、ポータルにcontact_toが表示されています。MySQLでも同様にpersonテーブルに対して、その各レコードに対してcontactテーブルが選択されて表示されると考えてください。下側の繰り返し表示されている部分（ポータル）がcontactテーブルで、person_idフィールドが外部キーとなっていて、上側のpersonテーブルのidフィールドの値と対応付けられています。図4-3-2　personテーブルとcontactテーブルの例personテーブルを1レコードずつ表示する1演習環境を起動します（『1-2　演習を行うための準備』を参照）。続いて、ブラウザーで、「http://localhost:9080」に接続します。「トライアル用のページファイルと定義ファイル」というタイトルの部分を特定します。2「def07.phpを編集する」をクリックし、定義ファイルエディターでdef07.phpファイルを編集します。（もし、他の用途で7番目を利用しているのなら、例えば、def11.phpを利用するなど、別の番号のセットを使用してください。その場合ソースコードの記述が変わる部分がありますが、可能な限り注記します。）3Contextsの中のQueryと書かれた背景がグレーの部分を特定します。そして、その次の行の右の方にある「削除」をクリックして、Queryの設定がある行を削除します。4「レコードを本当に削除していいですか？」とたずねられるので、OKボタンをクリックします。5同様に、Sortingの次の行にある「削除」ボタンを押し、確認にOKボタンをクリックして、こちらの設定も削除しておきます。6nameに「person」、keyを「id」、pagingを「true」、repeat-controlを「confirm-delete confirm-insert」、recordsとmaxrecordsを「1」とします。Contextsのその他のテキストフィールドは空白にします。[MySQL]tableおよびviewには「person」を指定します。[FileMaker]tableおよびviewには「person_layout」を指定します。7Database Settingsに設定を行います。[MySQL]の場合db-classは「PDO」のままでかまいません。dsnに「mysql:host=db;dbname=test_db;charset=utf8mb4」と入力します。そして、userに「web」、passwordに「password」と入力します。[FileMaker]の場合db-classを「FileMaker_DataAPI」に書き換えます。databaseは「TestDB」、userに「web」、passwordに「password」、serverに「gateway.docker.internal」、portに「443」、protocolに「https」、cert-vefifyingに「false」と入力します。8Debugについては、「false」にすると、デバッグ情報が出なくなります。なお、デバッグ情報をみながら動作を確認したい方は、「2」のままにしてこの後の作業を行ってください。9「http://localhost:9080」で開いたページに戻り「page07.htmlを編集する」をクリックし、ページファイルのpage07.htmlを編集するページファイルエディターが開きます。HTMLでの記述内容を以下のように変更します。太字が追加する箇所を示します。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;script type=\"text/javascript\" src=\"def07.php\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n  &lt;table&gt;\n    &lt;tbody&gt;\n      &lt;tr&gt;\n        &lt;th&gt;id&lt;/th&gt;\n        &lt;td&gt;&lt;input type=\"text\" data-im=\"person@id\"/&gt;&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;th&gt;name&lt;/th&gt;\n        &lt;td&gt;&lt;input type=\"text\" data-im=\"person@name\"/&gt;&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/tbody&gt;\n  &lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;10「http://localhost:9080」で開いたページに戻り、「page07.htmlを表示する」をクリックして表示したタブあるいはウインドウを表示します。personテーブルの内容が、1レコードずつ参照できます。ここまでは、すでに説明した通りです。contactテーブルの関連レコードを表示する1「def07.phpを編集する」をクリックして表示したタブあるいはウインドウを表示します。もし、閉じていたら「http://localhost:9080」で開いたページに戻り、「def07.phpを編集する」をクリックします。2Contextsのすぐ下にある「追加」ボタンをクリックして、コンテキスト定義をひとつ増やします。3nameに「contact」、keyを「id」、repeat-controlを「confirm-delete confirm-insert」とします。Contextsのその他のテキストフィールドは空白にします。[MySQL]tableおよびviewには「contact」を指定します。[FileMaker]tableおよびviewには「contact_to」を指定します。4contactコンテキストの中のRelationshipのすぐ下にある「追加」ボタンをクリックして、設定のための行を追加します。foreign-keyに「person_id」、join-fieldに「id」、operatorに「=」を指定します。5「page07.htmlを編集する」をクリックして表示したタブあるいはウインドウを表示します。もし、閉じていたら「http://localhost:9080」で開いたページに戻り、「page07.htmlを編集する」をクリックします。太字で示した部分を追加します。テーブルの中にテーブルがある点に注意してください。外側のテーブルはpersonコンテキスト、内側のテーブルはcontactコンテキストで得られたデータを展開したものです。&lt;body&gt;\n  &lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n  &lt;table&gt;\n    &lt;tbody&gt;\n      &lt;tr&gt;\n        &lt;th&gt;id&lt;/th&gt;\n        &lt;td&gt;&lt;input type=\"text\" data-im=\"person@id\"/&gt;&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;th&gt;name&lt;/th&gt;\n        &lt;td&gt;&lt;input type=\"text\" data-im=\"person@name\"/&gt;&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;td colspan=\"2\"&gt;\n          &lt;table&gt;\n            &lt;thead&gt;\n              &lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;person_id&lt;/th&gt;&lt;th&gt;summary&lt;/th&gt;\n                &lt;th&gt;datetime&lt;/th&gt;&lt;th&gt;way&lt;/th&gt;&lt;th&gt;kind&lt;/th&gt;&lt;/tr&gt;\n            &lt;/thead&gt;\n            &lt;tbody&gt;\n              &lt;tr&gt;\n                &lt;td&gt;&lt;input type=\"text\" data-im=\"contact@id\" size=\"3\"/&gt;&lt;/td&gt;\n                &lt;td&gt;&lt;input type=\"text\" data-im=\"contact@person_id\" size=\"3\"/&gt;&lt;/td&gt;\n                &lt;td&gt;&lt;input type=\"text\" data-im=\"contact@summary\"/&gt;&lt;/td&gt;\n                &lt;td&gt;&lt;input type=\"text\" data-im=\"contact@datetime\"/&gt;&lt;/td&gt;\n                &lt;td&gt;&lt;input type=\"text\" data-im=\"contact@way\" size=\"3\"/&gt;&lt;/td&gt;\n                &lt;td&gt;&lt;input type=\"text\" data-im=\"contact@kind\" size=\"3\"/&gt;&lt;/td&gt;\n              &lt;/tr&gt;\n            &lt;/tbody&gt;\n          &lt;/table&gt;\n        &lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/tbody&gt;\n  &lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;6「page07.htmlを表示する」をクリックして表示したタブあるいはウインドウを表示します。必要に応じて、ブラウザーの更新ボタンを押してください。開いていない場合には、「http://localhost:9080」で開いたページに戻り、「page07.htmlを表示する」をクリックします。7ページネーションのコントローラーを利用して、次のレコードなどに移動してください。外側のテーブルのコンテキストのidフィールドの値と、内側のテーブルのコンテキストのperson_idフィールドの値が同一であることを確認してください。ここでは、外側のpersonコンテキストに対応付けられたエンクロージャー/リピーターに対して、その内部にcontactコンテキストに結び付けられたエンクロージャー/リピーターが存在します。内部のcontactコンテキストに関連付けられた側では、定義ファイルにrelationキーによる値が設定されていて、その設定を元にして、データベースアクセス時に、「関連するレコードのみを取り出す」という検索条件が加わることになります。具体的には、外側のpersonコンテキストのidフィルールドの値が「2」なら、内側のcontactコンテキストのクエリーを行うときにperson_idが「2」のものに絞り込みます。この、id、person_id、そして条件として=演算子で求めているという動作は、contactコンテキストのrelationキーに指定した値に基づいています。このような、伝票形式のリレーションシップを、ページ上で展開できます。このとき、personに対応したcontactテーブルのレコードがない場合でも、先にpersonのレコードを展開するので、そのようなpersonテーブルのレコードも、ページ上に表示されます。SQLのテーブル結合の形式でいえば、これはLEFT JOINに相当する動作であり、INNER JOINの動作ではありません。マスターの内容をそのまま表示するポップアップメニュー1「def07.phpを編集する」をクリックして表示したタブあるいはウインドウを表示します。もし、閉じていたら「http://localhost:9080」で開いたページに戻り、「def07.phpを編集する」をクリックします。2Contextsのすぐ下にある「追加」ボタンをクリックして、コンテキスト定義をひとつ増やします。3nameに「contact_way」を設定し、そのコンテキストのその他のテキストフィールドは空白にします。このコンテキストは、contact_wayテーブルの選択肢を常にそのまま表示していずれも選択できるようにします。選択肢をすべて取り出すためにコンテキストを定義します。このコンテキストには、relationキーの値を指定しない点に注意してください。4「page07.htmlを編集する」をクリックして表示したタブあるいはウインドウを表示します。もし、閉じていたら「http://localhost:9080」で開いたページに戻り、「page07.htmlを編集する」をクリックします。太字で示した部分を変更・追加します。contactコンテキストの中で、wayフィールドの値をSELECTタグによるポップアップメニューで選択できるようにします。&lt;td colspan=\"2\"&gt;\n  &lt;table&gt;\n    &lt;thead&gt;\n      &lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;person_id&lt;/th&gt;&lt;th&gt;summary&lt;/th&gt;\n        &lt;th&gt;datetime&lt;/th&gt;&lt;th&gt;way&lt;/th&gt;&lt;th&gt;kind&lt;/th&gt;&lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n      &lt;tr&gt;\n        &lt;td&gt;&lt;input type=\"text\" data-im=\"contact@id\" size=\"3\"/&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;input type=\"text\" data-im=\"contact@person_id\" size=\"3\"/&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;input type=\"text\" data-im=\"contact@summary\"/&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;input type=\"text\" data-im=\"contact@datetime\"/&gt;&lt;/td&gt;\n        &lt;td&gt;\n          &lt;select data-im=\"contact@way\"&gt;\n            &lt;option data-im=\"contact_way@id@value contact_way@name\"/&gt;\n          &lt;/select&gt;\n        &lt;/td&gt;\n        &lt;td&gt;&lt;input type=\"text\" data-im=\"contact@kind\" size=\"3\"/&gt;&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/tbody&gt;\n  &lt;/table&gt;\n&lt;/td&gt;5「page07.htmlを表示する」をクリックして表示したタブあるいはウインドウを表示します。必要に応じて、ブラウザーの更新ボタンを押してください。開いていない場合には、「http://localhost:9080」で開いたページに戻り、「page07.htmlを表示する」をクリックします。wayの列は、ポップアップメニューで表示されています。contactのコンテキストが複数行あるレコードを表示して、各行のwayのポップアップメニューの選択肢をみてください。いずれも同じです。つまり、このような場合のポップアップメニューの選択肢は、どのレコードでも同じなので、上位のコンテキストの関係は記述する必要はなく、relationキーの値を定義ファイルのコンテキストに追加する必要もありません。6ポップアップメニューで選択を変更し、前後のレコードに移動して戻るなどして、以前に選択した通りのものになっていることを確認してください。INTER-MediatorはSELECTタグがあれば、そのターゲット指定にあるフィールドの値に応じた選択肢を自動的に選択するようになっています。また、ポップアップメニューを選択すると、その選択項目に応じたデータが、対応するフィールドに書き込まれます。他のフィールド値に依存した選択肢を出す→ポップアップメニュー　この単元についてはSQLデータベースに関する十分な知識が必要な、上級的な話題になります。　これまでに作ってきたページで、wayの選択肢に応じてkindのポップアップメニューの選択肢を差し替えるということを行います。そのための情報がcor_way_kindテーブルに入っています。したがって、cor_way_kindテーブルのレコードをポップアップメニューの選択肢に展開することが考えられます。しかしながら、cor_way_kindテーブルにはkindテーブルのnameフィールドの情報がないので、そのままでは選択肢に必要な名称（つまり、「Meeting」「Mail」など）が表示できません。ではさらにリレーションシップを設定すればよいではないか、と言いたいところですが、OPTIONタグの中にはタグは記述できず、テキストしか記述できません。　そこで、リスト4-3-1のようなビュー「cor_way_kindname」を定義します。ビューは、ひとつあるいは複数のテーブルから導出した表形式の結果を出力するものです。データ自体は保持せず、原則として、テーブルのデータを使って新たなリレーション（表形式のデータ）を出力します。集計などの複雑な処理ではよく利用されますが、ここでは、cor_way_kindテーブルとそれに関連したcontact_kindテーブルを結合した結果をビューで得ています。言い換えれば、cor_way_kindテーブルに、「名称」を付加したものです。リスト4-3-1に定義を示します。このビュー「cor_way_kindname」で得られる結果は、表4-3-6に示します。リスト4-3-1　cor_way_kindnameの定義内容CREATE VIEW cor_way_kindname AS \n\tSELECT cor_way_kind.*,contact_kind.name as name_kind\n\t\tFROM cor_way_kind, contact_kind\n\t\tWHERE cor_way_kind.kind_id = contact_kind.id;idway_idkind_idname_kind144Talk245Meet356Calling447Meeting558Mail659Email7610See on Web8511See on Chat9612Twitter10512Twitter11613Conference表4-3-6　cor_way_kindnameビューの出力　なお、FileMakerについては、TestDBデータベース内のcor_way_kindレイアウトにcontact_kindテーブルのnameフィールドを配置しているので、別途レイアウトを作る必要はありません（図4-3-2）。FileMakerはレイアウトはテーブルを表示するだけでなく、SQL的な視点からはビューとしてみることもできます。ただし、データベースの管理の「リレーションシップ」のタブで、TOを定義してそれらの関連性を定義しておく必要があります。図4-3-3　FileMakerのcor_way_kindレイアウト　cor_way_kindに関して、以上のような設定がすでにデータベース側に準備されています。以下、wayの選択結果に応じたkindの選択肢が出てくるように、ページを変更します。1「def07.phpを編集する」をクリックして表示したタブあるいはウインドウを表示します。もし、閉じていたら「http://localhost:9080」で開いたページに戻り、「def07.phpを編集する」をクリックします。2Contextsのすぐ下にある「追加」ボタンをクリックして、コンテキスト定義をひとつ増やします。3nameに「cor_way_kind」を設定します。[MySQL]viewに「cor_way_kindname」を指定します。その他のテキストフィールドは空白にします。[FileMaker]コンテキストのその他のテキストフィールドは空白にします。4cor_way_kindコンテキスト内のRelationshipのすぐ下にある「追加」ボタンをクリックして、設定のための行を追加します。foreign-keyに「way_id」、join-fieldに「way」、operatorに「=」を指定します。5「page07.htmlを編集する」をクリックして表示したタブあるいはウインドウを表示します。もし、閉じていたら「http://localhost:9080」で開いたページに戻り、「page07.htmlを編集する」をクリックします。太字で示した部分を変更・追加します。contactコンテキストの中で、kindフィールドの値をSELECTタグによるポップアップメニューで選択できるようにします。&lt;tr&gt;\n  &lt;td&gt;&lt;input type=\"text\" data-im=\"contact@id\" size=\"3\"/&gt;&lt;/td&gt;\n  &lt;td&gt;&lt;input type=\"text\" data-im=\"contact@person_id\" size=\"3\"/&gt;&lt;/td&gt;\n  &lt;td&gt;&lt;input type=\"text\" data-im=\"contact@summary\"/&gt;&lt;/td&gt;\n  &lt;td&gt;&lt;input type=\"text\" data-im=\"contact@datetime\"/&gt;&lt;/td&gt;\n  &lt;td&gt;\n    &lt;select data-im=\"contact@way\"&gt;\n      &lt;option data-im=\"contact_way@id@value contact_way@name\"/&gt;\n    &lt;/select&gt;\n  &lt;/td&gt;\n  &lt;td&gt;\n    &lt;select data-im=\"contact@kind\"&gt;\n      &lt;option data-im=\"cor_way_kind@kind_id@value\n                       cor_way_kind@name_kind\"/&gt;\n    &lt;/select&gt;\n  &lt;/td&gt;\n&lt;/tr&gt;FileMakerの場合には、修正は以下のように行ってください。    &lt;select data-im=\"contact@kind\"&gt;\n      &lt;option data-im=\"cor_way_kind@kind_id@value\n                       cor_way_kind@contact_kind::name\"/&gt;\n    &lt;/select&gt;6「page07.htmlを表示する」をクリックして表示したタブあるいはウインドウを表示します。必要に応じて、ブラウザーの更新ボタンを押してください。開いていない場合には、「http://localhost:9080」で開いたページに戻り、「page07.htmlを表示する」をクリックします。kindの列は、ポップアップメニューで表示されています。wayで「Direct」を選択すると、kindの選択肢は「Talk」「Meet」「Meeting」になります。wayで「Indirect」を選択すると、「kind」の選択肢は「Calling」「Mail」「Email」「See on Chat」「Twitter」となります。つまり、wayの選択肢に応じて、kindの選択肢が変化するといった仕組みが実装されました。レコードの追加とリレーションシップ1「page07.htmlを表示する」をクリックして表示したタブあるいはウインドウを表示します。適当なレコードで作業をしてください。以下の図はidフィールドが「3」のレコードが見えています。異なるレコードが見えている状態でもかまいません。2ここで、内側のテーブルの下側にある「追加」ボタンをクリックします。このボタンにより、contactコンテキストに新しいレコードが作成できます。3ボタンを押した後に作成していいかどうかの確認がありますので、OKボタンをクリックしてください。4この場合だと、もともと2行だったcontactコンテキストのテーブルに、新たに3行目のレコードができたことを確認してください。ここで、新たに作成されたcontactコンテキストのレコード（図ではidフィールドの値が「8」のレコード）の、person_idの値を見てください。なにもしなくても、外側のpersonコンテキストのidフィールドの値が追加されています。このように、relationキーの値を定義して、自身のperson_idと相手のテーブルのidフィールドによって関係性を持つことが定義されていると、新しいレコードを作成するときに、関連するフィールドに適切な値を設定するということを行います。つまり、外部キーに相当するフィールドに、関連付けのための値を設定するということです。FileMakerやMicrosoft Accessでは、リレーションシップで関連付けられているポータルあるいはサブフィールドに新しいレコードを作成すると、関連付けの手がかりとなるフィールドに自動的に値が設定されます。その動作を踏襲したものです。レコードの複製とリレーションシップ　レコードの複製は、『3-3　レコードの追加・削除・複製』で説明しました。レコードの複製は、Ver.5.2現在、MySQLのみで利用できます。その他のデータベースエンジンの場合は、対応するまでしばらくお待ち下さい。1「def07.phpを編集する」をクリックして表示したタブあるいはウインドウを表示します。もし、閉じていたら「http://localhost:9080」で開いたページに戻り、「def07.phpを編集する」をクリックします。2personコンテキストのrepeat-controlに「copy-contact」というキーワードを追加します。スペースを前に入れて区切ります。3contactコンテキストのrepeat-controlに「copy」というキーワードを追加します。スペースを前に入れて区切ります。4「page07.htmlを表示する」をクリックして表示したタブあるいはウインドウを表示します。適当なレコードで作業をしてください。以下の図はidフィールドが「1」のレコードが見えていて、全部で6レコードあります。異なるレコードが見えている状態でもかまいません。5「レコード複製：person」ボタンをクリックすると、画面上に大きな変化はありませんが、idフィールドがそれまでのレコード数よりもひとつ多いレコードが新たに作成されました。つまり、idフィールドが「1」のpersonコンテキストにあるレコードと、さらにそのレコードに関連したcontactコンテキストの3つのレコードが複製され、関連付けられたcontactコンテキストのperson_idの値は、personコンテキストのidフィールドの値である「7」（この例の場合）が設定されています。6さらに、contactコンテキストの2行目の「複製」ボタンをクリックしました。その行と同じ内容レコード（ただし、idフィールドのみ自動的に設定されるので、変化している）が作成されています。演習のまとめリピーターの内部にエンクロージャーが存在すれば、リピーターにクエリー結果のデータを差し込んだ後、内側のエンクロージャー/リピーターに対応したデータベース処理を行い、必要ならばリピーターを繰り返してクエリー結果をさらに展開します。このとき、内側のエンクロージャー/リピーターに関連付けられたコンテキストの定義ファイル上の設定でrelationキーの設定を正しく行えば、関連するレコードに絞り込んでデータベースへのクエリーを行います。伝票形式とも言えるマスター/ディテールの関係を持つようなデータの表示や、あるフィールドに依存した選択肢の切り替えなどが実現されます。つまり、リレーショナル処理を伴ってページを表示することができます。relationキーがなければ、独立したクエリーが実施され、常に同じポップアップメニューの選択肢を表示するようなことも可能です。FileMakerでのポータルポータルを利用した効率化\nこのセクションの残りで、FileMakerを利用する場合の相違点についてまとめておきます。これまでの演習で見ていただいた通り、関連するテーブルの編集・更新は原則としてデータベースの違いに関係なく、コンテキスト間の関連性をrelationキーを用いて表現できることがお分かりいただけたと思います。ただし、このとき、FileMakerでは、コンテキストのもとになるのがレイアウトなので、演習で言えば、contact_toという、ポータルに展開したものや、さらにはポップアップメニューの選択肢を取り出すためのレイアウトまで定義しなければなりませんでした。FileMakerを使用する方にとっては、通常はひとつのレイアウトにポータルを配置して行うような、1レイアウトで済む作業がなぜいくつものレイアウトが必要なのかと思われるところかと思います。これについては、INTER-Mediatorの動作上、どうしてもこのようになるのが原則だと考えてください。\nしかしながら、INTER-Mediatorでは、ポータルの内容を、それを含むレイアウトにアクセスするだけで、同時に取り出すことができます。このため、ここでのperson_layoutレイアウトに存在するポータルに対して行われるcontact_toコンテキストに伴うネットワークアクセスや、あるいはレイアウトの定義は省略することができます。その動作を「ポータルモードポータルモード」と呼んでいます。\nポータルモードで利用するための方法を、以下に記載します。前提条件として、このセクションのここまでの演習をFileMakerを使う状態で最後までやり遂げたとして、そこからの修正点を示します。また、FileMakerのデータベースであるTestDBファイルについては、Ver.5.1以降のものを利用してください。まず、次の図のpersonコンテキストは、原則今までと同様でも稼働しますが、keyキーの値はFileMakerが内部で管理している値で管理する機能を指定する「-recid」という値にします。そして、contactコンテキストは、nameキーの値を「contact_to」、tableとviewの値を「person_layout」、keyの値を「-recid」とします。そして、すでにひとつ存在するRelationshipの行のportalの値を「true」にします。\n\n\n修正したコンテキストpersonとcontact_to\n\n\nポータルモードを使用するためには、ポータルに相当するコンテキストに対して、以下のような設定を行う必要があります。\n\n\n\tnameキーは、ポータルに割り当てたTO名を指定する\n\ttableとviewキーは、ポータルが存在するレイアウト名を指定する\n\tkeyキーは「-recid-recid」を指定する\n\trelationキーのportalの値をtrueにする\n\n\n残り2つのコンテキストについては、cor_way_kindコンテキストに関して、Relationshipのjoin-fieldキーの値を「contact_to::way」に変更します。これは、ポータル内のフィールドの記述方法が変更するためで、記述方法はこの後にページファイルの変更点を示した上で、改めて説明します。\n\n\n修正したコンテキスト\n\n\nページファイルについては、次のリストのように変更します。修正する箇所を太字で示します。\n\n\n修正したページファイル\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;script type=\"text/javascript\" src=\"def08.php\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n  &lt;table&gt;\n    &lt;tbody&gt;\n      &lt;tr&gt;\n        &lt;th&gt;id&lt;/th&gt;\n        &lt;td&gt;&lt;input type=\"text\" data-im=\"person@id\"/&gt;&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;th&gt;name&lt;/th&gt;\n        &lt;td&gt;&lt;input type=\"text\" data-im=\"person@name\"/&gt;&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;td colspan=\"2\"&gt;\n          &lt;table&gt;\n            &lt;thead&gt;\n              &lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;person_id&lt;/th&gt;&lt;th&gt;summary&lt;/th&gt;\n                &lt;th&gt;datetime&lt;/th&gt;&lt;th&gt;way&lt;/th&gt;&lt;th&gt;kind&lt;/th&gt;&lt;/tr&gt;\n            &lt;/thead&gt;\n            &lt;tbody&gt;\n              &lt;tr&gt;\n                &lt;td&gt;&lt;input type=\"text\" data-im=\"contact_to@contact_to::id\" size=\"3\"/&gt;&lt;/td&gt;\n                &lt;td&gt;&lt;input type=\"text\" data-im=\"contact_to@contact_to::person_id\" size=\"3\"/&gt;&lt;/td&gt;\n                &lt;td&gt;&lt;input type=\"text\" data-im=\"contact_to@contact_to::summary\"/&gt;&lt;/td&gt;\n                &lt;td&gt;&lt;input type=\"text\" data-im=\"contact_to@contact_to::datetime\"/&gt;&lt;/td&gt;\n                &lt;td&gt;\n                  &lt;select data-im=\"contact_to@contact_to::way\"&gt;\n                    &lt;option data-im=\"contact_way@id@value contact_way@name\"/&gt;\n                  &lt;/select&gt;\n                &lt;/td&gt;\n                &lt;td&gt;\n                  &lt;select data-im=\"contact_to@contact_to::kind\"&gt;\n                    &lt;option data-im=\"cor_way_kind@kind_id@value\n                                     cor_way_kind@contact_kind::name\"/&gt;\n                  &lt;/select&gt;\n                &lt;/td&gt;\n              &lt;/tr&gt;\n            &lt;/tbody&gt;\n          &lt;/table&gt;\n        &lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/tbody&gt;\n  &lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\nポータルモードの場合、ポータルの中のフィールドについては「コンテキスト名@TO名::フィールド名」で記述します。結果的に、ポータルのTOに存在するフィールドの場合、コンテキスト名とTO名は同一になるので、前のリストのSELECTタグのターゲット指定にあるように、「contact_to」が2つ重なったような、「contact_to@contact_to::id」といったターゲット指定をする必要があります。もちろん、ポータルの内部で、さらにポータルに割り当てたTOとは別のTOにあるフィールドがある場合には、@以降はそのTO名が記載されます。\nポータルモードを使用すると、レイアウト上のポータルに展開したレコードの取得のために、別途レイアウトを定義する必要はありませんし、ポータル部分の取得に別のネットワーク処理を行う必要もありません。しかしながら、ここで使用した、ポップアップメニュー部分の処理については、ポータルモードを利用しても、個別のコンテキストの取り出し処理が必要になります。つまり、contact_wayとcor_way_kindコンテキストに対するレイアウトの定義は必要で、ポップアップメニューを構築するたびにネットワークアクセスが必要になります。「これらの情報もいっしょに処理する」ということは、FileMakerの場合、値一覧の情報を扱うという特殊な処理を組み入れる必要があり、Ver.5.2現在はそのような処理は組み込んでいません。\n-->→エンクロージャーやリピーターであることを無視する　TABLEタグの中にテーブルタグがあると、このセクションで説明したように、そのままでは、それぞれ別々のコンテキストとして展開されます。したがって、relationキーの値がコンテキストに設定されていれば、それに従って内側のテーブルには関連するレコードが表示されます。しかしながら、テーブル内のテーブルは、外側と同じコンテキストを表示したいような場合があります。その時は、data-im-control属性に→ignore_enc_repという値を設定します。例えば、リスト4-3-2の場合だと、内側と外側のテーブルは共通のコンテキストpersonのフィールドをリンクノードに対してバインドします。内側のテーブルのTBODYとTRタグ要素にdata-im-control=\"ignore_enc_rep\"が指定されているので、これらのタグ要素はエンクロージャーやリピーターとして判別しません。内側にテーブルが2つありますが、どちらも外側のテーブルの一部として扱われるため、どちらも同一のpersonコンテキストのレコードを展開します。したがって、このリストの部分はpersonコンテキストで定義された内容にしたがって、1回だけデータベースから取り出しを行いそれを元にページ合成を行います。リスト4-3-2　ignore_enc_repが指定されたテーブルを含むテーブルの例&lt;table&gt;\n    &lt;tbody&gt;\n        &lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;td data-im=\"person@name\"&gt;&lt;/td&gt;&lt;/tr&gt;\n        &lt;tr&gt;&lt;th&gt;Age&lt;/th&gt;&lt;td data-im=\"person@age\"&gt;&lt;/td&gt;&lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;\n                &lt;table&gt;\n                    &lt;tbody data-im-control=\"ignore_enc_rep\"&gt;\n                         &lt;tr data-im-control=\"ignore_enc_rep\"&gt;\n                             &lt;th&gt;Interest&lt;/th&gt;&lt;td data-im=\"person@interest\"&gt;&lt;/td&gt;\n                         &lt;/tr&gt;\n                         &lt;tr data-im-control=\"ignore_enc_rep\"&gt;\n                             &lt;th&gt;Focus&lt;/th&gt;&lt;td data-im=\"person@focus\"&gt;&lt;/td&gt;\n                         &lt;/tr&gt;\n                    &lt;/tbody&gt;\n                &lt;/table&gt;\n            &lt;/td&gt;\n            &lt;td&gt;\n                &lt;table&gt;\n                    &lt;tbody data-im-control=\"ignore_enc_rep\"&gt;\n                         &lt;tr data-im-control=\"ignore_enc_rep\"&gt;\n                             &lt;th&gt;Prefer&lt;/th&gt;&lt;td data-im=\"person@preferfood\"&gt;&lt;/td&gt;\n                         &lt;/tr&gt;\n                         &lt;tr data-im-control=\"ignore_enc_rep\"&gt;\n                             &lt;th&gt;Hate&lt;/th&gt;&lt;td data-im=\"person@hatefood\"&gt;&lt;/td&gt;\n                         &lt;/tr&gt;\n                    &lt;/tbody&gt;\n                &lt;/table&gt;\n            &lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;→このセクションのまとめ　エンクロージャーとリピーターのセットがあれば、レコードの数だけそれらを複製し、レコードに含まれているフィールドの値を合成することで、クエリー結果のレコードを一覧します。さらに、リピーターの中に別のエンクロージャーがあれば、新たにデータベースアクセスを行いレコードを同様に展開します。このデータベースアクセス時には、上位のリピーターに含まれる指定したフィールドの値を手掛かりにした検索条件を付与できるので、リレーションシップに基づく1対多のレコードの取得もできます。また、それらのコンテキスト間で独立した検索も可能で、常に一定の選択肢のポップアップメニューの表示内容をマスターテーブルから取り出すという場合も同様な仕組みを利用します。FileMakerではポータルの値を取り出すことで、ある程度の効率化が可能です。→4-4計算プロパティの設定データベースから得られた結果に含まれないプロパティを追加するのが「→計算プロパティ」の仕組みです。値を求める計算式と共に定義ファイル内で定義することで、計算結果をあたかもフィールドのひとつのようにページファイル上に表示することができます。→→→計算プロパティの定義　INTER-Mediatorのようなフレームワークは、データベースの内容を取り出して表示するなどの処理します。このとき、データベースの内容をプログラムの中で再現し、それをもとにさまざまな作業を組み立てています。この内部的なデータ表現は一般に「モデル」と呼ばれます。1レコードがひとつのオブジェクトとしてモデル内で管理されます。そのオブジェクトは、フィールド名をプロパティにした値を持ちます。こうしたオブジェクトを主体にした考え方が「モデル」の基本的な考え方です。現在のJavaScriptベースのいくつかのフレームワークでは、データベースの内容を「モデル」として抽象的に表現し、そのモデルとユーザーインターフェース要素のやりとりをするという考え方を採用しています。　通常は、フィールドはデータベースにあるものですが、そのひとつを計算式で生成してしまうのが「計算プロパティ」です。計算結果を新たなフィールドとして追加する仕組みは、フィールドという名称を使わずに「計算プロパティ（Calculated Property）」と呼ばれるのが一般的ですので、INTER-Mediatorもそれに習いました。FileMakerで言えば、計算型フィールドに相当するものです。SQLだと、ビューで計算結果の列を追加でき、動作や概念はそれとよく似ています。　計算プロパティは、定義ファイルのコンテキスト定義の中に記述できます。PHPで記述した定義ファイルの一部の例は、リスト4-4-1に示します。→calculationキーに配列で指定します。その配列は、→fieldキーと、→expressionキーを持つ連想配列です。文字通り、fieldキーで新たに創出される計算プロパティのフィールド名を指定し、計算式をexpressionキーの値で記述します。なお、計算式を組み込むコンテスト定義では、必ずkeyキーによる主キーの設定をしてください。計算式については、この後にまとめて説明をします。リスト4-4-1　定義ファイルでの計算プロパティの定義例IM_Entry( array (\n  array (\n    \"name\" =&gt; \"item\",\n    \"key\" =&gt; \"id\",\t// keyキー指定は必須\n    \"repeat-control\" =&gt; \"confirm-delete confirm-insert\",\n    \"calculation\" =&gt; array (\n       array (\n         \"field\" =&gt; \"price\",\n         \"expression\" =&gt; \"qty * product_unitprice\",\n       ),\n       array (\n         \"field\" =&gt; \"color\",\n         \"expression\" =&gt; \"if ( qty &gt; 100, 'red', if ( qty &gt; 10, 'green', 'yellow' ) )\",\n       ),\n    ), ....　同様な設定を定義ファイルエディターで行うときの例が、図4-4-1です。このCalculationsの見出しの部分は、通常は見えておらず、Show Allボタンを押さないと見えませんので注意してください。図4-4-1　定義ファイルエディターでの計算プロパティの定義例　計算プロパティは、定義ファイルのコンテキスト定義の中に記述します。その結果、そのコンテキストを通じてデータベースへのクエリーを行った表形式のデータに、計算結果が得られるフィールドが増えると考えてください。図4-4-2はその動作の様子を示したものです。priceという計算プロパティによるフィールドが増えていますが、同一のレコードにあるフィールドの値を元に計算した結果を値としてもちます。なお、計算結果が値なので、逆に値を変更することはできず、計算プロパティの値は読み出しのみとなります。図4-4-2　計算プロパティによるフィールドの増加→計算式の作成　→計算式のルールは、INTER-Mediatorのマニュアルサイトにある「計算式」のページに記載しています。（本コースはデジタル版なので、詳細はリンクとします。）　まず、式の項として利用できるのは数値や文字のリテラル（記述した通りの一定のデータ）、フィールド、いくつかの定数です。数値は原則として一般的な記述で問題ありませんが、「e」を使用する指数表示や16進数はサポートしていません。文字列は、シングルクォーテーションで囲みます。ダブルクォーテーションはサポートしていません。文字列の中にシングルクォーテーションの文字がある場合には、バックスラッシュに続いてシングルクォーテーションを記述してください。　四則演算子などの記号はそのまま利用でき、数学のルールにしたがって、「10 + 20」などと記述できます。また、半角の ( ) による計算順の指定も可能です。　フィールド名はそのまま、フィールド名で記述が可能です。そのとき、フィールド名だけの場合は、同じレコードの該当するフィールド名のデータに置き換えて計算を行います。式の中で、「コンテキスト名@フィールド名」の形式の項を記述すると、その計算プロパティが存在するリピーターの内部にある、コンテキスト名のエンクロージャーを探し出し、そのエンクロージャーに対応するリピーターから該当するフィールドの値を抜き出します。要するに、HTMLで言えば、内部にある別のコンテキストの展開を探してフィールドの値を集めるということになります。通常、そのような場合はフィールドの値はひとつとは限りませんが、sumなどの合計するような関数（複数の値を受け入れる関数）で処理をすることで、合計を求めることなどができます。なお、より上位のエンクロージャーとリピーターにさかのぼっての参照はサポートしていません。　前述の「計算式」のページには、利用できる関数が一覧されています。条件分岐にはifを利用します。なお、日付や時刻の関数を用意していますが、1日を1として数値で管理する場合と、1秒を1として数値で管理する場合の、両方の関数を用意しました。SQLで言えばDATE型のフィールド値は1日が1として処理をし、DATETIME型だと1秒を1として計算するのが自然と考えて、このような関数の構成になっています。　計算式の結果をページ上に表示することだけでなく、スタイルや属性の値として設定することもできます。そのときは、ターゲット指定を「コンテキスト名@計算プロパティ名@style.スタイル属性名」のような記述にします。あるコンテキストcontextにあるフィールドisShowが1のときにはあるタグを表示にして、そうでない場合には非表示にしたい場合、コンテキストに、fieldが例えば「showStr」、expressionに「if ( isShow = 1, 'inline', 'none' )」のような定義を行い、要素は「&lt;span data-im=\"context@showStr@style.display\"&gt;&lt;/span&gt;」のように記述します。これで、isShowフィールドが1の場合、showStrの値は「inline」となり、この要素のdisplayスタイルの値はinlineとなります。isShowフィールドが1でない場合にはshowStrの値は「none」となり、この文字列が要素のdisplayスタイルに設定されるので、要素は見えなくなります。→演習計算プロパティを追加する　計算プロパティの利用例を、同一レコードの値から計算する場合、別のコンテキストの値を合計する場合、さらにスタイル属性に計算結果を適用する場合の3通りの方法で説明します。元になるページの準備1演習環境を起動します（『1-2　演習を行うための準備』を参照）。続いて、ブラウザーで、「http://localhost:9080」に接続します。「トライアル用のページファイルと定義ファイル」というタイトルの部分を特定します。2「def09.phpを編集する」をクリックし、定義ファイルエディターでdef09.phpファイルを編集します。（もし、他の用途で9番目を利用しているのなら、例えば、def21.phpを利用するなど、別の番号のセットを使用してください。その場合ソースコードの記述が変わる部分がありますが、可能な限り注記します。）3Contextsの中のQueryと書かれた背景がグレーの部分を特定します。そして、その次の行の右の方にある「削除」をクリックして、Queryの設定がある行を削除します。4「レコードを本当に削除していいですか？」とたずねられるので、OKボタンをクリックします。5同様に、Sortingの次の行にある「削除」ボタンを押し、確認にOKボタンをクリックして、こちらの設定も削除しておきます。6nameに「product」、keyを「id」、pagingを「true」、repeat-controlを「confirm-delete confirm-insert」、recordsとmaxrecordsを「1」とします。Contextsのその他のテキストフィールドは空白にします。7Database Settingsに設定を行います。[MySQL]の場合db-classは「PDO」のままでかまいません。dsnに「mysql:host=db;dbname=test_db;charset=utf8mb4」と入力します。そして、userに「web」、passwordに「password」と入力します。[FileMaker]の場合db-classを「FileMaker_DataAPI」に書き換えます。databaseは「TestDB」、userに「web」、passwordに「password」、serverに「gateway.docker.internal」、portに「443」、protocolに「https」、cert-vefifyingに「false」と入力します。8Debugについては、「false」にすると、デバッグ情報が出なくなります。なお、デバッグ情報をみながら動作を確認したい方は、「2」のままにしてこの後の作業を行ってください。9「http://localhost:9080」で開いたページに戻り「page09.htmlを編集する」をクリックし、ページファイルのpage09.htmlを編集するページファイルエディターが開きます。HTMLでの記述内容を以下のように変更します。太字が追加する箇所を示します。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;script type=\"text/javascript\" src=\"def09.php\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n  &lt;table&gt;\n    &lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;td data-im=\"product@id\"&gt;&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;th&gt;acknowledgement&lt;/th&gt;\n      &lt;td data-im=\"product@acknowledgement\"&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;&lt;th&gt;name&lt;/th&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"product@name\"/&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;&lt;th&gt;unitprice&lt;/th&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"product@product_unitprice\"/&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;&lt;td colspan=\"2\"&gt;\n      \n    &lt;/td&gt;&lt;/tr&gt;\n  &lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;10「http://localhost:9080」で開いたページに戻り、「page09.htmlを表示する」をクリックして表示したタブあるいはウインドウを表示します。productテーブルの内容が、1レコードずつ参照できます。ここまでは、すでに説明した通りです。contactテーブルの関連レコードを表示する1「def09.phpを編集する」をクリックして表示したタブあるいはウインドウを表示します。もし、閉じていたら「http://localhost:9080」で開いたページに戻り、「def09.phpを編集する」をクリックします。2Contextsのすぐ下にある「追加」ボタンをクリックして、コンテキスト定義をひとつ増やします。3nameに「item」、keyを「id」、repeat-controlを「confirm-delete confirm-insert」とします。Contextsのその他のテキストフィールドは空白にします。4itemコンテキストの中のRelationshipのすぐ下にある「追加」ボタンをクリックして、設定のための行を追加します。foreign-keyに「product_id」、join-fieldに「id」、operatorに「=」を指定します。5「page09.htmlを編集する」をクリックして表示したタブあるいはウインドウを表示します。もし、閉じていたら「http://localhost:9080」で開いたページに戻り、「page09.htmlを編集する」をクリックします。太字で示した部分を追加します。テーブルの中にテーブルがある点に注意してください。外側のテーブルはproductコンテキスト、内側のテーブルはitemコンテキストで得られたデータを展開したものです。    &lt;tr&gt;&lt;th&gt;unitprice&lt;/th&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"product@product_unitprice\"/&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;&lt;td colspan=\"2\"&gt;\n      &lt;table&gt;\n        &lt;thead&gt;\n          &lt;tr&gt;&lt;th&gt;invoice_id&lt;/th&gt;&lt;th&gt;qty&lt;/th&gt;&lt;th&gt;unitprice&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n          &lt;tr&gt;\n            &lt;td data-im=\"item@invoice_id\"&gt;&lt;/td&gt;\n            &lt;td&gt;&lt;input type=\"text\" data-im=\"item@qty\"/&gt;&lt;/td&gt;\n            &lt;td&gt;&lt;input type=\"text\" data-im=\"item@product_unitprice\"/&gt;&lt;/td&gt;\n            &lt;td&gt;&lt;/td&gt;\n          &lt;/tr&gt;\n        &lt;/tbody&gt;\n      &lt;/table&gt;\n    &lt;/td&gt;&lt;/tr&gt;\n  &lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;6「page09.htmlを表示する」をクリックして表示したタブあるいはウインドウを表示します。必要に応じて、ブラウザーの更新ボタンを押してください。開いていない場合には、「http://localhost:9080」で開いたページに戻り、「page09.htmlを表示する」をクリックします。productテーブルのidフィールドの値と、itemテーブルのproduct_idフィールドの値が照合され、下半分に見せる内側のテーブルには、同一のproduct_idフィールドの値を持つレコードが見えています。7内側のテーブルの下の方にある「追加」ボタンをクリックして、レコードの数を5、6個程度まで増やしておきます。invoice_idの値が空欄のままですが、このフィールドはサンプルのひとつ「Sample_invoice」で、invoiceテーブルと関連づけるためのフィールドです。この演習ではinvoiceテーブルを使わないので、空欄のままでも気にしなくてかまいません。同一コンテキストの値から計算する1「def09.phpを編集する」をクリックして表示したタブあるいはウインドウを表示します。もし、閉じていたら「http://localhost:9080」で開いたページに戻り、「def09.phpを編集する」をクリックします。2ページ冒頭のShow Allボタンをクリックして、すべての設定項目を見えるようにします。3itemコンテキストの中に、Calculationsという見出しがあります。そこの下にある「追加」ボタンをクリックします。4新たに登場した行で、fieldは「price」、expressionは「qty * product_unitprice」と入力します。Tabキーで移動して確定することを忘れないでください。5「page09.htmlを編集する」をクリックして表示したタブあるいはウインドウを表示します。もし、閉じていたら「http://localhost:9080」で開いたページに戻り、「page09.htmlを編集する」をクリックします。太字で示した部分を追加します。定義ファイルに定義した「price」が、あたかもitemコンテキストのフィールドのように記述できることを確認してください。&lt;table&gt;\n  &lt;thead&gt;\n  &lt;tr&gt;&lt;th&gt;invoice_id&lt;/th&gt;&lt;th&gt;qty&lt;/th&gt;&lt;th\n      &gt;unitprice&lt;/th&gt;&lt;th&gt;price&lt;/th&gt;&lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;td data-im=\"item@invoice_id\"&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"item@qty\"/&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"item@product_unitprice\"/&gt;&lt;/td&gt;\n      &lt;td data-im=\"item@price\"&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;6「page09.htmlを表示する」をクリックして表示したタブあるいはウインドウを表示します。必要に応じて、ブラウザーの更新ボタンを押してください。開いていない場合には、「http://localhost:9080」で開いたページに戻り、「page09.htmlを表示する」をクリックします。qtyやproduct_unitpriceフィールドに適当に値を入力します。priceフィールドは、qtyフィールドとproduct_unitpriceフィールドの乗算結果が見えています。テキストフィールドを入力するたびに再計算されています。また、再計算はTabキーにより、フィールドの値を確定させた後に行われており、キータイプごとに実行されていないことも分かります。別のコンテキストの値を集計する1「def09.phpを編集する」をクリックして表示したタブあるいはウインドウを表示します。もし、閉じていたら「http://localhost:9080」で開いたページに戻り、「def09.phpを編集する」をクリックします。2すべての設定項目が見えていない場合には、ページ冒頭のShow Allボタンをクリックして、すべての設定項目を見えるようにします。3productコンテキストの中に、Calculationsという見出しがあります。そこの下にある「追加」ボタンをクリックします。4新たに登場した行で、fieldは「total」、expressionは「sum(item@price)」と入力します。Tabキーで移動して確定することを忘れないでください。この式は、productコンテキストから、itemコンテキストを参照し、そこにある複数のpriceフィールド（計算プロパティ）の値をsum関数で合計し、さらにformat関数で、カンマ付き数字に変換しています。5「page09.htmlを編集する」をクリックして表示したタブあるいはウインドウを表示します。もし、閉じていたら「http://localhost:9080」で開いたページに戻り、「page09.htmlを編集する」をクリックします。太字で示した部分を追加します。定義ファイルに定義した「price」が、あたかもitemコンテキストのフィールドのように記述できることを確認してください。&lt;body&gt;\n  &lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n  &lt;table&gt;\n    &lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;td data-im=\"product@id\"&gt;&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;th&gt;acknowledgement&lt;/th&gt;\n      &lt;td data-im=\"product@acknowledgement\"&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;&lt;th&gt;name&lt;/th&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"product@name\"/&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;&lt;th&gt;unitprice&lt;/th&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"product@product_unitprice\"/&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;&lt;th&gt;total&lt;/th&gt;\n      &lt;td data-im=\"product@total\" data-im-format=\"number()\" data-im-format-options=\"useseparator\"&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;&lt;td colspan=\"2\"&gt;\n      &lt;table&gt;\n          :6「page09.htmlを表示する」をクリックして表示したタブあるいはウインドウを表示します。必要に応じて、ブラウザーの更新ボタンを押してください。開いていない場合には、「http://localhost:9080」で開いたページに戻り、「page09.htmlを表示する」をクリックします。qtyやproduct_unitpriceフィールドに適当に値を入力し、テキストフィールドを入力するたびに再計算されていることを確認してください。ここで、totalの計算値は整数ですが、画面上には、3桁ごとの区切りが入って表示されています。このように、データの書式を整えて、HTMLの要素の中に表示する仕組みは、data-im-formatなどの追加属性で指定できます。この機能の詳細は、すぐ後の『4-5　表示形式をページファイルで指定する』で解説します。計算結果をスタイルに反映させる1「def09.phpを編集する」をクリックして表示したタブあるいはウインドウを表示します。もし、閉じていたら「http://localhost:9080」で開いたページに戻り、「def09.phpを編集する」をクリックします。2すべての設定項目が見えていない場合には、ページ冒頭のShow Allボタンをクリックして、すべての設定項目を見えるようにします。3itemコンテキストの中に、Calculationsという見出しがあります。すでに1行分の設定がありますが、その下にある「追加」ボタンをクリックします。4新たに登場した行で、fieldは「color」、expressionは「if ( qty &gt; 100, 'red', if ( qty &gt; 10, 'green', 'yellow' ) )」と入力します。Tabキーで移動して確定することを忘れないでください。この式は、同じレコードのqtyフィールドの値に応じて、100より大きければ「red」、10より大きければ「green」、それ以外だと「yellow」という文字列を求めます。5「page09.htmlを編集する」をクリックして表示したタブあるいはウインドウを表示します。もし、閉じていたら「http://localhost:9080」で開いたページに戻り、「page09.htmlを編集する」をクリックします。太字で示した部分を追加します。data-im属性に2つのターゲット指定があり、それらは空白で区切ってください。定義ファイルに定義した「color」は、文字列を値として持ちますが、その値を、data-im属性があるタグ要素のcolorスタイル、つまり文字色としてスタイル情報へ結果を適用します。つまり、qtyフィールドの値に応じてpriceフィールドの文字列の色が、赤、緑、黄色に変化するということです。    &lt;tr&gt;&lt;td colspan=\"2\"&gt;\n      &lt;table&gt;\n        &lt;thead&gt;\n          &lt;tr&gt;&lt;th&gt;invoice_id&lt;/th&gt;&lt;th&gt;qty&lt;/th&gt;\n            &lt;th&gt;unitprice&lt;/th&gt;&lt;th&gt;price&lt;/th&gt;&lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n          &lt;tr&gt;\n            &lt;td data-im=\"item@invoice_id\"&gt;&lt;/td&gt;\n            &lt;td&gt;&lt;input type=\"text\" data-im=\"item@qty\"/&gt;&lt;/td&gt;\n            &lt;td&gt;&lt;input type=\"text\" data-im=\"item@product_unitprice\"/&gt;&lt;/td&gt;\n            &lt;td data-im=\"item@price item@color@style.color\"&gt;&lt;/td&gt;\n            &lt;td&gt;&lt;/td&gt;\n          &lt;/tr&gt;\n        &lt;/tbody&gt;\n      &lt;/table&gt;\n    &lt;/td&gt;&lt;/tr&gt;\n  &lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;6「page09.htmlを表示する」をクリックして表示したタブあるいはウインドウを表示します。必要に応じて、ブラウザーの更新ボタンを押してください。開いていない場合には、「http://localhost:9080」で開いたページに戻り、「page09.htmlを表示する」をクリックします。qtyにいろいろな値を入れてみて、priceフィールドの文字列の色が変化することを確認してください。演習のまとめコンテキストに計算式を指定して、計算プロパティを定義できます。計算プロパティは、式の計算結果を値に持つフィールドのように振る舞います。ただし、読み出しのみで、書き込みはできません。計算式にはフィールド名を記述できます。その場合、同一レコードの指定フィールドの値を元に計算ができます。計算式には、フィールドや数値に加えてリテラル文字列も指定できますが、シングルクォートで囲む必要があります。計算式には、自分自身が含むエンクロージャー/リピーターの展開をしているコンテキスト名とともにフィールド名を指定することができます。この場合、内部のリピーターが複数の場合は、sum関数などで合計を取ることができます。ターゲット指定の3つ目の指定で@style.NNNなどとすれば、計算プロパティの値を、スタイル属性に設定することもできます。→このセクションのまとめ　コンテキストに計算プロパティを定義することで、他のフィールドなどを元にした計算結果の値を持つフィールドが追加されたものとして、そのフィールドをページファイルのターゲット指定に指定できます。計算式では、同一レコードの他のフィールドの参照や、HTMLのノード上で包含する他のコンテキストのフィールドを参照することもできます。→4-5表示形式をページファイルで指定する→ページ上に見えるデータは、データベース上のものと原則は同じものですが、数値や日付、時刻は、より見やすい形式に→書式設定して表示したいと考えます。データコンバータークラスは、サーバーから送り出すときやサーバーが受け取ったときに変更をするものですが、これに加えて、完全にクライアント側で書式設定を稼働できる機能が実装されています。→ページファイルでの書式指定　書式設定は機能の上ではそれほど難しくないものです。ExcelやFileMaker等での書式設定をご存知であれば、ほぼその機能だと思っていただいてOKです。ページファイルの中のリンクノードについて、data-im-format属性があれば、その属性の記述に従って書式化された値が、ターゲット指定に従った場所に表示されます。設定可能な文字や記号などについては、HTMLの属性に記述する書式を適用する機能に掲載がありますので、本書ではポイントや設定例を中心に説明をします。　表4-5-1に、ページファイルのタグ内に記述できる属性をまとめました。data-im-formatに加えて、数値に関する細かな書式設定を別の属性として指定が可能です。属性役割→data-im-format書式設定（この属性のみ設定が必須）→data-im-format-options数値の3桁区切りなど→data-im-format-negative-color負の数の場合の色→data-im-format-negative-style負の数の表示形式→data-im-format-numeral-type数字の種類→data-im-format-kanji-separator数字を日本語で表示する表4-5-1　書式指定関連のHTML属性→数値の書式設定　数値やあるいは通貨表示は、data-im-format属性の値を「→number()」あるいは「→currency()」とします。()内は少数以下の桁数を示すもので、省略すると0を指定したものとみなします。→通貨は、ロケールに応じた通貨記号を通常は前に付与します。リスト4-5-1は、itemコンテキストのproduct_unitpriceフィールドとバインドしたテキストフィールドですが、テキストフィールド上に、書式化された数値が表示されます。data-im-format-options属性の値が「useseparator」なので、→→3桁ごとのカンマも表示されます。リスト4-5-1　数値をカンマ付きで表示する&lt;input class=\"price\" type=\"text\" size=\"8\"\n        data-im=\"item@product_unitprice\" data-im-format=\"number()\"\n        data-im-format-options=\"useseparator\"&gt;　リスト4-5-2は、数値を通貨として表示する例です。通貨記号は、IM_Entry関数でのオプション指定にある'→app-locale'キーや'→app-currency'キーの値、もしくは→params.phpファイルに記述する→$appLocale変数や→$appCurrency変数に依存して決められます。もちろん、日本を指定していれば、¥が通貨記号として使われます。こちらもdata-im-format-options属性の値が「useseparator」なので、3桁ごとのカンマも表示されます。リスト4-5-2　数値をカンマ付きかつ通貨記号をつけて表示する&lt;input class=\"price\" type=\"text\" size=\"8\"\n        data-im=\"item@product_unitprice\" data-im-format=\"currency()\"\n        data-im-format-options=\"useseparator\"&gt;　これらの書式設定を行うと、テキストフィールドに「1,200」や「¥ 1,200」と表示されます。ここで編集の動作を説明します。もちろん、「きちんと書式を設定した文字列に書き換える」ということでも問題はありませんが、数値の書式設定を行ったテキストフィールドに関しては、数字とピリオド（小数点）以外の文字を無視します。したがって、「1,200」を「1,2000」と変更してTabキーを押すと、12000が数値としてフィールドに保存され、ページ上では「12,000」と見えるようになります。ただし、特殊は負の数の記号や、日本語の数値についてはデータ修正時の処理は正しく機能しませんので、これらの書式についてはテキストフィールドをreadonly属性を指定しておくか、あるいはDIVタグ等の編集できない要素にバインドするようにします。→日付や時刻の書式設定　日付や時刻の書式設定は、data-im-format属性のみを使用します。「%Y」で4桁の年などとフォーマット文字列が定義されているので、それを利用して任意の形式の書式が設定できますが、シンプルな方法は、data-im-format属性に「→date(...)」「→time(...)」「→datetime(...)」と指定することです。()内部は「→long」「→middle」「→short」のいずれかの単語が指定できます。リスト4-5-3はdata-im-format属性の「date(long)」を指定した例です。()内の文字列をクォーテーションで囲う必要はありません。リスト4-5-3　日付を書式設定する&lt;input type=\"text\" data-im=\"invoice@issued\"\n        data-im-format=\"date(long)\"&gt;　これにより、テキストフィールドでは「2017年11月12日 日曜日」と表示されます。date、time、datetimeの使い分けは、フィールドの型とは関係なく使用して構いません。dateやtimeを指定すれば、型がdatetimeであっても、日付のみ、時刻のみを表示するといった動作をします。date型でdatetimeを使うことはあまり意味はありませんが、時刻が単に00:00:00になるだけです。　long、middle、shortでの表示例を、表4-5-2に示しておきます。表の中の「ロケール指定」は、IM_Entry関数のオプション引数にあるapp-localeの値、あるいはparams.phpファイルの$appLocale変数で指定したカントリーコード、あるいはそれらがない場合にはブラウザーから得られたカントリーコードです。なお、datetimeの場合は、dateとtimeの間に半角のスペースを入れた文字列として生成されます。Ver.5.7-devの段階では、これらの設定は、英語と日本語のみの設定です。他の言語が必要な方は、IMLocaleFormatTable.phpファイルを参照していただき、是非ともソースコードをコミットしてください。ロケール指定en, en_USja_JPdate(long)Sunday, November 12, 20172017年11月12日 日曜日time(long)17:45:0017時45分00秒date(middle)Sun, Nov 12, 20172017/11/12(日)time(middle)17:45:0017:45:00date(short)11/12/20172017/11/12time(short)17:4517:45表4-5-2　既定の日付時刻書式の例　年月日等の要素を指定した位置に配置するなどは、dateなどの後の()内に書式指定文字列として設定します。リスト4-5-4は、%gにより→元号を表示する方法です。この書式設定で、「平成29年11月12日」などとテキストフィールドに表示されます。どのような書式指定文字列が使えるかは、HTMLの属性に記述する書式を適用する機能を参照してください。書式指定文字列以外の文字はそのまま出力します。なお、書式指定文字列は、いくつかの種類がありますが、いずれも一貫性がない面があるため、それらを参考に独自に定義しました。特に、アルファベットの大文字と小文字は、同一の要素を示すように定義してあり、桁が多くなる傾向にある方を大文字にしてあります。また、→タイムゾーンについてはデータベースの日付時刻フィールドにタイムゾーンを含めて記録することはあまり一般的でないと考え、書式設定においてもタイムゾーンの記述は行っていません。リスト4-5-4　年号を付けた日付として書式設定する&lt;input type=\"text\" data-im=\"invoice@issued\"\n        data-im-format=\"date(%g年%m月%d日)\"&gt;　書式設定した日付時刻をテキストフィールドで表示した場合、限定的に修正してデータベースへの更新が行えます。おおむね、西暦の年月日、24時間制の時刻の数値であれば修正できると考えてください。また、英語の月名は最初の3文字で判別して、月として修正可能です。一方、和暦や2桁年号、12時間制でAM/PM等が付く時刻の修正はできません。テキストフィールドにdate(long)によって「2017年11月12日 日曜日」と表示されていた場合、「2017年11月13日 日曜日」と変更した場合、曜日は無視して、2017-11-13が入力されたものとしてデータベース側を更新します。また、テキストフィールド内も更新されて「2017年11月13日 月曜日」と表示されるはずです。つまり、曜日は無視して変更してOKです。　なお、日付時刻については、ISO8601形式の「2017-11-13 18:09:00」や、あるいはデータベースが「2017/11/13 18:09:00」の形式を受け入れる場合には、テキストフィールドにこの形式で値を入力できます。日付や時刻の場合、設定されている書式であると仮定して文字列を解析しますが、年月日等の数値が得られない場合は、入力されたデータそのものでデータベース更新をしようとします。したがって、書式の設定に関係なく、データベースが受け入れる形式で入力することができるようになっています。ただし、書式設定が解釈を変えてしまうような設定になっていないことが前提です。→→ロケールへの対応　言語や国によって、→→日付の形式や→通貨記号が変わります。「どの言語、どの国なのか」という点について、INTER-Mediatorでの扱いを説明します。まず、前提として、ブラウザーから得られるクライアントの言語と国の情報があります。通常は、クライアントからのリクエストに含まれているAccept-Languageヘッダーの内容を元に、サーバー側で言語の判定が可能です。INTER-MediatorではAccept-Languageヘッダーの最初の項目を取り出して、これを「→→ブラウザーの言語および国」としてまず識別します。一般には利用しているOSの国と言語の情報通りですが、ブラウザーは言語の設定をカスタマイズできるので、日本語としてOSを使っているけれども、ブラウザーは英語で使うという方もいらっしゃるかもしれません。その場合はブラウザーの言語および国は、英語でアメリカと認識します。　一般にはブラウザーの言語および国の情報に従って処理をすることになると考えられているかもしれませんが、Webアプリケーションではむしろそのような状況になって欲しくないことの方が一般的なのではないかと考えました。例えば、データベースのpriceフィールドがINT型だったとして、あるレコードでは100という数字が入力されていたとします。その数字が、ブラウザーを利用する国に応じて、¥100、$100のように表示されてしまうとしたらどうでしょうか？　むしろ、ブラウザーの言語が日本語でも英語でも、¥100と表示されてほしい場合の方が多いと思われます。　そこで、国と言語の設定を、INTER-Mediatorのアプリケーション側で行うようにしました。定義ファイルでのIM_Entry関数に指定する2つ目の引数（オプション設定）に、'→app-locale'というキーで、「ja_JP」「en_US」などのUNIXロケール指定を値として指定します。また、通貨のみを特定の国指定ができるよに、'→app-currency'というキーも指定できるようになっています。'app-currency'キーがない場合には、通貨記号は'app-locale'キーの指定に従います。なお、これらの設定は、『2-6　設定ファイルparams.php』で説明するparams.phpでの変数→$appLocale、→$appCurrencyでも設定でき、こちらはシステム全体に渡って言語を指定できます。INTER-Mediatorは、Ver.5.6-devより、params.phpの初期状態として、$appLocaleを「ja_JP」、$appCurrencyを「JP」と設定してあります。この設定を「INTER-Mediatorで指定するロケール」→→と呼ぶことにします。　このように、2つの国や言語の設定がありますが、INTER-Mediatorで指定するロケールの方が、ブラウザーの言語および国よりも優先度は高くなります。したがって、'app-locale'あるいは$appLocaleを指定した状態で使用するのが通常の状態であると想定しています。→カンマが出ないなどのトラブル　INTER-MediatorではOSのロケールの機能を利用して、書式設定の情報を得ています。macOSやWindowsのようなデスクトップ向けOSでは通常各国のロケールが設定されているので、任意の国コードを指定できるでしょうけれども、Linux Serverでは最低限のロケールしか搭載していないことも多く、日本語を指定するとうまく機能しない場合もあります。その場合、OSにロケールを追加する必要があります。『9-2　Webサーバーのインストールと準備』の『システムロケールについて』を参考にしてください。→このセクションのまとめ　data-im-formatやあるいは関連するHTML属性を指定することで、データベースから得られた値を、数値や通貨、日付時刻等へと書式化して表示することができます。また、一定のルールに従っていれば、書式化した文字列を変更することで、元データの更新もできるようになっています。→4-6データコンバータークラスを使ったフィールド単位の変換データベースから取り出したデータを書式化するなど、1フィールド単位での変換機能が「データコンバータークラス」という仕組みです。サーバーサイドで稼働し、読み取った直後あるいは書き込む直前に、コンバータを介してデータの変更が行えます。なお、以前は書式設定はデータコンバーターを中心に行なっていたのですが、data-im-format属性で指定する書式設定の方が手軽でわかりやすいことから、カンマ付き数値や日付の書籍設定などはdata-im-formatを使う方が良いでしょう。→データコンバータークラス　→→フィールド単位でのデータ変換をサポートするのが→データコンバータークラスで、表4-6-1に示すような、さまざまなクラスがINTER-Mediatorに付属しています。自分で作成することもできます（『Chapter 8　サーバーサイドでのプログラミング』を参照）が、一般的なコンバーターは付属のクラスで行えるでしょう。クラス名は、必ずDataConverter_で始めるのが規則です。データコンバータークラスの動作を具体的に説明しましょう。DataConverter_MySQLDateTimeクラスはMySQLのDATEやDATETIME型などの日付時刻のフィールド用です。SQLデータベースでは、フィールドから得られるデータは「2015-06-12 13:45:00」といった形式です。このまま表示することは日本での開発ではほとんどなく、「2015/06/12」等の書式設定をしたくなります。データコンバータークラスは、適用するフィールドを指定することで、初期設定が可能です。また、多くの場合、「2015/06/12」から「2015-06-12」への変更といった、もともとの形式に戻すということも行います。フィールドにコンバーターの適用を設定するだけで、双方向の変換ができるのです。なお、現在のバージョンは書式設定にはdata-im-format属性を使う方が手軽です。データコンバータークラスは、マークダウン形式の文字列をHTMLに変換する場合や、文字列の改行をHTMLのタグに変換するなどの処理においては、利用する意味があります。クラス名動作parameterに指定する値→DataConverter_AppendPrefix指定文字を前につける付加する文字列→DataConverter_AppendSuffix指定文字を後につける付加する文字列→DataConverter_HTMLStringクエリ時のみ、改行の→BRタグと&amp; &lt; &gt; の→参照形式への変換（不要）→DataConverter_MarkdownString→マークダウン形式をHTML文字列に変換する（読み出しのみ）（不要）→DataConverter_FMDateTimeFileMakerの→日付、→時刻、→タイムスタンプ日付時刻の書式、省略可→DataConverter_MySQLDateTimeMySQLの日付、時刻、タイムスタンプ日付時刻の書式、省略可→DataConverter_Numberカンマ区切りの数値小数点以下の桁数→DataConverter_Currency通貨表記の数値小数点以下の桁数→DataConverter_NumberBase数値表示の基底クラス（そのままでは使えない）-DataConverter_templateインターフェース定義のみ（そのままでは使えない）-表4-6-1　添付されているデータコンバータークラス　DataConverter_FMDateTimeやDataConverter_MySQLDateTimeの→parameterキーに対する値は、書式指定文字列を使用します。完全なリファレンスは、PHPのマニュアルにあるstrftime関数のリファレンスを参照してください。よく使うのは、年が「%Y」、月が「%m」、日が「%d」、時分秒がそれぞれ「%H」「%M」「%S」です。これらとスラッシュやコロンの組み合わせで多くの場合は対処できるでしょう。　DataConverter_MarkdownStringクラスについても説明しましょう。入力用にはTEXTAREAタグ要素を使ってフィールドに入力しますが、この時、行頭に*や-などの記号を使ったいわゆるマークダウン形式で入力します。出力時にこのデータコンバータークラスを利用してHTML形式に変換します。したがって、ターゲット指定の3つ目の設定ではinnerHTMLで結果を受け取る必要があります。サポートしているマークダウン表記を表4-6-2に、さらに生成されるHTMLに含まれるCSSクラス名を表4-6-3に示します。行頭の記号動作*その行をHnタグで囲む。nは*の個数に対応する-その行を箇条書きにする。-を重ねて階層的に記述することも可能#クラスが「_im_markdown_p1」のPタグで囲む。#は2つおよび3つにも対応し、クラス名の末尾の数字と#の個数が対応する@@IMG[file]href属性がfileのIMGタグを生成し、さらにクラスが「_im_markdown_para_img」のPタグで囲む|TABLEタグで表を作る。冒頭、セルの区切り、末尾に|を入れる表4-6-2　サポートしているマークダウン表記CSSのクラス名設定される要素→_im_markdownマークダウンの領域全体を囲むDIVタグ要素のクラス→_im_markdown_ul箇条書き全体→_im_markdown_li箇条書きの項目→_im_markdown_h1〜ヘッダー要素→_im_markdown_p1〜3#で始まる場合のPタグ要素→_im_markdown_para_imgIMGタグを囲むPタグに設定されるクラス→_im_markdown_tableテーブルのクラス→_im_markdown_trテーブルの行→_im_markdown_tdテーブルのセル→_im_markdown_para特別な表記がない場合、Pタグに入れられこのクラス名が指定される表4-6-3　マークダウンより生成されるHTMLに含まれるCSSクラス名　データコンバータークラスは、コンテキストではなく、オプション（定義ファイルエディターではOptions）での設定になります。「オプションでの設定」とは、定義ファイルに記述するIM_Entry関数の2つ目の引数に指定するということです。取り出したデータというよりも、データベース側のテーブルやビューにあるフィールドに対して設定をすることで、例えばひとつのテーブルから複数のコンテキストを利用しているときにも、ひとつの設定が複数のコンテキストに対して適用されることを意図しています。データコンバータークラスは、表4-6-4に示すキーを使った連想配列の配列を定義し、その値を→formatterキーの値として指定します。リスト4-6-1は定義ファイルでの設定例で、定義ファイルエディターでの設定結果の例は図4-6-1に示します。キー指定する値→field「テーブル名@フィールド名」の形式、コンテキスト名ではなくテーブルやビューの名前→converter-classコンバータークラスの名前。PHPのクラス名からDataConverter_を除く→parameterコンバーターが要求するパラメター（不要なクラスもある）表4-6-4　formatterキーの配列に指定可能なキーリスト4-6-1　定義ファイルに指定したコンバータークラスの例require_once('INTER-Mediator/INTER-Mediator.php');\n\nIM_Entry(\n  array (  // ここからIM_Entryの2つ目の引数（コンテキスト）\n    array (\n      'name' =&gt; 'history',\n      'key' =&gt; 'id',\n    ), .....\n  ),\n  array (  // ここからIM_Entryの2つ目の引数（オプション）\n    'formatter' =&gt; array (\n      array (\n        'field' =&gt; 'history@startdate',\n        'converter-class' =&gt; 'MySQLDateTime',\n        'parameter' =&gt; '%Y/%m/%d',\n      ),\n    ),\n  ),\n  array (  // ここからIM_Entryの2つ目の引数（データベース設定）\n    'db-class' =&gt; 'PDO', .....\n  ),\n  false\n);図4-6-1　定義ファイルエディターで指定したコンバータークラスの例→このセクションのまとめ　データコンバータークラスにより、フィールド単位でのデータの変換をサポートします。データベースからの取り出し時はもちろん、データベースに書き込むときにも適切な変換ができる仕組みを持っています。日付や数値を中心として、汎用的なクラスはINTER-Mediatorに付属します。なお、本機能は初期の頃からあるものの、さまざまな代替機能が実装されており、他の方法で実現したほうがより手軽な場合もあります。→4-7データベースの機能の利用このセクションでは、定義ファイルに指定する項目のうち、データベース側の仕組みを利用する機能についてまとめておきます。このセクションは演習はありません。→処理実行前後の→スクリプトの処理　コンテキスト定義にscriptキーで記述する内容は、FileMakerとそれ以外のSQLデータベースで大きく動作が異なります。FileMaker以外のデータベースでは、値として記述するのはSQLステートメントです。一方、FileMakerで値として記述するのは、データベース内にあるスクリプト名です。この指定により、例えば、データベースに新規レコードを作成したときに、作成直後にあるSQLステートメントを実行したり、FileMakerの場合はスクリプトを実行させるということができます。どちらかといえば、FileMakerでは複雑なロジックを組み込みたいような場合によく利用されます。一方、SQLデータベースの場合には原則として一定の文字列のステートメントになるため、あまり複雑な処理は作りにくい、というのが実情です。　→scriptキーは配列を値としてもちます。その配列の各要素は、表4-7-1のキーを持つ連想配列です。キー取りうる値意味→db-operation→loadデータを読み出すときにスクリプトを実行→updateレコードを更新するときにスクリプトを実行→create新規レコードを作成するときにスクリプトを実行→deleteレコードを削除ときにスクリプトを実行→situation→preデータベース処理の前にスクリプトを実行→presortデータベース処理の前でソート後にスクリプトを実行（FileMakerのみ）→postデータベース処理の後にスクリプトを実行→definitionSQLスクリプト、あるいはFileMakerのスクリプト名表4-7-1　scriptキーの値で利用する連想配列のキー　リスト4-7-1は、定義ファイルへの記述で、scriptキーを指定した例です。もちろん、定義ファイルエディターでも指定できます。　ここでは、2つの配列がscriptキーの値に含まれています。最初の配列は、このテーブルmessageに対して新たなレコードを作成したとき、作成後に「INSERT log SET msg='new record'」というSQLコマンドを発行します。イメージ的にはデータベース操作のログをどこかのテーブルに書き込んでいるような感じで動くと考えてください。さらに2つ目の配列は、messageテーブルに対するクエリー処理の前に、「set names 'utf8'」というコマンドを実施します。　通常、この種のコマンドはMySQLを正しくセットアップすると不要というのが現在の状況と思われます。しかし、レンタルサーバーなどのように自分で設定ファイルを書き換えられないような場合で文字化けするときに、この設定を行って回避できた場合もあります。もちろん、その場合はクエリー時だけでなく、必要なデータベース処理すべてに対して、この記述がコンテキストごとに必要となります。リスト4-7-1　MySQLデータベースでのscriptキーの指定例array(\n    'name' =&gt; 'message',\n    'key' =&gt; 'message_id',\n    'script' =&gt; array(\n        array(\n            'db-operation' =&gt; 'new', \n            'situation' =&gt; 'post', \n            'definition' =&gt; \"INSERT log SET msg='new record' \"\n        ),\n        array(\n            'db-operation' =&gt; 'load', \n            'situation' =&gt; 'pre', \n            'definition' =&gt; \"set names 'utf8' \"\n        ),\n    ),\n),　FileMakerでの指定例をリスト4-7-2に指定します。FileMakerには、message_layoutというレイアウトが存在し、さらに、「メール送信」というスクリプトを用意しているという前提です。このコンテキスト、messageに対して、例えばPost Onlyモードで新たなレコードを作成した場合、レコードを作成後に、「メール送信」スクリプトが呼び出されます。スクリプトが呼び出されたとき、それはFileMaker Server上で無人の操作が行われたとみなされます。ここで、レイアウトはmessage_layoutレイアウトに切り替わっており、新たに作成されたレコードがカレントレコードになっています。つまり、Post Onlyモードで入力したデータがレイアウト上で参照できる状態になっているわけです。　ここで、「メール送信」スクリプトが実行されると、ページ上で入力されたメールアドレス宛に、メールが送信されるというわけです。　例えば、入力を受け付けた旨のメッセージを送信するといったソリューションを組み立てることができます。なお、メール送信自体はINTER-Mediatorで実装する方法もありますが、FileMakerデータベース側のスクリプトを使った方が手早く実装できます。また、FileMakerのスクリプトはかなり自由度が高いので、さまざまなデータ処理を記述することも考えられます。リスト4-7-2　FileMakerでのscriptキーの指定例array(\n    'name' =&gt; 'message',\n    'table' =&gt; 'message_layout',\n    'key' =&gt; '-recid',\n    'script' =&gt; array(\n        array(\n            'db-operation' =&gt; 'new', \n            'situation' =&gt; 'post', \n            'definition' =&gt; \"メール送信\"\n        ),\n    ),\n),　なお、FileMakerのスクリプト処理を実行すると、選択されているレコードや、選択されているレイアウトを、スクリプトステップで違うものにすることもできてしまいます。もちろん、それはそれで便利なのですが、例えば新規レコード作成時にINTER-Mediatorのメール送信処理も組み込んでいる場合、スクリプトの指定がなければ、作成したレコードがそのままメール送信処理に引き継がれます。しかしながら、スクリプトでレイアウトを移動したり、検索を行うなどして選択されているレコードを変えた状態で終えると、その時の状態のレコードがメール送信処理に引き継がれます。もちろん、意図的にそうしたい場合にはひとつの方法ですが、複雑になるので注意が必要です。原則として、FileMakerのスクリプトでは、レイアウトや現在のレコードを一連の処理が終わったら元に戻すということを意識しておくのが良いと考えられます。→グローバルフィールドへ値を設定する　FileMakerは、→グローバルフィールドとして、あるテーブルにフィールド定義をしたとしても、レコードごとに同一の値を持つフィールドを定義できます。つまり、グローバルフィールドは、値をひとつ持つ、まさにグローバルなオブジェクトとして機能します。一方、テーブルに定義されたものだけに、一部制限はありますが、リレーションシップの手がかりとなるフィールドにも設定されます。　このグローバルフィールドは、原則としてデータベースへ接続したときには値は未確定です。FileMaker Proで開いたら以前の値が見えるので、保持されるものと思われている向きもありますが、Web経由でのアクセスでは、常にデフォルトデータ値が設定されているわけではありません。そのため、データベースアクセスをWeb経由で行うときに、グローバルフィールドに設定する値を引き渡す必要があります。その値を指定するのがコンテキストの→globalキーの値です。表4-7-2には、連想配列で指定するキーを示しました。このglobalキーは、FileMakerでのみ有効で、MySQL等のデータベースでは設定は一切無視されます。キー取りうる値意味→db-operation→loadデータを読み出すときにスクリプトを実行→updateレコードを更新するときにスクリプトを実行→new新規レコードを作成するときにスクリプトを実行→deleteレコードを削除ときにスクリプトを実行→fieldグローバルフィールド名→value設定する値表4-7-2　globalキーの値で利用する連想配列のキー　定義ファイルでのコンテキストの定義での指定例を、リスト4-7-3に示します。この例では、message_layoutレイアウトにクエリーを行うときに、「g基準日」フィールドに2015年1月1日というデータをセットして、データの取り出しを行います。「g基準日」フィールドは、message_layoutフィールドに存在する必要があります。FileMakerのWeb利用は、アクセスするときにデータベースを開いて処理し、そして閉じるということを行います。前述したように、FileMakerの場合は常に、グローバルフィールドの値は何も設定されていないので、処理を開始するごとに設定してやる必要があります。リスト4-7-3　globalキーの指定例array(\n    'name' =&gt; 'message',\n    'table' =&gt; 'message_layout',\n    'key' =&gt; '-recid',\n    'global' =&gt; array(\n        array(\n            'db-operation' =&gt; 'load', \n            'field' =&gt; 'g基準日', \n            'value' =&gt; \"1/1/2015\"\n        ),\n    ),\n),　なお、ここでのvalueキーの値は一定値です。しかしながら、現実的には一定値ではなく、「本日の日付」などの動的な値を設定したいことが多いと思われます。INTER-Mediatorでは、検索条件のようなJavaScript側でのサポートをグローバルフィールドについては行っておらず、JavaScriptと、サーバーサイドでのPHPによるプログラムの拡張で対処できるようになっています。これについては、『[利用例] FileMaker Serverで動的にグローバルフィールドを指定する』で説明します。→このセクションのまとめ　このセクションでは、定義ファイルに記述できるscriptとglobalキーについて説明をしました。SQLデータベースに関しては、scriptキーにより、データ処理の前後に指定したSQLステートメントの実行ができます。FileMakerについてはscritキーによってデータ処理前後にスクリプトを実行したり、globalキーによりグローバルフィールドへの設定を行うことができます。→4-8操作を記録する機能とカスタマイズ　データの変更や削除等の記録をしたい場合はよくあり、通常は、実際に行いたいデータ処理の後などに、別のテーブルに必要なデータを残すなどで対処します。INTER-Mediatorはこの処理も自動化しました。規定されたテーブルを用意して設定を行うことで、クライアントからINTER-Mediatorサーバに対して行った処理が、原則として全て記録されます。→→操作ログを利用する　通常、サーバではさまざまなログが取られています。データベースエンジンのログ、Apacheのアクセスログやエラーログ、PHPでApacheと別にログを作成することもできます。また、オペレーティングシステムのシステムログなどさまざまなものがあります。これらのログから必要な情報を得ることも可能ですが、一般にアプリケーションで必要になるログはアプリケーション内部での操作や処理に対応したログです。それをいつ、誰が、どのようにやって、結果はどうだったのかということを知りたいわけです。そのためのログとなると、データベースやWebサーバのログとはちょっと粒度や対象が違うでしょう。そこで、INTER-Mediatorの仕組みに連動するログ機能をつけました。INTER-Mediatorはクライアントとサーバ間のやり取りは完全に自動的に展開しますが、基本的にはデータ処理の基本であるCRUDのそれぞれの場面で通信が発生します。それをキャッチすれば、CRUDの各場面をログとして記録できます。実際には、認証が絡んだり、ファイルのやり取りなどもあり、もう少し細かいやり取りを記録することになります。そして、さまざまなオプションで、アプリケーションに必要なログ作成に持ち込みます。ここで作るログのテーブルにはユーザは自由に読み書きができないので、監査目的のログとしても利用可能です。　ログを保存するテーブル名は、→operationlogという固定の名前にします。そして、表4-8-1に示すフィールドは必須です。後で説明しますが、さらに特定の値をフィールド値として残すこともできるので、その場合はさらにフィールドを追加します。operationlogテーブルを作成するためのCREATEステートメントは、INTER-Mediatorのdist-docsディレクトリにあるサンプルのスキーマ（sample_*.sqlファイル）にあるので、それを流用すれば良いでしょう。フィールド名型と指定記録されるものidINT AUTO_INCREMENT PRIMARY KEY連番の主キー値（自動入力）dtTIMESTAMP DEFAULT CURRENT_TIMESTAMPレコード作成日時（自動入力）userVARCHAR(48)ログインユーザ名（authuserのusernameフィールドの値）client_id_inVARCHAR(48)認証で使用するクライアントID（送信前）client_id_outVARCHAR(48)認証で使用するクライアントID（送信後）require_authBIT(1)ログインパネルによる認証作業が必要と判断したらTRUEset_authBIT(1)認証を行なっている場合にTRUEclient_ipVARCHAR(60)クライアント側のIPアドレスpathVARCHAR(256)サーバリクエストのパス（定義ファイルを特定できる）accessVARCHAR(20)サーバリクエストの種類（readやupdateなど）contextVARCHAR(50)対象のコンテキスト名get_dataTEXT$_GETグローバルで得られる値post_dataTEXT$_POSTグローバルで得られる値resultTEXTクライアントに返すデータerrorTEXT記録されているエラー表4-8-1　operationlogテーブルに必要なフィールド　ログ機能をアクティブにするなどのさまざまな設定は、params.phpファイルで行います。以下のような変数が定義されています。他の設定と同様、レポジトリにあるparams.phpファイルには、一部コメント等になっていますが、変数の定義テキストがあるので、その部分を適当に修正すれば良いでしょう。変数既定値意味→$accessLogLevelfalsefalseはログ処理なし、1ならログ記録するがデータは含まれない、2ならログ記録をしてデータも記録する$dbClassLognullログ処理に使うデータベースクラスで、通常は'PDO'にする。省略するとログ記録はできない$dbDSNLognullログ処理に使うPDOのDSN。省略するとログ記録はできない$dbUserLognullログ処理でデータベースに接続するユーザ。省略するとログ記録はできない$dbPasswordLognullログ処理でデータベースに接続するユーザのパスワード。省略するとログ記録はできない$recordingContextsnullnullだと全てのコンテキストが記録対象。記録するコンテキストを限定したい場合は、記録するコンテキストの文字列をこの変数に配列で指定する$recordingOperationsnullnullだと全ての操作（accessフィールドに入る値）を記録する。記録する操作を限定したい場合は、それらの操作を示す文字列の配列を指定する$dontRecordThemefalsetrueにすると、テーマに関わるCSS要素の取り出し等の記録を行わない$dontRecordChallengefalsetrueにすると、認証におけるチャレンジ送信の処理の記録を行わない$dontRecordDownloadfalsetrueにすると、ファイルのダウンロード処理の記録を行わない$dontRecordDownloadNoGetfalsetrueにすると、GETメソッドを使っていないファイルのダウンロード処理の記録を行わない$accessLogExtensionClassnullログ処理を拡張する場合のクラス名表4-8-2　ログ作成におけるparams.phpファイルでの設定　まず、ログ記録をアクティベートするために、$accessLogLevel変数をtrueにします。そして、データベース接続に関わるPDO運用に必要な4つの変数に適切な値を入れます。もし、アプリケーションで使っているデータベース上にoperationlogテーブルを確保しているのなら、その値をそのまま使えば良いので、リスト4-8-1のような結果になると思われます。この設定が一般的なパターンです。なお、ログだけ別のデータベースにも保存できますが、対応するエンジンはINTER-Mediatorがサポートするもののみです。リスト4-8-1　params.phpでの一般的な必須の変数への設定$accessLogLevel = true; // ログ機能をアクティブにする\n$dbClassLog = $dbClass; // 以下、PDOでのデータベース設定\n$dbDSNLog = $dbDSN;\n$dbUserLog = $dbUser;\n$dbPasswordLog = $dbPassword;　これら以外の設定は、記録する内容を絞り込むための変数と、拡張クラス名を指定するものです。拡張クラスを利用する方法はこのセクションの後の方で説明します。なお、コンテキストの制限を指定する$recordingContextsと、それ以外の設定で分けて考える必要があります。なぜなら、$recordingContexts以外の判定を行なった後に、$recordingContextsによる判定を行うからです。$recordingOperationsに含まれていないキーワードの処理は、$recordingContextsの内容如何に関わらず、記録されないことになります。$recordingOperationsに指定可能な操作のキーワード（すなわち、operationlogテーブルのaccessフィールドに入力される値）は表4-8-3に示します。キーワード動作readデータベースからの読み出しcreateレコードの新規作成updateフィールドの更新deleteレコードの削除describeFileMaker Serverのみで利用、フィールド一覧を得るcopyレコードの複製を作るreplaceCSVファイル等の読み込みで主キーが一致すれば置き換えるchallenge認証のためのチャレンジデータの取得changepasswordパスワードの変更credential認証を実際に行う（storingキーの値がcredentialの場合）themeテーマのCSSや画像の取得download定義ファイルアクセスによるフレームワークのダウンロード、メディアアクセスによるダウンロードuploadfileファイルのアップロードunregisterクライアント間同期を行なっている時、ページを閉じるときに登録を削除するための情報maintenanceスキーマ自動生成を行なっているときにデータベース定義ステートメントを生成する表4-8-3　accessフィールドに設定される値→ログを参照するビューア　INTER-Mediatorのレポジトリには、→ログビューアのアプリケーションが入っています。/samples/Log_Supportにあります。単に参照するだけなので、実際のアプリケーションではこれを元に必要な情報だけを見えるようにするなどの対処をすれば良いでしょう。図4-8-1　定義ファイルエディターでのコンテキスト定義内の認証関連設定　例えば、updateやreadの処理で実際のデータのやり取りがpost_dataやresultフィールドに入っています。このフィールドは文字列であり、連想配列を文字列化して入力してあるだけです。もちろん、ここを検索して何かするということも可能ではありますが、特定のフィールドでどんな処理が行われたのかをログで確認する場合は、そのフィールドの値をカスタムクラスで別のフィールドで取り出す方が、より効率的に処理ができるでしょうし、場合によってはリレーションシップを設定することもできます。　なお、このログビューアによるデータベース処理はログに記録されてしまいます。記録されて困る場合は$recordingContexts変数に、記録したいコンテキスト名を配列で記述するようにしてください。→ロギングの結果をカスタマイズする→→　ログのテーブルoperationlogに書き込む直前に処理を組み込むことができます。具体的には、必須のフィールド以外に新たにフィールドを設けて、そのフィールドにログ情報の一部を書き込むということができるようになっています。その処理を行うクラスをparams.phpの→$accessLogExtensionClassに代入しておく必要があります。　リスト4-8-2は拡張クラスの例です。この場合、params.phpでは$accessLogExtensionClass = \"LoggingExt\" と記述し、このクラスのファイルがコンテキスト定義をしている定義ファイルと同じディレクトリにあることを前提とします。その上で、OperationLogExtensionというクラスを継承してクラスを定義し、ここに示す2つのメソッドを実装します。リスト4-8-2　ログ処理の拡張クラスの記述class LoggingExt extends INTERMediator\\\\DB\\\\Support\\\\OperationLogExtension\n{\n  public function extendingFields(): array\n  {\n    return ['condition0','field0','field1']; // 追加するフィールドの配列\n  }\n\n  public function valueForField(string $field): string // フィールドに対応する値を返す\n  {\n    if(strpos($field, 'condition') === 0) {\n      return isset($_POST['condition0value']) ? $_POST['condition0value'] : NULL;\n    } else if(strpos($field, 'field_') === 0) {\n      $n = substr($field, 6);\n      return isset($_POST['value_'.$n]) ? $_POST['value_'.$n] : NULL;\n    }\n  }\n}　実装するメソッドは、追加されるフィールド名の配列を返す→extendingFieldsと、引数のフィールド名に対する値を返す→valueForFieldの2つです。ログ自体は、INTER-Mediatorサーバを呼び出す最後に実施され、その時のさまざまな値をもとに、2つのメソッドを実装します。リスト4-8-2のクラスは、フィールドの修正において、主キー値、フィールド名、修正後の値を記録するためのものです。accessフィールドがupdateのものに限定して考えてください。　ここで、実際にフィールドの更新をした時のoperationlogに残るレコードのpost_data、result、errorフィールドをまずはチェックします。一例としてこのようになります。エラーなく処理された場合、errorフィールドは空になります。リスト4-8-3　フィールド更新時のPOSTデータupdateの時のpost_dataフィールド\n[access =&gt; update,name =&gt; person,condition0field =&gt; id,condition0operator =&gt; =,condition0value =&gt; 5,field_0 =&gt; mail,value_0 =&gt; ***,notifyid =&gt; defc55a855ee9747eb65216619fea693930b432b05407c3be66f318ca29208fd,tzoffset =&gt; -540]\n\nupdateの時のresultフィールド：\n[dbresult =&gt; Query result includes 1 records.,getRequireAuthorization =&gt; ,requireAuth =&gt; ]　post_dataフィールドは、実際のINTER-Mediatorの通信を記録しています。本来は、この通信プロトコルを知らなくてもINTER-Mediatorのシステムは組めますが、ログ処理についてはどうなっているかをある程度掴まないと処理は記述できないかもしれません。access=updateの場合、コンテキストはnameキーで示されます。そのコンテキスト定義に主キーフィールドがkeyキーで記載されているので内部的にはその方法で主キーフィールドを得ることができますが、condtion0*の3つのフィールドで、id = 5という主キーフィールドの値が5のレコードを指定していることになります。記録としては、コンテキストpersonにおいて、condition0valueキーの値「5」を覚えておけば、どのレコードの修正だったのかは後からでもわかることになります。　そして、変更しようとしたフィールドはfield_0キー、変更後のデータはvalue_0でわかります。update処理の場合には1回の通信で1フィールドしか変更しないので、他のキーが登場することはあり得ません。ということで、これらの3つのキーの値を記録したいところです。　そして、リスト4-8-2のクラス定義に戻ります。ここで、accessがupdateに対して、condition0、field0、field1を用意し、それぞれ主キー値、フィールド名、設定する値を記録するものとします。extendingFieldsメソッドはそれらの文字列を配列として返すだけなので簡単ですが、もちろん、operationlogテーブルにこれらのフィールドを適切な型を伴って定義できている必要があります。　valueForFieldで、実際のデータをどう取り出せばいいのかですが、post_dataやget_dataにあるものは、PHPのグローバル$_POSTや$_GETを利用すれば取り出すことはできます。なお、それ以上の処理までは考えていませんので、今後拡張のリクエストがあれば、それに応じてクラスを作りやすくあるいは自動で取得できるような方法を考えます。→このセクションのまとめ　INTER-Mediator上のサーバ呼び出しが発生する操作をした後に、その結果をログとして残す機能が実装されています。残すデータを絞り込んだり、あるいはデータ処理をした結果を保存する拡張クラスの定義もできます。→4-9データベーススキーマの自動生成　本書籍そしてシステム開発は、データベースのスキーマ設計がなされて、スキーマ定義を適用してテーブルなどが使える状態になっていることを前提にして説明していますが、INTER-Mediatorは逆の仕組みも持っています。この項目を配置する適当な章がないので、ここで説明をします。逆の仕組みは、言い換えれば、INTER-Mediatorのアプリケーションからスキーマの定義ができることに他なりませんが、実用的には「フィールドを追加」したような場合にデータベース管理のコマンドやページを利用しなくても、データベースの適切なテーブルにフィールドを自動追加できるというあたりが実用的な利用方法となると考えられます。→スキーマの自動生成の動作→→　スキーマの自動生成機能は、定義ファイルやページファイルの解析結果から、存在しないと思われるデータベース上のオブジェクトを生成するという昨日になっています。しかしながら、推定可能なものは、データベース、テーブル、フィールドであり、例えばビューがないということは推定できません。したがって、通常通りアプリケーションを開発した結果から、データベースを消してスキーマの自動生成をさせても、必ずしも100%稼動する状況にはならないことは理解してください。　また、MySQLでの動作を想定しています。PostgreSQLについては、実装はしていますが、若干中途半端な状態であることはお許しください。SQLiteについてはデータベース定義言語があまり充実していないので、動作は無理です。FileMaker Serverについても対応はしていません。結果的にMySQLのみの対応に近いですが、それでも、動作環境ごとに考慮しないといけないことはいくつありますので、それを踏まえてここの説明を読んでください。　では、実際にスキーマの自動生成を行ってみます。ここでは、すでにサンプルで存在するアプリケーションを利用して、データベースの生成から自動処理を進めてみます。まず、params.phpを以下のように編集します。リスト4-9-1　スキーマ自動生成を行うときに必要なparms.phpでの変数定義$dbUser = 'root'; // 既存の変数だが管理者ユーザにする\n$dbPassword = ''; // $dbUserのパスワード\n$dbDSN = 'mysql:host=127.0.0.1;dbname=test_db2;charset=utf8mb4';\n\n→$activateGenerator = true; // スキーマ自動生成モードに切り替える\n→$generatorUser = $dbUser; // 生成で使うユーザ\n→$generatorPassword = $dbPassword; // 生成で使うパスワード　$dbUser、$dbPassword、$dbDSNについては、まず、スキーマ変更ができるユーザを指定します。ここでは、macOSでHomebrewを使っていると仮定すると、ユーザはroot、パスワードはなしとなっているので、リスト4-9-1のように指定をします。そして、$dbDNSの文字列の中に、存在しないデータベース（ここでは「test_db2」）記述したとします。もちろん、MySQLは稼動して使える状態になっていることが前提です。なお、スキーマ生成を行うアカウントは$generatorUserと$generatorPasswordという別の変数に定義できるようにしていますが、スキーマ生成のセッションは権限が高いアカウントを使う方が無難と思われるので、rootアカウントを本来の変数に入力して流用しています。$activateGenerator変数により、INTER-Mediatorは解析結果をもとにスキーマ定義を行うようになります。　この状態で、アプリケーションをそのまま稼動します。つまり、ページを開きます。このとき、コンソールを開いて見えるようにしておきましょう。すると、図4-9-1のように、ダイアログボックスが表示され、メッセージにより、test_db2データベースが作られ、加えてこのデータベースを利用するためのユーザが定義されたことがわかります。図4-9-1　スキーマ定義モードで最初にページを開いたとき　データベースは指定したものが作られているので、以後はtest_db2は利用できる状態です。また、アプリケーションから識別されたテーブルだけでなく、INTER-Mediatorの動作に必要なテーブル（registeredcontext registeredpks authuser authgropu authcor issuedhash operationlog）についても定義します。データベースのユーザが定義はされますが、それを利用するためには、params.phpの書き換えが必要です。ダイアログボックスにある情報をコピーできればいいのですが、できない場合はブラウザのコンソールにある情報からコピーできます。Chromeでは赤字になって表示されている箇所から、ユーザ定義部分をどこかにコピーして残しておき、後からそのユーザとパスワードに変更します。　ダイアログボックスでOKボタンをクリックすると、引き続いてテーブル等の定義コマンドを自動生成して実行します。実行後にダイアログボックスが出ますが、こちらはCREATE TABLEなどのステートメントが実行されたことが記載されます。こちらもコンソールに結果を表示しますが、データベースのダンプをすれば参照はできるので、ユーザとパスワードのように「必ず取り出しておく」という必要はないとも言えます。図4-9-2　引き続いてデータベース内のオブジェクトを生成する　このように、生成過程では2回のダイアログボックス表示が行われます。その後は、リスト4-9-2のように、params.phpを修正しておきます。$activateGeneratorをfalseにして通常モードに切り替え、アカウントは途中で生成したものに切り替えます。これで、普通にアプリケーションが使えるはずです。リスト4-9-2　スキーマ自動生成後のparams.phpの変更$dbUser = 'webuser'; // 生成したユーザのユーザ名に置き換える\n$dbPassword = 'xxxxNNNNNDJDJDJDJDJJJJ'; // 生成したパスワードに置き換える\n$dbDSN = 'mysql:host=127.0.0.1;dbname=test_db2;charset=utf8mb4'; // そのまま\n\n$activateGenerator = false; // スキーマ自動生成モードを無効にする\n$generatorUser = $dbUser; // （そのままで問題ない）\n$generatorPassword = $dbPassword; // （そのままで問題ない）　上記が基本的な動作ですが、「動く状態のアプリケーション」をデータベースがない状態で作り上げられる人はいないと思います。ともかく仕組み上はこのようなデータベースをスクラッチから作る仕組みは必要なのですが、実用的には次に説明する部分的なデータベース変更への追随ができる部分を利用することが一般的でしょう。→アプリケーション途中での→→フィールド追加　あるアプリケーションで、新たに記録する項目が増えたとします。そのとき、通常はデータベースにコマンドを投入するなどして、フィールドを増やし、そのフィールドを利用する要素をページファイルに記述することになります。しかしながらスキーマ自動生成を利用すると、ページファイルに記述することで、データベースにフィールドを作ることができます。　手順としては、まず、ページファイルに要素を追加します。例えば、「&lt;input type=\"text\" data-im=\"person@subtitle\"&gt;」のように追記します。ここでは、既存のコンテキストpersonを利用しています。そして、params.phpで、$activateGeneratorをtrue、$generatorUserを'root'、$generatorPasswordを''に設定します。そして、ページをもう一度表示すると、図4-9-3のように足りないフィールドを追加したことが表示されます。そして、params.phpで$activateGeneratorをfalseにすると、フィールドが追加して、稼動できる状態になります。　図4-9-3　スキーマ自動生成により足りないフィールドが追加された　ここでは存在しないフィールドの作成を行いましたが、存在しないテーブルの作成も可能です。なお、型が勝手にTEXTになっているという点がお気づきと思いますが、型については既定の型を指定して動作するようになっています。それらは続くオプションの部分で説明を行います。→→→スキーマ自動生成のオプション指定　スキーマ自動生成の動作については、params.phpの以下の変数で定義可能です。ここで示されているキーに対する値は、全て既定値でもあります。リスト4-9-3　params.phpでのオプション設定$generatorOptions = [\n  'default-type' =&gt; \"TEXT\", // 既定のフィールドタイプ\n  'pk-type' =&gt; 'INT NOT NULL AUTO_INCREMENT PRIMARY KEY', // 主キーの型等\n  'fk-type' =&gt; 'INT', // 外部キーの型等\n  'datetime-suffix' =&gt; '_dt', // DATETIME型になるフィールド名の末尾\n  'date-suffix' =&gt; '_date', // DATE型になるフィールド名の末尾\n  'time-suffix' =&gt; '_time', // TIME型になるフィールド名の末尾\n  'int-suffix' =&gt; '_int', // INT型になるフィールド名の末尾\n  'double-suffix' =&gt; '_double', // DOUBLE型になるフィールド名の末尾\n  'text-suffix' =&gt; '_text', // TEXT型になるフィールド名の末尾\n  'datetime-prefix' =&gt; 'dt_', // DATETIME型になるフィールド名の先頭\n  'date-prefix' =&gt; 'date_', // DATE型になるフィールド名の先頭\n  'time-prefix' =&gt; 'time_', // TIME型になるフィールド名の先頭\n  'int-prefix' =&gt; 'int_', // INT型になるフィールド名の先頭\n  'double-prefix' =&gt; 'double_', // DOUBLE型になるフィールド名の先頭\n  'text-prefix' =&gt; 'text_', // TEXT型になるフィールド名の先頭\n  'dummy-table' =&gt; 'dummy', // ダミーテーブル名（テーブル生成を無視する）\n];　default-typeキーは、フィールドの型を示しますが、他のオプションに当てはまらない場合に、default-typeの型になります。*-suffix、*-prefixキーのそれぞれの値は、フィールド名の先頭あるいは末尾がこの名前であれば、値に指定した型になるということです。例えば、price_intフィールドはINT型として定義されますが、priceフィールドは先頭や末尾の設定に合致するものがないので、default-typeのTEXT型になるということです。　解析時には、コンテキスト定義のkeyやrelationを参照して、主キーか外部キーかを判定しています。主キーの場合の型はpk-type、外部キーの場合の型はfk-typeキーの値になります。なお、外部キーについては対応する主キー制約までの記述はできないので、必要なら後からコマンドやツール等で対処をしてください。　dummy-tableキーは、コンテキスト定義等にこの名前があれば、スキーマ生成では無視します。コンテキストが読み出ししかしない場合は、安全のためにtableキーを「存在しない」と想定しているdummy等に設定して、書き込みアクセスがあってもエラー終了するようにするのが基本ですが、そのためのテーブルを生成してしまっては意味がないので、そうした文字通り「ダミー」の記述の識別もできるようにしてあります。→このセクションのまとめ　アプリケーションからデータベースのスキーマを自動生成する機能が搭載されています。フルに生成することも可能ですが、実用的な使い方は、フィールドを増やすような作業をINTER-Mediator側の操作だけで可能になることでしょう。ただし、データベースのアクセス権に関する知識は必要ではあります。また、生成結果を自力で修正しないといけない場合もあると思われますので、万能ではないことは意識しておく必要があります。\n"
    },
    {
        "id": 1005,
        "parent": "/ja/tutorial/",
        "path": "/ja/tutorial/proof-05.html",
        "title": "さまざまなユーザーインターフェース構築",
        "breadcrumb": "chapter 5",
        "body": "→Chapter 5さまざまなユーザーインターフェース構築この章は、INTER-Mediator Ver.10をもとに記載しました。このセクションでは、定義ファイルやページファイルの設定だけで可能な機能のうち、これまでに説明していない機能について説明をします。最初は一覧と詳細を行き来するユーザーインターフェース、続いて電子メールの送信、異なるクライアント間で編集結果を連動させる方法、JavaScriptで作られたユーザーインターフェース部品を利用する方法を説明します。→5-1マスター/ディテール形式のナビゲーション一覧と詳細を切り替えて表示するようなユーザーインターフェースはよくみられます。業務系システムでは多くの場合、こうした動作が基本です。INTER-Mediatorではこうした動作を2つのコンテキストで実現して自動的に切り替えるユーザーインターフェースを用意します。そこまでの作業は、特別なプログラムコードを書かなくても、定義ファイルとページファイルの設定だけで可能です。また、一覧と詳細の切り替え時にプログラムを記述すれば、より高度なユーザーインターフェース構築も可能です。→→マスター/ディテールあるいは→一覧/詳細　データを一覧表示し、さらに特定のレコードについてより多くの情報を表示するといった形式のユーザーインターフェースは一般的なテクニックです。その場合、異なる画面であるだけに、2つのページを作成しておき、それぞれの機能動作を組み込むということが一般的かもしれません。しかしながら、INTER-Mediatorでは、ひとつのページに一覧表示のためのコンテキストと、詳細表示のためのコンテキストを両方を用意して、切り替えることなどが可能です。　iOSには、UISplitViewControllerというクラスがあり、iPadの「メール」などにみられるように、一覧と詳細を同時に、あるいは個別に表示できる仕組みがあります（図5-1-1）。INTER-Mediatorの機能は、このスプリットビューをヒントにしています。図5-1-1　UISplitViewControllerを利用したアプリケーションの例　FileMakerを利用するときに、レイアウトを2種類作成し、同じTOを2つのレイアウトに割り当てることで、一覧（図5-1-2）と詳細表示（図5-1-3）の切り替えがスムーズに行われます。切り替えるために、なんらかのスクリプトは必要ですが、一覧で選択した結果は、TOで記録されるので、レイアウトを切り替えるだけで、一覧で選択されているレコードを詳細レイアウトでも表示することができます。図5-1-2　FileMakerでの一覧表示図5-1-3　FileMakerでの詳細表示　これらのユーザーインターフェースを本コースでは、「マスター/ディテール形式」あるいは「一覧詳細形式」と総称することにして、「一覧表示側」「詳細表示側」という用語で、2種類の画面をそれぞれ特定することにします。→コンテキストに記述する→navi-controlキー　INTER-Mediatorでの一覧詳細形式のユーザーインターフェースを構築するには、原則として同一テーブルを元にした2つの異なるコンテキストを定義します。同じテーブルであっても、2つのコンテキストを定義してください。もちろんnameキーで指定する名前は別々のものにします。このとき、同一のテーブルというのは、より厳密に言えば、keyキーで指定する主キーフィールドとその値が、適切なレコードを検索する状態であるということです。極端に言えば、全く異なるテーブルでも構いませんが、主キー値を共有するものであれば、動作はします。しかしながら、それはかなり難しい運用となります。ありうる運用としては、viewキーで参照されるものが、同一のテーブルを元にしたビューであってもかまいません。それぞれが同一名の主キーフィールドを持ちkeyキーで指定されていることがポイントになります。　そして、それぞれのコンテキストでは、navi-controlキーによる値を定義します。設定可能な値は表5-1-1に記載します。この各行このnavi-controlキーの値が設定されたコンテキストは、ひとつのページファイル内で必ず2つにしてください。3つ以上ある場合の動作は保証できません。navi-controlには、そのコンテキストが一覧表示側なのか、詳細表示側なのかを指定します。詳細表示側は、recordsキーの値を「1」にしておきます。また、pagingキーは記述するとしたら、一覧表示側のコンテキストに指定をしてください。一覧表示側詳細表示側動作についてのコメント→master-hide→detail一覧と詳細が切り替わる（detail-topと同じ）master-hide→detail-top一覧と詳細が切り替わる。一覧に戻るボタンは詳細の上部master-hide→detail-bottom一覧と詳細が切り替わる。一覧に戻るボタンは詳細の下部master-hide→detail-update一覧と詳細が切り替わり、詳細から一覧に戻る時に一覧が更新される→masterdetail一覧と詳細が同時に表示される表5-1-1　navi-controlキーに設定可能な値　2つのコンテキストの動作は、一覧表示側のnavi-controlキーの設定に依存します。「master-hide」を指定すると、前に説明したFileMakerの一覧と詳細タイプの動作をします。つまり、最初は一覧表示側だけが見えていて、詳細表示側は見えていません。一覧表示側には→「詳細」ボタンが各レコードの冒頭に付加されます。それをクリックすると、一覧側は消えて、詳細表示側のみが見えます。詳細表示は1レコードだけが表示され、一覧側でクリックしたレコードが表示されます。なお「見えなくなる範囲」は原則としてエンクロージャーですが、TBODYについては、それを含むテーブル全体が見えなくなります。したがって、一番シンプルな構成は、2つのコンテキストをそれぞれ別々のTABLEタグのテーブルに表示するという手法になります。詳細表示側には、「一覧に戻る」ボタンが自動的に追加され、クリックすると、詳細表示が消えて一覧表示のみとなります。　一方、一覧表示側のnavi-controlキーの値に「master」を指定すると、前に説明した、iOSのスプリットビュー形式のユーザーインターフェースになり、一覧側、詳細側、どちらも常に表示しています。一覧表示側には「詳細」ボタンが各レコードの冒頭に付加され、クリックすると詳細側に対応するレコードが表示されます。初期状態では、詳細側は、マスター側の最初のレコードが表示されるようになっています。なお、iPadのような左右に分離された形式での表示にするには、スタイルシートの仕組みを利用して、レイアウトが意図したようになるようにします。　詳細表示側の設定値には、「→-top」あるいは「→-bottom」を付与することができます。この追加記述（例えば「detail-bottom」）により、そのコンテキストが詳細領域となるとともに、→「一覧に戻る」ボタンをエンクロージャーの前か後かを指定することができます。また「detail」と「detail-top」は同じ意味です。　一覧表示側の設定値にも、追加記述が可能です。「detail-update」は、詳細から一覧に戻るときに、一覧のコンテキストを再表示します。データベースアクセスからやり直して、表示内容を更新します。表5-1-1には他に「→-fullnavi」「→-nonavi」という記述も追加できます。これらの追加記述を指定しない場合には、一覧側には「詳細」ボタンが表示され、クリックすると詳細側が表示されるように自動的になります。-nonaviを指定するとそのボタンは表示されず、自分で表示ボタンを作り込む必要があります。-fullnaviを指定すると、一覧表示側は行全体がクリック可能になり、→→行をクリックすることで、詳細を表示します。モバイルデバイスの場合はタッチをしても詳細を表示できるようになります。　一覧表示側に表示される「詳細」ボタン、詳細表示側に表示される「一覧に戻る」ボタンのボタン名は、いずれも、→button-namesキーの配列で変更できます。それぞれのコンテキスト内で、button-namesキーの配列を定義し、要素のキーを一覧表示側は「navi-detail」、詳細表示側は「navi-back」で指定します。これらのキーの値が、ボタン名になります。　2つのコンテキストの外観をカスタマイズするには、スタイルシートを使ってさまざまに設定します。各オブジェクトに関して、表5-1-2のように、class属性を設定しています。これらのclass属性をボタン等のスタイルの変更に利用してください。なお、IM_NaviBack_TRとIM_NaviBack_TDは、詳細表示側のコンテキストのエンクロージャーがTBODYの場合だけ設定されます。このとき、THEADあるいはTFOOTに新たにTRタグ要素を作り、TDタグ要素を含み、さらにその中にBUTTON要素を配置します。これらすべてにclassを割り当てているので、うまく設定すると表の外にボタンがあるように見えるかもしれません。エンクロージャーがTBODY以外の場合、class属性がIM_NaviBack_TRとIM_NaviBack_TDの要素は作られません。class属性の値適用先→IM_Button_Master一覧表示側に追加される「詳細」ボタンのBUTTONタグ要素→IM_Button_BackNavi詳細表示側に追加される「一覧に戻る」ボタンのBUTTONタグ要素→IM_NaviBack_TR詳細表示のエンクロージャーがTBODYの場合、「一覧に戻る」ボタンを含むTRタグ要素→IM_NaviBack_TD詳細表示のエンクロージャーがTBODYの場合、「一覧に戻る」ボタンを含むTDタグ要素表5-1-2　一覧詳細形式の表示により自動的に付加されるclass属性値→一覧と詳細の切り替え時に呼び出されるメソッド　一覧表示と詳細表示で、コンテキスト内のリンクノードについては、データベースの内容がそれぞれ表示されますが、それ以外のなんらかの処理を追加したい場合には、いくつかのメソッドを利用することができます。少ない作業で確認ができるので、このセクションの演習で実際にプログラムを追加して動作を紹介しておきます。→演習一覧と詳細を利用したユーザーインターフェース　iPadのようなユーザーインターフェースや、一覧と詳細が切り替わるユーザーインターフェースを実際に作成してみましょう。また、JavaScriptを利用した高度なカスタマイズも紹介します。2つのコンテキストを定義ファイルに定義1ここからの作業は、Webブラウザー上で行います。まず、演習環境を起動します（『1-2　演習を行うための準備』を参照）。続いて、ブラウザーで、「http://localhost:9080」に接続します。「トライアル用のページファイルと定義ファイル」というタイトルの部分を特定します。2「def11.phpを編集する」をクリックし、定義ファイルエディターでdef11.phpファイルを編集します。（もし、他の用途で11番目を利用しているのなら、例えば、def21.phpを利用するなど、別の番号のセットを使用してください。その場合ソースコードの記述が変わる部分がありますが、可能な限り注記します。）3Contextsの中のQueryと書かれた背景がグレーの部分を特定します。そして、その次の行の右の方にある「削除」をクリックして、Queryの設定がある行を削除します。4「レコードを本当に削除していいですか？」とたずねられるので、OKボタンをクリックします。5同様に、Sortingの次の行にある「削除」ボタンを押し、確認にOKボタンをクリックして、こちらの設定も削除しておきます。6nameに「person_list」、keyを「id」、pagingを「true」、repeat-controlを「confirm-insert」、recordsを「10」、maxrecordsを「100」とします。[MySQL]の場合viewとtableは「person」とします。[FileMaker]の場合viewとtableは「person_layout」とします。Contextsのその他のテキストフィールドは空白にします。7Contextsという見出しのすぐ下の「追加」ボタンをクリックします。コンテキストの定義領域がひとつ分増えます。8nameに「person_detail」、keyを「id」、recordsを「1」、maxrecordsを「1」とします。[MySQL]の場合viewとtableは「person」とします。[FileMaker]の場合viewとtableは「person_layout」とします。Contextsのその他のテキストフィールドは空白にします。9Database Settingsに設定を行います。[MySQL]の場合db-classは「PDO」のままでかまいません。dsnに「mysql:host=db;dbname=test_db;charset=utf8mb4」と入力します。そして、userに「web」、passwordに「password」と入力します。[FileMaker]の場合db-classを「FileMaker_DataAPI」に書き換えます。databaseは「TestDB」、userに「web」、passwordに「password」、serverに「gateway.docker.internal」、portに「443」、protocolに「https」、cert-vefifyingに「false」と入力します。10Debugについては、「false」にすると、デバッグ情報が出なくなります。なお、デバッグ情報をみながら動作を確認したい方は、「2」のままにしてこの後の作業を行ってください。ページファイルの作成と表示1「http://localhost:9080」で開いたページに戻り「page11.htmlを編集する」をクリックし、ページファイルのpage11.htmlを編集するページファイルエディターが開きます。HTMLでの記述内容を以下のように変更します。太字が追加する箇所を示します。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;script type=\"text/javascript\" src=\"def11.php\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n  &lt;table&gt;\n    &lt;tr&gt;\n      &lt;td&gt;\n        &lt;div data-im=\"person_list@name\"&gt;&lt;/div&gt;\n        &lt;div data-im=\"person_list@mail\"&gt;&lt;/div&gt;\n      &lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/table&gt;\n  &lt;table&gt;\n    &lt;tr&gt;&lt;th&gt;id&lt;/th&gt;\n      &lt;td data-im=\"person_detail@id\"&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;&lt;th&gt;name&lt;/th&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"person_detail@name\"/&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;&lt;th&gt;address&lt;/th&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"person_detail@address\"/&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;&lt;th&gt;mail&lt;/th&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"person_detail@mail\"/&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;&lt;th&gt;category&lt;/th&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"person_detail@category\"/&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;&lt;th&gt;checking&lt;/th&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"person_detail@checking\"/&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;&lt;th&gt;location&lt;/th&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"person_detail@location\"/&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;&lt;th&gt;memo&lt;/th&gt;\n      &lt;td&gt;&lt;textarea data-im=\"person_detail@memo\"&gt;&lt;/textarea&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;2「http://localhost:9080」で開いたページに戻り、「page11.htmlを表示する」をクリックして表示したタブあるいはウインドウを表示します。2つのテーブルが見えています。ひとつは、personテーブルの内容が一覧になっています。もうひとつはpersonテーブルのひとつのレコードが見えています。ページネーションが見えていますが、こちらは定義ファイルで指定した通り、テーブルの一覧表示のコンテキストに関連付けられたものです。ここまでは、本コースでこれまでにやってきたことと同一です。3「page11.htmlを編集する」をクリックして表示したタブあるいはウインドウに戻ります。もし、閉じていたら、「http://localhost:9080」で開いたページに戻り「page11.htmlを編集する」をクリックして開きます。そして、2つのTABLEタグを囲むようにDIVタグを定義して、スタイル属性を設定します。displayスタイル属性をflexにすることで、テーブルが2つ横に並ぶようになります。gapによって、テーブル間に適当な空白を入れます。&lt;body&gt;\n  &lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n  &lt;div style=\"display: flex; gap: 1em\"&gt;\n  &lt;table&gt;\n    :\n  &lt;/table&gt;\n  &lt;table&gt;\n    :\n  &lt;/table&gt;\n&lt;/div&gt;\n&lt;/body&gt;4「page11.htmlを表示する」をクリックして表示したタブあるいはウインドウに戻り、ブラウザーの更新機能を使ってページ内容を更新します。もし、閉じていたら、「http://localhost:9080」で開いたページに戻り「page11.htmlを表示する」をクリックして開きます。style属性で指定した通り、テーブルが左右に配置され、テーブル間には空間が作られています。同一ページでのマスター/ディテール形式のユーザーインターフェース1「def11.phpを編集する」をクリックして表示したタブあるいはウインドウに戻ります。もし、閉じていたら、「http://localhost:9080」で開いたページに戻り「def11.phpを編集する」をクリックして開きます。2最初の「person_list」コンテキストのnavi-controlを「master」にします。32つ目の「person_detail」コンテキストのnav-controlを「detail」にします。設定後、Tabキーを押すなどして、入力結果を確定させてください。4「page11.htmlを編集する」をクリックして表示したタブあるいはウインドウに戻ります。もし、閉じていたら、「http://localhost:9080」で開いたページに戻り「page11.htmlを編集する」をクリックして開きます。一覧を表示するテーブルの行の最初に、空のセルを付け加えておきます。&lt;body&gt;\n  &lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n  &lt;div style=\"display: flex; gap: 1em\"&gt;\n  &lt;table&gt;\n    &lt;tr&gt;\n      &lt;td&gt;&lt;/td&gt;\n      &lt;td&gt;\n        &lt;div data-im=\"person_list@name\"&gt;&lt;/div&gt;\n        &lt;div data-im=\"person_list@mail\"&gt;&lt;/div&gt;\n      &lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/table&gt;5「page11.htmlを表示する」をクリックして表示したタブあるいはウインドウに戻り、ブラウザーの更新機能を使ってページ内容を更新します。もし、閉じていたら、「http://localhost:9080」で開いたページに戻り「page11.htmlを表示する」をクリックして開きます。一覧のテーブルの各行に追加した空白のセルの中に、「詳細」ボタンが自動的に設定されています。64番目の「詳細」ボタンをクリックすると、右側には、一覧表示側と対応したレコードの内容が表示されています。つまり、「詳細」ボタンをクリックしたレコードの内容が右側のテーブル（詳細表示）に表示しています。iPadでよく見られるような一覧と詳細が左右に並ぶ形式のユーザーインターフェースがこれで実現しています。7詳細表示側はテキストフィールドになっています。nameフィールドの中身を変更してみて、ReturnキーあるいはTabキーを押して設定を確定します。8自動的に左側の一覧表示側のnameフィールド値も、書き換えたものに即座に変更されました。同一のレコードの同一のフィールドは、ページ内では連動しています。一覧表示側に対して作用するページネーション1一覧表示側で、10より多くのレコードがあるようにします。ない場合には、「レコード追加：person_list」ボタンをクリックしてレコードを追加します。このボタンが見えない場合には、「更新」ボタンをクリックして、ページを更新してください。「レコードを本当に作成していいですか？」とたずねられるので、OKボタンをクリックします。「レコード追加」ボタンがない場合には、ブラウザーの更新機能を利用するか、ページネーションの「更新」ボタンをクリックして、ページを更新します。2例えばレコードを全部で13個作成した場合、最初の10レコードが左側の一覧表示側に見えています。また、ページネーションコントロールでは、次のページに移動するボタンがクリックできるようになっています。3ページネーションコントローラーの「&gt;」ボタンをクリックして、ページネーションを次のページに移動します。左側の一覧表示側は11レコード目より10レコード以内のレコードが一覧されていますが、詳細表示側は見えているリストの最初のレコード（idフィールドが「12」）が見えています。4最後のレコードの「詳細」ボタンをクリックして、詳細表示側で適当に入力しました。もちろん、その結果はデータベースに保存されるとともに、一覧表示側にも即座に反映しています。レコード削除に対する詳細側の動作1「def11.phpを編集する」をクリックして表示したタブあるいはウインドウに戻ります。もし、閉じていたら、「http://localhost:9080」で開いたページに戻り「def11.phpを編集する」をクリックして開きます。2最初の「person_list」コンテキストのrepeat-controlを「confirm-insert confirm-delete」にします。3「page11.htmlを編集する」をクリックして表示したタブあるいはウインドウに戻ります。もし、閉じていたら、「http://localhost:9080」で開いたページに戻り「page11.htmlを編集する」をクリックして開きます。一覧を表示するテーブルの行の最後に、空のセルを付け加えておきます。  &lt;table&gt;\n    &lt;tr&gt;\n      &lt;td&gt;\n        &lt;div data-im=\"person_list@name\"&gt;&lt;/div&gt;\n        &lt;div data-im=\"person_list@mail\"&gt;&lt;/div&gt;\n      &lt;/td&gt;\n      &lt;td&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/table&gt;4「page11.htmlを表示する」をクリックして表示したタブあるいはウインドウに戻り、ブラウザーの更新機能を使ってページ内容を更新します。もし、閉じていたら、「http://localhost:9080」で開いたページに戻り「page11.htmlを表示する」をクリックして開きます。一覧のテーブルの各行に、「削除」ボタンが自動的に設定されています。5適当なレコードの「詳細」ボタンをクリックして、詳細表示側に何か表示されている状態にします。6詳細表示側に表示されている対応するレコードを一覧表示側で特定して、そのレコードの「削除」ボタンをクリックします。削除するかどうかをたずねるので、OKボタンをクリックして、本当に削除します。7一覧表示側からレコードは消えました。一覧と詳細が切り替わるユーザーインターフェース1「def11.phpを編集する」をクリックして表示したタブあるいはウインドウに戻ります。もし、閉じていたら、「http://localhost:9080」で開いたページに戻り「def11.phpを編集する」をクリックして開きます。2最初の「person_list」コンテキストのnavi-controlを「master-hide」にします。Tabキーを押して、確実に内容を定義ファイルに反映させるようにしてください。3この状態で、Webアプリケーションの表示がどのようになっているか確認してみましょう。「page11.htmlを表示する」をクリックして表示したタブあるいはウインドウに戻り、ブラウザーの更新機能を使ってページ内容を更新します。もし、閉じていたら、「http://localhost:9080」で開いたページに戻り「page11.htmlを表示する」をクリックして開きます。すると、一覧表示部分だけが見えています。4適当に「詳細」ボタンをクリックすると、そのクリックしたページの詳細表示側だけが見えています。つまり、一覧と詳細が切り替わるユーザーインターフェースが自動的に構築されています。詳細側では、ページネーションも見えていないことを確認してください。5詳細側の「一覧表示」ボタンをクリックすると、一覧表示側つまり、最初の状態に戻ります。ページネーションも見えるようになっています。6「def11.phpを編集する」をクリックして表示したタブあるいはウインドウに戻ります。もし、閉じていたら、「http://localhost:9080」で開いたページに戻り「def11.phpを編集する」をクリックして開きます。72つ目の「person_detail」コンテキストのnav-controlを「detail-bottom」にします。設定後、Tabキーを押すなどして、入力結果を確定させてください。8「page11.htmlを表示する」をクリックして表示したタブあるいはウインドウに戻り、ブラウザーの更新機能を使ってページ内容を更新します。もし、閉じていたら、「http://localhost:9080」で開いたページに戻り「page11.htmlを表示する」をクリックして開きます。一覧表示側だけが表示されています。適当なレコードの「詳細」ボタンをクリックして詳細表示側を見てみます。「一覧表示」ボタンが、下部に表示されました。エンクロージャー外の要素のコントロール1「page11.htmlを編集する」をクリックして表示したタブあるいはウインドウに戻ります。もし、閉じていたら、「http://localhost:9080」で開いたページに戻り「page11.htmlを編集する」をクリックして開きます。ヘッダー部にスクリプトを追加するとともに、ボディ部の最初に一覧表示と詳細表示の両方の見出しを表示しておきます。そして、詳細側はdisplay属性をnoneにして、非表示にしておきます。スクリプトは、一覧から詳細あるいはその逆に変化する段階で呼び出されるメソッドで、H1タグの見出しをそれぞれ表示/非表示を切り替えているだけです。&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;script type=\"text/javascript\" src=\"def11.php\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\"&gt;\n    INTERMediatorOnPage.→naviAfterMoveToDetail\n      = function(master, detail){\n      document.getElementById(\"master_title\").style.display = \"none\";\n      document.getElementById(\"detail_title\").style.display = \"block\";\n    }\n\n    INTERMediatorOnPage.→naviAfterMoveToMaster\n      = function(master, detail){\n      document.getElementById(\"master_title\").style.display = \"block\";\n      document.getElementById(\"detail_title\").style.display = \"none\";\n    }\n  &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1 id=\"master_title\"&gt;住所録一覧表示&lt;/h1&gt;\n  &lt;h1 id=\"detail_title\" style=\"display:none\"&gt;住所録詳細表示&lt;/h1&gt;\n  &lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n  &lt;div style=\"display: flex; gap: 1em\"&gt;\n  &lt;table&gt;\n    &lt;tr&gt;\n      &lt;td&gt;&lt;/td&gt;\n      &lt;td&gt;\n        &lt;div data-im=\"person_list@name\"&gt;&lt;/div&gt;使用しているメソッドについての説明は、この演習のすぐ後にある『一覧と詳細の切り替え時に呼び出されるメソッド』を参照してください。2「page11.htmlを表示する」をクリックして表示したタブあるいはウインドウに戻り、ブラウザーの更新機能を使ってページ内容を更新します。もし、閉じていたら、「http://localhost:9080」で開いたページに戻り「page11.htmlを表示する」をクリックして開きます。一覧表示側だけが表示されていて、ページの見出しは「住所録一覧表示」だけが表示されています。「住所録詳細表示」は初期状態ではdisplayスタイル属性が「none」なので、非表示です。3適当な「詳細」ボタンをクリックして、詳細表示にすると、見出しは「住所録詳細表示」に切り替わります。これは、一覧から詳細に移行する途中でINTERMediatorOnPage.naviAfterMoveToDetailメソッドが呼び出され、ヘッダーに記述したプログラムが実行され、一方の見出しは非表示に、もう一方は表示されるようになったということです。4「一覧」ボタンをクリックして、一覧表示にすると、見出しは「住所録一覧表示」に戻ります。これは、詳細から一覧に移行する途中でINTERMediatorOnPage.naviAfterMoveToMasterメソッドが呼び出され、ヘッダーに記述したプログラムが実行され、一方の見出しは非表示に、もう一方は表示されるようになったということです。演習のまとめコンテキスト定義のnavi-controlに「master」「detail」をそれぞれ同一のテーブルから定義した2つのコンテキストに記述することで、一覧と詳細を表示するユーザーインターフェースが作成できます。一覧および詳細のコンテキストでは、その他の設定にも注意を払う必要がありますが、通常、一覧は複数レコードを表示、必要に応じてページネーションと連動させます。詳細は1レコードを表示するようにします。「master-hide」を指定すると、一覧と詳細が切り替わるユーザーンタフェースを作成できます。一覧から詳細、あるいは詳細から一覧に移動するときに、作成しているページ側で定義したプログラムを実行することができます。これを利用して、例えば「master-hide」を利用しているときに、一覧と詳細で異なる見出しを表示することなどが可能です。→→→一覧と詳細の切り替え時に呼び出されるメソッド　以下、マスター/ディテール形式のページにおいて使用可能なJavaScriptのAPIについて説明をします。JavaScriptについては、本ページよりも後になりますが、『2-3　JavaScriptプログラムの記述』の記述を踏まえたものとします。　一覧表示と詳細表示で、コンテキスト内のリンクノードについては、データベースの内容がそれぞれ表示されますが、それ以外のなんらかの処理を追加したい場合には、いくつかのメソッドを利用することができます。一覧表示から詳細表示、あるいは詳細表示から一覧表示に切り替わるとき、切り替え前に呼び出されるメソッドと、切り替わり後に呼び出されるメソッドの、合計4種類のメソッドを、グローバル変数INTERMediatorOnPageのメソッドとして定義可能です。引数を2つ取り、mContextが一覧表示側、dContextが詳細表示側のコンテキストオブジェクトです。コンテキスト定義ではなく、モデルとして動作するコンテキストオブジェクトへの参照が得られます。返り値は不要です。INTERMediatorOnPage.→naviBeforeMoveToDetail = function (mContext, dContext) {...}　一覧表示から詳細表示に切り替わる前に呼び出されます。INTERMediatorOnPage.→naviAfterMoveToDetail = function (mContext, dContext) {...}　一覧表示から詳細表示に切り替わった直後に呼び出されます。INTERMediatorOnPage.→naviBeforeMoveToMaster = function (mContext, dContext) {...}　詳細表示から一覧表示に切り替わる前に呼び出されます。INTERMediatorOnPage.→naviAfterMoveToMaster = function (mContext, dContext) {...}　詳細表示から一覧表示に切り替わった直後に呼び出されます。　これらの4つのメソッドは、一覧/詳細の切り替わるときにしかこれらのメソッドは呼び出されません。ページ表示直後に何らかのプログラムの追加が必要なら、INTERMediator.doBeforeConstructメソッドの呼び出し前や、INTERMediatorOnPage.doAfterConstructメソッド（『8-5　ブラウザーを判断するページ』を参照）を利用します。→マスター/ディテール形式のページでのそれぞれのコンテキストの取得　マスター表示とディテール表示の切り替え前後に呼び出されるメソッドは、それぞれのコンテキストオブジェクトを引数として渡されるので、コンテキストは即座に参照できます。これら以外のメソッドで、マスターあるいはディテールのコンテキストを得るには、次のAPIを利用することができます。IMLibContextPool.→getMasterContext()　→→マスター側のコンテキストへの参照を返します。IMLibContextPool.→getDetailContext()　→→ディテール側のコンテキストへの参照を返します。→詳細へのナビゲーションIMLibPageNavigation.→moveToDetail(keyField, keyValue, isHide, isHidePageNavi)　引数に指定した仕様の→→詳細画面を表示します。一覧側にある「詳細」ボタンを押したときに利用されるメソッドです。引数指定内容keyField詳細側に表示するレコードのキーフィールド名keyValue詳細側に表示するレコードのキーフィールド値isHide一覧側を非表示にするのならtrue、そのままならfalseisHidePageNaviページネーションを非表示にするのならtrue表5-1-3　moveToDetailメソッドに指定する引数　このメソッドの返り値は、関数です。その関数を引数なしで呼び出すことで、詳細への画面切り替えが発生します。例えば、マスター領域の最初のレコードに対応した詳細を表示するには、リスト5-1-1のようなプログラムで可能です。リスト5-1-1　マスターの最初のレコードを表示する詳細への移動プログラムvar context = IMLibContextPool.getMasterContext();\nvar keys = Object.keys(context.store);\nvar comp = keys[0].split('=');\nvar func = IMLibPageNavigation.moveToDetail(comp[0], comp[1], true, true);\nfunc();　リスト5-1-1のプログラムを利用すると、最初に一覧表示のマスター領域ではなく、最新データの詳細を表示することができます。リスト5-1-2にあるように、INTERMediatorOnPage.→doAfterConstructメソッドに処理を記述します。INTERMediator.→partialConstructingプロパティは、ページ全部が生成し終わっているかどうかを判定できるものです。最初のページ生成ではfalseになっていて、その後のマスターと詳細を行き来するときにはtrueになります。つまり、ページの最初の生成時にのみ、moveToDetailメソッドが実行されるということです。moveToDetailメソッドの返り値は関数なので、「func();」のように即座に実行しています。ここで、詳細側にどのレコードを表示するのかを、moveToDetailメソッドの引数に指定します。詳細側のコンテキストからレコードを取り出すとき、「第1引数=\"第2引数\"」といった条件式が適用されると考えてください。一方、マスター領域はすでにコンテキストが作られています。マスター側のコンテキストを取得するには、IMLibContextPool.getMasterContextメソッドが手軽で便利です。そのオブジェクトのstoreプロパティがデータベースから取得したデータですが、「主キー=値」がプロパティとなったオブジェクトの形式になっています。Object.keysメソッドで、プロパティ名の配列を得て、その最初の要素から、主キーフィールド名とその値を分離して得ています。リスト5-1-2　ページを表示したときに詳細を表示するINTERMediatorOnPage.doAfterConstruct = function () {\n  if (!INTERMediator.partialConstructing) {\n    var context = IMLibContextPool.getMasterContext();\n    var keys = Object.keys(context.store);\n    var comp = keys[0].split('=');\n    var func = IMLibPageNavigation.moveToDetail(comp[0], comp[1], true, true);\n    func();\n  }\n}IMLibPageNavigation.→moveDetailOnceAgain()　最後に行った→→詳細画面への移行を再度行います。マスター/ディテール形式のページから別のページに移動し、またマスター/ディテール形式のページに戻ったときに、以前表示していた詳細レコードを再度表示したいような場合に利用できます。→このセクションのまとめ　一覧と詳細を行き来するユーザーインターフェースや、一覧と詳細を同時に表示するユーザーインターフェースを、定義ファイルへの指定だけで作成可能な機能がINTER-Mediatorには搭載されています。2つのコンテキストを用意して、navi-controlキーにmasterやdetailなどの値を指定することが基本です。レコードの削除の動作には若干、気を付ける必要がありますが、2つのコンテキストは連動しているので、一方で編集した結果はもう一方に原則として即座に反映されます。ナビゲーションのためのボタンが自動的に付けられますが、ボタン名のカスタマイズや、スタイルシートによる書式設定もできます。→5-2メールの送信Webアプリケーションでは、→→メールの送信を行うことがよくあるため、INTER-Mediatorでもメール送信の機能を実装しました。単に送信するだけなら、定義ファイルへの設定のみで可能です。また、メール送信を一般化して、「データベース処理の後に、メッセージを送る」という機能に更新しており、メール以外にSlackへのメッセージ送信も可能です。他のメッセージングサービスについてもAPIがあれば、プラグイン的に対応は可能です。→メールを送るタイミング　まず、メールを送るタイミングについて説明をします。メールの送信をクライアントから実行するという手もありますが、ブラウザーからクライアントOSや別のアプリケーションを操作するのはかなり難しく、セキュリティ面から、原則として大きく制約されているのが一般的です。そのため、メールを組み込む機能はサーバー上にある必要があります。　そのこともあって、メールの送信機能は、「データベースに対する操作を行った後」に行うという実装としました。ただし、レコード削除後に送信するのは用途的に考えにくいのと、レコードの内容をメールに含める仕組みを実現しようとすると、この処理だけ例外的になってしまうので、削除は対象外としました。つまり、データの基本操作であるCRUD（Create Read Update Delete）のうちのCRUの3つの操作の後に、メールを送ります。コンテキストに対して→send-mailキー、あるいは→messagingキーで連想配列を定義し、その要素のキーとして、表5-2-1のようなキーを指定します。言い換えれば、ひとつのコンテキストについて、CRUそれぞれにメール送信やメッセージ送信の指定を指定できるようになっています。キー動作→driver送信処理に利用するドライバの名称で、省略するとメール送信、値として、\"mail\"あるいは\"slack\"をサポート。なお、send-mailキーではこの要素は記述してはいけない。→readレコードの取り出しを行った後にメールを送信する→upateレコードの更新処理を行った後にメールを送信する→create新たなレコードを作るアクションを起こした後にメールを送信する表5-2-1　send-mailキー（messagingキー）の連想配列に設定可能なキー　設定の上で若干柔軟性が低いと思われるかもしれません。例えば、フィールドAを更新したときだけメールを出したいといった場合があるとします。そのようなときには、フィールドAの更新を行うときのコンテキストを新たに定義し、そこにメール送信の設定を行います。そして、フィールドAの更新を、例えばボタンを押して行うなどして、ボタンを押したときに新たなコンテキストの更新処理をJavaScriptで記述するという手法を使います。このように、メールの送信のための別のコンテキストを用意するといった手法で、柔軟にメール送信の仕組みが組み立てられると同時に、条件設定的な複雑な設定やプログラムを導入することなくメール送信が利用できます。　createやupdateの場合は、返ってくるコンテキストの内容は1レコードのみです。そして、その1レコードに対応したメールが送信されます。すなわち、メールの内容として、そのレコードのフィールドの値を入れ込むなどが可能です。readの場合は、複数のレコードがコンテキストに含まれるかもしれません。その場合は、1レコードにつき1通のメールが送られるのが基本です。つまりレコードごとに異なるフィールドの値をメールに入れ込めば、1通1通の内容が異なるメールを送信できます。フィールドの内容を入れ込む方法は、この後の演習で具体的に説明します。→メール処理の動作に関する設定　INTER-Mediatorのメールを送る機能は、Ver.5までの仕組みと、Ver.6以降の仕組みが大きく異なっています。ここでは前者を「→→旧アーキテクチャ」、後者を「→→新アーキテクチャ」と呼びます。Ver.6を実装する段階で、旧アーキテクチャの実装は残して新アーキテクチャも組み込み、相互に切り替えて運用できるようにしました。また、過去のアプリケーションとの互換性を考慮して、Ver.6での既定値は旧アーキテクチャでの稼働を規定値にしました。しかしながら、今後は新アーキテクチャが使われることがメインになると想定して、Ver.10で既定値を新アーキテクチャとしました。旧アーキテクチャに切り替えることは可能です。新アーキテクチャのみをこのドキュメントでは紹介します。　もし、旧アーキテクチャで動作させる場合には、params.phpファイルに→$sendMailCompatibilityMode変数を定義してtrueを代入してください。この変数の規定値は、Ver.6〜9ではtrue、Ver.10以降はfalseになっていますので、以前のソースを利用する場合にはparams.phpにこの変数設定がないかをチェックしてください。→メールの内容に関する設定　あるコンテキストで、新規にレコードを作ったときにメールを送るのであれば、send-mailキー（messagingキー）のcreateキーの値にさらに連想配列を定義して、その連想配列を、表5-2-2に示すキーの要素を追加します。表にあるすべてのキーを設定する必要はありませんが、送信者と送信先、そして本文の3つはなんらかのキーで指定は必要です。キー値に設定する内容→from送信者名や送信者アドレスが含まれるフィールド名→to送信先が含まれるフィールド名→ccCc先が含まれるフィールド名→bccBcc先が含まれるフィールド名→subject件名が含まれるフィールド名→bodyメール本文が含まれるフィールド名→template-context本文のテンプレートとなるコンテキストとレコードを指定→storeメール送信の記録を行うコンテキストを指定→attachmentメールにファイル添付を行う場合→f-optionUNIXでSMTPサーバーを経由しない場合にtrueを指定すると、fromの指定が有効→body-wrap右端の折り返しのバイト数（指定がないと72バイト）。0だと折り返ししない表5-2-2　send-mailキーの連想配列の値に設定する連想配列に設定可能なキー　メールの作成方法は、この後に演習を通じていくつかの事例を示しながら解説をします。宛先や送信者、本文は、対応するキーに対する値がそのまま出力されますが、コンテキストのレコードにあるフィールドの値をそこに入れ込むには「@@@フィールド名@@@」のような記述を使います。その部分がフィールドの値に置き換わってメール送信されます。また、メールの元データをデータベースに入れておき、それを利用することも可能です。　表の中のf-optionは、UNIXマシンのsendmailコマンドを使ってメールを送るときに、送信者を指定したのにもかかわらず、送信者が、www（あるいはApacheの稼働ユーザー）になってしまうようなときに指定をしてください。OSに組み込まれているメール送信コマンド等の動作に依存しますが、より確実に送信者の指定ができるはずです。　body-wrapは、長い行の折り返しを、Shift-JISのバイト数で指定します。なお、折り返しを入れますが、比較的追い込みを積極的に行うアルゴリズムを組み込んであります。→演習Post Onlyモードのページでメールを送信する　Post Onlyモードでは、アンケートなどで使われることが多いと思われます。そのとき、投稿した上で、確認のメールを出すということはよく行われます。そうした場面を想定して、3種類のメールの送信方法を紹介します。演習環境にメールサーバのコンテナを追加する1演習環境を作成したレポジトリ「IMApp_Trial」を特定して、ルートにあるdocker-compose.yamlファイル開きます。2ファイルの最後の5行の部分を特定します。mailhog: 以降の行が#によってコメントになっていますが、全てのコメントを外します。そして、ファイルを保存します。:\n    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_bin\n    ports:\n      - 127.0.0.1:13306:3306\n#  mailhog:\n#    image: mailhog/mailhog\n#    ports:\n#      - \"8025:8025\"\n#      - \"1025:1025\"3ターミナルを開き、レポジトリのルートをカレントディレクトリとして、以下のコマンド、つまりコンテナの構築コマンドを実行します。docker-compose up -dしばらく待つと、mailhogという名前のコンテナが新たに稼働します。このコンテナは、メールサーバの役割を持つコンテナですが、SMTPのリクエストを受け付けて、それをWebページで表示する機能を持ちます。実際にメールをインターネットに対して飛ばすことはないので、デバッグ等で安心して利用できます。コンテキストを定義ファイルに定義1ここからの作業は、Webブラウザー上で行います。ブラウザーで、「http://localhost:9080」に接続します。「トライアル用のページファイルと定義ファイル」というタイトルの部分を特定します。2「def12.phpを編集する」をクリックし、定義ファイルエディターでdef12.phpファイルを編集します。（もし、他の用途で12番目を利用しているのなら、例えば、def31.phpを利用するなど、別の番号のセットを使用してください。その場合ソースコードの記述が変わる部分がありますが、可能な限り注記します。）3Contextsの中のQueryと書かれた背景がグレーの部分を特定します。そして、その次の行の右の方にある「削除」をクリックして、Queryの設定がある行を削除します。4「レコードを本当に削除していいですか？」とたずねられるので、OKボタンをクリックします。5同様に、Sortingの次の行にある「削除」ボタンを押し、確認にOKボタンをクリックして、こちらの設定も削除しておきます。6name、table、viewに「survey」、keyを「id」とします。このコンテキストには他にテキストフィールドがありますが、すべて空白にします。Contextsのその他のテキストフィールドは空白にします。7Contextsのすぐ下にある「追加」ボタンをクリックして、コンテキスト定義をひとつ増やします。8nameに「survey_list」、table、viewに「survey」、keyを「id」、pagingを「true」、repeat-controlを「confirm-delete confirm-insert」、recordsを「10」、maxrecordsを「100」とします。その他のテキストフィールドは空白にします。9Database Settingsに設定を行います。[MySQL]の場合db-classは「PDO」のままでかまいません。dsnに「mysql:host=db;dbname=test_db;charset=utf8mb4」と入力します。そして、userに「web」、passwordに「password」と入力します。[FileMaker]の場合db-classを「FileMaker_DataAPI」に書き換えます。databaseは「TestDB」、userに「web」、passwordに「password」、serverに「gateway.docker.internal」、portに「443」、protocolに「https」、cert-vefifyingに「false」と入力します。10Debugについては、「false」にすると、デバッグ情報が出なくなります。なお、デバッグ情報をみながら動作を確認したい方は、「2」のままにしてこの後の作業を行ってください。Post Onlyモードのページファイルの作成1「http://localhost:9080」で開いたページに戻り「page12.htmlを編集する」をクリックし、ページファイルのpage12.htmlを編集するページファイルエディターが開きます。HTMLでの記述内容を以下のように変更します。太字が追加する箇所を示します。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;script type=\"text/javascript\" src=\"def12.php\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;table&gt;\n  &lt;tbody data-im-control=\"post\"&gt;\n    &lt;tr&gt;\n      &lt;th&gt;お名前&lt;/th&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"survey@Q1\"/&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;メールアドレス&lt;/th&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"survey@Q2\"/&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;ご意見&lt;/th&gt;\n      &lt;td&gt;&lt;textarea data-im=\"survey@Q3\"&gt;&lt;/textarea&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;&lt;/th&gt;\n      &lt;td&gt;&lt;button data-im-control=\"post\"&gt;送信&lt;/button&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n&lt;table&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;&lt;th&gt;お名前&lt;/th&gt;&lt;th&gt;メールアドレス&lt;/th&gt;&lt;th&gt;ご意見&lt;/th&gt;&lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;td data-im=\"survey_list@Q1\"&gt;&lt;/td&gt;\n      &lt;td data-im=\"survey_list@Q2\"&gt;&lt;/td&gt;\n      &lt;td data-im=\"survey_list@Q3\"&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;「http://localhost:9080」で開いたページに戻り「page12.htmlを表示するする」をクリックして、どのような画面になっているか確認してみてください。最初のテーブルは、Post Onlyモードで動作し、ボタンをクリックすると、surveyコンテキストに対して新たなレコードを作成します。2つ目のコンテキストは、単にsurveyコンテキストの全レコードを表示しているもので、入力したレコードの確認用です。送信者、送信先、本文がすべて一定のメールの設定　以下の演習では、メールアドレスを使用しますが、mailhogのコンテナを使っている限りは、メールアドレスに何を指定しても、実際にはメールは送られませんし、メールを送ったということをブラウザで確認できます。筆者の新居雅行のメールアドレスを記述しますが、そのまま指定しても構いませんし、ご自分のメールアドレスを指定されても構いません。1「def12.phpを編集する」をクリックして表示したタブあるいはウインドウに戻ります。もし、閉じていたら、「http://localhost:9080」で開いたページに戻り「def12.phpを編集する」をクリックして開きます。Definition File Editorのページが開きます。右上に表示されている「Show All」のボタンを押します。Context内に表示されている項目が全て表示されます。2surveyコンテキストの設定にあるSetting for Post-only Modeのpost-reconstructを「true」、post-dismiss-messageに「ありがとう」と入力します。post-dismiss-messageの文言はなんでもかまいません。データ送信を受けたことを示す簡潔な文言を入れてください。3surveyコンテキストのSend Email or Messagingの設定にある、createの見出しの下に入力します。fromとtoに「msyk@msyk.net」、subjectに「ご意見承りました」、bodyに「ありがとうございます。今後ともよろしくお願いします。」を入力します。f-optionを「true」に、body-wrapは「72」とします。Tabキーを押すなどして、確実に入力をしてください。4定義ファイルエディタでさらにスクロールして、OptionsのSMTP Settingsを表示します。ここでは送信用のメールサーバへの接続情報を指定します。serverに「mailhog」、portに「1025」と指定します。Tabキーを押すなどして、確実に入力をしてください。フォームの入力をきっかけとしてメール送信される1「http://localhost:9080」で開いたページに戻り、「page12.htmlを表示する」をクリックして表示したタブあるいはウインドウを表示します。2つのテーブルが見えています。上のPost Onlyモードのテーブルに、適当に入力します。ここで、メールアドレスの右のテキストフィールドには定義ファイルエディタで入力したものと異なるものを指定してください。ここで、「msyk@mac.com」と入力しました。2「送信」ボタンをクリックします。すると、まず、「送信」ボタンが消えて、コンテキストのpost-dismiss-messageキーに指定したメッセージがページ上に見えています。3さらに4秒後にページが更新され、下側のテーブルに、今入力したデータが見えています。4ブラウザでタブを新たに開いて、「http://localhost:8025」へ接続してください。mailhogコンテナが受け付けたメールがリストになって表示されています。5メールの項目をクリックして、内容を表示します。このメールは、コンテキスト定義のtoに指定したメールアドレス「msyk@msyk.net」に送られており、Post Onlyモードのテーブル内で入力したメールアドレス「msyk@mac.com」には送られていません。現在の設定では、メールの送り先は常にtoに指定したメールアドレスになります。また、本文や件名、送信者は常に固定された文字列です。データベースから得られた宛先を送信者にする1「def12.phpを編集する」をクリックして表示したタブあるいはウインドウに戻ります。もし、閉じていたら、「http://localhost:9080」で開いたページに戻り「def12.phpを編集する」をクリックして開きます。2すべての項目が表示されている状態でない場合には、定義ファイルエディターのページの最初にある「Show All」ボタンをクリックして、すべての項目を表示します。3surveyコンテキストのSend Email or Messagingの設定にある、createの見出しの下に入力します。toを「@@Q2@@」と入力します。この@@でフィールドを囲む表記はテンプレート処理です。@@Q2@@の部分が、Q2フィールドに入力されている値に置き換わることを意味します。Tabキーを押すなどして、確実に入力をしてください。4「http://localhost:9080」で開いたページに戻り、「page12.htmlを表示する」をクリックして表示したタブあるいはウインドウを表示します。2つのテーブルが見えています。上のPost Onlyモードのテーブルに、適当に入力します。ここで、メールアドレスの右のテキストフィールドには「msyk@mac.com」を入力しました。5「送信」ボタンをクリックします。5秒後にページが更新され、下側のテーブルに、今入力したデータが追加されています。6メールが到着しています。このメールは、Post Onlyモードのテーブル内で入力した「msyk@mac.com」宛に送られています。ここで、コンテキストに設定したtoが「@@Q2@@」、つまりQ2フィールドに入力した文字列であることを思い出してください。本文や件名、送信者はここでも常に固定された文字列ですが、いずれの設定にも@@を用いてフィールドに置き換える処理が記述可能です。メール本文に→テンプレートを使用する1IMApp_Trialによるコンテナのデータベースには、メールのテンプレートとなるテーブルと、サンプルのテンプレートメールがすでに入力されています。ターミナルから以下のコマンドを入力して、まず、MySQLへコマンドラインで接続します。mysql -u web -h 127.0.0.1 -P 13306 --password=password test_db2mysql &gt; のプロンプトが出てくることを確認して、以下のSQLコマンドを入力し、テンプレートのテーブルとレコードのデータを確認します。select * from mailtemplate;結果は以下の図のようになっています。bodyには改行が入っていて見づらいですが、idフィールドに「1」、to_fieldフィールドに「@@Q2@@」、from_fieldフィールドに「msyk@msyk.net」、subjectフィールドに「ご意見承りました」と入力されています。bodyフィールドを追ってみると、文字列の途中に@@Q1@@など、フィールド内容に置き換わるテンプレートの記述がなされています。3「def12.phpを編集する」をクリックして表示したタブあるいはウインドウに戻ります。もし、閉じていたら、「http://localhost:9080」で開いたページに戻り「def12.phpを編集する」をクリックして開きます。4Contextsのすぐ下にある「追加」ボタンをクリックして、コンテキスト定義をひとつ増やします。5追加されたコンテキストでは、nameに「mailtemplate」、table、viewに「mailtemplate」、keyを「id」、とします。その他のテキストフィールドは空白にします。6定義ファイルエディタがすべての項目が表示されている状態でない場合には、定義ファイルエディターのページの最初にある「Show All」ボタンをクリックして、すべての項目を表示します。7surveyコンテキストのSend Email or Messagingの設定にある、createの見出しの下に入力します。from、to、subject、bodyを空欄にします。そして、template-contextに「mailtemplate@id=1」と指定します。これは、メールテンプレートとして「mailtemplateコンテキストにある、idフィールドが1のレコードを利用する」ということを意味しています。Tabキーを押すなどして、確実に入力をしてください。8「http://localhost:9080」で開いたページに戻り、「page12.htmlを表示する」をクリックして表示したタブあるいはウインドウを表示します。2つのテーブルが見えています。上のPost Onlyモードのテーブルに、適当に入力します。ここで、メールアドレスの右のテキストフィールドには「msyk@mac.com」を指定しました。9「送信」ボタンをクリックします。5秒後にページが更新され、下側のテーブルに、今入力したデータが追加されています。10ブラウザで「http://localhost:8025」に接続して、メールが到着していることを確認します。このメールは、Post Onlyモードのテーブル内で入力した「msyk@mac.com」に送られています。ここで、コンテキストに設定したtoが「@@Q2@@」であり、つまりQ2フィールドに入力した文字列であることを思い出してください。現在の設定では、メールの送り先は、Post Onlyモードのテーブルで入力したQ2の文字列になります。このメールの本文は、mailtemplateテーブルのid=1のbodyフィールドの内容になっていますが、「@@フィールド名@@」の部分がフィールドの値に置き換わっています。つまり、新規作成したレコードのQ1フィールドが@@Q1@@、Q2フィールドが@@Q2@@、Q3フィールドが@@Q3@@の部分と置き換わって、メールの本文が作られています。このように、メールの本文は別に作ってある文面に、対象となるレコードの内容を差し込んで作成することができます。演習のまとめPost Onlyモードを利用してレコードを新規作成するときに、メールを送信する方法を演習を通じて学びました。送信者と件名は固定でしたが、宛先や本文を固定あるいはフィールドの値を利用する方法を説明しました。本文をテンプレートから抜き出してきて差し込む方法を学びました。本文をテンプレートとなるテキストファイルに記述する方法が実用的な意味で汎用性が高く、さまざまな文面を手早くシステムに組み込めて便利に使えるでしょう。→→SMTPサーバーを利用してメールを送信する　INTER-Mediatorでのメール送信は、Symphony MailerというPHPのライブラリを使用しています。SMTPに関する設定を与えない場合はPHPのmail関数を使って独自にエンコードしてメール送信しますが、現状のインターネット環境ではその利用方法はほとんどあり得ないと思われます。SMTPサーバ経由あるいはGmailやAmazon SESを利用するのが一般的でしょう。　SMTPサーバーを利用するための設定は、定義ファイルのオプション部分、あるいはparams.phpファイルに設定します。オプション部分に→smtpキーの要素を定義し、その値の連想配列の要素に表5-2-3のキーと対応する値を指定することで、SMTP通信を行ってメールのリレーを別のサーバーに依頼することができます。params.phpファイルでは、$sendMailSMTP変数に、表5-2-3のキーを持つ連想配列を代入します。キー対応する値→protocolメール送信のプロトコルで通常は'smtp'（Ver.11で実装）→portメール送信時に使用するサーバーのポート→encryption暗号化のプロトコルで、'ssl'ないしは'tls'（Ver.11で廃止）→usernameメール送信時に認証で使用するユーザー名→passwordメール送信時に認証で使用するパスワード表5-2-3　smtpキーの連想配列に設定可能なキー　定義ファイルエディターで実際に設定する場合は、ページの冒頭にある「Show All」ボタンをクリックして、全項目を表示します。すると、図5-2-1のように、Optionsの最後に設定項目が表示されるようになります。定義ファイルへの設定を直接行う場合は、リスト5-2-1にあるように、オプション領域に記述を行います。図5-2-1　stmpキーの値を設定した定義ファイル（定義ファイルエディター）リスト5-2-1　stmpキーの値を設定した定義ファイル（PHPでの記述）IM_Entry(\narray (\t// コンテキストの定義\n  array (\n    'name' =&gt; 'survey',\n\t:\n  ),\n),\narray (  // オプション設定\n  'smtp' =&gt;  array (\n    'protocol' =&gt; 'smtp',\n    'server' =&gt; 'mail.msyk.net',\n    'port' =&gt; 589,\n    'username' =&gt; 'msyk_test',\n    'password' =&gt; 'testpassword',\n  ),\n),\narray (  // データベース接続設定\n  'db-class' =&gt; 'PDO',\n\t:\n),\nfalse);　Symphony Mailerでは、SMTP以外のメール送信の方法にもサポートしています。このうち、→Gmailや→Amazon SESを利用する場合の設定方法を以下に示します。Gmailの場合のpasswordは、通常のパスワードではなく、別途発行するアプリパスワードです。Amazonの場合はIAMで発行したアカウントに対して生成されるアクセスキーとシークレットキーを指定します。なおSymphony Mailerの全てのプロトコルに対応してはいないので、これら以外のプロトコルの場合は必要なライブラリ等がインストールされているかなどを確認してください。必要なら、追加でインストールをしてください。リスト5-2-2　Google Gmailを利用する場合のparams.phpでの設定$sendMailSMTP = array(\n    \"protocol\" =&gt; \"gmail+smtp\",\n    \"username\" =&gt; \"msyk.nii83@gmail.com\",\n    \"password\" =&gt; \"himitsunoapripassword\",\n);リスト5-2-3　Amazon SESを利用する場合のparams.phpでの設定$sendMailSMTP = array(\n    \"protocol\" =&gt; \"ses+https\",\n    \"username\" =&gt; \"yourACCESSKEY\",\n    \"password\" =&gt; \"yourSECRETKEY\",\n);→メールのテンプレートを保存しておくテーブル　メールを→テンプレートから生成したい場合、テンプレートを表5-2-4のようなフィールド構成のテーブルに保存しておき、send-mailキー（messagingキー）以下の→template-contextキーに、そのテーブルからコンテキスト名を記述します。このコンテキストが定義されていて、読み出しが作成が可能な状況になっている必要があります。フィールド名はカスタマイズ等できないので、この名称を利用する必要があります。スキーマのサンプルでは、mailtemplateテーブルとして定義されています。フィールドに入れるべきデータについてはフィールド名を見れば明白です。フィールド名型idINT（主キー）to_fieldTEXTbcc_fieldTEXTcc_fieldTEXTfrom_fieldTEXTsubjectTEXTbodyTEXT表5-2-4　メールテンプレートとして利用可能なテーブルのフィールド構成　template-contextキーには、このテーブルのコンテキスト名に加えて、実際にテンプレートとして使用するレコードを指定します。ここで、コンテキストとして「mailtemplate」が定義されている場合、template-contextキーには「mailtemplate@id=1」のような記述を行います。@は決められた記号です。その後に、主キーフィールド名、イコールに続いて、該当するレコードのidフィールドの値を記述します。→メール送信結果を残す　→→メールの記録を残したい場合は、send-mailキー（messagingキー）以下の→storeキーに、そのコンテキスト名を記述します。このコンテキストは、表5-2-5のようなフィールドを持つテーブルであって、新規レコード作成が可能な状況になっている必要があります。フィールド名はカスタマイズ等できないので、この名称を利用する必要があります。スキーマのサンプルでは、maillogテーブルとして定義されています。フィールドにそれぞれ何が入るからはフィールド名から明白です。フィールド名型idINT（主キー）to_fieldTEXTbcc_fieldTEXTcc_fieldTEXTfrom_fieldTEXTsubjectTEXTbodyTEXTerrorsTEXTforeign_idINT（外部キー）表5-2-5　メール送信記録に利用可能なテーブルのフィールド構成　実際のテーブル定義では、レコード作成時の日付時刻が入るdtフィールドもありますが、INTER-Mediatorの基本機能で利用されるのは、図5-2-1のフィールドのみです。storeキーに指定したコンテキストに対してcreateオペレーションつまりレコード作成が行われます。ここで、relationキーを指定しておくことで、join-fieldキーのフィールドに対応する値が、foreign_idフィールドに入力されます。なお、foreign_idという名前である必要はなく、外部キーを設定するフィールドは、relationキーのforeign-keyキーの定義から取り出されます。また、storeキーに指定するコンテキストで、queryキーを指定すると、その検索条件が初期値として判定されて、それらのフィールドへの自動入力も可能になっています。→メール送信を伴う機能組み込みのパターン　このセクションの演習は、新規レコード作成とメール送信を連動させるという非常に分かりやすい事例を使いましたが、実際のアプリケーションではさまざまな状況でのメール送信のニーズが発生するでしょう。例えば、マネージャーが承認したら、関係者にメールが飛ぶといったような用途を考えてみましょう。このような場合、どのように機能を組み込めば良いのでしょう。もちろん、個別の事情によって異なると言えばその通りなのですが、いくつかの組み込みパターンがあり、それをヒントにすれば、機能の組み込み方法は見えているかもしれません。ここでは2つのパターンを紹介します。　まず、最初のパターンは「メール送信用のコンテキストを定義する」ということです。つまり、一覧を表示したり、レコードの修正を行うためのコンテキストとは独立したメール送信専用のコンテキストを作ります。何種類かメールがあれば、それぞれコンテキストを作ります。こうすれば、例えば、「承認」というのは、「メール送信用コンテキストを通じて特定のフィールド（例えば「承認日」）に現在の日付を入力する」というデータベースの操作に置き換えることができます。この操作は、JavaScriptの記述が便利なので、『6-3　データベースへの書き込みを直接行う』で具体的なサンプルを示します。こうして、特定の処理だけ、メールの送信を伴うコンテキスト上で処理を進めるということで、他の処理とメール処理が混同することはなくなります。　もうひとつのパターンは「メール送信コンテキストのviewキーの値を効果的に使う」ということです。メールの文面は、ファイルで用意したテンプレートを利用すると、長いものでも管理はしやすいでしょう。しかしながら、ここで問題になるのは、必要なフィールドの値をきちんとメールに含めることができるかどうかです。そのためには、メール作成時にどんなレコードが得られるかを知る必要があります。　新しいレコードを作成すると、その作成したレコードの主キー値を使って、viewキーで指定したテーブルやビューに対して検索をかけて、新規に作成したレコードを取り出し、そのフィールドの値をメール内の「@@フィールド名@@」の記述に置き換えることができます。このとき、新規レコードを作成したテーブルから検索をしてもいいのですが、SQL系のデータベースだとビューを定義することで、レコードを作成したテーブルにないフィールドも、関連付けを辿ってビューの結果に含めておくことで、メールに含めることができます。例えば、この演習ではメールアドレスを入力しましたが、顧客マスターのようなテーブルがあるなら、メールアドレスから名前や会社名を取り出して、それもメールに含めることも可能になります。そのためには、surveyテーブルと顧客マスターをJOINし、回答に加えてその顧客の名前や会社名、部署等をフィールドとして含むビューを作成します。こうした、メール専用のコンテキストで、メール専用のビューを作って使うということを行えば、別のテーブルの内容もメールに含めることができます。FileMakerの場合はレイアウトに、同一のTOG（テーブルオカレンスのグループ）に含まれるフィールドを配置することで、SQLのビューに近いことが可能です。　レコードの更新を行う場合、あるレコードのあるフィールドが更新されると、そのレコードの主キー値を使ってviewキーの値のテーブルあるいはビューに対して検索をかけて、得られたレコードをメールの文面に含めることができます。レコードの検索の場合は、検索結果の最初のレコードから、指定のフィールドが抜き出されます。そのため、レコードの検索を行った後、その結果情報をメール送信に含めたい場合には、検索結果が基本的にひとつに絞られるようなものでないと、正しく動作しないかもしれません。→メール送信のトラブルシューティング　メール送信のトラブルは、現実には単にキータイプミスという場合がほとんどではないかと思われますが、加えて、ネットワーク制限を認識しているかどうかという点も重要ではあります。しかしながら、トラブルに遭った方は「正しく設定しているはずなのに」という前提から抜け出せないことで、なかなか対処できないということにもなりがちです。ともかく、冷静かつ客観的に設定や状況を確認してください。「間違い」を除くと、以下のような原因が考えられます。そもそもサーバーにメール送信機能がない。その場合はサーバーの動作を変えるか、SMTPサーバーへ中継する。サーバーにメール送信機能はあるが送られない。その場合はサーバーの動作で何か設定が必要かもしれない。あるいはどこかでファイアウォールによってSMTP通信が遮断されていることが多い。文字化けする。その場合は定義ファイルやテンプレートのファイルがUTF-8でエンコードされているかどうかを確認する。送信者が指定通りにならない。その場合は、UNIX系OSなら、f-optionキーの値を「true」にする。SMTPサーバーを指定したが送られない。原因は別掲します。　SMTPやあるいは認証のトラブルはさらに複雑な設定が絡みます。うまく行かない場合には、以下のような原因が考えられます。サーバー名がまちがっている。INTER-Mediatorのサーバーと、SMTPサーバーの間で、利用するポートの通信ができるのかどうかをよく確認する。ポート番号が違っている。Gmailの送信機能は587です。そのほか、25なのか、587なのか、ないとは思われるが465なのか、よく確認する。ユーザー名、パスワードが違っている。正しいと思っている方こそ、絶対に違っています！と言い切れるほど、この手の間違いは多い。Gmailのユーザー名は、@を含むメールアドレス全てがユーザー名です。SMTPサーバーが送信者の制限を行っている。例えば、一般にプロバイダーは、契約しているドメインの送信者のメールしか送れません。任意のアドレスを送信者にできないのが一般的です。あなたの利用しているSMTPサーバーがブラックリストに入っている。未だにけっこう無意味な「怪しいホスト名リスト」にあるメールを拒否する設定をしている会社が、いくらかはあります。これは、送信できているけれども、受け入れてもらえないだけです。INTER-Mediatorやあるいは関連ライブラリの問題ではありません。→→Slackのタイムラインに投稿する　メール送信の代わりに、Slackへの投稿も可能です。まず、Slackへの投稿を行うには、「chat.postMessage」というAPIへの送信が可能なトークンを発行します。そのトークンと、投稿チャンネルに関して、params.phpファイルに以下のような設定を行います。なお、IM_Entry関数の第2引数（オプション変数）に対して、→slackキーに対する連想配列で、tokenとchannelキーを与えて指定しても構いません。オプション変数の方がparams.phpよりも優先されます。リスト5-2-4　SlackのAPI設定に関する設定→$slackParameters = [\n    \"token\" =&gt; 'xoxp-XXXXXXXXXXX-XXXXXXXXXXX-XXXXXXXXXXXX-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',\n    \"channel\" =&gt; 'message-posting-test',\n];　そして、コンテキスト定義側は、messagingキーの直下のdriverキーの値に \"slack\" を指定します。そして、read/create/updateのキーに続いて内容に関する配列を収めるのもメールと同様ですが、subjectとbodyのみしか対応していません。なお、「@@フィールド名@@」に対応したテンプレート処理は可能です。データベースのテーブルに用意したメッセージテンプレートには対応していません。　このようにSlack対応は基本的なもので、複雑なことはちょっとしづらいですが、メッセージングの機能のサンプルという意味合いもあります。ソースコードのsrc/php/Messaging/SendSlack.phpを見ていただくと大した内容ではないことお分かりいただけるので、機能アップしたり、あるいは別のメッセージングサービスに対応したクラスを作った場合は、ソースコードを投稿していただけると嬉しいです。→このセクションのまとめ　コンテキストを通じて、データベースから検索した後、データベースの内容を更新した後、新しいレコードを作成した後に、メールを送信することができます。メールの宛先や本文などを定義ファイルで指定できます。メールの本文や宛先は、データベースから得られたレコードのフィールドの値を利用できます。メールの本文をテンプレートとしてテキストファイルで用意して、そこにフィールドを埋め込むといったメールの作成方法も可能です。メールの送信には、同一サーバーにあるSMPTサーバーを利用したり、別のホストに対して認証SMTPで送信することもできます。また、Slackへの投稿も可能であり、メール送るだけでなく汎用的なメッセージの機能の組み込みができます。→5-3マルチクライアントでの同期→2つのクライアントで同一のレコードを表示しているとき、一方のクライアントで変更した結果を別のクライアントでも自動的に反映されるような動作が必要なときもあります。FileMakerでは当たり前に実現しているこうした機能は、Webアプリケーションで実装するには、通信処理などを含めてイチから構築しなければなりません。INTER-Mediatorには、変更結果を伝達する仕組みを搭載しているため、定義ファイルへの記述だけで実現できます。→→→クライアント間連動の仕組み　通常のWebサーバーとのやりとり、すなわちHTTPは、通信が終了したら切れてしまうという動作を行います。つなぎっぱなしにはできないので、サーバー上のデータが更新されたかどうかは、接続してみないと分かりません。一定時間ごとに接続するとしても、すぐに変更が分かるわけではありません。では、0.5秒ずつ接続するということでは、サーバーの負荷が大きくなり、パフォーマンスを損なう可能性もありますし、バッテリー動作ならば消費電力が大きくなり、不利です。　一方、インターネットの核となるTPC/IPは、通常はつなぎっぱなしができます。逆に言えば、HTTPはつないでは切るという動作をしているわけです。そこで、Webアプリケーションでもサーバーとつないだままにして、変化があったことだけを通知として受け取り、その後に必要なデータ処理を通常のHTTPで行うという仕組みが登場しました。それを、WebSocketと呼びます。INTER-Mediatorでは、Socket-IOというライブラリを利用して、WebSocketの機能を組み込んでいます。　同期処理を稼働させるには、サービスサーバ（『8-6　サービスサーバの役割と稼働』）の稼働が必要であり、既定値では稼働していません。以下の演習では稼働させる最小限の設定を紹介しますが、詳細については後の章で説明します。→管理用テーブルの作成　INTER-Mediatorはどのクライアントにどのテーブルのデータが配布されているのかを、データベースに記録します。そのために表5-3-1のようなテーブルが必要になりますので、アプリケーションでクライアント間同期の機能を利用する場合には、これらと同一名および同一フィルードを持つテーブルを作成してください。PDO対応のデータベースエンジンの場合は、INTER-Mediator/dist-docsファイルにあるサンプルデータベースのスキーマ（sample_schema_*.txtファイル）に、CREATE TABLE等で記述されたSQLがあるので、それを利用できます。なお、→registeredcontextテーブルのidフィールドと、registeredpksテーブルのcontext_idフィールドでリレーションシップが設定されています。テーブル名フィールド名型registeredcontextidINT AUTO_INCREMENT,clientidTEXTentityTEXTconditionsTEXTregistereddtDATETIMEregisteredpkscontext_idINTpkINT表5-3-1　クライアント同期の動作に必要なテーブル→演習クライアント間連携の動作を確認するクライアント間連携の機能を有効にする　演習環境では、クライアント連携の機能は有効になっていません。まず、サーバー側での設定の変更を行います。1Docker DesktopのContainersの画面で、php-apache_imというコンテナイメージを特定します。その行の右の方にあるOPEN IN TERMINALボタンをクリックして、ターミナルでコンテナの操作をできるようにします。ターミナルの新たなウインドウが表示されることを確認します。2このコンテナはエディタが入っていないので、エディタをインストールします。ここでは、nanoを以下のコマンドを入力してインストールすることにします。apt install nano -y3インストール後、設定ファイルを修正するために、nanoで開きます。以下のようにコマンドを入力します。cd /var/www/html/lib\nnano params.phpここで、params.phpファイルは最初から存在しているファイルで、ファイルの内容がnanoエディタで開かれていることを確認してください。4control+Vで、先に進みます。PHPの変数$notUseServiceServerに代入している箇所を特定してください。（前方向にスクロールするのはcontrol+Tです。）5変数$notUseServiceServerの値をfalseに、$activateClientServiceの値をtrueに変更します。:\n/* Service Server Behavior\n * ===================\n * Port number and host name for service server */\n$notUseServiceServer = false;  // Default is TRUE!. It has to set false to work every feature with Service Server.\n$activateClientService = true;  // Default is FLASE!.\n$serviceServerProtocol = \"ws\";  // The Service Server url components to connect from client.\n$serviceServerHost = \"\";    // \"\" for public ip address.\n:6保存して終了するために、control+Xを押します。保存するかどうかをたずねられるので「Y」で答えます。その後、保存するファイル名をたずねられ、読み出したファイルのparams.phpが見えているので、それを確認してEnterキーを押します。これで、変更結果が元のファイルに書き込まれました。7ブラウザーで、「http://localhost:9080」に接続します。すでに接続していれば、そのページを表示して、command+Rやcontrol+Rなどの操作で更新を行います。8少し時間がかかりますが、ページが出てきます。ページを最後までスクロールすると、INTER-Mediatorのバージョン表示のところに、Service Server:という項目が登場します。ここで、◆の色が赤い場合はService Serverが稼働していません。9もう一度command+Rやcontrol+Rなどの操作でページ更新を行います。すると、◆の色が緑色になりService Serverが稼働していることが確認できます。最初から◆の色が緑色であれば、最初からService Serverが起動しているので、それはそれで問題はありません。最初にService Serverが起動していないという表示が出ても、ほとんどの場合はService Serverは起動しています。サーバの起動が自動的になっていて、起動していない場合に自動起動する処理が状況によってはうまく稼働しないため、起動しているのに起動していないという判断をする場合もあります。なお、Service Serverはページを表示する毎に起動するのではなく、1度起動すればそれをずっと使い続けるので、最初にService Serverが起動しない点は通常の運用では問題にならないはずです。Webアプリケーションでクライアント間同期を有効にする　以下、Chapter 4で作成した「page01.html/def09.php」のWebアプリケーションに対して、クライアント間同期をできるように設定して動作を確認します。もし、このアプリケーションを作っていない場合には、「http://localhost:9080」で接続したページにある「サンプルプログラム」のリンクをクリックして、「Any Kinds of Samples」にある「Master-Detail Style Page」の「MySQL/MariaDB」の列にある「show」ボタンを押したページで確認をしてください。このサンプルは、ページ全体のコンテキストと、最初の繰り返し部分のコンテキストで同様な設定を行なっています。1「http://localhost:9080」に接続します。「トライアル用のページファイルと定義ファイル」というタイトルの部分を特定します。そこにある「def09.phpを編集する」をクリックします。すでに2つのコンテキストproductとitemが存在します。いずれのコンテキストでもsync-controlの部分に「create update delete」とキータイプをしてください。設定後、Tabキーを押すなどして、入力結果を確定させてください。sync-controlでは、ここで指定した3つのキーワードを指定でき、複数指定する場合は空白で分離します。指定した名称の操作について同期が行われます。このキーがない場合は同期処理は行われません。2「http://localhost:9080」で開いたページに戻り、「page09.htmlを表示する」をクリックして表示したタブあるいはウインドウを表示します。以前に作成した通りに表示されますが、ページ末尾のINTER-Mediatorのバージョン表示のところを見てください。緑色の◆はService Serverが稼働していることを示します。白色の➤は、ページに表示されているアプリケーションで、sync-controlの設定がなされていてクライアント間同期ができていることを示しています。編集結果が別のクライアントに伝達されることを確認する　クライアントの動作を確認するために、2つの異なるブラウザーを同時に起動します。SafariとFirefox、あるいはChromeとEdgeなど、INTER-Mediatorの稼働可能なブラウザーを演習環境が稼働しているOSで同時に起動します。これにより、異なるユーザーによる接続と同じ状況になります。なお、ひとつのブラウザーでウインドウが違うという状況では、厳密には「別のクライアント」と同等ではないので、2つのブラウザーを稼働させてください。1すでにSafariで「http://localhost:9080」に接続しています。続いて、ここではChromeを起動したとします。2Safariで見えているページのURLをアドレスバーでコピーし、Chromeのアドレスバーにペーストして、それぞれのブラウザで同一のページを参照します。以下の図では、手前のウインドウがSafari、背後のウインドウがChromeです。この段階では、当然ながら同一のデータがそれぞれのウインドウで見えています。3変更可能なフィールドのひとつを修正してみます。ここでは、unitpriceのフィールドの値を変更してみます。手前のSafariで、unitpriceの値を変更しました。ここでは、まだ数値を変更しただけなので、背後のブラウザーでは表示内容に変更はありません。4Tabキーを押して、修正結果を確定します。すると、背後のブラウザーの同一のフィールドが、修正後の値に自動的に変更されました。つまり、あるクライアントでの変更結果は、他のクライアントにも伝達されたということになります。レコード追加が別のクライアントに伝達されることを確認する1手前のSafariで、明細行の下にある「追加」ボタンをクリックします。「レコードを本当に作成していいですか？」とたずねられるので、OKボタンをクリックします。2手前のウインドウでは新たに明細行が追加されましたが、背後のウインドウでも自動的に明細行が追加されています。つまり、あるクライアントでレコードを作成すれば、その作成されたレコードは他のクライアント側でも認識されたということです。3追加された明細行にあるフィールドに適当な数値を入力してEnterを押すなどして確定してみました。これによりデータベースに入力した数値が記録されますが、配置のChromeの同一のフィールドでも、入力した値が自動的に入力されており、Safariでの編集結果がChrome側にも自動的に伝達されたことがわかります。レコード削除が別のクライアントに伝達されることを確認する1ページ上部のページネーションを操作して、どちらのウインドウにも同一のページが見えるようにします。ここでは、idが2のレコードを見えるようにしました。2手前のSafariでページネーションにある「レコード削除：product」ボタンで削除します。削除の可否が確認されるので、OKボタンで応答して実際に削除します。3手前のウインドウではid=2のレコードが削除されたので、ひとつ後ろのid=3のレコードが見えています。背後のウインドウでは、単にid=2のレコードが消えて存在しないので、何も表示されていない状態になりました。削除の伝達ではこういう状況にもなり得ます。演習のまとめ複数のクライアントで編集結果のリアルタイム同期を実装してあります。利用するデータベースにはいくつかのテーブルが仕様に従って定義されている必要があります。サーバ側では、Service Serverが稼働している必要があります。既定の状態では稼働していないので、params.phpファイルを変更して起動するようにします。アプリケーションで編集結果の同期ができるようにするためには、コンテキストごとにsync-controlキーの値を指定して、どの更新処理に対して同期をするのかを指定する必要があります。これがない場合は、同期処理は行われません。→同期処理への割り込み　クライアント同期により、伝達してきたクライアント側では、以下の6つの関数をJavaScriptで定義できます。メソッド名を見てわかるように、Create/Update/Deleteのそれぞれのオペレーションの前後つまりBefore/Afterに呼び出されます。クライアントでは、Beforeが呼び出され、更新処理を行い、Afterが呼び出されるようになります。Beforeが付くメソッドでは、引き続く処理を実行するためにはtrueを返します。逆にfalseを返すと、そこでクライアント同期の処理は停止します。引数dは、同期情報に関するオブジェクト（例：{entity: \"item\", field: [\"product_unitprice\"], 'justnotify: false, pkvalue: [\"3\"], value: [\"30\"]}）が設定されて呼び出されます。リスト5-3-1　同期処理のカスタマイズが可能なメソッドINTERMediatorOnPage.syncBeforeUpdate = (d) =&gt; {}\nINTERMediatorOnPage.syncAfterUpdate = (d) =&gt; {}\nINTERMediatorOnPage.syncBeforeCreate = (d) =&gt; {}\nINTERMediatorOnPage.syncAfterCreate = (d) =&gt; {}\nINTERMediatorOnPage.syncBeforeDelete = (d) =&gt; {}\nINTERMediatorOnPage.syncAfterDelete = (d) =&gt; {}→このセクションのまとめ　複数のクライアント間で、編集やレコード作成、削除の結果をリアルタイムに反映させる仕組みをINTER-Mediatorは持っています。作成したWebアプリケーションは、更新のどの処理を同期させるかを指定することで、そのコンテキストに対する更新処理を別のクライアントに同期ができるようになります。→5-4JavaScriptコンポーネントの利用現在、Webアプリケーションの機能を拡張するために、JavaScriptで作られた部品（コンポーネント）が盛んに使われています。INTER-Mediatorでも、→→JavaScriptのコンポーネントを利用して、データベースの内容を表示したり、あるいは修正結果をフィールドに描き戻すことができます。これらの機能の基本的な利用方法を説明します。また、ファイルのアップロードとアップロードした結果を表示する方法についてもこのセクションで説明します。→JavaScriptのコンポーネントを利用する　多種多様なJavaScriptのコンポーネントがオープンソースで配布されています。ライセンス形態はMIT Licenseのものも多く、気軽にサイトで利用している人も多いでしょう。代表的なものといえばjQueryやあるいはそれをベースにしたユーザーインターフェース素材のjQueryUIなどがあります。まず、INTER-Mediatorでは、これら別途開発されたコンポーネントを活用し、テキストフィールドなどと同様に、データベースの値を表示したり、あるいは編集した結果をデータベースに更新する仕組みを組み込むことができます。既存のコンポーネントを利用する場合は、そのコンポーネントに対する「アダプター」を作成しなければなりません。INTER-Mediator Ver.10現在では、jQueryUIの→DatePickerや→File Upload、→HTMLエディターの→TinyMCE、→ソースコードエディターの→CodeMirrorのアダプターなどが付属しています。これら以外の素材を利用する場合には、独自にアダプターを開発しなければなりません。アダプターの開発方法は、『6-6　JavaScriptコンポーネント用のアダプターの開発方法』で説明をします。INTER-Mediatorには独自のユーザーインターフェース用部品も搭載されています。　これらのJavaScriptコンポーネントを利用するには、タグ要素に→data-im-widget属性を記述します。この属性の値は、それぞれのアダプターで定義された文字列を指定します。なお、設定可能なタグ要素はなんでもいいわけではなく、原則として、そのコンポーネントごとに決められています。例えば、jQueryUIのDatePickerは、テキストフィールドの要素に対して指定します。　実際の試用方法は、演習で具体的に説明しましょう。→→→アップロードしたファイルのパスの扱い　ファイルのアップロードを、『5-4　JavaScriptコンポーネントの利用』などのJavaScriptコンポーネントを使った方法で実現したとき、レコードに対してユーザー単位でのアクセス権を設定している場合の動作に関する設定が、params.phpに設定する変数$uploadFilePathModeです。例えばコンテキスト「files」があり、キーフィールドが「id」で、idフィールドの値が「56」のレコードに対してファイルのアップロードをしたとします。その時のアップロードコンポーネントにバインドしているフィールドが「path」であったとします。すると、ファイルは定義ファイルのIM_Entryに記述した2つ目の引数にあるmedia-root-dirキーのパスに加えて、Linuxサーバーの場合は「files/id=56/path」という相対パスを付与したディレクトリにアップロードしたファイルを保存します。この時、$uploadFilePathModeを未指定、あるいは\"\"にすると、パスの区切り文字列以外はPHPのurlencode関数でエンコードします。したがって、フィールド名が日本語だと、パスにその日本語が見えないことになります。これは、UTF-8での冗長なエンコーディングによるディレクトリを遡る処理を許してしまうセキュリティホールを回避するものです。INTER-Mediatorでは相対パスに含むドット文字はアンダーラインに変換しますが、→冗長なエンコーディングによりそれが回避される可能性があるので、このような措置にしています。しかしながら、ディレクトリ名を日本語で見たいという場合もあります。その時は、$uploadFilePathModeに\"assjis\"あるいは\"asucs4\"を指定してください。そうすれば、mb_stringを利用して、文字列を一度Shift JISあるいはUCS-4に変換し、さらにUTF-8に戻すことによって、不正であるとされている冗長なエンコーディングの文字が正しいエンコードになります。こうして安全かつ日本語でディレクトリ名が見える状況にもできるようになっています。→演習→ファイルアップロードのコンポーネントを利用する　INTER-Mediatorに組み込まれているファイルのアップロードのコンポーネントの利用方法を説明します。なお、アップロードにおいては、いろいろな準備が必要ですし、アップロードしたファイルを参照する方法も知っておく必要があります。これらをまとめて、この演習で説明をします。　また、PHPの環境上の制限で現在の標準設定では1.5MB程度が上限となり、演習環境はその設定を変更していません。それ以上のファイルをアップロードしようとしても、制限を超えているというメッセージが表示されてアップロード作業は完了しません。アプリケーションを実際に作るとき、精細な写真を貼付したい、あるいは動画を保存しておきたいときなど、業務上、どうしても大きなファイルを添付しなければならないという場合は、PHPの環境設定ファイルを書き直すなどの対応が可能です。方法は、『9-4　INTER-Mediatorを利用する開発プロセス』で説明します。2つのコンテキストを定義ファイルに定義1ここからの作業は、Webブラウザー上で行います。まず、演習環境を起動します（『1-2　演習を行うための準備』を参照）。続いて、ブラウザーで、「http://localhost:9080」に接続します。「トライアル用のページファイルと定義ファイル」というタイトルの部分を特定します。2「def13.phpを編集する」をクリックし、定義ファイルエディターでdef13.phpファイルを編集します。（もし、他の用途で13番目を利用しているのなら、例えば、def21.phpを利用するなど、別の番号のセットを使用してください。その場合ソースコードの記述が変わる部分がありますが、可能な限り注記します。）3Contextsの中のQueryと書かれた背景がグレーの部分を特定します。そして、その次の行の右の方にある「削除」をクリックして、Queryの設定がある行を削除します。4「レコードを本当に削除していいですか？」とたずねられるので、OKボタンをクリックします。5同様に、Sortingの次の行にある「削除」ボタンを押し、確認にOKボタンをクリックして、こちらの設定も削除しておきます。6name、view、tableに「testtable」、keyを「id」、pagingを「true」、repeat-controlを「confirm-insert confirm-delete」、recordsを「10」、maxrecordsを「100」とします。Contextsのその他のテキストフィールドは空白にします。7Optionsのセクションにある、media-root-dirに「/var/www」と入力します。入力結果を確定させるために、Tabキーを押すなどしてください。サーバー上では、media-root-dirキーで指定したパス以下にアップロードしたファイルが保存されます。この演習では、/var/wwwを利用します。実際のアプリケーション運用時は、適切なディレクトリを指定しますが、一般にはWebサーバーで公開していない範囲にディレクトリを作ります。また、Webサーバーのユーザーが読み書き権限があるように、ディレクトリのアクセス権を設定する必要があります。8Database Settingsに設定を行います。[MySQL]の場合db-classは「PDO」のままでかまいません。dsnに「mysql:host=db;dbname=test_db;charset=utf8mb4」と入力します。そして、userに「web」、passwordに「password」と入力します。[FileMaker]の場合db-classを「FileMaker_DataAPI」に書き換えます。databaseは「TestDB」、userに「web」、passwordに「password」、serverに「gateway.docker.internal」、portに「443」、protocolに「https」、cert-vefifyingに「false」と入力します。9Debugについては、「false」にすると、デバッグ情報が出なくなります。なお、デバッグ情報をみながら動作を確認したい方は、「2」のままにしてこの後の作業を行ってください。ページファイルの作成と表示1「http://localhost:9080」で開いたページに戻り「page13.htmlを編集する」をクリックし、ページファイルのpage13.htmlを編集するページファイルエディターが開きます。HTMLでの記述内容を以下のように変更します。太字が追加する箇所を示します。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;meta http-equiv=\"content-type\" content=\"text/html;charset=UTF-8\"/&gt;\n  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt;\n  &lt;!-- Loading JQuery --&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-3.5.1.js\"&gt;&lt;/script&gt;\n  &lt;!-- Loading Bootstrap --&gt;\n  &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css\"&gt;\n  &lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js\"&gt;&lt;/script&gt;\n  &lt;!-- Loading JQuery UI FileUpload --&gt;\n  &lt;link href=\"https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.13.2/jquery-ui.min.css\" rel=\"stylesheet\"&gt;\n  &lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/blueimp-file-upload/10.32.0/css/jquery.fileupload.min.css\"/&gt;\n  &lt;script src=\"https://code.jquery.com/ui/1.13.2/jquery-ui.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/blueimp-file-upload/10.32.0/js/jquery.fileupload.min.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/blueimp-file-upload/10.32.0/js/jquery.fileupload-jquery-ui.min.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/blueimp-file-upload/10.32.0/js/jquery.fileupload-process.min.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/blueimp-file-upload/10.32.0/js/jquery.fileupload-image.min.js\"&gt;&lt;/script&gt;\n  &lt;!-- Loading INTER-Mediator --&gt;\n  &lt;script src=\"def13.php\"&gt;&lt;/script&gt;\n  &lt;script src=\"/vendor/inter-mediator/inter-mediator/node_modules/inter-mediator-plugin-jqueryfileupload/index.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n&lt;table&gt;\n    &lt;thead&gt;\n    &lt;tr&gt;\n        &lt;th&gt;File Upload&lt;/th&gt;\n        &lt;th&gt;Path&lt;/th&gt;\n        &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n    &lt;tr&gt;\n        &lt;td data-im=\"testtable@text1\" data-im-widget=\"jquery_fileupload\"&gt;&lt;/td&gt;\n        &lt;td data-im=\"testtable@text1\"&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;ヘッダー部のLINKおよびSCRIPTタグのパスが長く見づらいですが、正しく入力してください。これらは、jQueryやBootstrap、jQueryUI、およびそれらのテーマを読み込む部分です。INTER-Mediatorで用意しているJQueryUIのDatePicker向けアダプターは、node_modulesフォルダにあるinter-mediator-plugin-jqueryfileuploadフォルダにあります。すなわち、composerによるインストールやアップデートの後に実行されるnpmコマンドによってインストールされるものです。タグ要素にdata-im-widget属性があり、「jquery_fileupload」という値が設定されている箇所がポイントです。ここに、JavaScriptのコンポーネントが展開されて、ファイルのアップロード機能が利用できるようになります。text1はTEXT型のフィールドです。ファイルアップロードのコンポーネントは、このように、テキスト型のフィールドとバインドした要素に記述します。この例では、TDタグに記述しています。TDタグはセルの表示はできますが、編集はできません。しかしながら、コンポーネントがその内部に必要な要素を用意するので「ファイルのドラッグ&amp;ドロップの受付」ができるのです。しかし、単にアップロードするだけではアプリケーションとしては成り立たず、そのファイルを後から活用する必要があります。そのために、アップロードしたファイルのパスを保存するテキスト型のフィールドとのバインドを必要とします。実際にファイルをアップロードしてみる1「page13.htmlを開く」をクリックして表示したタブあるいはウインドウに戻り、ブラウザーの更新ボタン等でページを再読み込みします。もし、閉じていたら、「http://localhost:9080」で開いたページに戻り「page13.htmlを開く」をクリックして開きます。ページが表示されます。レコードが存在すれば「ファイル選択」ボタンが見えるはずです。レコードがない場合は、ページネーションの「レコード追加：testtable」をクリックして、レコードを新たに作成しておきます。2「ファイル」選択ボタンをクリックします。すると、ファイルを指定するダイアログボックスが表示されます。適当な画像ファイルを指定して、Uploadボタンをクリックします。ファイルサイズに制限がありますので、1MB程度のファイルを使って下さい。なお、この上限サイズは変更可能です（『9-4　INTER-Mediatorを利用する開発プロセス』）。3ファイルを指定すると、「ファイル選択」ボタンの直下に選択したファイルのファイル名が見え、「アップロード」ボタンが表示されます。まだ、ファイルはアップロードされていません。ここで、「アップロード」ボタンをクリックすることで、実際にファイルをサーバーに送信します。4ファイルのアップロードはすぐに終わります。「アップロード」ボタンは消えて、「ファイル選択」ボタンだけが表示されています。つまり、初期状態に戻りしました。表の2列目にはtext1フィールドを表示しました。そこには、アップロードしたファイルの相対パスが入力されていますが、このパスの入力もコンポーネントが自動的に行います。アップロードした結果の確認　ファイルがアップロードされた結果を、演習環境上で確認をします。1Docker DesktopのContainersの画面で、php-apache_imというコンテナイメージを特定します。その行の右の方にあるOPEN IN TERMINALボタンをクリックして、ターミナルでコンテナの操作をできるようにします。ターミナルの新たなウインドウが表示されることを確認します。（以下の図は、このステップをいくつか進んでコマンドを入力した結果が見えています。）2まず、次のようなコマンドを打ち込んで、media-root-dirに指定したパスをカレントディレクトリにします。cd /var/www3次のようなコマンドを打ち込んで、ディレクトリにあるファイルの一覧を表示します。ここでは、testtable、つまりコンテキスト名のディレクトリが存在することを確認します。ls -l4次のようなコマンドを打ち込んで、testtableディレクトリにあるすべてのファイルの相対パスを一覧表示します。id=2は、このコンテキストで、id=2によって特定できるレコードに関するファイルがあるディレクトリであることを示しています。続くtext1は対応するフィールドを示しています。data-im-widgetを書き込んだ要素のdata-im属性がtesttable@text1となっていることを思い出してください。find testtabletesttableディレクトリ以下は、コンテキスト名（testtable）、keyキーで指定した主キーフィールドを含むレコードを特定する条件式（id=1）、フィールド名（text1）とディレクトリが階層的に構成され、最後に画像ファイルが見えていて、アップロードしたファイルをここに保持したことが分かります。ドラッグ&amp;ドロップしたときに、text1フィールドに入力されたパスのテキストが、この画像ファイルのパスになっていることを確認してください。もともと、ここにドラッグ&amp;ドロップした画像のファイル名は「313.jpg」でしたが、アップロード時にファイル名に4桁のランダムな数字（ここでは「6317」）を付与し、既存のファイルの上書きがなされないようにしています。アップロードしたファイルの履歴を残す　ここまでの方法では、あるレコードのあるフィールドに対して、アップロードしたファイルのうち、最後のファイルへのパスだけがデータベースに残っていました。さらに発展させて、ファイルをアップロードした履歴も残すようにします。1「def13.phpを開く」をクリックして表示したタブあるいはウインドウに戻り、ブラウザーの更新ボタン等でページを再読み込みします。もし、閉じていたら、「http://localhost:9080」で開いたページに戻り「def13.phpを開く」をクリックして開きます。2Contextsのすぐ下にある「追加」ボタンをクリックして、コンテキスト定義をひとつ増やします。3name、table、viewに「fileupload」、keyを「id」します。その他のテキストフィールドは空白にします。4Relationshipのすぐ下の「追加」ボタンをクリックして、設定項目を増やし、foreign-keyを「f_id」、join-fieldを「id」、operatorを「=」、portalを空白とします。5定義ファイルエディターの一番最初にあるShow Allボタンをクリックして、すべての設定項目を表示します。6既存のコンテキスト（testtable）で、File Uploadingと記述された部分の下にある「追加」ボタンをクリックします。7新たに追加された項目で、fieldを「text1」、contextを「fileupload」、containerを空欄とします。8「page13.htmlを編集する」をクリックして表示したタブあるいはウインドウに戻ります。もし、閉じていたら、「http://localhost:9080」で開いたページに戻り「page13.htmlを編集する」をクリックして開きます。9次のように、ページファイルのコードを修正します。テーブルに、新たにfileuploadコンテキストを展開するテーブルを定義します。&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n\t\t:\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n&lt;table&gt;\n    &lt;thead&gt;\n    &lt;tr&gt;\n        &lt;th&gt;File Upload&lt;/th&gt;\n        &lt;th&gt;Path&lt;/th&gt;\n        &lt;th&gt;fileupload&lt;/th&gt;\n        &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n    &lt;tr&gt;\n        &lt;td data-im=\"testtable@text1\" data-im-widget=\"jquery_fileupload\"&gt;&lt;/td&gt;\n        &lt;td data-im=\"testtable@text1\"&gt;&lt;/td&gt;\n        &lt;td&gt;\n            &lt;table&gt;\n                &lt;tbody&gt;\n                &lt;tr&gt;\n                    &lt;td data-im=\"fileupload@path\"&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;/tbody&gt;\n            &lt;/table&gt;\n        &lt;/td&gt;\n        &lt;td&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;10「page13.htmlを開く」をクリックして表示したタブあるいはウインドウに戻り、ブラウザーの更新ボタン等でページを再読み込みします。もし、閉じていたら、「http://localhost:9080」で開いたページに戻り「page13.htmlを開く」をクリックして開きます。11ページネーションのコントローラーにある「レコード追加」のボタンをクリックして、新たにレコードを追加します。12新しく作られたレコードの「ファイル選択」ボタンをクリックして、ファイルを指定します。ファイルを指定すると、「アップロード」ボタンが見えるようになります。13「アップロード」ボタンを押してアップロードが終了すると、パスが2つ追加されました。左側がTD要素に展開したtext1フィールドで、右側はfileuploadコンテキストのpathフィールドです。14同じレコードの「ファイル選択」ボタンをクリックしてファイルを指定して「アップロード」ボタンを押し、さらにファイルを追加します。text1フィールドは最新のファイルのパスのみが残っていますが、fileuploadコンテキスト側では、アップロードしたファイルのパスを随時記憶しています。15ファイルが保存されている様子を確認します。Docker DesktopのContainersの画面で、php-apache_imというコンテナイメージを特定します。その行の右の方にあるOPEN IN TERMINALボタンをクリックして、ターミナルでコンテナの操作をできるようにします。ターミナルの新たなウインドウが表示されることを確認します。16以下のようにコマンドを打ち込んで、アップロードされたファイルなどを一覧します。cd /var/www\nfind testtable例えば、次のようにファイル一覧が表示されます。id=3の新しいレコードに対して、text1にバインドした要素にあるアップロードボタンから、3つのファイルがアップロードされて、それぞれがファイルに残っていることが分かります。text1フィールドには最後のP1100099_3235.JPGしか残っていませんが、fileuploadコンテキストのテーブルには、この3つのパスがいずれも残っています。# find testtable\ntesttable\ntesttable/id=3\ntesttable/id=3/text1\ntesttable/id=3/text1/P1100099_3235.JPG\ntesttable/id=3/text1/child-msyk_4518.png\ntesttable/id=3/text1/NII-2_8482.jpg\ntesttable/id=2\ntesttable/id=2/text1\ntesttable/id=2/text1/313_6317.jpg-->アップロードしたファイルをページに表示する　ファイルがアップロードできるようになりましたが、それだけではファイルが取り扱えません。今度は、コンポーネントでアップロードしたファイルを、Webページの中で表示する方法を説明します。なお、この方法は、アップロードのコンポーネントを使わないでアップロードしたファイルについても適用できる手法です。1「page13.htmlを編集する」をクリックして表示したタブあるいはウインドウに戻ります。もし、閉じていたら、「http://localhost:9080」で開いたページに戻り「page13.htmlを編集する」をクリックして開きます。2次のように、ページファイルのコードを修正します。fileuploadコンテキストを展開するテーブルに、さらに画像を表示するIMGタグを追加します。&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n\t\t:\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n&lt;table&gt;\n    &lt;thead&gt;\n    &lt;tr&gt;\n        &lt;th&gt;File Upload&lt;/th&gt;\n        &lt;th&gt;Path&lt;/th&gt;\n        &lt;th&gt;fileupload&lt;/th&gt;\n        &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n    &lt;tr&gt;\n        &lt;td data-im=\"testtable@text1\" data-im-widget=\"jquery_fileupload\"&gt;&lt;/td&gt;\n        &lt;td data-im=\"testtable@text1\"&gt;&lt;/td&gt;\n        &lt;td&gt;\n            &lt;table&gt;\n                &lt;tbody&gt;\n                &lt;tr&gt;\n                    &lt;td data-im=\"fileupload@path\"&gt;&lt;/td&gt;\n                    &lt;td&gt;&lt;img style=\"height: 50px\" src=\"def13.php?media=\"\n                        data-im=\"fileupload@path@#src\"&gt;\n                    &lt;/td&gt;\n                &lt;/tr&gt;\n                &lt;/tbody&gt;\n            &lt;/table&gt;\n        &lt;/td&gt;\n        &lt;td&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;IMGタグのsrc属性は「定義ファイル?media=」で記述し、=以降は、ファイルの存在するパスを、media-root-dirキーの値のディレクトリからの相対パスで指定します。このパスはpathフィールドに入っています。ターゲット指定に#をつけることで、pathフィールドの値を現在のsrc属性の後につなげます。3「page13.htmlを開く」をクリックして表示したタブあるいはウインドウに戻り、ブラウザーの更新ボタン等でページを再読み込みします。もし、閉じていたら、「http://localhost:9080」で開いたページに戻り「page13.htmlを開く」をクリックして開きます。読み込んだ画像がページ上に見えています。演習のまとめファイルのアップロードのためのコンポーネントが用意されており、data-im-widget属性に「jquery_fileupload」を指定すると、利用できます。ただし、アップロードできるファイルサイズの上限は演習環境では約2MBまでです。この制限を大きくすることもできます（『9-4　INTER-Mediatorを利用する開発プロセス』を参照）。data-im-widget属性は、テキストを保存するフィールドにバインドしたタグ要素に指定します。そのフィールドにはアップロードしたファイルへのパスが設定されます。アップロードされたファイルは、media-root-dirキーで指定したパス以下、コンテキスト名、レコードを特定する条件、フィールド名と続くディレクトリが作られ、そこに保存されます。アップロードされたファイルのファイル名に4桁のランダムな値が付与され、同一ファイル名を持つファイルがアップロードされても上書きされないようにしています。アップロードの履歴を別テーブルに残すこともできます。→ファイルアップロードのその他の機能　ファイルのアップロード履歴を、演習ではfileuploadコンテキストのテーブルに残していました。このテーブルの構成としては、pathという名前のテキスト型フィールドが必要ですが、その他は自由に設定可能です。relationキーによるリレーションシップが定義されていますが、演習のような設定をした場合には、fileuploadコンテキストのテーブルには、外部キーとなるf_idフィールドが必要です。また、この演習では設定していませんが、レコード作成日時を自動的に設定するタイムスタンプのフィールドを確保し、現在の日時を既定値にすれば、ファイルをアップロードした日時が分かります。　jquery_fileuploadコンポーネントは、ファイルを選択したときに→プレビューが表示されるようになっていますが、もし、プレビューを表示せず、ファイル名だけを表示したいのであれば、JavaScriptのプロパティで指定可能です。「IMParts_Catalog.jquery_fileupload.→isShowPreview = false」といったコードを、INTERMediatorOnPage.doAfterConstructで実行する関数の中に入れておけば良いでしょう。→その他の付属のコンポーネント　ファイルのアップロードは演習で見たように、jQueryなどの別のソフトウェアのインストールが必要です。これらの使用方法については、INTER-Mediatorにあるサンプルを参照してください。ディレクトリはレポジトリのルートからだと、samples/Sample_webpage/で、表5-4-1〜表5-4-7のようなファイルを参照してください。サンプルファイルのリンクページにも、これらのサンプルへのリンクは存在します。TinyMCEなど、アダプターが利用するコンポーネント本体は、ページファイルのヘッダーで、スタイルシートファイルやJavaScriptのファイルを、適切なパスを指定して読み込む必要があります。パスを指定しますので、必ずしもページファイルと同じ階層に存在する必要はありません。別のディレクトリにあっても参照ができれば問題はありません。また、コンポーネント自体は別レポジトリで管理しています。コンポーネントTinyMCEレポジトリhttps://github.com/inter-mediator/inter-mediator-plugin-tinymcedata-im-widgetの値tinymceページファイルsamples/Sample_webpage/tinymce_MySQL.html定義ファイルsamples/Sample_webpage/include_MySQL.php表5-4-1　サンプルにあるJavaScriptコンポーネント「TinyMCE」コンポーネントCodeMirrorレポジトリhttps://github.com/inter-mediator/inter-mediator-plugin-codemirrordata-im-widgetの値codemirrorページファイルsamples/Sample_webpage/codemirror_MySQL.php定義ファイルsamples/Sample_webpage/include_MySQL.php表5-4-2　サンプルにあるJavaScriptコンポーネント「CodeMirror」コンポーネントjQuery DatePickerレポジトリhttps://github.com/inter-mediator/inter-mediator-plugin-jquerydatepickerdata-im-widgetの値jquery_datepickerページファイルsamples/Sample_webpage/jquery_datepicker_MySQL.php定義ファイルsamples/Sample_webpage/include_MySQL.php表5-4-3　サンプルにあるJavaScriptコンポーネント「jQuery DatePicker」コンポーネントflatpickr（日付と時刻を同時に設定可能なコンポーネント）レポジトリhttps://github.com/inter-mediator/inter-mediator-plugin-flatpickrdata-im-widgetの値flatpickrページファイルsamples/Sample_webpage/flatpickr_MySQL.html定義ファイルsamples/Sample_webpage/include_MySQL.php表5-4-4　サンプルにあるJavaScriptコンポーネント「flatpickr」コンポーネントjQuery DatePickerレポジトリhttps://github.com/inter-mediator/inter-mediator-plugin-jqueryfileuploaddata-im-widgetの値jquery_fileuploadページファイルsamples/Sample_webpage/fileupload_jQuery_MySQL.html（他にもあり）定義ファイルsamples/Sample_webpage/include_MySQL.php表5-4-5　サンプルにあるJavaScriptコンポーネント「jQuery File Upload」コンポーネントPopup Selector（ポップアップメニュー。独自開発）レポジトリhttps://github.com/inter-mediator/inter-mediator-plugin-popupselectordata-im-widgetの値popupselectorページファイルsamples/Sample_webpage/popuselector_MySQL.html定義ファイルsamples/Sample_webpage/include_MySQL.php表5-4-6　サンプルにあるJavaScriptコンポーネント「Popup Selector」コンポーネントJSON Formatter（JSONを整えて表示する。独自開発）レポジトリhttps://github.com/inter-mediator/inter-mediator-plugin-jsonformatterdata-im-widgetの値jsonformatterページファイルなし定義ファイルなし表5-4-7　サンプルにあるJavaScriptコンポーネント「JSON Formatter」コンポーネントMermaidレポジトリhttps://github.com/inter-mediator/inter-mediator-plugin-mermaiddata-im-widgetの値mermaidページファイルsamples/Sample_webpage/mermaid_MySQL.html定義ファイルsamples/Sample_webpage/include_MySQL.php表5-4-8　サンプルにあるJavaScriptコンポーネント「Mermaid」コンポーネントQRCodeレポジトリhttps://github.com/inter-mediator/inter-mediator-plugin-qrcodedata-im-widgetの値qrcodeページファイルsamples/Sample_webpage/qrcode_MySQL.html定義ファイルsamples/Sample_webpage/include_MySQL.php表5-4-9　サンプルにあるJavaScriptコンポーネント「QRCode」→→→メディアファイルの内容の取得　定義ファイルは、通常はフレームワーク自体をページファイルに送り込むことや、データベースアクセスに利用しますが、他にもさまざまな機能があります。そのうちのひとつが、ファイルの内容を取り出す仕組みです。HTMLでは、IMGタグによる画像や、PDFファイルへのリンクといった用途に使うことを想定しており、パスを与えて、そのファイルの中身をMIMEタイプなどとともにクライアントに返すといった動作を行います。基本的にはリスト5-4-1のような記述を行います。mediaというキーでパラメーターを指定するということです。リスト5-4-1　定義ファイルを利用してファイルの内容を取り出す一般的な記述：定義ファイルへのパス?→media=ファイルへのパス\n例：def13.php?media=shot0001_3923.png　ファイルへのパスが「http://」「https://」で始まるURLの場合には、そのURLから得られた結果をそのまま返します。パスが「→class://」で始まる場合には、その後に自分で作成したPHPのクラスのプログラムを実行できます。これについては『Chapter 8　サーバーサイドでのプログラミング』で解説をします。　上記のプロトコル以外は、ファイルへのパスとみなします。そして、→media-root-dirキーで指定したパスに続いて、media=以降のパスで構成される絶対パスのファイルを取り出して、その内容を返します。なお、media=が「/fmi/xml/cnt」の場合、つまりFileMaker Serverを使っていて、オブジェクトフィールドを指定した場合のみ、FileMaker ServerへのURLに変換して、オブジェクトフィールドの内容を画像等で取り出すといった動作を行います。　このセクションの演習で行ったように、ファイルアップロードのコンポーネントでアップロードしたファイルのパスが相対パスで記録されていれば、そのフィールドの値をmedia=の値に指定すればOKです。fileuploadコンテキストのようなアップロード履歴を残すテーブルは相対パスですが、演習でいえば、testtableコンテキストのtext1フィールドは絶対パスで記録されてしまっています。このままではIMGタグのsrc属性に指定をしたい場合には少し不便なので、この仕様は将来変更する可能性もあります。→FileMakerのオブジェクトフィールドへのアップロードと画像表示　FileMakerを利用している場合、オブジェクトフィールドへ画像を保存することは一般的です。したがって、オブジェクトフィールドに画像を入れることを前提として、Webアプリケーションも作成したいと考えるでしょう。INTER-Mediatorでは、ファイルアップロードのコンポーネントが直接オブジェクトフィールドにデータを入力できますし、オブジェクトフィールドの画像をIMGタグ要素で画面に表示することもできます。　このセクションの演習で作った一連のファイルに対して、オブジェクトフィールドを利用する場合にはどのようにすればよいかを説明します。まず、データベース「TestDB」について確認します。testtableレイアウトには、vc1という名前のオブジェクトフィールドがあります（図5-4-1）。このオブジェクトフィールドに画像等を入力するものとします。図5-4-1　データベースで利用するtesttableレイアウト　このオブジェクトフィールドには計算値自動入力の設定がなされています。フィールド定義を調べるには、「ファイル」メニューの「管理」から「データベース」を選択して、データベースの管理ダイアログボックスを表示します（図5-4-2）。この式については、FX.phpを利用している場合に、アップロードとダウンロードをうまく整合させるために設定した式です。FileMaker Data APIを利用する場合にはこの式の設定は必要ありません。図5-4-2　使用するテーブルtesttableのフィールド定義　ここから、定義ファイルとページファイルを用意します。それぞれ、def14.phpとpage14.htmlのファイルを利用しますが、別の番号のものでも構いません。まず、定義ファイルのContextsではひとつのコンテキストを定義します。初期状態では、queryとsortに設定があるので、それを消しておきます。そして、図5-4-3のように、nameとtableとviewを「testtable」、keyを「id」、recordsを「10」、maxrecordsを「100」、pagingを「true」、repeat-controlを「confirm-insert confirm-delete」としておきます。図5-4-3　定義ファイルの変更箇所1　続いて、定義ファイルエディタの最初のところにあるShow Allボタンをクリックして、項目をすべて出しておきます。そして、図5-4-4のように、testtableコンテキストのFile Uploadingのところで「追加」ボタンをクリックして新たな行を追加し、fieldに「vc1」、containerに「true」を入力しておきます。図5-4-4　定義ファイルの変更箇所2　さらに、Optionsの設定では、図5-4-5のように、media-root-dirに「/var/www」と設定をしておきます。図5-4-5　定義ファイルの変更箇所3　Database Settingsでは、図5-4-6のように、db-classを「FileMaker_DataAPI」に書き換えます。databaseは「TestDB」、userに「web」、passwordに「password」、serverに「gateway.docker.internal」、portに「443」、protocolに「https」、cert-vefifyingに「false」と入力します。Debugについては、「false」にすると、デバッグ情報が出なくなります。なお、デバッグ情報をみながら動作を確認したい方は、「2」のままにしてこの後の作業を行ってください。図5-4-6　定義ファイルの変更箇所4　ページファイルをリスト5-4-2のようにします。ファイルアップロードのコンポーネントをdata-im-widget属性で指定するタグ要素は、vc1フィールドにバインドします。そして、vc1フィールドに入力されている画像を表示するには、vc1フィールドの値をmedia=の後につなげます。オブジェクトフィールドは、カスタムWeb経由でデータを得ると画像等のバイナリデータではなく、フィールドに入力することが可能なURLの一部分が得られます。それを定義ファイルの引数に与え、定義ファイルから先のINTER-Mediatorの内部で正しいURLを構築して画像データなどを得ています。リスト5-4-2　修正したpage14.html&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;meta http-equiv=\"content-type\" content=\"text/html;charset=UTF-8\"/&gt;\n  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt;\n  &lt;!-- Loading JQuery --&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-3.5.1.js\"&gt;&lt;/script&gt;\n  &lt;!-- Loading Bootstrap --&gt;\n  &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css\"&gt;\n  &lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js\"&gt;&lt;/script&gt;\n  &lt;!-- Loading JQuery UI FileUpload --&gt;\n  &lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.13.2/themes/base/jquery-ui.min.css\"&gt;\n  &lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/blueimp-file-upload/10.32.0/css/jquery.fileupload.min.css\"/&gt;\n  &lt;script src=\"https://code.jquery.com/ui/1.13.2/jquery-ui.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/blueimp-file-upload/10.32.0/js/jquery.fileupload.min.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/blueimp-file-upload/10.32.0/js/jquery.fileupload-ui.min.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/blueimp-file-upload/10.32.0/js/jquery.fileupload-process.min.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/blueimp-file-upload/10.32.0/js/jquery.fileupload-image.min.js\"&gt;&lt;/script&gt;\n  &lt;!-- Loading INTER-Mediator --&gt;\n  &lt;script src=\"def14.php\"&gt;&lt;/script&gt;\n  &lt;script src=\"/vendor/inter-mediator/inter-mediator/node_modules/inter-mediator-plugin-jqueryfileupload/index.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n&lt;table&gt;\n    &lt;thead&gt;\n    &lt;tr&gt;\n        &lt;th&gt;File Upload&lt;/th&gt;\n        &lt;th&gt;Path&lt;/th&gt;\n        &lt;th&gt;fileupload&lt;/th&gt;\n        &lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n    &lt;tr&gt;\n        &lt;td data-im=\"testtable@vc1\" data-im-widget=\"jquery_fileupload\"&gt;&lt;/td&gt;\n        &lt;td data-im=\"testtable@vc1\"&gt;&lt;/td&gt;\n        &lt;td&gt;\n            &lt;img style=\"height: 50px\" src=\"def14.php?media=\" data-im=\"testtable@vc1@#src\"&gt;\n        &lt;/td&gt;\n        &lt;td&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;　ページファイルを表示して、画像ファイルをアップロードしてみます。アップロードすれば、ページの中にその画像が見えているはずです。表示されている画像のパスは、FileMakerのコンテナフィールドの情報へのURLです。図5-4-7　ページファイルを表示した→&gt;Amazon S3にファイルを保存する　ファイルをローカルのディレクトリに保存する方法をこれまでは示しましたが、ファイルを→Amazon →S3（Simple Strage Service）に保存する方法を説明します。ローカルのディレクトリに保存する機能において、ローカルに保存するところでS3のAPIを呼び出して、ファイルをそちらに保存します。その結果、S3からは、httpsで始まるURLが返され、そのURLを利用してファイルの内容を取り出すことができます。ここで、INTER-Mediatorは、S3から返すURLの先頭のhttps://を、s3://に置き換えてフィールドに記録します。つまり、パスのURLの最初の文字列から「S3に保存しているオブジェクトである」ことが判明できるようになっています。　このように、S3へのアクセスは完全にINTER-Mediatorの内部で処理されるので、定義ファイルの一部を変えるだけでS3を保存領域として使うようになります。なお、EC2などでWebサーバを稼働させて、ファイルはS3に残すことも可能ですが、オンプレミスのWebサーバでファイルはS3に保存することも可能です。INTER-Mediatorに対しては、S3への利用のためのさまざまな設定情報を、リスト5-4-3に示すようなparams.phpファイルの変数に定義します。原則、すべての設定が必要ですが、アカウントに関しては$s3AccessProfileを指定するか、$s3AccessKeyと$s3AccessSecretを指定する方法があります。→リージョンと→バケット名（S3の記憶領域につける名前）は、実際に使用する状況に合わせます。$applyingACLは決められたキーワードを指定する必要があります。params.phpファイルに指定可能な文字列が記載されているのでそれを参考にしてください。$s3urlCustomizeは通常はtrueにして、URLの先頭のプロトコル部分を「s3」に置き換える状態にしておきます。リスト5-4-3　Amazon S3を利用する場合にparams.phpファイルに定義する変数→$accessRegion = \"ap-northeast-1\"; // いわゆる東京リージョン\n→$rootBucket = \"inter-mediator-developping\"; // バケット名\n→$applyingACL = \"bucket-owner-read\"; // オブジェクトのアクセス権\n→$s3AccessProfile = \"im-develop\"; // プロファイル（後述）\n→$s3AccessKey = \"AKIAXXXXXXXXXXXXXXXX\";\n→$s3AccessSecret = \"XXXXXXXXXXXXXXXXX/XXXXXXXXXXXXXXXXXXXXXX\";\n→$s3urlCustomize = true; // 保存時に得られたURLを、httpsからs3に変更　S3を利用するアカウントに関しては、IAMでアカウントを作成して、S3関連のアクセス権を設定しておきます。「→AmazonS3FullAccess」であれば確実に読み書きができますが、管理権限も与えられるので不安がある場合にはもう少し絞った権限に設定しておきます。IAMの管理ページにある「セキュリティ認証情報」の「→アスセスキー」の箇所で、アクセスキーとシークレットを発行し、それを利用します。シークレットは作成時点でしか参照できないので、何らかの方法で確実に手元にコピーを残すことを心がけましょう。　$s3AccessKeyと$s3AccessSecretをparams.phpに指定すればS3を利用できるのですが、ファイルにシークレットが入り込むのを避けたい場合には、AWSのアカウントの→プロファイルの機能を利用してください。そうすれば、ファイルには$s3AccessProfileでプロファイル名を指定すれば良く、$s3AccessKeyと$s3AccessSecretは指定する必要がありません。AWSのプロファイルは、ホームディレクトリにある.awsファイルにあるconfidentialsというテキストファイルで、内容は以下のような形式です。この形式を連続して記録することもできます。[ ] の部分がプロファイル名になります。リスト5-4-4　~/.aws/credentialsファイルの内容例[imapp_account]\naws_access_key_id = AKIAXXXXXXXXXXXXXXXX\naws_secret_access_key = XXXXXXXXXXXXXXXXX/XXXXXXXXXXXXXXXXXXXXXX　プロファイルは、エディタで手で記述しても構いませんが、コマンドラインの「aws configure - -profile」等で指定できます。これら、アカウントの作成やプロファイルの運用については、詳しくはAWSのドキュメント等を参照して、効率の良い方法を模索しましょう。なお、.awsディレクトリは、ホームディレクトリにあればよく、Macでローカル運用する分には普通に自分のホーム直下に.awsディレクトリを作れば問題ありません。ところが、状況によって、.awsディレクトリを探す手段が、私たちが思い浮かべるホームではないところを利用する場合もあります。例えば、EC2でUbuntu Server 20を使う場合、ユーザがwww-dataでありホームは/var/wwwのはずなのですが、.awsディレクトリは、ルートの/から探します。エラーメッセージを読めばわかるのですが、最初はともかくエラーになってしまいます。作った.awsディレクトリをルートに移動させておけば問題ありませんが、余計なところで悩みが増える可能性もあります。　S3はバケットそれぞれに→→パブリックアクセスをブロックする設定があります。管理ページでは、バケットの「アクセス許可」のタブに設定項目があり、「編集」をクリックすると、図5-4-8のような画面が出てきます。ここで蓄積したファイルを別の用途で使うということになると、いろいろ考えないといけないかもしれませんが、INTER-Mediatorの中で画像などのファイルを扱うだけであれば、このように「パブリックアクセスをすべてブロック」している状態で問題はありません。図5-4-8　ブロックパブリックアクセス (バケット設定)の設定　params.phpの設定ができれば、ページファイル、定義ファイルを作ります。ファイルをアップロードするコンポーネントは、通常の場合と同様にdata-im-widget=\"jquery_fileupload\"を指定するだけです。ファイルのダウンロードでは、aタグやimgタグを利用して、URLにフィールドの内容を指定します。なお、URLを保存するフィールドは、日本語のファイル名などでは1Kや2Kは軽く行ってしまうので、フィールドの型はTEXTにしておきましょう。定義ファイルでは、リスト5-4-5のように、コンテキスト定義のfile-uploadキーの値に配列を指定します。配列では、containerキーのみ指定して、そこに「S3」と指定します。この配列には、アップロードの履歴を残す場合に、パスやURLを受け入れるフィールドをfieldキーで、履歴テーブルのコンテキスト名をcontextキーで指定しますが、履歴を残さない場合にはこれらの指定は不要です。残す場合には指定は必要です。いずれにしても、containerキーで「→S3」という値が指定されているようにする必要があります。リスト5-4-5　S3を利用する場合のコンテキストの一部'file-upload' =&gt; [\n    ['container' =&gt; 'S3',],\n],→Dropboxにファイルを保存する　アップロードしたファイルをローカルのディレクトリに保存するだけでなく、→Dropboxにもアップロードすることができます。Dropboxは、デスクトップでの利用が有名ですが、APIがあり、フォルダの中などに見えている領域にアップロードあるいはそこからのダウンロードが可能です。ただし、APIを利用するためのトークンの利用が2021年の改訂以降ちょっと複雑になっているため、ここではともかくINTER-MediatorでDropboxを利用できるようにするための最短距離は追いかけておきます。以前は無期限のトークンを発行できたのですが、現在は比較的期限が短いトークンの発行しかできなくなりました（現状は4時間で無効になる）。結果的に、いくつかの手順を経て「→リフレッシュトークン」というトークンを取得し、それを元にAPIを利用する「→アクセストークン」を発行します。アクセストークンが無効になると、リフレッシュトークンを元にアクセストークンを再発行し、それが無効になるまで再利用します。都度都度リフレッシュトークンからアクセストークンを発行すれば良いと思うかもしれませんが、それがあまりに頻繁だと発行をキャンセルしてしまうようで、ともかくアクセストークンは再利用しないといけないということです。INTER-Mediatorでは、リフレッシュトークンを登録すれば、あとは自動的に処理が進むようになっています。そのために、PHPのライブラリとしてmsyk/dropbox-api-shortlivedtokenというものを作っていますが、これはINTER-MediatorでのDropbox対応のために作ったライブラリです。ちなみに、なぜかDropboxは公式にはPHPのライブラリをリリースしておらず、第三者によるものしかありません。実装する時にspatie/dropbox-apiというライブラリを使い始めたのですが、アクセストークンの保持管理ができないため、このライブラリをベースにして作ったものがmsyk/dropbox-api-shortlivedtokenです。　まず、リフレッシュトークンの取得方法について、概要を説明します。詳細な方法はDropboxのドキュメントを参照してください。最初に、Dropbox Developerの→アプリコンソールでアプリを生成します。すると、AppKeyとAppSecretがページ上に見えます。ここからいくつかのAPIコールなどを経てリフレッシュトークンは発行できますが、手順としてはあまり簡単ではありません。ひとつの方法としては、Dropbox Api Short-Lived tokens and refresh tokens — Spring + Java Applicationに記載されているJavaのプログラムを利用して、リフレッシュトークンを取得する方法があります。Javaに関する知識が必要になるかもしれませんが、Eclipse等でプログラムを稼働すれば、AppKeyとAppSecretからリフレッシュトークンの取得が可能です。途中、コンソールの指示に従っての操作が入り、ブラウザを操作してコードを得て入力するなどの作業が必要になります。図5-4-9　EclipseでJavaプログラムを稼働させてリフレッシュトークンを取得した　ここまでの作業で得られたAppKey、AppSecret、リフレッシュトークンの3つは、リスト5-4-6のように、params.phpファイルの変数として定義しておきます。これらから発行されるアクセストークンは、$dropboxAccessTokenPathで指定したファイルに記録します。したがって、このファイルは、Webサーバのアカウントによって書き込み可能になっている必要があります。例えば、Ubuntuでは、www-dataによって書き込み可能になっている必要があります。/var/www以下に適当なファイルを作って、アクセス権の設定をコマンド等で行なっておきます。Dropbox上で、$rootInDropboxで指定されたパス以下にファイルが書き込まれます。なお、当然のことですが、アプリを生成したときに使われたDropboxの領域内に、ファイルは保存されます。リスト5-4-6　Dropboxを利用する場合のコンテキストの一部→$dropboxAppKey= 'xxxxxxxxxxxx'; // 発行されたAppKey\n→$dropboxAppSecret= 'xxxxxxxxxxxx'; // 発行されたAppSecret\n→$dropboxRefreshToken= 'xxxxxxxxxxxxxxxxxxxx'; // リフレッシュトークン\n→$dropboxAccessTokenPath= '/tmp/dropbox-access-token.txt'; // アクセストークンを記録するファイル\n→$rootInDropbox= '/'; // Dropbox上のファイルを保存場所へのパス　params.phpの設定ができれば、ページファイル、定義ファイルを作ります。ファイルをアップロードするコンポーネントは、通常の場合と同様にdata-im-widget=\"jquery_fileupload\"を指定するだけです。ファイルのダウンロードでは、aタグやimgタグを利用して、URLにフィールドの内容を指定します。定義ファイルでは、リスト5-4-7のように、コンテキスト定義のfile-uploadキーの値に配列を指定します。配列では、containerキーのみ指定して、そこに「S3」と指定します。この配列には、アップロードの履歴を残す場合に、パスやURLを受け入れるフィールドをfieldキーで、履歴テーブルのコンテキスト名をcontextキーで指定しますが、履歴を残さない場合にはこれらの指定は不要です。残す場合には指定は必要です。いずれにしても、containerキーで「→Dropbox」という値が指定されているようにする必要があります。リスト5-4-7　Dropboxを利用する場合のコンテキストの一部'file-upload' =&gt; [\n    ['container' =&gt; 'Dropbox',],\n],→CSVファイルのアップロード　→→ファイルのアップロードをしたとき、そのファイルの中身をCSV等の表形式のデータとして認識して、レコードの追加や更新等ができるようになっています。そのためには、Post Onlyモードのページ（『3-4　入力専用のPost Onlyモード』を参照）を、いくつかのルールに基づいて作成することです。ページファイルのひとつのエンクロージャーをPost Onlyにして、その中に、jquery_fileuploadのコンポーネントを配置します。そのコンポーネントのdata-im属性は「コンテキスト@_im_csv_upload」と指定します。ターゲット指定のコンテキストは、定義ファイルに存在するコンテキストの名前を指定し、実際にこのコンテキストに対してレコード作成等が行われます。ターゲットしてのフィールド名は、「→_im_csv_upload」で固定です。リスト5-4-8はその例です。jquery_fileuploadを利用するのであれば、ヘッダにいくつかの読み込みが必要です。『5-4　JavaScriptコンポーネントの利用』の演習に示したHTMLのコードを参考にしてください。リスト5-4-8　CSVファイルをアップロードする機能のページファイル内の要素の例&lt;div data-im-control=\"post enclosure\"&gt;\n  &lt;div data-im-control=\"repeater\"&gt;\n    &lt;span data-im=\"testtable@_im_csv_upload\"\n           data-im-widget=\"jquery_fileupload\"&gt;&lt;/span&gt;\n    &lt;button data-im-control=\"post\"&gt;送信&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/div&gt;　定義ファイルでの指定例をリスト5-4-9に示します。→Post Onlyモードに展開されたコンテキストは存在しなければなりませんが、この情報からテーブル名等を取得するので、nameは取り込みを行うテーブル名そのものにするのが良いでしょうし、keyについては主キーを正しく指定します。file-uploadは、アップロードですが指定は不要でしょう。アップロードファイルを残すという処理は組み込まれていませんので、ファイルを残す情報は不要になります。そして、オプションとして、→importキーに対する設定を組み込みます。この設定は、オプションだけでなくコンテキスト定義やparams.phpでも指定が可能です。設定可能なキー等はこの後に詳細に説明します。リスト5-4-9　定義ファイルでの指定例// コンテキスト定義での定義例\n[\"name\" =&gt; \"testtable\",\n \"key\" =&gt; \"id\",\n \"file-upload\" =&gt; [[\"container\" =&gt; \"FileSystem\",],], //省略可\n \"post-reconstruct\" =&gt; true, ...\n],\n// オプションの配列（IM_Entryの第2引数）での指定\n\"import\" =&gt; [\n  \"1st-line\" =&gt; true,\n  \"skip-lines\" =&gt; 0,\n  \"use-replace\" =&gt; true,\n  \"convert-number\" =&gt; [\"num1\", \"num2\", \"num3\"],\n],キーワード動作params.php→1st-line指定なし、あるいはtrueなら1行目をフィールド指定行と見なす。フィールド指定行がない場合には、'フィールド1,フィールド2, ....'といった文字列を指定する$import1stLine→skip-lines先頭から指定した数の→→行を無視する。指定なしの場合は0と見なす。フィールド指定行は、ここで指定した行数を省いた最初の行と見なす。$importSkipLines→format読み込むファイルのフォーマットとして\"CSV\"あるいは\"TSV\"を指定する。省略すると\"CSV\"$importFormat→use-replaceデータベースがMySQLの場合、trueにすると、INSERTではなくREPLACEコマンドを利用してファイルの各行のレコードを挿入あるいは更新する。MySQLでない場合は常にINSERTを利用する。省略するとfalseと見なす。$useReplace→convert-number数値変換を行うフィールド名を配列で指定する$comvert2Number→convert-date日付への変換を行うフィールド名を配列で指定する$comvert2Date→convert-datetime日付時刻への変換を行うフィールド名を配列で指定する$convert2DateTime表5-4-10　インポート処理に指定できる設定　まず、1st-lineキーは、読み込む→→テキストファイルの1行目を指定します。指定なしの場合には、テキストファイルの1行目を→フィールド名として認識して、各行の項目を、1行目に対応するフィールド名のフィールドに入力します。1st-lineは文字列で指定し、指定をすればテキストファイルの1行目を、指定した文字列に置き換えて処理をします。通常は1行目からをデータとして読み込むので、1行目にすでにデータがある場合は、フィールド名の指定を1st-lineで指定する必要があります。1行目を置き換えて読み込みたい場合は、1st-lineを指定しつつ、skip-linesに1を指定します。　既定値はCSV形式と仮定します。数値はそのまま、文字列は \" \" あるいは ' ' で囲まれているものです。改行は、CR、LF、CR+LFのいずれも対応します。もちろん、文字の中にエスケープして入っているダブルクォートなども正しく認識します。ここで、formatキーで→TSVを指定すると、区切り文字がタブであると認識します。いずれの場合も、テーブルに対して→INSERTステートメントでレコードを作成するのが基本です。use-replaceをtrueにした場合、データベースがMySQLであれば、既存のレコードの置き換えを行います。つまり、MySQLの→REPLACEステートメントを利用してテキストファイルの1行を挿入します。REPALCEは、主キーフィールドを手掛かりにして、存在しないレコードは新規作成、存在するレコードは更新する動作です。実行時にどのフィールドを照合するかは指定できないので、データベーススキーマで最初からキーフィールドの指定が必要になります。　convert-number、convert-date、convert-datetimeは、いずれもフィールド名の配列を指定します。そのフィールドのデータに関して、数値、日付、日付時刻の形式に合ったデータに変換して、データベース処理のステートメントに含めるようにします。数値の場合、「3,200」のようなものでもエラーが出る場合があるので、そうした処理に対応しています。→このセクションのまとめ　JavaScriptで作られたさまざまなソフトウェアコンポーネントを利用する仕組みを持っています。しかしながら、利用するには、アダプターの開発が必要になります。INTER-Mediatorには、TinyMCE、CodeMirror、jQuery FileUploadなどのアダプターが付属しています。定義ファイルは、画像ファイルなどの内容を取り出すことにも利用できます。→5-5→クロステーブルの作成クロステーブルは、表があって、一番上の列と、一番左の列がラベルとなっており、そのラベルの交差するセルには、ラベルに関連するデータが表示されるというものです。例えば、一番上の列には自社の「支店」が並び、一番左の列には年月が並ぶとすると、その交差するセルには、特定の支店の特定の年月の売り上げが見えるというものです。INTER-Mediatorではこうしたテーブルをデータベースの値を利用して作成することができます。→クロステーブルに必要な記述　通常、INTER-Mediatorはひとつのコンテキストをページ上に展開してページ合成を行いますが、クロステーブルは3つのコンテキストを使用します。そのため、定義ファイルには3つの異なるコンテキストを定義しなければなりません。それぞれ、「→列見出し用コンテキスト」「→行見出し用コンテキスト」「→交差セル用コンテキスト」と名付けることにします。クロステーブルの見出しは固定的なものではなく、データベースのマスターテーブル等から取り出す仕組みにしてあります。そのため、汎用性は高いですが、現状では、単に数字の100から150までのような見出しを利用するのが少し面倒です。この方法は、Samples/Sample_ExtensibleにあるYearMonthGen.phpファイルおよびそれを使用している定義ファイルを参照してください。　行見出し用および列見出し用のコンテキストは通常と変わりありません。1レコードがひとつの見出しセルに展開されます。これに対して、交差セル用のコンテキストでは、relationキーの値で2つの要素を定義します。ひとつ目は行見出し用のコンテキストとの関係、2つ目は列見出し用コンテキストとの関係、すなわち対応するフィールドが何かを記述します。設定の中にあるoperatorキーは無視され、イコールによる関係しか扱えません。コンテキスト指定のポイントを示したのが、リスト5-5-1です。なお、コンテキストの中にはqueryやsortキーでの検索条件や並べ替え設定があっても構いません。必須なことはコンテキスト定義が3つあることと、交差セル用コンテキストにおいて、2つの要素を持つ→relationキーの値があることです。なお、ここでは説明を分かりやすくするために、nameキーと同一のテーブルがあるといった状況を想定してください。リスト5-5-1　クロステーブルで使用する3つのコンテキストarray(  // 列見出し用コンテキスト\n  \"name\" =&gt; \"item\",\n  \"key\" =&gt; \"id\",\n),\narray(  // 行見出し用コンテキスト\n  \"name\" =&gt; \"customer\",\n  \"key\" =&gt; \"id\",\n),\narray(  // 交差セル用コンテキスト\n  \"name\" =&gt; \"salessummary\",\n  \"key\" =&gt; \"id\",\n  \"relation\" =&gt; array(\n     array(  // 列見出し用コンテキストとの関連\n       \"foreign-key\" =&gt; \"item_id\", \n       \"join-field\" =&gt; \"id\", \n       \"operator\" =&gt; \"=\",),\n     array(  // 行見出し用コンテキストとの関連\n       \"foreign-key\" =&gt; \"customer_id\", \n       \"join-field\" =&gt; \"id\", \n       \"operator\" =&gt; \"=\",),\n  ),\n),　一方、ページファイルでは、TABLEタグ要素を利用したテーブルを利用します。エンクロージャーとなるTBODYタグ要素の→data-im-control属性には「→cross-table」という値を設定します。その中には2行2列のセルだけを入れます（図5-5-1、リスト5-5-2）。data-im-control属性に「cross-table-sum」と設定すれば、クロステーブルの右側と下側に→合計を求めるセルをさらに追加します。セルはそれぞれ、THでもTDでもどちらのセルでも構いません。リスト5-5-2では、各セルの中にdata-im属性によってターゲット指定が記述されています。ここで、Ⓑのセルは行見出し用コンテキスト、Ⓒのセルは列見出し用のコンテキストが展開されます。したがって、これらのセルでは、コンテキスト定義に存在するコンテキスト名およびその中に存在するフィールド名を記述する必要があります。そして、Ⓓのセルには、交差セル用コンテキストに対応したターゲット指定を記述しますが、セルを埋めるルールは、この後の『クロステーブル生成の仕組み』で説明をします。なお、Ⓐのセルは、ページ合成後もテーブルの左上のセルとして配置されます。図5-5-1　ページファイルに用意するテーブルの中身リスト5-5-2　ページファイルへの記述例&lt;table&gt;\n&lt;tbody data-im-control=\"cross-table\"&gt;\n&lt;tr&gt;\n  &lt;th&gt;&lt;/th&gt;\n  &lt;th&gt;\n     &lt;div data-im=\"item@id\"&gt;&lt;/div&gt;\n     &lt;div data-im=\"item@name\"&gt;&lt;/div&gt;\n  &lt;/th&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n  &lt;th&gt;\n     &lt;div data-im=\"customer@id\"&gt;&lt;/div&gt;\n     &lt;div data-im=\"customer@name\"&gt;&lt;/div&gt;\n  &lt;/th&gt;\n  &lt;td&gt;\n     &lt;div data-im=\"salessummary@qty\"&gt;&lt;/div&gt;\n     &lt;div data-im=\"salessummary@total\"&gt;&lt;/div&gt;\n   &lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;→→→クロステーブル生成の仕組み　クロステーブルを合成する仕組みを解説しましょう。コンテキストが3つもあるとややこしく思われるかもしれませんが、それぞれの見出しを合成した上で、交差セルを埋めるという処理が全体的な流れになります。その流れが理解できれば、動作の見通しもつきやすいでしょう。　まず、ページファイルでのクロステーブル部分の初期状態は図5-5-1のようなものです。この時、TBODY内部のセルを一度全部取り除きます。そして、ⒶⒷⒸⒹの4つのTHないしはTDタグ要素を別途記録しておきます。最初に1行目のTRタグ要素を生成し、その子要素としてⒶのセルを追加します（図5-5-2）。ここでのTRタグは、ページファイルにあったもではなく、プログラムで単に生成したものです。Ⓐのセルは単に複製して子要素にするだけですので、この中にターゲット指定を記述しても、データベースの内容を展開することはありません。図5-5-2　テーブルにⒶのセルを合成する　続いて、テーブルの1行目に列見出しを作成します。図5-5-3のように、1行目のTRタグ要素をエンクロージャー、Ⓑのセルをリピーターとして、ページ合成を行います。ここではⒷのセルの中身を解析して、ターゲット指定の設定を集めて、一番多く使われているコンテキスト名を決定し、そのコンテキスト名の定義に基づいてデータベース処理を行います。つまり、通常のエンクロージャー/リピーターの展開が行われます。そして、コンテキストオブジェクト自体も生成されます。もちろん、クエリー結果のレコードの個数だけⒷのセルが複製されて、その中ではフィールドの内容がタグ要素に合成され、データベースのデータがセルに見えることになります。もちろん、複数のリンクノードを記述して複数のフィールドを指定しても構いません。なお、内部にさらにエンクロージャー/リピーターが見つかれば展開は行いますが、一般には処理速度を考慮すべきところであり、1回のデータベースアクセスで必要なデータを取り出すようにデータベース側を設計しておくことが求められます。図5-5-3　テーブルに列見出しを合成する　次にテーブル2行目から、行見出しの合成を行います。図5-5-4のように、TBODYタグをエンクロージャーとし、ⒸのセルをTRタグで包んだ要素をリピーターとして通常通りの手順で合成を行います。したがって、Ⓒのセルに含まれるリンクノードのターゲット指定によってコンテキスト名が決まりデータベースアクセスして、取り出されたレコードのフィールドの値が2行目以降の1セル目に合成されます。Ⓒのセルを包むTRタグ要素も、元からページファイルにあったものではなく、単にプログラムで生成したものです。Ⓒのセル内に複数のリンクノードを設けても構いませんし、さらにその中にエンクロージャー/リピーターのセットがあれば展開を進めるのも同様です。図5-5-4　テーブルに行見出しを合成する　そして、2行目の2列目以降、列見出しのレコード数分Ⓓのセルを付加します。最初は単にセルを付加して、行列をセルで埋める作業を行います。そして、Ⓓのセルを解析してコンテキスト名を求めてコンテキストを決定し、データベースアクセスを行います。クエリー結果のレコードを順番に合成するのではなく、順番に調べて置き場所がテーブル内にある場合、その交差セルに対して合成、つまりリンクノードの指定に応じてフィールドの値をタグ要素内に埋め込む処理を行います。したがって、交差セル用コンテキストで得られた結果でも、対応する行あるいは列がなければ無視されます。この処理はクロステーブルだけで行われており、エンクロージャー/リピーターによる展開とは異なる処理が組み込まれています。したがって、エンクロージャーに相当するノードはないため、図の中ではエンクロージャーに対しては「規定なし」と記載をしました。なお、Ver.5.4-dev現在の実装では、交差セルへの合成は、単に合成するだけなので、同一のセルに2回以上合成すると、それらの数値の文字列がつながって見えるだけです。加算等は実装されていませんので、コンテキストから得られるデータは集計結果になっているものを利用するようにしてください。図5-5-5　テーブルを交差セルで埋める　最後の交差セルを埋める部分はデータを見ながら説明をしましょう。サンプルファイルはSamples/Practice/crosstable.htmlおよびcrosstable.phpにあります。演習環境を利用している場合には、ブラウザーで「http://localhost:9080」に接続し、そこにある「サンプルプログラム」のリンクをクリックして、サンプルプログラムの一覧を表示します。そこにあるPracticesにある「cross table」の項目をクリックして、動作を確かめることができます。図5-5-6は、そのサンプルを動かした結果です。このサンプルのページファイルは、このセクションで示したページファイルの記述のサンプルと同一のものです。定義ファイルには、item、customer、salesummaryの3つのコンテキストが指定されていて、それぞれ、列見出し、行見出し、交差セルのコンテキストです。図5-5-6　クロステーブルのサンプルプログラム　以下、3つのコンテキストの具体的な値をもとに、クロステーブルの動作を検討しましょう。列見出しのコンテキスト「item」と、行見出しのコンテキスト「customer」に関して、クエリー結果のデータを示すと、表5-5-1と表5-5-2のような結果になります。それぞれの値が、セルの中に表示されているのが分かります。idname25Onion 26Parsnip 27Peppers 28Potato 29Pumpkin 30Peas 31Rhubarb 32Shallots 33Spinach 34Squash 35Sweet Potato表5-5-1　コンテキスト「item」へのクエリー結果idname250Danio Food, Co.251Darter Food, Co.252Dartfish Food, Co.253Dealfish Food, Co.254Death Valley pupfish Food, Co.255Deep sea anglerfish Food, Co.256Deep sea bonefish Food, Co.257Deep sea eel Food, Co.258Deep sea smelt Food, Co.259Deepwater cardinalfish Food, Co.表5-5-2　コンテキスト「customer」へのクエリー結果　salessummaryクエリーの結果は多数のレコードが取り出されますが、その一部を抜粋したのが表5-5-3です。id=1の最初のレコードですが、item_id=38、customer_id=549です。これらは、列見出しおよび行見出しのコンテキストの中には含まれていませんので、id=1のレコードは無視します。同様に、id=2のレコードも無視します。id=3のレコードは、item_id=30ですので、列見出しのコンテキストから「6列目」であることが分かります。また、customer_id=251であり行見出しのコンテキストから2行目であることが分かります。したがって、交差セルの行列で言えば2行目の6列目、テーブルで数えれば見出しの行が増えているので3行目の6列目に当たるセルに対して、id=3のレコードが展開されることになります。そして、実際に該当するセルに、qtyの値の「8」とtotalの値の「2984」が見えています。　id=4はどうでしょうか？ item_id=32なので8列目ですが、customer_id=496に対するレコードが行見出しにはないので、このレコードも無視します。こうして、この後沢山のレコードが無視された後、id=95のレコードが見つかります。item_id=27なので3列目、customer_id=255なので6行目であることが確定するので、対応するセルに対してqtyとtotalの値「41」「12177」が表示されます。salessummaryではこの2つのレコードだけが、クロステーブルの中にあるデータなので、2つのレコードだけが見える結果になったということです。　なお、ここでの突き合わせは、交差セルのコンテキストのrelationキーでのフィールドで決まります。列見出しに対応する設定はforeign-keyは「customer_id」、join-fieldは「id」でした。つまり、列見出しのコンテキストのidフィールドの値と、交差セルのコンテキストのcustomer_idの値を付き合わせるということです。通常、join-fieldは見出しのコンテキストのkeyキーで指定するものかもしれませんが、必ずしもそうでないような場合もあり、その場合に見出しコンテキストでテキストフィールドを設定してフィールドを編集したいこともあるので、見出しコンテキスト側の突き合わせ対象フィールドは、relationキーでの指定から得るようにしました。iddtitem_idcustomer_idqtyunitpricetotal12010-01-01 00:00:00385497528369622010-01-01 00:04:4524632167811249632010-01-01 00:14:10302518373298442010-01-01 00:27:02324964633115226:::::::942010-01-01 22:02:291686044721888952010-01-01 22:24:34272554129712177:::::::表5-5-3　コンテキスト「salessummary」へのクエリー結果　クロステーブルで3つのコンテキストを用意しますが、注意深く設定しなければならないのは、交差セル用コンテキストのrelationキーの値です。列見出しと行見出しとの対応が取れるようなフィールドを指定しなければなりません。また、交差セル用コンテキストは、集計した結果が得られるようにしておく必要があります。ページ合成の中で、合計を取るなどの処理は現在はできません。→このセクションのまとめ　コンテキストを3つ用意することで、それらを列見出し、行見出し、交差セルに展開して、クロステーブルを作成できます。交差セルには、relationキーで指定したフィールドにおいて見出しと対応した値を持つものが配置されます。また、行列の合計を自動的に追加することもできます。→5-6→→スタイルの設定を自動化する→テーマ見栄えの良いページを作成するには、→CSSによるスタイルをかなり細かく設定しなければなりませんが、そのスタイル設定をテーマとしてひとつのフォルダーにまとめておき、それをページあるいはサイト全体に適用する機能をVer.5.6-devで組み込みました。→テーマの機能とdefaultテーマについて　原則としてCSSの定義はアプリケーションごとに作るものであるとも言えるのですが、CSSを適用しないでWebページを作成すると、INTER-Mediatorが生成するようなページネーションやログインパネルがHTMLの定義そのままの形で出てきてしまいます。機能としては実現していても、次のページに移動するボタンがボタンらしく見えていないとユーザーが戸惑う原因になりますし、作っている時も画面がそっけなさ過ぎてモチベーションが落ちてしまいそうです。そこで、テーマの機能を内蔵して、Webページを作った段階で、ある程度のスタイルや画像リソースが自動的に適用されるようにしました。　INTER-Mediatorで自動的に適用されるデザインテーマは、太木裕子氏（京都造形芸術大学キャラクターデザイン学科専任講師）に開発していただきコントリビュートしていただきました。テーマ自体のシステム名称は「→default」としていますが、テーマ名として『「楝」OUCHI』という名称がつけられています。「楝色（おうちいろ）」は薄い紫の和色名です。基本となるスタイルであることから、楝＝家＝HOMEといった言葉の連想に由来しているそうです。テーブルのTHやTD、INPUT等、よく利用するタグについても、見栄えが良くなるようなCSS定義がなされています。→テーマの適用と選択　INTER-Mediatorには、表5-6-1に示すテーマがバンドルされています。defaultは何も指定しないと適用されるものですが、実際にはINTER-Mediatorがページファイルのヘッダー部分に自動的にテーマの定義を取り出してページに適用するlinkタグ要素を付加することで、CSSなどを適用しています。テーマ名内容defaultテーマに対する設定がない場合に「楝」テーマが適用される→leastページネーションおよびログインパネルのCSSと、処理中を示す表示のためのリソース→thosedays「楝」テーマの機能を組み込む以前のサンプル用CSSファイル「sample.css」を適用した状態と同じにする表5-6-1　INTER-Mediatorに付属のテーマ　テーマの設定は、以下のいずれかの方法で行えます。IM_Entry関数はもちろん定義ファイルに記述するもので、このテーマの設定は、定義ファイルを参照しているページにだけ適用されます。params.phpファイルに指定すると、そのファイルを参照しているINTER-Mediator全体に適用されるので、例えばサイト全体をまとめて設定したいときに利用できます。IM_Entry関数の第2引数（オプション設定）で、themeキーによる値にテーマ名を指定する。→params.phpファイルに、→$themeName変数に対して文字列でテーマ名を指定する。　default以外の付属のテーマについて説明します。leastは、ページネーションとログインパネル以外の設定がない、最小限のテーマです。テーブルや段落等のCSSは全くされていない、文字通り最小限のテーマです。thosedaysは、テーマを実装する以前の状態という意味ですが、そのとき、サンプルファイル用のCSSファイルであるsample.cssをコピーしてアプリケーションに利用していたことに由来します。その時と同じ状態をテーマで実現しています。以前に作成したWebページにdefaultを適用すると、自分自身でCSSの定義を行なっている場合には異なる定義が混在してしまってかえって見栄えには問題が出てくるかもしれません。そこで、最小限ながら以前のsample.cssと同じ状態にするテーマを、既存のWebページ向けに用意してあります。→テーマのカスタマイズ　テーマを自分自身で変更したい場合には、大きくわけて2通りのアプローチがあるでしょう。ひとつは、既存のテーマを使いつつ、特定のページでは、その定義を上書きして変更するというものです。もうひとつは、スタイルそのものを自分で作るかあるいは既存のものを作り変えるという方法です。後者の方法はこの次で説明します。　ページネーションのカスタマイズをしたい場合の例を示しましょう。ページネーションのそれぞれの要素には、表5-6-2のようなスタイルが設定されています。スタイルシートのセレクタページネーションの該当部分#IM_NAVIGATORコントローラーの外側.→IM_NAV_panelコントローラー全体span.→IM_NAV_info文字を表示する部分span.→IM_NAV_buttonボタンになる部分（機能するボタン）span.I→M_NAV_disabled機能しないボタンの部分表5-6-2　ページネーションで割り当てられたスタイルシートのセレクタ　ここでボタンの背景と、黄色いマーキングを別のものに変えたいとします。色のセンスはさておいて、ボタンを白背景の赤文字にしたいとした場合、リスト5-6-1のようにヘッダー部にstyleタグ要素を追加して、ボタンに対するCSSの設定を上書きしてしまいます。リスト5-6-1　ページネーションの要素に対するCSS定義の上書き&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt;\n  &lt;title&gt;&lt;/title&gt;\n  &lt;script type=\"text/javascript\" src=\"def01.php\"&gt;&lt;/script&gt;\n  &lt;style&gt;\n    span.IM_NAV_button {\n        color: red;\n        background-color: white;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;→テーマの構造とカスタマイズ　INTER-Mediator既定のテーマは、INTER-Mediatorフォルダーの直下の→「themes」フォルダーに収められています。このフォルダー以下は、「テーマ名」、「css」か「images」、実際のファイル、といった構成になっています。cssとimagesは決められたフォルダー名です。通常、cssフォルダーに入れてある拡張子が.cssのファイルは、自動的にマージされて、ページに適用されます。　独自にテーマを作る場合には、defaultフォルダーをコピーして名前を付け直し、その中のファイルを変更するのが一番効率良い方法でしょう。その作成したテーマのフォルダーは、もちろん、INTER-Mediatorフォルダーの直下に配置して構いません。また、可能であれば、コミットしていただければ、テーマのバリエーションが増えるので、開発者としては歓迎です。　しかしながら、INTER-Mediatorフォルダーの中にテーマを入れるとなると、もし、改めてレポジトリからpullしたときに、自分で作ったものが追加されていることでなんらかの対処が必要になるかもしれません。自分だけでテーマを使いたい場合にはINTER-Mediatorフォルダー外にテーマを置きたいと思われるでしょう。その場合、リスト5-6-2のように、params.phpファイルで$altThemePath変数に、テーマが保持されているフォルダーへのパスを文字列で指定します。そのサーバーで認識できる絶対パスを記述してください。また、テーマ名もその場合自分で作ったものになるでしょうから、$themeName変数も記述します。リスト5-6-2　独自のテーマを独自のディレクトリに配置するときのparams.phpの一部→$altThemePath = \"/var/www/thmeme\";    //Your original thmeme directory.\n$themeName = \"blackbird\";      //Default theme name.　テーマ内のファイルの内容を取得するには、一般には次の形式で得られます。[ ] の部分は適切な文字列に置き換えますが、css|imagesは、cssないしはimagesのどちらかの文字列が入るということです。以下の形式を、例えば、linkタグ要素のhref属性や、imgタグ要素のsrc属性等に指定して、テーマの中身を取り出すことができます。なお、type=cssの場合にname=を省略することで、cssフォルダーにある全ての.cssファイルの中身をマージして返します。リスト5-6-3　テーマの中身を取り出すURL[定義ファイル名]?theme=[テーマ名]&amp;type=[css|images]&amp;name=[ファイル名]→このセクションのまとめ　テーマの機能によって、特にスタイルシートの設定をしなくても、おおむねデザイン的に整ったサイトを作ることができるようになりました。テーマを自分で定義したり、テーマの定義内容を変更することもできます。→5-7ステップ動作を行うシングルページアプリケーション→モバイルアプリケーションによく見られる「ステップ動作」を実装できる機能をVer.5.7-devで組込みました。ステップ動作は、リスト形式で選択肢が表示され、タップすると次の選択肢が表示されるといった形式のユーザーインターフェースです。また、「戻る」ボタンがあることも特徴です。このひとつひとつの画面をコンテキストで定義し、それぞれの画面をひとつのページファイル内に記述する、→シングルページアプリケーション形式でステップ動作のアプリケーションを組み込むことができます。このセクションの内容は、JavaScriptのプログラミングが必須であり、書籍内の順序では後の部分の説明を理解している必要があります。→→ステップ動作のサンプルアプリケーション　ステップ動作の機能を理解するために、サンプルアプリケーションを動かしてみましょう。演習環境を利用しているのであれば、トップページにある「サンプルプログラム」のリンクをクリックし、Practicesの表にある、「Mobile」の「step」を、クリックしてください。ステップ動作は、マスター/ディテール形式のユーザーインターフェースと同じ仕組みを使っているため、モバイル対応しています。モバイル端末だとセル全体のどこをタップしても構いませんが、PC動作だと「詳細」ボタンが表示されます。PC/Macで手軽にモバイル端末のシミュレーションをするには、Chromeのデバッガにあるデバイスツールバーを表示する方法が手軽でしょう。デバッガの画面を表示すると、上部に「Elements Console…」とメニューが並びます。その「Elements」のすぐ左側にあるモバイルデバイスのアイコンをクリックしてオンにし、青い色になることを確認してください。そして、画面を更新すると、モバイル端末での表示状態になります。　図5-7-1は、演習環境を稼働させて表示されるサンプルアプリケーションの最初のページです。Chromeでモバイルのシミュレーションを行っています。まずは、東京近辺の都県の名前が並んでいます。あとでコードを確認しますが、TABLEタグを利用しています。そして、ページ上部にはタイトルバー、ページ下部にはINTER-Mediatorを示すバーがあり、残りの部分はテーブルだけで埋め尽くされているのを確認してください。また、サンプルの郵便番号データベースには東京都のデータしかなかったことにお気づきの方は、「神奈川県」などはどういうことかと思われるかもしれませんが、これも後で説明します。なお、次のページに移動して何か表示されるのは、「東京都」だけです。図5-7-1　ステップ動作を示すサンプルアプリケーション　「東京都」をタップすると、東京都の市区町村名が一覧されます（図5-7-2）。ここで、まず、市区町村のリストもテーブルで構築していますが、スクロールすることを確認してください。その時、タイトルバーとページ下部の表示は画面に固定され、その間でスクロールされるという典型的なモバイルアプリケーションの動作になっていることを確認してください。この動作はINTER-Mediatorとは関係なく、CSSの設定で可能です。これについても、あとで説明します。また、ヘッダーの左側に、◀︎ボタンが表示され、これをタップすると、東京都などの最初のリストが表示されることが分かります。つまり、これは「戻る」ボタンであり、最初の画面では表示されていないことも確認してください。図5-7-2　次の画面に移動すると「戻る」ボタンが表示される　「市区町村」をタップしたあとは、町域名の一覧が表示されます。この時、前に選択した市区町村に含まれる町域名だけが表示されていることを確認してください。つまり、前のステップの選択肢が、次のステップの一覧表示に対して影響を与えている、つまり検索条件を与えるということができています。そして、最後は、郵便番号、都道府県、市区町村、町域名が一覧され、そこから先にはステップ動作での移動は行いません（図5-7-3）。戻ってまた別の場所を選択することもできます。郵便番号が見える画面では、いずれのセルをタップしても画面遷移は行いませんが、デバッガのコンソールにオブジェクトの内容が出力され、これまでの4つのステップで、何をタップしたのかが記録されていることが分かります。ここで、記録されている状況を例えばデータベースに書き込むなどすることになることも多いかもしれませんが、その作業はJavaScriptでプログラムを記述する必要があります。図5-7-3　最後の画面のセルをタップすると、コンソールで遷移の履歴が参照できる→ステップ動作のためのコンテキスト定義　定義ファイルの内容を参照しましょう。定義ファイルは、INTER-Mediatorフォルダーの中では、Samples/Sample_Mobile/step_MySQL.phpにあります。ソースコードをWebで参照するにはこちらをクリックしてください。リスト5-7-1は、ちょっと長いですが、IM_Entryの第1引数であるコンテキスト定義部分を示しています。全体的に見て、4つのコンテキストが定義されています。ここで、ステップ動作に特有の設定は、→navi-controlキーのstepと、step-hideです。INTER-Mediatorは最初にページ全体の合成を行うとき、step-hideのコンテキストについては、エンクロージャーの要素のdisplayスタイル属性にnoneを設定して、全て非表示にします。また、そのとき、データベースアクセスを行わず、データをリピーターに合成する処理は行いません。一方、stepの方は、通常通り、ページ合成中にデータベースアクセスを行い、リピーターにデータを合成します。つまり、ひとつのstepと複数のstep-hideがnavi-controlに設定されたコンテキスト定義を作ることが、一般的な手法です。　あるステップ動作のコンテキストでタップを行った時に、「次に表示するコンテキスト」をどのように決定するかを説明しましょう。まず、既定の動作をここで説明します。次々と表示されるコンテキストは、定義ファイルの定義の順番になります。つまり、prefectureコンテキストを表示している時にタップすると、次にnavi-controlキーの値がstep-hideのコンテキストを探し、その結果cityコンテキストが選択され、このコンテキストを利用しているページファイルの一部分が更新され、データベース処理が行われてクエリー結果をリピーターに合成します。そして、「次へ」という動作の時にスタック動作を行うグローバル変数に情報を残すので、「戻る」ことも自動的に行えるようになっています。リスト5-7-1　ステップ動作のサンプルのコンテキスト定義array(\n    array(\n        'name' =&gt; 'prefecture',\n        'table' =&gt; 'not_available',\n        'view' =&gt; 'postalcode',\n        'aggregation-select'=&gt;'MIN(id) AS pref_id, f7 AS pref',\n        'aggregation-from'=&gt;'postalcode',\n        'aggregation-group-by'=&gt;'f7',\n        'records' =&gt; 10000,\n        'maxrecords' =&gt; 10000,\n        'key' =&gt; 'pref_id',\n        'navi-control' =&gt; 'step',\n        'before-move-nextstep'=&gt;'doAfterPrefSelection',\n        'appending-data'=&gt;array(\n            array('pref_id'=&gt;101, 'pref'=&gt;'埼玉県'),\n            array('pref_id'=&gt;102, 'pref'=&gt;'神奈川県'),\n            array('pref_id'=&gt;103, 'pref'=&gt;'千葉県'),\n        )\n    ),\n    array(\n        'name' =&gt; 'city',\n        'table' =&gt; 'not_available',\n        'view' =&gt; 'postalcode',\n        'aggregation-select'=&gt;'MIN(id) AS city_id, f8 AS city',\n        'aggregation-from'=&gt;'postalcode',\n        'aggregation-group-by'=&gt;'f8',\n        'records' =&gt; 10000,\n        'maxrecords' =&gt; 10000,\n        'key' =&gt; 'city_id',\n        'navi-control' =&gt; 'step-hide',\n        'before-move-nextstep'=&gt;'doAfterCitySelection'\n    ),\n    array(\n        'name' =&gt; 'town',\n        'table' =&gt; 'not_available',\n        'view' =&gt; 'postalcode',\n        'aggregation-select'=&gt;'MIN(id) AS town_id, f9 AS town',\n        'aggregation-from'=&gt;'postalcode',\n        'aggregation-group-by'=&gt;'f9',\n        'records' =&gt; 10000,\n        'maxrecords' =&gt; 10000,\n        'key' =&gt; 'town_id',\n        'navi-control' =&gt; 'step-hide',\n        'before-move-nextstep'=&gt;'doAfterTownSelection'\n    ),\n    array(\n        'name' =&gt; 'wrapup',\n        'table' =&gt; 'not_available',\n        'view' =&gt; 'postalcode',\n        'records' =&gt; 10000,\n        'maxrecords' =&gt; 10000,\n        'key' =&gt; 'id',\n        'navi-control' =&gt; 'step-hide',\n        'before-move-nextstep'=&gt;'doAfterLastSelection'\n    ),\n),　他に、コンテキスト定義では→navi-titleキーによる→→タイトルの指定が可能です。ただし、spanなどの要素で、「data-im=\"→_@→navi_title\"」という属性が指定されたものをページ内のどこかに記述する必要があります。→ページファイルの記述内容　ページファイルは定義ファイルと同じフォルダーにあるstep_MySQL.htmlという名前のフォルダーです。ソースコードをWebで参照するにはこちらをクリックしてください。リスト5-7-2に、定義ファイルで定義した4つのコンテキストを展開する部分を含む、ページファイルのボディ部を示しました。それぞれの展開部分は、特別なものはなく、単にフィールドをセルの値としているだけです。なお、データベース処理については、後でまとめて説明をします。ここで、ステップ動作に必要な準備は、→「戻る」ボタンの確保です。リストの最初の方に、class属性が「→IM_Button_StepBack」のspanタグがあります。タグの種類はおおむね何でもよく、class属性に必ず前述の名前を指定します。それが、ページ内の見えている場所に配置されていれば構いません。通常はひとつの要素だけで十分と思われますが、複数あってもかまいません。リスト5-7-2　ページファイル内でのページ合成を行う部分&lt;div id=\"header\"&gt;\n    &lt;span class=\"IM_Button_StepBack\"&gt;◀︎&lt;/span&gt;\n    郵便番号検索\n&lt;/div&gt;\n&lt;div id=\"content\"&gt;\n    &lt;table class=\"stepbox\"&gt;\n        &lt;tbody&gt;\n        &lt;tr&gt;\n            &lt;td&gt;&lt;span data-im=\"prefecture@pref\"&gt;&lt;/span&gt;&lt;/td&gt;\n            &lt;td class=\"accessary\"&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n    &lt;table class=\"stepbox\"&gt;\n        &lt;tbody&gt;\n        &lt;tr&gt;\n            &lt;td&gt;&lt;span data-im=\"city@city\"&gt;&lt;/span&gt;&lt;/td&gt;\n            &lt;td class=\"accessary\"&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n    &lt;table class=\"stepbox\"&gt;\n        &lt;tbody&gt;\n        &lt;tr&gt;\n            &lt;td&gt;&lt;span data-im=\"town@town\"&gt;&lt;/span&gt;&lt;/td&gt;\n            &lt;td class=\"accessary\"&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n    &lt;table class=\"stepbox\"&gt;\n        &lt;tbody&gt;\n        &lt;tr&gt;\n            &lt;td&gt;&lt;span data-im=\"wrapup@f3\"&gt;&lt;/span&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;&lt;span data-im=\"wrapup@f7\"&gt;&lt;/span&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;&lt;span data-im=\"wrapup@f8\"&gt;&lt;/span&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;&lt;span data-im=\"wrapup@f9\"&gt;&lt;/span&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n&lt;/div&gt;→→画面遷移時に呼び出されるメソッド　これまでの設定で、navi-controlの値がstepおよびstep-hideをもつコンテキストを展開したページの一部分が切り替わり表示できるようになっています。しかしながら、切り替わり前に、何か処理をしたいことが多いでしょう。サンプルでは、例えば、市区町村に「中野区」を選んだ時と、「渋谷区」を選んだ時では、町域名の検索条件が変わります。そうした処理などを組み込むために、コンテキスト定義に、→before-move-nextstepキーを定義します。値はメソッド名を示す文字列です。例えば、prefectureコンテキストでは、「'before-move-nextstep'=&gt;'doAfterPrefSelection'」という記述がありますが、これに対して、ページファイルのヘッダー部で、リスト5-7-3のようなメソッドを定義します。メソッドは、→INTERMediatorOnPage変数のオブジェクトとして定義します。引数はありません。リスト5-7-3　doAfterPrefSelectionメソッドの定義INTERMediatorOnPage.doAfterPrefSelection = function () {\n    var lastSelection = IMLibPageNavigation.getStepLastSelectedRecord()['pref'];\n    INTERMediator.clearCondition('city');\n    INTERMediator.addCondition('city', {field: 'f7', operator: '=', value: lastSelection});\n};　この例では返り値がありませんが、返り値によって、表5-7-1のように、画面遷移の動作をコントロールできます。したがって、最後の画面で何かの動作を組み込んだり、あるいはコンテキスト定義の順番とは関係のない任意のコンテキストを次に表示するなど、ナビゲーション自体を返り値でコントロールできます。返り値動作false→画面遷移せず、現在のステップに留まるnullコンテキスト定義の順番で決まる→→次のステップに画面遷移する（returnなしの場合もこれに相当する）文字列文字列で指定したnameキーを持つコンテキストに対応した画面に遷移する表5-7-1　before-move-nextstepキーで指定するメソッドの返り値　コンテキスト定義内には、表5-7-2に示すキーで、メソッド名を定義できます。いずれも、INTERMediatorOnPage変数のオブジェクトとして、キーに対する値を名前に持つメソッドを定義します。before-move-nextstepキーのメソッドは前に示すように返り値により動作を定義できますが、残り2つのキーに対するメソッドは、引数も返り値も不要です。例えば、あるステップだけ、特定のフッターが必要な場合には、あらかじめdisplayスタイルをnoneにしておいて画面には見えないようにしておき、just-move-thisstepキーの値の名前のメソッドでフッターを表示します。また、just-leave-thisstepキーの値の名前のメソッドでフッターを非表示にします。コンテキスト定義でのキーメソッドの呼び出しタイミングbefore-move-nextstepセルをタップしたとき→just-move-thisstepコンテキストのページ合成を終えた直後→just-leave-thisstep次のコンテキストに移行する直前表5-7-2　コンテキスト定義で指定できるステップ動作関連のメソッド　before-move-nextstepキーで指定するメソッド内では、現在のステップや、それ以前のステップで選択した項目など得るために、以下の変数や、メソッドを利用することができます。→IMLibPageNavigation.stepNavigation　→→ステップ動作で選択したそれぞれのセルが順番に入力された配列。最後の要素が、今表示されている画面での選択結果となる。要素は、key、contextの2つのプロパティを持つオブジェクトである。contextは、そのステップで利用されたコンテキストオブジェクト（IMLibContextクラス）を参照するので、選択したデータはもちろん、関連するフィールドや他のレコードを含めて参照できる。keyは、選択したレコードのキーで、「主キーフィールド名=主キー値」の形式を持つ。コンテキストのstoreプロパティで、keyの値をキーにすると、選択したレコードが取り出せる。→IMLibPageNavigation.getStepLastSelectedRecord()　現在のコンテキストで選択したレコードを得る。　なお、ページの冒頭にスタティックな内容を表示して、ボタンをクリックすればステップ動作が始まるようにしたい場合には、全てのコンテキストのnavi-controlをstep-hideにして、以下のメソッドを実行して、ステップ動作のきっかけを作ることができます。→IMLibPageNavigation.startStep()　コンテキスト定義でのnavi-controlキーの値が全部step-hideの場合、このメソッドを実行することで、コンテキスト定義で最初にnavi-controlキーを持つコンテキストに対応する画面がページ上に表示する。　ステップ動作を自分でコントロールしたい場合には、次のようなメソッドを利用できます。いずれも、ボタンをタップした場合に、特別な処理をするような場合に利用できるでしょう。→IMLibPageNavigation.backToPreviousStep()　「戻る」ボタンと同等な処理を行う。なお、複数→→ステップを戻るには、このメソッドを必要回数指定する。→IMLibPageNavigation.moveNextStep(key)　セルをタップしたのと同じく→→ステップを進める処理を行う。この時、引数keyが、IMLibPageNavigation.stepNavigationの要素のkeyプロパティに設定される。　例えば、ボタンをタップしたら、別のステップに進みたいとします。ボタンのonclick属性に指定した関数で、「IMLibPageNavigation.moveNextStep(\"buttontapped\");」のように、moveNextStepメソッドを呼び出します。引数は適当な文字列ですが、レコードを選択したときには通常は「主キー=値」の形式になるものの、ここでは確実にレコードを選択したときと異なる値になるようなkeyプロパティを選んであります。そして、before-move-nextstepキーで指定したメソッド内で以下のように、直近の選択結果のkeyプロパティがmoveNextStepメソッドと同じかどうかを判定して、ボタンから次のステップに移動するのか、セルをタップするのかを判別することができます。リスト5-7-4　moveNextStepメソッドでのステップ移動をbefore-move-nextstepキーで指定したメソッド内で判定するvar lastKey = IMLibPageNavigation.stepNavigation[IMLibPageNavigation.stepNavigation.length - 1].key;\nif (lastKey === 'buttontapped') {\n    /* ボタンをタップした場合の処理 */\n} else {\n    /* セルをタップした場合の処理 */\n}→サンプルでのデータベースアクセス　ここでまず、データベースへのアクセスがどのようになっているのかを説明します。利用するテーブルは他のサンプルでもおなじみの、postalcodeです。日本郵便が配布しているデータで、f3フィールドが郵便番号、f7フィールドが都道府県名、f8フィールドが市区町村名、f9フィールドが町域名を示しています。また、idフィールドに連番が入力されていて、このフィールドが主キーになります。表5-7-3は、4つのコンテキスト定義で指定されている値で合成されるSQLステートメントコンテキスト名基本のSQLステートメントprefectureSELECT MIN(id) AS pref_id, f7 AS pref FROM postalcode GROUP BY f7citySELECT MIN(id) AS city_id, f8 AS city FROM postalcode GROUP BY f8townSELECT MIN(id) AS town_id, f9 AS town FROM postalcode GROUP BY f9wrapupSELECT * FROM postalcode表5-7-3　それぞれのコンテキストで実行される基本のSQLステートメント　まず、最初のprefectureコンテキストでのデータベースアクセス結果を検討しましょう。表5-7-3にあるようにSQLステートメントを実施します。都道府県はf7フィールドで得られますが、単に取ってくるだけだと、大量に「東京都」が出てきてしまいます。ここで、DISTINCTを使ったSELECT文も考えられるのですが、主キーフィールドを設定したいと考えます。この時、f3=東京都のレコードはたくさんありますが、ひとつのidフィールドの値を、コンテキストで得られるリレーションの主キーにするために、f7フィールドが同じレコードをGROUP BYでひとつにまとめるとともに、その中のidフィールドのうち、MIN関数で最小のものを取り出しています。仮にidが1から1000まで全部が東京都のレコードだったとします。その時、id=1なのか、id=2なのか、id=333なのかは、現実にはどれでもいいのです。ただし、f7フィールドしか参照しないというルールが守られていれば、idその中のひとつでいいので、ここでは最小値を取ってきています。prefectureコンテキストでは、appending-dataキーもあるので、結果的には、表5-7-4のようなリレーションが得られます。pref_idpref注釈1東京都SQL文で得られた結果101埼玉県appending-dataキーで追加された結果102神奈川県appending-dataキーで追加された結果103千葉県appending-dataキーで追加された結果表5-7-4　prefectureコンテキストで得られるリレーション　ここで「東京都」をタップしたとします。すると、リスト5-7-4に示したINTERMediatorOnPage.doAfterPrefSelectionメソッドがスタートします。「IMLibPageNavigation.getStepLastSelectedRecord()['pref'];」の実行により、「東京都」のレコードのprefフィールドの値、つまり「東京都」という文字列が得られ、lastSelection変数にセットされています。そして、次のコンテキストcityに対して、「f7 = '東京都'」という検索条件が追加され、つまりは、「SELECT MIN(id) AS city_id, f8 AS city FROM postalcode WHERE f7 = '東京都' GROUP BY f8」というSQLステートメントが実施されます。結果的には、表5-7-5のようなリレーションが得られます。ここでも、同一のf8フィールドでグループ化して、その中の最小のidフィールドの値を利用して、主キーのcity_idを求めています。city_idcity1千代田区447中央区605港区表5-7-5　cityコンテキストで検索条件「f7 = '東京都'」を付与して得られるリレーション　cityやtownのコンテキストでセルをタップしたときに呼び出すメソッドは、prefectureコンテキスト同様に、次のコンテキストに検索条件を加えるものです。具体的には、ソースコードを参照してください。→→→画面に固定されたヘッダーとフッター　まず、モバイルブラウザーでの縮小処理が行われないように、ページファイルのヘッダー部に「&lt;→meta name=\"→viewport\" content=\"initial-scale=1\"/&gt;」というタグを記述します。必要に応じて、ほかの記述も加えます。　モバイルアプリケーションの特徴である、固定されたヘッダーやフッターは、CSSの機能を利用します。サンプルでは、ページファイル内にスタイルシートを記述しました。ヘッダーとフッターに関連する部分を、リスト5-7-5に示しました。まず、画面全体は、id=containerで囲まれています。その中に、id=headerのヘッダー、スクロールするテーブルのid=contentのブロック、そしてフッターに相当するのはid=IM_CREDITの要素です。container内部はdisplayを→flexにして、固定値に配置されるようにしています。id=contentはdivタグで、その中にtableタグのテーブルがあります。そこでスクロールされるように、→overflowの値をscrollにしています。リスト5-7-5　ページファイル内に記述されたスタイルシートの一部#container {\n    display: flex;\n    flex-direction: row;\n}\n\n#header {\n    width: 100%;\n    text-align: center;\n    background-color: #2a2780;\n    color: white;\n    font-size: 160%;\n    padding: 8px 0;\n}\n\n#content {\n    overflow: scroll;\n}\n\n#IM_CREDIT {\n    width: 100%;\n    white-space: nowrap;\n}　しかしながら、CSSの定義だけでは画面にきっちりと配置はされません。画面の高さに応じて、id=contentの高さを調整することで、ヘッダーとフッターが画面上下のぴったりとした位置に配置されます。そのために、リスト5-7-6のようなプログラムをページファイル内に記述しました。ページ合成後や、デバイスを回転させた後に関数adjastObjectsを呼び出しています。そして、ヘッダー、フッター、画面の高さから、id=contentの高さを求めて設定をしています。なお、このプログラムは、ページデザインを変更した場合など、ヘッダーやフッターの状況によって作り変えが必要になります。リスト5-7-6　id属性がcontentの高さを調整するプログラムINTERMediatorOnPage.doAfterConstruct = function () {\n    document.getElementById('container').style.display = \"block\";\n    adjastObjects();\n};\n\nwindow.addEventListener(\"orientationchange\", function () {\n    adjastObjects();\n});\n\nfunction adjastObjects() {\n    var headerNode = document.getElementById('header');\n    var footerNode = document.getElementById('IM_CREDIT');\n    var wHeight = screen.availHeight;\n    var stepBoxHeight = wHeight - headerNode.clientHeight - footerNode.clientHeight;\n    document.getElementById('content').style.height = stepBoxHeight + \"px\";\n}→そのほかのスタイル設定　リスト5-7-7も、ページファイル内に定義したスタイルシートです。まず、stepboxクラスは、tableタグに適用されており、テーブルを画面はばいっぱいに表示するとともに、余計なマージンが設定されないようにして、空白なくヘッダーや画面左右の境界までレイアウトされています。セルについては、高さを32pxにするとともに、フォントサイズを大きめにしました。また、セルの右にある▶︎は、このようにセルを分離してクラスaccessaryを設定し、CSS属性でキャラクタを表示しています。最後には、ヘッダーの左端にある「戻る」ボタンのクラスであるIM_Button_StepBackに対しての設定があります。ヘッダー内で固定位置に配置されるように、positionをabsoluteにして、座標位置や幅を数値で与えています。リスト5-7-7　そのほかのスタイル設定.stepbox {\n    width: 100%;\n    margin: 0;\n}\n\ntd.accessary {\n    width: 20px;\n    text-align: right;\n}\n\ntd.accessary::after {\n    content: \"︎▶\";\n    color: #9b9b9b;\n}\n\ntd {\n    height: 32px;\n    font-size: 130%;\n}\n\n.IM_Button_StepBack {\n    position: absolute;\n    top: 8px;\n    left: 4px;\n    width: 40px;\n    cursor: pointer;\n    color: #9393ee;\n}\n→演習入力のあるステップ動作のページ　ステップ動作を行うページでは、表示されたものの選択をすることが一般的な使い方ですが、さらに、テキストエリアなどの入力可能なコンポーネントがある場合のサンプルを演習で作ってみます。ここまでに説明したサンプルでは、選択結果はそのままではデータベースにバインドされていないので、もし、データベースに反映させるとしたら、JavaScriptで書き込みを行うようなプログラムが必要でした。同様に入力可能なコンポーネントがあっても直接バインドはできませんので、ローカルコンテキストにバインドして、必要な時にプログラムで入力した値を得られるようにします。なお、この演習は、FileMakerではできません。定義ファイルエディターを開き最初のコンテキストを入力1ここからの作業は、Webブラウザー上で行います。まず、演習環境を起動します（『1-2　演習を行うための準備』を参照）。続いて、ブラウザーで、「http://localhost:9080」に接続します。「トライアル用のページファイルと定義ファイル」というタイトルの部分を特定します。2「def15.phpを編集する」をクリックし、定義ファイルエディターでdef15.phpファイルを編集します。（もし、他の用途で15番目を利用しているのなら、例えば、def21.phpを利用するなど、別の番号のセットを使用してください。その場合ソースコードの記述が変わる部分がありますが、可能な限り注記します。）3ページ上の「Show All」ボタンをクリックして、全ての項目を表示します。4Contextsの中のQueryと書かれた背景がグレーの部分を特定します。そして、その次の行の右の方にある「削除」をクリックして、Queryの設定がある行を削除します。5「レコードを本当に削除していいですか？」とたずねられるので、OKボタンをクリックします。6同様に、Sortingの次の行にある「削除」ボタンを押し、確認にOKボタンをクリックして、こちらの設定も削除しておきます。7nameを「citylist」、tableを「dummy」、viewを「postalcode」、keyを「city_id」、pagingを空欄、repeat-controlを空欄、navi-controlを「step」、recordsを「10000」、maxrecordsを「10000」、before-move-nextstepを「doAfterCitySelection」とします。さらに、Aggregation Query Accessにあるselectを「MIN(id) AS city_id, f8 AS city」、fromを「postalcode」、group-byを「f8」とします。2つ目のコンテキストを入力1引き続き定義ファイルエディターでの作業を続けます。Contextsのすぐ下にある「追加」ボタンをクリックして、新たにコンテキスト定義を追加します。2nameを「opinion」、tableを「dummy」、viewを「postalcode」、navi-controlを「step-hide」、recordsを「1」、maxrecordsを「1」、before-move-nextstepを「doAfterOpinion」とします。その他は空欄にします。3Database Settingsにあるdb-classは「PDO」のままでかまいません。dsnには「mysql:host=db;dbname=test_db;charset=utf8mb4」と入力します。そして、userに「web」、passwordに「password」と入力します。4Debugについては、「false」にすると、デバッグ情報が出なくなります。なお、デバッグ情報をみながら動作を確認したい方は、「2」のままにしてこの後の作業を行っても構いませんが、ブラウザーをモバイルシミュレーション動作させるとページ上でのデバッグ情報の参照ややりにくくなるので、コンソール等で参照してください。ページファイルの修正1「http://localhost:9080」で開いたページに戻り「page15.htmlを編集する」をクリックし、ページファイルのpage15.htmlを編集するページファイルエディターが開きます。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）2最初にヘッダー部に、metaタグの要素をひとつ追加します。&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"initial-scale=1\"&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;script type=\"text/javascript\" src=\"def15.php\"&gt;&lt;/script&gt;3ヘッダー部の、def15.phpを含むscriptタグの次に、以下のプログラムをscriptタグで囲んで記載します。なお、最初の方は、サンプルプログラムのページファイルにあるものと同一ですので、そちらからコピーしてペーストしましょう。後半は入力します。太字の部分は入力、それ以外の部分はサンプルファイルからのコピー&amp;ペーストを行います。citylist、opinionのそれぞれのコンテキストで定義されたbefore-move-nextstepキーの値がメソッド名になります。INTERMediatorOnPage変数のオブジェクトに、そのメソッドを定義します。citylistでのタップにより、その時にcity_idフィールド値を次のopinionコンテキストの検索条件に設定しています。opinionコンテキストは最後のページなので、遷移しないようにfalseを返しています。&lt;script&gt;\n    INTERMediatorOnPage.doAfterConstruct = function () {\n        document.getElementById('container').style.display = \"block\";\n        adjastObjects();\n    };\n\n    window.addEventListener(\"orientationchange\", function () {\n        adjastObjects();\n    });\n\n    function adjastObjects() {\n        var headerNode = document.getElementById('header');\n        var footerNode = document.getElementById('IM_CREDIT');\n        var wHeight = screen.availHeight;\n        var stepBoxHeight = wHeight - headerNode.clientHeight - footerNode.clientHeight;\n        document.getElementById('content').style.height = stepBoxHeight + \"px\";\n    }\n\n    INTERMediatorOnPage.doAfterCitySelection = function () {\n        var lastSelection = IMLibPageNavigation.getStepLastSelectedRecord()['city_id'];\n        INTERMediator.clearCondition('opinion');\n        INTERMediator.addCondition('opinion', {field: 'id', operator: '=', value: lastSelection});\n    };\n\n    INTERMediatorOnPage.doAfterOpinion = function () {\n        return false;\n    };\n    \n    function finishSurvey() {\n        IMLibQueue.setTask(function(completeTask) {\n            var opinion = IMLibLocalContext.getValue('opinion');\n            var selkey = IMLibPageNavigation.stepNavigation[0].key;\n            var city = IMLibPageNavigation.stepNavigation[0].context.store[selkey]['city'];\n            alert('市区町村: ' + city +'\\nご意見: ' + opinion);\n            completeTask();\n        });\n    }\n&lt;/script&gt;4ヘッダー部の、末尾に以下のスタイルシートをstyleタグで囲んで記載します。なお、最初の方は、サンプルプログラムのページファイルにあるものと同一ですので、そちらからコピーしてペーストしましょう。後半は入力します。太字の部分は入力、それ以外の部分はサンプルファイルからのコピー&amp;ペーストを行います。ボタンとテキストフィールドの枠線が消えてしまうので、そのためのスタイルを追加しました。&lt;style&gt;\n            #container {\n            display: flex;\n            flex-direction: row;\n        }\n\n        #header {\n            width: 100%;\n            text-align: center;\n            background-color: #2a2780;\n            color: white;\n            font-size: 160%;\n            padding: 8px 0;\n        }\n\n        #content {\n            overflow: scroll;\n        }\n\n        .stepbox {\n            width: 100%;\n            margin: 0;\n        }\n\n        td.accessary {\n            width: 20px;\n            text-align: right;\n        }\n\n        td.accessary::after {\n            content: \"︎▶\";\n            color: #9b9b9b;\n        }\n\n        td {\n            height: 32px;\n            font-size: 130%;\n        }\n\n        #IM_CREDIT {\n            width: 100%;\n            white-space: nowrap;\n        }\n\n         .IM_Button_StepBack {\n            position: absolute;\n            top: 8px;\n            left: 4px;\n            width: 40px;\n            cursor: pointer;\n            color: #9393ee;\n         }\n    \n    textarea {\n        margin: 2px;\n        padding: 2px;\n        border: 1px solid gray;\n    }\n    \n    button {\n        margin: 2px;\n        padding: 2px;\n        border: 1px solid gray;\n  }\n&lt;/style&gt;\n5ボディ部は以下のように記述します。bodyタグ以外は全て手入力する必要があります。&lt;body&gt;\n&lt;div id=\"container\" style=\"display: none\"&gt;\n    &lt;div id=\"header\"&gt;\n        &lt;span class=\"IM_Button_StepBack\"&gt;◀︎&lt;/span&gt;\n        アンケート\n    &lt;/div&gt;\n    &lt;div id=\"content\"&gt;\n        &lt;table class=\"stepbox\"&gt;\n            &lt;thead&gt;\n              &lt;tr&gt;&lt;td colspan=\"2\"&gt;住んでみたい市区町村を選択してください。&lt;/td&gt;&lt;/tr&gt;\n            &lt;/thead&gt;\n            &lt;tbody&gt;\n            &lt;tr&gt;\n                &lt;td&gt;&lt;span data-im=\"citylist@city\"&gt;&lt;/span&gt;&lt;/td&gt;\n                &lt;td class=\"accessary\"&gt;&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;/tbody&gt;\n        &lt;/table&gt;\n        &lt;table class=\"stepbox\"&gt;\n            &lt;tbody&gt;\n            &lt;tr&gt;\n                &lt;td&gt;\n                  &lt;span data-im=\"opinion@f7\"&gt;&lt;/span&gt;\n                  &lt;span data-im=\"opinion@f8\"&gt;&lt;/span&gt;\n                  を選択しました\n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;\n                  この市区町村に関する感想を書いてください&lt;br&gt;\n                  &lt;textarea data-im=\"_@opinion\" style=\"width: 90%; height: 80px;\"&gt;&lt;/textarea&gt;\n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td&gt;&lt;button onclick=\"finishSurvey()\"&gt;アンケート結果を送る&lt;/button&gt;&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;/tbody&gt;\n        &lt;/table&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\nテキストエリアにあるdata-im属性は、ローカルコンテキストを利用することを示しています。ターゲット指定の最初の部分であるコンテキストの指定が「_」であれば、ローカルコンテキストです。Chromeを利用してモバイルシミュレーションで稼働させる1ここからの作業は、Chromeを使います。ここまで別のブラウザーで作業をしていて、ここからChromeを使うこともできます。「http://localhost:9080」で開いたページに戻り、「page15.htmlを表示する」をクリックして、ページを開きます。2デベロッパーツールを開きます。Macだと、command+option+I（アルファベットの「アイ」）、Windowsのだとctrl+shift+Iです。3デベロッパーツールのElementsの左にあるモバイルツールボタンをクリックするなどして、画面をモバイルシミュレーションにします。必要に応じて、ツールの設定後に更新を行います。最初のページが表示され、市区町村の一覧が見えています。4適当なセルをタップして、次の画面に移動します。テキストエリアが見ているので、適当に入力します。5「アンケート結果を送る」ボタンをクリックすると、ダイアログボックスに、最初の画面での選択結果と、次の画面での入力値が表示されました。ダイアログボックスで表示する部分は、finishSurvey関数です。ここで例えば、データベースに書き込むスクリプトを記述すれば、アンケート結果の保存ができるようになります。データベース処理の記述は、『6-3　データベースへの書き込みを直接行う』で説明しています。演習のまとめnavi-controlキーの値がstepあるいはstep-hideのコンテキストに対応したエリアをそれぞれ1画面として、画面が切り替わるステップ動作のページを作成することができます。ページ内は、データベースの内容を表示することができます。クラスがIM_Button_StepBackのspanタグ要素が「戻る」ボタンになります。オブジェクトの配置をするだけで、ボタンが適切に動作します。画面遷移の時に呼び出されるメソッドをbefore-move-nextstepキーで指定します。画面でセルをタップしたときに呼び出され、次の画面のデータベースアクセスの条件設定などができます。ページ内にテキストエリアなどを配置した場合、ローカルコンテキストとしてバインドしておけば、後から値をプログラムで取り出すことができます。→このセクションのまとめ　ステップ動作は、ひとつのコンテキストごとに画面に表示する機能で、ある種のモバイルアプリケーションでよく見られる形式であるとも言えます。画面の構築はもちろん、タップ後の画面遷移もコンテキスト定義に定義されている順序で順番に行われます。また、戻るボタンの動作も自動的に行われます。タップ時には定義したメソッドを呼び出せるので、そこでさまざまな処理を記述できますし、遷移をやめたり順序と関係ない別のコンテキストに遷移したり、さまざまな動作を実装できます。ただし、JavaScriptのプログラミングが必要になります。→5-8コピー結果を残すルックアップFileMakerの→ルックアップと同等な機能をINTER-Mediatorでは実装しています。ルックアップは別のコンテキストの値をコピーする機能です。Accessにあるルックアップはポップアップメニューを構築する機能なのでここでのルックアップとは異なります。INTER-Mediatorでは「ルックアップ」と言えば、FileMakerのルックアップ機能を示すものとします。→「ルックアップ」の意味について　まず、ルックアップの動作について概念的に説明をしますが、あまり抽象的だとイメージが湧かないので、表の上でのサンプルで説明をします。図5-8-1のようなテーブルがあったとします。「販売明細」テーブルは、伝票で言えば明細として繰り返して表示されるレコードを管理する部分です。ここで、「販売明細」テーブルとは別に、商品マスターとしての「商品」テーブルがあったとします。図5-8-1　よくある商品マスターを使ったリレーションシップ　図5-8-1の下半分にあるように、それぞれの「商品ID」フィールドの値を元にテーブル結合すれば「販売明細」の各行で、それまでにはなかった「商品名」と「単価」が得られて、例えば、伝票として実際に表示する場合に商品名が明細内部に見えるようになったり、単価と個数をかけて金額を求めるということができるようになります。　データベースの正規化理論では当たり前のことです。このようなマスターを別テーブルに用意すると、例えば、単価が変われば、マスターだけを変更すると、それを参照している明細全てて単価が変更できます。ただ、これはそのようにしたい場合はそれでいいのかもしれませんが、逆に、単価が変わっても、すでに発行した伝票の明細の単価は変わってほしくない場合もあります。どちらが正しいということではなく、これはそのアプリケーションに必要な要求がどちらかということです。前者のような状況では、正規化したテーブルを用意すればいいのですが、後者のような場合どうすれば良いかはなかなか難しく、よくある方法は、単価が期間で決定される場合には「商品」テーブルにフィールドを増やして「単価の有効期間」的な概念を導入して、うまく処理をする必要があります。ここではその話はメインではありませんので、できるけども難しいというところで話を終わらせます。　このような「その時点での単価を記録したい」というニーズに対応するのがルックアップです。図5-8-2を参照してください。ここでは、「販売明細」に「商品名」「単価」というフィールドがありましたが、図5-8-1では空欄のままでした。これらのフィールドに、「商品」テーブルの現在の値をコピーします。その時、「商品ID」がコピーする元データを取り出す手掛かりになります。もちろん、「販売明細」の「商品ID」を元に、同一の値を持つ「商品」テーブルのレコードを探して、該当するフィールドをコピーするということを行います。図5-8-2　ルックアップの仕組みにより「販売明細」に商品名と単価をコピーした　この仕組みを一般的に利用できるようにしたものが、「ルックアップ」です。ここでは説明のために、2つのレコードを同時に更新しましたが、INTER-Mediatorでは基本的にはユーザインターフェースのレイヤでコピー作業を行い、ここで、外部キー（「商品ID」フィールド）をきっかけにするために、1レコード単位でルックアップ動作をするようになっています。FileMakerはメニュー選択等により、複数のレコードで処理ができるようになっていますが、INTER-Mediatorは1レコード単位での動作が基本です。　このような動作について、正規化に反するのではないかという意見もあるかもしれませんが、「単価は一定ではない」という条件がシステムに入り込むとしたら、単純な商品マスターは要求を取り込めていないということになります。「一定ではない」ものをいかにうまく扱うかがアプリケーション開発者の腕の見せ所です。正規化の理論に完全にマッチする回答ではないかもしれませんが、このルックアップは意外に色々な状況にうまく適合してくれます。一般に「紙の上での作業」は、基本、ルックアップと同じです。内容は紙の上に固定されるので、マスターの変更に追随しては困ることが多いでしょう。また、コピーしたフィールド自体を変更しても問題ない場合は、例えば、単価の値引きといった作業も手軽にできます。完全を目指すよりも、ルックアップのような仕組みをうまく利用することの方が、利用者にとって都合が良く、開発者はシンプルな手法で対応できるということは、FileMakerでの長年の開発経験からも証明されています。→サンプルでの動作をまずはチェックする　サンプルの中にルックアップを実装したものがあるので、それを見てみましょう。サンプルのページの「Any Kinds of Samples」の中にある「Client-Side Calculation Page」のMySQL対応版を見てみます。レポジトリ内では、samples/Sample_invoice/invoice_MySQL.htmlとinclude_MySQL.phpが対象ファイルです。このサンプルは、伝票形式なのですが、ルックアップも利用できるように、デザイン的にはちょっと変な感じになっています。明細がないページを作り、ここで明細を新たに作ったすぐの結果は、図5-8-3のとおりです。図5-8-3　明細を作った直後　明細の中は、明細の1行を管理するitemテーブルを元にしたitemコンテキストと、商品マスターであるproductテーブルを元にした、productおよびproduct_listコンテキストがあります。productコンテキストはルックアップを実施するために追加で必要なコンテキストです。product_listはポップアップメニューの選択肢のために利用します。明細の最初のセルを理解するのに必要な部分をリスト5-8-1に示しました。リスト5-8-1　リストの最初のセルにあるオブジェクトitemテーブルのフィールド（抜粋）\n{id, invoice_id, product_id, qty, product_unitprice, product_name, product_taxrate}\nproductテーブルのフィールド（抜粋）\n{id, category_id, unitprice, name}\n\nリストの最初のセルのHTML\n&lt;div&gt;\n    &lt;input type=\"text\" data-im=\"item@product_id\" size=\"2\"&gt;\n&lt;/div&gt;\n&lt;div class=\"inline\" data-im-control=\"enclosure\"&gt;\n    &lt;div class=\"inline\" data-im-control=\"repeater\"&gt;\n        &lt;span data-im=\"product@name\"&gt;&lt;/span&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;select data-im=\"item@product_id\" class=\"_im_test-product-id\"&gt;\n    &lt;option data-im=\"productlist@id@value productlist@name\"&gt;&lt;/option&gt;\n&lt;/select&gt;　リストの最初のセルには、データベースとバインドした要素が3つあります。最初が、item@product_idとバインドしたテキストフィールド、3つ目に同じフィールドであるitem@product_idとバインドしたポップアップメニューがあります。2つ目は、data-im-control=\"enclosure\"がある要素に囲まれており、この中にはproductコンテキストのnameフィールドが表示されています。productコンテキストのrelationキーの値は、[['foreign-key' =&gt; 'id', 'join-field' =&gt; 'product_id', 'operator' =&gt; '=',]] となっていて、itemコンテキストのproduct_idと、productコンテキストのidで照合するリレーションシップが定義されています。そのため、ターゲット指定がproduct@nameの要素には、ポップアップあるいはテキストフィールドで指定したproductレコードのnameフィールド（つまりは商品名）が見えているはずです。この2つ目のコンテキストは、リレーションシップの先の値を実際に表示して確認するために用意しており、一般にはアプリケーションでこうした措置は不要でしょう。　ここでポップアップメニューで「Orange」を選択します（図5-8-4）すると、ポップアップメニューが変わるのは当然として、product_idフィールドが変わったので、最初のセルの最初のテキストフィールドの値も変わります。そして、product_nameにはOrange、unitpriceには1540と、productテーブルのid=2のレコードの値が入っています。図5-8-4　ポップアップメニューで「Orange」を選択　ここでは、3列目と4列目の2つのセルがリスト5-8-2のように存在し、いずれも、itemコンテキストのproduct_name、product_unitpriceのフィールドにバインドされています。これに加えて、data-im-control属性が存在し、3列目の指定は、itemコンテキストのproduct_idの値が変更されたら、productコンテキストのnameフィールドの値を取り出して、このテキストフィールドに入れるということを意味しています。結果的に、itemコンテキストのprodcut_itemフィールドに、product_idフィールドに対応したproductテーブルのnameフィールドの値がコピーされます。4列目もフィールド違いますが、基本的には同じ動作になります。リスト5-8-2　リストの3、4列目のセルにあるオブジェクトproduct_name列のセルにあるテキストフィールド\n&lt;div&gt;\n    &lt;input type=\"text\" size=\"20\"\n            data-im=\"item@product_name\"\n            data-im-control=\"lookup:item@product_id:product@name\"&gt;\n            &lt;/div&gt;\n\nunitprice列のセルにあるテキストフィールド\n&lt;div&gt;\n    &lt;input class=\"price\" type=\"text\" size=\"8\"\n           data-im=\"item@product_unitprice\"\n           data-im-control=\"lookup:item@product_id:product@unitprice\"\n           data-im-format=\"number()\"\n           data-im-format-options=\"useseparator\"&gt;\n&lt;/div&gt;　ここで、product_nameの列のフィールドは、itemコンテキストのproduct_nameフィールドであり、productテーブルのnameフィールドではありません。そこで、商品名を適当に変えても、1列目に見えている商品名（これはproductテーブルのnameフィールドが見えている）は「Orange」のままになります。つまり、「Orange」という文字列がproduct_nameフィールドにコピーされていて、それを修正しているので、マスター側には変更の影響は及ばないということになります。図5-8-5　product_nameの値を変更する→ルックアップを実行するための設定　ルックアップを設定するためには、data-im-control属性の設定が必要ですが、それに至るまでに、コピー先のフィールドの用意、リレーションシップ先のコンテキスト定義など、さまざまな作業が発生します。自分自身のバインドとも関係あるため設定はややこしいですが、可能な限りシンプルに設定できいるように考えました。　data-im-control属性は次のようなルールで記述します。まず、最初に「lookup」という決められたキーワードを記述し、続いて、半角のコロン（:）で区切って、→lookup意外にさらに2つの記述を行います。lookupを記述するのは第一パートと呼ぶことにします。第二パートは、変更が発生するフィールドを、「コンテキスト名@フィールド名」つまりターゲット指定の形式で指定します。第二パートで指定したフィールドが変更されると、第三パートで指定した「コンテキスト名@フィールド名」のフィールドの値を、自分自身の要素にバインドしているフィールドにコピーします。第3パートに出てくるコンテキストは、原則として第二パートのコンテキストとの関連付けが成り立つようなrelationキーの定義が必要になります。第2、第3パートは、フィールド名以降は何も指定しないでください。ターゲット指定と書きましたが、実際にはコンテキストに含まれるデータベースから取り出した値になり、要素に関連する指定ではないからです。→このセクションのまとめ　リレーションシップの先からデータをコピーしてフィールドに設定するルックアップの仕組みは、INTER-Mediatorではユーザインターフェース上で実現しています。ひとつのレコードに対して、該当するフィールドが更新されると、別のフィールドが別のコンテキストから取り出した値で埋められるという動作になります。ルックアップの仕組みは意外に便利に使える場面があるので、データベース設計では考慮する必要がある仕組みです。→5-9アプリケーションのローカライズ　ブラウザの有線言語に応じて、ページ上のメッセージを切り替える仕組みをここでは「ローカライズ」と称します。見出しや表のラベルなど、常に一定で良い文字列もありますが、場合によってはデータベースの出力結果を言語ごとに文字列を切り替えるということをやりたいかもしれません。これらの仕組みを紹介します。→ローカライズが可能な機能　→ローカライズの機能は、ひとつではなく、いくつかの機能で実現しています。また、「新規レコード」ボタンの名前を置き換えるカスタマイズの機能（コンテキスト定義に記述するbutton-namesキー）も、ある意味で、状況に応じた文字列の置き換えではありますが、ここでは、ブラウザの言語に応答する機能に絞ることにします。次のような機能があります。それぞれ、順番に説明をします。①システムが生成する文字列のローカライズ②特定のHTML要素内の文字列③データベースから取り出した文字列→システムが生成する文字列とそのローカライズ　「挿入」や「削除」のボタンがありますし、場合によってはアラートボックスで何かメッセージが出てきます。それら、システムが利用する文字列（以下、「システムメッセージ」と呼びます）は、PHPのソースコードの中に定義してあります。レポジトリでは、src/php/Message/MessageStrings.phpに英語の文字列を定義し、これを基準、つまり言語に対応するリソースが用意されていない場合に選択される言語（もしくは文字列）とします。このクラス以外に、日本語の文字列として、src/php/Message/MessageStrings_ja.phpが定義されています。残念ながら、Ver.12現在他の言語についてはリソースは用意されていません。リソース自体は、日本語リソースのクラスと同様、MessageStrings_言語.phpのファイルとクラスを用意して、配列内にあるメッセージを置き換えれば作成はそれほど難しくはありません。　このメッセージを変更するには、もちろん、ソースを修正すれば置き換えられますが、手軽な方法ではなく、また、変更結果を後々管理するとすれば、その方法を取ることは躊躇しそうです。そこで、params.phpファイルの配列に定義することで、値をそのアプリケーション全体に反映させることが可能です。　params.phpファイルに設定するには、リスト5-9-1のように、$messages配列を定義します。1次元目は言語で、英語は'default'にします。英語以外は日本語なら'ja'など、クラス名の最後の2文字を指定します。2次元目はメッセージ番号です。この番号は、ソースコードの中を調べて該当する番号を記述してください。以下の定義により1022番のメッセージ（非対応のブラウザを使っている場合のメッセージ）を代入した文字列に置き換えることができます。リスト5-9-1　params.phpで→→システムメッセージを置き換える$messages['default'][1022] = \"We don't support Internet Explorer. We'd like you to access by Edge or any other major browsers.\";\n$messages['ja'][1022] = \"Internet Explorerは使用できません。Edgeあるいは他の一般的なブラウザをご利用ください。\";→特定のページ内→→要素をローカライズする　ページファイル内でローカライズしたい要素に対して、→data-im-locale属性を指定し、その項目に対する文字列をparams.phpあるいはIM_Entry関数の第2引数（オプション引数）の配列で指定します。リスト5-9-2には、thタグとh1タグに、data-im-locale属性が指定してあります。そして、このページファイルから、リスト5-9-3のような定義ファイルを参照しているとします。thタグのdata-im-localeの値は「category」です。もし、英語が優先言語のブラウザでページを参照したときには、→termsキー以下、英語を示すen以下の\"category\"キーの値を取り出し、thタグの中身は「Category」となります。日本語が優先言語なら同様にja以下を探して「カテゴリ」がthタグの値に設定されます。もし、英語と日本語以外のブラウザを利用してページを表示した場合は、もともとthタグに設定されている「category」が見えます。したがって、言語ごとの文字列を定義するだけでなく、ページ上にも既定の文字列をきちんと入力しておく必要があります。h1タグのdata-im-locale属性は「page|title」となっています。これは、terms/言語以下の部分を、|で区切って階層的に辿ることができ、ここではpageキーの下のtitleキーの値を取り出します。配列をフラットに定義するだけでなく、分類ができるようになっていると考えてください。リスト5-9-2　要素にdata-im-locale属性を指定する&lt;h1 data-im-locale=\"page|title\"&gt;Contact Management&lt;/h1&gt;\n&lt;table&gt;\n    &lt;tr&gt;&lt;th data-im-locale=\"category\"&gt;category&lt;/th&gt;....リスト5-9-3　IM_Entry関数の第2引数にtermsキーを指定するIM_Entry(\n    [...], // コンテキスト定義\n    [\n        \"terms\" =&gt; [\n            \"en\" =&gt; [\n                \"header\" =&gt; \"INTER-Mediator - Sample - Form Style/MySQL\",\n                \"category\" =&gt;\"Category\",\n                \"check\" =&gt; \"Check\",\n                \"page\" =&gt; [\n                    \"title\" =&gt; \"Contact Management (Sample for Several Fundamental Features)\",\n                ],\n            ],\n            \"ja\" =&gt; [\n                \"header\" =&gt; \"INTER-Mediator - サンプル - フォーム形式/MySQL\",\n                \"category\" =&gt;\"カテゴリ\",\n                \"check\" =&gt; \"チェック\",\n                \"page\" =&gt; [\n                    \"title\" =&gt; \"コンタクト先管理 (さまざまな機能を確認するためのサンプル)\",\n                ],\n            ],\n        ],\n    ],\n    [\"db-class\" =&gt; \"PDO\",],\n    0\n);　前の例ではバインドしていない要素に対してローカライズを行いましたが、バインドしている要素に対しても行えます。リスト5-9-4は、ポップアップメニューの選択肢に関してローカライズを施します。optionタグに対してdata-im-locale属性が指定されていて、その値「way」に対する配列が、リスト5-9-5に示す定義ファイルのオプション引数に指定があります。ここで、wayの配列について、キーにはデータベースから得られる値、そしてその値には実際に選択肢として見える文字列を指定します。つまり、データベースからは「Calling」や「Mail」という値を得て、書き込みもこれらの文字列になります。そして、ブラウザが英語の場合にはそれぞれ「Telephone」「Papar Mail」、日本語だと「電話」「電子メール」という文字列に置き代わります。ここでのway以下の配列のキーにない値が得られら場合は、その値そのものが利用され、つまりはローカライズ対象外となります。リスト5-9-4　要素にdata-im-locale属性を指定する&lt;select data-im=\"contact@kind\"&gt;\n    &lt;option data-im=\"cor_way_kindname@kind_id@value cor_way_kindname@name_kind\"\n                data-im-locale=\"way\"&gt;&lt;/option&gt;\n&lt;/select&gt;リスト5-9-5　IM_Entry関数の第2引数にtermsキーを指定するIM_Entry(\n    [...], // コンテキスト定義\n    [\n        \"terms\" =&gt; [\n            \"en\" =&gt; [\n                \"way\" =&gt; [\n                    \"Calling\" =&gt; \"Telephone\",\n                    \"Mail\" =&gt; \"Paper Mail\",\n                    \"Email\" =&gt; \"Electronic Mail\",\n                ],\n            ],\n            \"ja\" =&gt; [\n                \"way\" =&gt; [\n                    \"Calling\" =&gt; \"電話\",\n                    \"Mail\" =&gt; \"手紙\",\n                    \"Email\" =&gt; \"電子メール\",\n                ],\n            ],\n        ],\n    ],\n    [\"db-class\" =&gt; \"PDO\",],\n    0\n);　データベースとバインドした要素のローカライズについては、読み出し時のみに適用されます。前の例では、optionのvalue属性はデータベースに存在する値、optionタグの値は置き換えた値になって、つまりは書き込むときにはデータベースにあるべき値（つまり、wayキーの配列のキーにあるいずれかの値）になります。したがって、ローカライズの結果とポップアップメニューを選択したときにデータベースに書き込む値はうまく対応づけられます。一方、同じことをテキストフィールドに設定した場合、テキストフィールドには言語ごとの値に置き換わったとしても、テキストフィールドを修正してデータベースに書き戻す際にはテキストフィールド値そのものがデータベースに書き込まれます。その点では、このバインドした要素のローカライズは、ポップアップ、チェックボックス、ラジオボタンでの利用が中心であると考えられます。　以上のように、「data-im-localeがあって、data-imがない」場合と、「data-im-localeとdata-imがある」場合とに分けられます。前者は、data-im-locale属性の値を元にterms/言語以下の値に置き換えますが、後者はさらにデータベースから取り出した値をterms/言語以下の配列に適用して文字列変換を行います。前の例では、termsキーを定義ファイルに設定しましたが、リスト5-9-6のようにparams.phpでは→$terms変数に定義して、システム全体に同一の変換テーブルを与えることもできます。リスト5-9-6　params.phpに指定した$terms変数の例$terms = [\n    'en' =&gt; [\n        'header' =&gt; 'INTER-Mediator - Sample - Form Style/MySQL',\n        'page-title' =&gt; 'Contact Management (Sample for Several Fundamental Features)',\n    ],\n    'ja' =&gt; [\n        'header' =&gt; 'INTER-Mediator - サンプル - フォーム形式/MySQL',\n        'page-title' =&gt; 'コンタクト先管理 (さまざまな機能を確認するためのサンプル)',\n        'category' =&gt; 'カテゴリ',\n        'check' =&gt; 'チェック',\n    ],\n];→このセクションのまとめ　ページ内の要素の文字列を接続してきた言語ごとに異なるものにすることができます。つまり、これによって、ブラウザの言語に応じて、異なる文字列をページ上に表示することができ、いわゆるローカライズの仕組みが利用できます。要素そのものの値を言語ごとに切り替えるだけでなく、データベースから取り出した値のローカライズも可能です。\n"
    },
    {
        "id": 1006,
        "parent": "/ja/tutorial/",
        "path": "/ja/tutorial/proof-06.html",
        "title": "JavaScriptでのプログラミング",
        "breadcrumb": "chapter 6",
        "body": "→Chapter 6JavaScriptでのプログラミングこの章は、INTER-Mediator Ver.10をもとに記載しました。INTER-Mediatorはアプリケーションの基本的な動作を宣言的な記述、つまりページファイルと定義ファイルの作成で行います。その上で、さまざまな要求に応えるために、プログラミングが可能になっています。この章では、クライアントサイドで稼働するJavaScriptのプログラミングについて、INTER-Mediatorが持つAPIを中心に説明します。アプリケーション開発で使うことを意図したメソッドやプロパティについては、マニュアルのサイトにある『クライアント側でのJavaScriptの処理』にまとめてあります。JavaScriptの記述方法は、『2-3　JavaScriptプログラムの記述』に説明があります。この章では、その内容を受けて、実際のニーズに関わる内容を説明します。→6-1再合成を利用した検索ページ→コンテキストの検索条件やソート条件は、JavaScriptのプログラムにより追加することができることを、『2-5　検索と並べ替えに関する設定』の『JavaScriptで検索条件を付加する方法』でも説明しました。このセクションでは、その機能や、URLからのパラメーター取得の機能、ページの再合成を行利用することで、検索ページを作成します。検索のユーザーインターフェースについては『2-5　検索と並べ替えに関する設定』でも説明しましたが、検索条件をJavaScriptのプログラムで与えることで、より柔軟に要求へ応えることができます。→コンテキストの→検索条件および→ソート条件　『2-5　検索と並べ替えに関する設定』での説明の通り、コンテキスト定義には、queryおよびsortキーによって、検索条件とソート条件を付加することができます。これらの設定をもとに、単にデータベースのテーブルにアクセスするのではなく、必要なレコードに絞り込み、望む順序に並べたリレーションを得ることができます。この設定は、定義ファイルのコンテキストの中に行えば、固定的な設定となり、そのコンテキストでクエリーすなわちデータベースからの読み出しを行うときには常に適用されます。加えて、JavaScriptによって条件を追加することもできます。　JavaScriptによる条件の追加は、INTERMediator変数のオブジェクトに対するadditionalConditionおよびadditionalSortKeyプロパティへの追加によって実現されますが、これらのプロパティはセッター／ゲッターで実装されています。プロパティの変更時に、ローカルストレージやクッキーに確実に残すためにそのような実装になっています。しかしながら、条件の追加はプロパティの直接の変更ではなく、そのために用意されたメソッドを利用する方が確実です。→パラメーターを受け取るページ　URLの?の後に指定する→パラメーターを追加して、→→リンク先のページで特定のデータだけを表示するという方法はよく使われます。『5-1　マスター/ディテール形式のナビゲーション』で説明したように、nav-controlキーを利用して、マスター/ディテール形式のユーザーインターフェースは宣言的な記述だけで作成できます。　このようなユーザーインターフェースを、nav-controlの仕組みを使わないで作りたい場合、パラメーターの受け渡しを利用することで実現します。一覧ページがlist.html、詳細ページがdatail.htmlであったとします。一覧ページから、特定のレコードの詳細を表示するボタンは、detail.html?id=35のようなURLにしておきます。ここで、idの後の数値は、コンテキストのもとになるテーブルの主キー値です。list.htmlでは、リスト6-1-1のような詳細リンク、あるいは詳細ボタンが各行に登場するように、リピーターの内部を作成しておきます。SPANタグやDIVタグで詳細ボタンを作りたい場合も、BUTTONタグと同様にonclick属性に別のページに移動する1行のJavaScriptのプログラムを作成しておきます。リスト6-1-1　詳細ページへの移動リンクやボタンの例&lt;a href=\"detail.html?id=\" data-im=\"context@id@#href\"&gt;詳細&lt;/a&gt;\n\n&lt;button onclick=\"location.href='detail.html?id=$';\"\n        data-im=\"context@id@$onclick\"&gt;詳細&lt;/button&gt;　最初のAタグの場合、idの値が「12」なら「detail.html?id=12」へリンクが生成されます。BUTTONタグの場合だとonclick属性のプログラムは「location.href='detail.html?id=12';」となります。ターゲット指定の#や$については、『4-1　ターゲット指定』で説明しています。　詳細を表示するdetail.htmlでは、JavaScriptの標準機能でパラメーターは簡単に取得できますが、INTER-MediatorではJavaScriptのオブジェクトとして得られるメソッドINTERMediatorOnPage.getURLParametersAsArrayを用意しています。そのオブジェクトへの参照がparamだとすると（例えば、「params = INTERMediatorOnPage.getURLParametersAsArray()」）、リスト6-1-1のようなリンクでページに移動したら、param[\"id\"] でidフィールドの値が得られるので、その値を追加の検索条件として付加すればいいでしょう。→→→ページの再合成　『4-2　ページを合成するときのルール』で説明したように、INTER-Mediatorによるページファイルをベースにしたデータベースの内容との合成（ページ合成）を、通常はページを表示したときに行います。しかしながら、このページ合成は、INTERMediator.→constructメソッドを明示的に呼び出すことで実施されるようにしているのは、合成の処理を任意のタイミングで実施できるようにするためです。また、本コースのこれまでの部分は、ページ全体を合成することを基本としていましたが、ここでは、任意のコンテキストに関わる部分だけを再合成する手法で、「検索条件として与えたデータをもとに、新たにページを合成する」ということを行い、「検索ができるページ」を作成します。→演習プログラムで条件を指定する検索機能を持つページ（MySQL）　テキストフィールドに入れた文字列を、JavaScriptのインターフェースで指定する検索条件として与える形式のページを作成します。この演習は、MySQLとFileMakerで細かな点で異なるため、同一の演習をそれぞれのデータベース向けに別々に記述します。MySQLで演習をされる場合には、このまま進んでください。FileMakerで演習される方は、この演習の後にあるFileMaker向けの演習手順『プログラムで条件を指定する検索機能を持つページ（FileMaker）』で進めてください。定義ファイルにデータベースアクセスに必要な設定を行う1演習環境を起動します（『1-2　演習を行うための準備』を参照）。続いて、ブラウザーで、「http://localhost:9080」に接続します。「トライアル用のページファイルと定義ファイル」というタイトルの部分を特定します。2「def16.phpを編集する」をクリックし、定義ファイルエディターでdef16.phpファイルを編集します。（もし、他の用途で16番目を利用しているのなら、例えば、def31.phpを利用するなど、別の番号のセットを使用してください。その場合ソースコードの記述が変わる部分がありますが、可能な限り注記します。）3Contextsの中にはすでにpostalcodeコンテキストが定義されています。repeat-controlキーの値を空白にします。Contextsにあるその他のテキストフィールドはそのまま利用します。4Database Settingsに設定を行います。db-classは「PDO」のままでかまいません。dsnに「mysql:host=db;dbname=test_db;charset=utf8mb4」と入力します。そして、userに「web」、passwordに「password」と入力します。5Debugについては、「2」のままにしてこの後の作業を行ってください。この演習は、デバッグ情報をみながら動作を確認します。ページファイルの作成1「http://localhost:9080」で開いたページに戻り「page16.htmlを編集する」をクリックし、ページファイルのpage16.htmlを編集するページファイルエディターを開きます。HTMLでの記述内容を以下のように変更します。太字が追加する箇所を示します。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n  &lt;title&gt;&lt;/title&gt;\n  &lt;script type=\"text/javascript\" src=\"def16.php\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\"&gt;\n  INTERMediatorOnPage.doBeforeConstruct = function () {\n    const params = INTERMediatorOnPage.getURLParametersAsArray();\n    INTERMediator.clearCondition(\"postalcode\");\n    if (params[\"q\"]) {\n      INTERMediator.addCondition(\"postalcode\",\n           {field: \"f3\", operator: \"LIKE\", value: params[\"q\"]});\n    }\n  }\n  &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n&lt;table&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;&lt;th&gt;郵便番号&lt;/th&gt;&lt;th&gt;住所&lt;/th&gt;&lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;td data-im=\"postalcode@f3\"&gt;&lt;/td&gt;\n      &lt;td&gt;\n        &lt;span data-im=\"postalcode@f7\"&gt;&lt;/span&gt;\n        &lt;span data-im=\"postalcode@f8\"&gt;&lt;/span&gt;\n        &lt;span data-im=\"postalcode@f9\"&gt;&lt;/span&gt;\n      &lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;ヘッダー部にあるSCRIPTタグ内にスクリプトが記述されていて、ページ合成を行う前に呼び出されるメソッドでいくつかのことが行われています。INTERMediatorOnPage.getURLParametersAsArrayメソッドは、URLのパラメーター部分にあるデータをキーと値に分離し、キーをプロパティとして持つオブジェクトに変換した結果を返します。そして、INTERMediator.clearConditionにより、postalcodeコンテキストの追加の検索条件を消去します。コンテキスト定義のqueryに記述した条件はこのメソッドでは消えません。そして、q=のパラメーターがある場合、addConditionによって、追加の検索条件をpostalcodeに追加します。ここでは、コンテキスト定義とaddConditionの2つの条件が設定され、他に指定はないので、ANDで結合されます。ページの表示と結果の確認1「http://localhost:9080」で開いたページに戻り「page16.htmlを表示する」をクリックし、ページファイルのpage16.htmlを表示します。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）2ページの冒頭にあるデバッグ情報には、データベースに与えた検索のためのSQLステートメントが見えています。その部分を特定します。SELECT * FROM postalcode WHERE (`f3` LIKE '1%') ORDER BY `f3` ASC LIMIT 10 OFFSET 0ここに見えている検索条件は、コンテキストのqueryキーで指定したものだけです。URLにはパラメーターが付けられていないので、ページ合成前のに実行されるメソッドで追加した検索条件は追加されません。3ページ末尾にあるページ合成の結果を参照します。検索条件に合致するレコードが一覧されています。4パラメーターを付加してページを表示してみます。ブラウザーのアドレス欄には「http://localhost:9080/page16.html」が表示されているので、以下のように?以下のパラメーターをつけたURLへとキータイプし、returnキーを押してページアクセスを行います。http://localhost:9080/page16.html?q=16%25MySQLの場合、「f3 LIKE '16%'」すなわち、16で郵便番号が始まる地名を検索する条件を指定します。q=以降は値として設定されるものです。このとき、「16%」が設定したい値ですが、URLは独特のエンコーディングを行い、%は特別な意味を持ちます。そのため、%自体を文字列として指定したい場合には、その文字コードの16進数表記である「25」を交えて「%25」と記述することで、デコードされた場合には「%」という文字列になりなす。JavaScriptでは、エンコードやデコードのための関数としてencodeURIComponentやdecodeURIComponentが用意されています。5ページの表示ができれば、ページの冒頭にあるデバッグ情報に見えているデータベースに与えた検索のためのSQLステートメントを特定します。SELECT * FROM postalcode WHERE (`f3` LIKE '1%') AND (`f3` LIKE '16%') ORDER BY `f3` ASC LIMIT 10 OFFSET 0コンテキストのqueryキーで指定した条件と、URLのパラメーターの値をもとにJavaScriptのプログラムで追加した2つの条件が設定されており、ANDでそれぞれ結ばれています。6ページ末尾にあるページ合成の結果を参照します。検索条件に合致するレコードが一覧されています。検索のためのユーザーインターフェースと連動する1「page16.htmlを編集する」をクリックして表示したページに戻ります。閉じてしまっていれば、「http://localhost:9080」で開いたページに戻り「page16.htmlを編集する」をクリックします。HTMLでの記述内容を以下のように変更します。太字が追加する箇所を示します。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）最初に追加したINTERMediatorOnPage.doBeforeConstructメソッドは、ここでは使わないのでメソッド定義ごとコメントにします。&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n  &lt;title&gt;&lt;/title&gt;\n  &lt;script type=\"text/javascript\" src=\"def16.php\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\"&gt;\n/*  INTERMediatorOnPage.doBeforeConstruct = function () {\n    var params = INTERMediatorOnPage.getURLParametersAsArray();\n    INTERMediator.clearCondition(\"postalcode\");\n    if (params[\"q\"]) {\n      INTERMediator.addCondition(\"postalcode\",\n           {field: \"f3\", operator: \"LIKE\", value: params[\"q\"]});\n    }\n  } */\n  \n  function search() {\n    const node = document.getElementById(\"criteria\");\n    INTERMediator.clearCondition(\"postalcode\");\n    if (node.value) {\n      const str = \"%\" + node.value + \"%\";\n      let param = {field: \"__operation__\", operator: \"ex\"};\n      INTERMediator.addCondition(\"postalcode\", param);\n      param = {field: \"f7\", operator: \"LIKE\", value: str};\n      INTERMediator.addCondition(\"postalcode\", param);\n      param = {field: \"f8\", operator: \"LIKE\", value: str};\n      INTERMediator.addCondition(\"postalcode\", param);\n      param = {field: \"f9\", operator: \"LIKE\", value: str};\n      INTERMediator.addCondition(\"postalcode\", param);\n    }\n    const context = IMLibContextPool.contextFromName(\"postalcode\");\n    INTERMediator.construct(context);\n  }\n  &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;input type=\"text\" id=\"criteria\"/&gt;\n  &lt;button onclick=\"search()\"&gt;検索&lt;/button&gt;\n  &lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n&lt;table&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;&lt;th&gt;郵便番号&lt;/th&gt;&lt;th&gt;住所&lt;/th&gt;&lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;td data-im=\"postalcode@f3\"&gt;&lt;/td&gt;\n      &lt;td&gt;\n        &lt;span data-im=\"postalcode@f7\"&gt;&lt;/span&gt;\n        &lt;span data-im=\"postalcode@f8\"&gt;&lt;/span&gt;\n        &lt;span data-im=\"postalcode@f9\"&gt;&lt;/span&gt;\n      &lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;ページ上に新たにテキストフィールドと、ボタンが登場しました。テキストフィールドにはid属性を設定し、ボタンにはonclick属性を設定しています。ボタンをクリックすると、search関数が呼び出されます。テキストフィールドの値をもとに検索条件を与えていますが、都道府県名、市区町村名、町域名がそれぞれf7、f8、f9フィールドなので、それぞれに対して、部分一致で検索をかけています。f7〜f9についてはOR演算を行い、もともと、コンテキストのqueryキーの条件とはさらにANDとなるように、検索条件を指定しています。この検索条件の指定方法は『2-5　検索と並べ替えに関する設定』でも指定しています。ここでのポイントは、検索条件の文字列に対して、変数strへの代入部分にあるように、前後に%を付加しています。テキストフィールドに「北」と入れれば、検索条件は例えば「f7 LIKE '%北%'」となります。プログラムで記述すると、検索条件の指定も計算式等で記述でき、さまざまな処理を経て適用することができます。INTERMediator.constructでページ合成を行いますが、ここで引数にコンテキストオブジェクトを指定すると、そのコンテキストのみ再描画されます。コンテキストオブジェクトへの参照は、IMLibContextPool.contextFromNameメソッドを使って引数にコンテキスト名を指定することで得られます。2「http://localhost:9080」で開いたページに戻り「page16.htmlを表示する」をクリックし、ページファイルのpage16.htmlを表示します。パラメーターはなしで表示するので、もう一度「page16.htmlを表示する」をクリックして新たにページを開く方が手軽でしょう。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）3スクロールしてページ合成した部分を参照します。ここで、検索条件を指定するテキストフィールドと、「検索」ボタンが表示されています。テキストフィールドに「北」と入力して、「検索」ボタンをクリックします。4新たに表示されたデバッグエリアに検索のためのSQLステートメントがあります。次のようなステートメントです。SELECT * FROM postalcode WHERE (`f3` LIKE '1%') AND (`f7` LIKE '%北%' OR `f8` LIKE '%北%' OR `f9` LIKE '%北%') ORDER BY `f3` ASC LIMIT 10 OFFSET 05ページの末尾には、検索結果のレコードを基にしたページが合成されています。町名や区名に「北」が含まれる地名が検索されています。演習のまとめJavaScriptのプログラムを利用すれば検索条件の追加が可能で、ページ合成前や、ボタンを押してページ合成ができます。後者の利用方は、「検索ページ」を構成するひとつの方法です。検索条件を与えて検索をさせる場合、デバッグ情報に見えるSQLステートメントをよく確認して、意図した条件設定になるかを確認しましょう。→演習プログラムで条件を指定する検索機能を持つページ（FileMaker）　テキストフィールドに入れた文字列を、JavaScriptのインターフェースで指定する検索条件として与える形式のページを作成します。この演習は、MySQLとFileMakerで細かな点で異なるため、同一の演習をそれぞれのデータベース向けに別々に記述します。FileMakerで演習をされる場合には、このまま進んでください。MySQLで演習される方は、この演習の前にあるMySQL向けの演習手順『プログラムで条件を指定する検索機能を持つページ（MySQL）』で進めてください。定義ファイルにデータベースアクセスに必要な設定を行う1演習環境を起動します（『1-2　演習を行うための準備』を参照）。続いて、ブラウザーで、「http://localhost:9080」に接続します。「トライアル用のページファイルと定義ファイル」というタイトルの部分を特定します。2「def17.phpを編集する」をクリックし、定義ファイルエディターでdef17.phpファイルを編集します。（もし、MySQLの演習に続いてこの演習を進めていたり、他の用途で17番目を利用しているのなら、例えば、def19.phpやdef31.phpを利用するなど、別の番号のセットを使用してください。その場合ソースコードの記述が変わる部分がありますが、可能な限り注記します。）3Contextsの中にはすでにpostalcodeコンテキストが定義されています。repeat-controlキーの値を空白にします。4Contextsの中のQueryと書かれた背景がグレーの部分を特定します。そして、operatorを「bw」、valueを「1」に切り替えます。Contextsにあるその他のテキストフィールドはそのまま利用します。5Database Settingsに設定を行います。db-classを「FileMaker_DataAPI」に書き換えます。databaseは「TestDB」、userに「web」、passwordに「password」、serverに「gateway.docker.internal」、portに「443」、protocolに「https」、cert-vefifyingに「false」と入力します。6Debugについては、「2」のままにしてこの後の作業を行ってください。この演習は、デバッグ情報をみながら動作を確認します。ページファイルの作成1「http://localhost:9080」で開いたページに戻り「page17.htmlを編集する」をクリックし、ページファイルのpage17.htmlを編集するページファイルエディターを開きます。HTMLでの記述内容を以下のように変更します。太字が追加する箇所を示します。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n  &lt;title&gt;&lt;/title&gt;\n  &lt;script type=\"text/javascript\" src=\"def17.php\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\"&gt;\n  INTERMediatorOnPage.doBeforeConstruct = function () {\n    var params = INTERMediatorOnPage.getURLParametersAsArray();\n    INTERMediator.clearCondition(\"postalcode\");\n    if (params[\"q\"]) {\n      INTERMediator.addCondition(\"postalcode\",\n              {field: \"f8\", operator: \"cn\", value: params[\"q\"]});\n    }\n  }\n  &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n&lt;table&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;&lt;th&gt;郵便番号&lt;/th&gt;&lt;th&gt;住所&lt;/th&gt;&lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;td data-im=\"postalcode@f3\"&gt;&lt;/td&gt;\n      &lt;td&gt;\n        &lt;span data-im=\"postalcode@f7\"&gt;&lt;/span&gt;\n        &lt;span data-im=\"postalcode@f8\"&gt;&lt;/span&gt;\n        &lt;span data-im=\"postalcode@f9\"&gt;&lt;/span&gt;\n      &lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;ヘッダー部にあるSCRIPTタグ内にスクリプトが記述されていて、ページ合成を行うの前に実行されるメソッドでいくつかのことが行われています。INTERMediatorOnPage.getURLParametersAsArrayメソッドは、URLのパラメーター部分にあるデータをキーと値に分離し、キーをプロパティとして持つオブジェクトに変換した結果を返します。そして、INTERMediator.clearConditionにより、postalcodeコンテキストの追加の検索条件を消去します。コンテキストのqueryに記述した条件はこのメソッドでは消えません。そして、q=のパラメーターがある場合、addConditionによって、追加の検索条件をpostalcodeに追加します。ここでは、コンテキスト定義とaddConditionの2つの条件が設定され、他に指定はないので、ANDで結合されます。なお、FileMakerは同一のフィールドに関する条件式をURL内に複数記述することはできないので、コンテキストはf3、パラメーターで与える方はf8フィールドを対象としました。ページの表示と結果の確認1「http://localhost:9080」で開いたページに戻り「page17.htmlを表示する」をクリックし、ページファイルのpage17.htmlを表示します。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）2ページの冒頭にあるデバッグ情報には、データベースに与えた検索のためのURLの一部が見えています。その部分を特定します。https://gateway.docker.internal:443/fmi/data/vLatest/databases/TestDB/layouts/postalcode/_find {\"sort\":[{\"fieldName\":\"f3\",\"sortOrder\":\"ascend\"}],\"offset\":\"1\",\"limit\":\"10\",\"portal\":[],\"query\":[{\"f3\":\"*\\u5317*\"}]}この記述はFileMaker ServerのXML共有（あるいはPHP共有）を利用してデータベース処理を行う時のURLの一部です。詳細は、「FileMaker Server 14 カスタムWeb公開ガイド」の第5章に示されています。ここで重要なことは、検索条件が「フィールド名.op=演算子」と「フィールド名=値」の2つのパラメーターで表現されることです。つまり、このURLでは、「f3 bw 1」、つまり、f3フィールドの値が1で始まるという条件がURLから読み取れます。これは、コンテキストのqueryキーで指定したものだけです。ページに接続したときのURLにはパラメーターが付けられていないので、ページ合成前に実行されるメソッドで記述した検索条件は追加されません。3ページ末尾にあるページ合成の結果を参照します。検索条件に合致するレコードが一覧されています。4パラメーターを付加してページを表示してみます。ブラウザーのアドレス欄には「http://localhost:9080/page17.html」が表示されているので、以下のように?以下のパラメーターをつけたURLをキータイプし、returnキーを押してページアクセスを行います。http://localhost:9080/page17.html?q=北qの値と、もともとプログラムに設定されているプロパティ値と合わせて、「f8 cn 北」つまりf8フィールド（市区町村名）に、「北」を含むレコードが検索される条件になります。5ページの表示ができれば、ページの冒頭にあるデバッグ情報に見えているデータベースに与えた検索のためのURLの一部を特定します。https://gateway.docker.internal:443/fmi/data/vLatest/databases/TestDB/layouts/postalcode/_find {\"sort\":[{\"fieldName\":\"f3\",\"sortOrder\":\"ascend\"}],\"offset\":\"1\",\"limit\":\"10\",\"portal\":[],\"query\":[{\"f3\":\"*\\u5317*\",\"f8\":\"*\\u5317*\"}]}コンテキストのqueryキーで指定した条件（f3 bw 1）と、URLのパラメーターの値をもとにJavaScriptのプログラムで追加した条件（f8 cn 北）が設定されています。f8キーに対する値「%E5%8C%97」は、「北」をUTF-8で表現し、それらをURLに組み入れられるようにエンコードした結果です。2つの検索条件がありますが、それらはANDで結ばれます。6ページ末尾にあるページ合成の結果を参照します。検索条件に合致するレコードが一覧されています。検索のためのユーザーインターフェースと連動する1「def17.phpを編集する」をクリックして表示したページに戻ります。閉じてしまっていれば、「http://localhost:9080」で開いたページに戻り「def17.phpを編集する」をクリックします。2FileMakerでは複雑な条件の指定が難しいので、ここでは、コンテキストのqueryキーの設定を削除します。ContextsにあるQueryの見出しの下の行の右にある「削除」ボタンをクリックして、Query行を削除します。確認のダイアログボックスが表示されるので、OKボタンをクリックします。3コンテキストの中のQueryの設定がなくなりました。4「page17.htmlを編集する」をクリックして表示したページに戻ります。閉じてしまっていれば、「http://localhost:9080」で開いたページに戻り「page17.htmlを編集する」をクリックします。HTMLでの記述内容を以下のように変更します。太字が追加する箇所を示します。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n  &lt;title&gt;&lt;/title&gt;\n  &lt;script type=\"text/javascript\" src=\"def17.php\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\"&gt;\n/*  INTERMediatorOnPage.doBeforeConstruct = function () {\n    var params = INTERMediatorOnPage.getURLParametersAsArray();\n    INTERMediator.clearCondition(\"postalcode\");\n    if (params[\"q\"]) {\n      INTERMediator.addCondition(\"postalcode\",\n         {field: \"f8\", operator: \"cn\", value: params[\"q\"]});\n    }\n  }*/\n  \n  function search() {\n    const node = document.getElementById(\"criteria\");\n    INTERMediator.clearCondition(\"postalcode\");\n    if (node.value) {\n      let param = {field: \"__operation__\", operator: \"ex\"};\n      INTERMediator.addCondition(\"postalcode\",param);\n      param = {field: \"f7\", operator: \"cn\", value: node.value};\n      INTERMediator.addCondition(\"postalcode\",param);\n      param = {field: \"f8\", operator: \"cn\", value: node.value};\n      INTERMediator.addCondition(\"postalcode\",param);\n      param = {field: \"f9\", operator: \"cn\", value: node.value};\n      INTERMediator.addCondition(\"postalcode\",param);\n    }\n    const context = IMLibContextPool.contextFromName(\"postalcode\");\n    INTERMediator.construct(context);\n  }\n  &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;input type=\"text\" id=\"criteria\"/&gt;\n  &lt;button onclick=\"search()\"&gt;検索&lt;/button&gt;\n  &lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n&lt;table&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;&lt;th&gt;郵便番号&lt;/th&gt;&lt;th&gt;住所&lt;/th&gt;&lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;td data-im=\"postalcode@f3\"&gt;&lt;/td&gt;\n      &lt;td&gt;\n        &lt;span data-im=\"postalcode@f7\"&gt;&lt;/span&gt;\n        &lt;span data-im=\"postalcode@f8\"&gt;&lt;/span&gt;\n        &lt;span data-im=\"postalcode@f9\"&gt;&lt;/span&gt;\n      &lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;ページ上に新たにテキストフィールドと、ボタンが登場しました。テキストフィールドにはid属性を設定し、ボタンにはonclick属性を設定しています。ボタンをクリックすると、search関数が呼び出されます。テキストフィールドの値をもとに検索条件を与えていますが、都道府県名、市区町村名、町域名がそれぞれf7、f8、f9フィールドなので、それぞれに対して、部分一致で検索をかけています。最初の{field: \"__operation__\", operator: \"ex\"}という検索条件により、f7〜f9についてはOR演算を行います。この検索条件の指定方法は『2-5　検索と並べ替えに関する設定』でも指定しています。ここではテキストフィールドの値をそのまま検索条件に指定していますが、プログラムで記述すると、検索条件の指定も計算式等で記述でき、さまざまな処理を経て適用することができます。INTERMediator.constructでページ合成を行いますが、ここで引数にコンテキストオブジェクトを指定すると、そのコンテキストのみ再描画されます。コンテキストオブジェクトへの参照は、IMLibContextPool.contextFromNameメソッドを使って引数にコンテキスト名を指定することで得られます。5「http://localhost:9080」で開いたページに戻り「page17.htmlを表示する」をクリックし、ページファイルのpage17.htmlを表示します。パラメーターはなしで表示するので、もう一度「page17.htmlを表示する」をクリックして新たにページを開く方が手軽でしょう。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）6スクロールしてページ合成した部分を参照します。ここで、検索条件を指定するテキストフィールドと、「検索」ボタンが表示されています。テキストフィールドに「北」と入力して、「検索」ボタンをクリックします。7新たに表示されたデバッグエリアに検索のためのSQLステートメントがあります。次のようなステートメントです。https://gateway.docker.internal:443/fmi/data/vLatest/databases/TestDB/layouts/postalcode/_find {\"sort\":[{\"fieldName\":\"f3\",\"sortOrder\":\"ascend\"}],\"offset\":\"1\",\"limit\":\"10\",\"portal\":[],\"query\":[{\"f9\":\"*\\u5317*\"},{\"f8\":\"*\\u5317*\"},{\"f7\":\"*\\u5317*\"}]}8ページの末尾には、検索結果のレコードを基にしたページが合成されています。町名や区名に「北」が含まれる地名が検索されています。演習のまとめJavaScriptのプログラムを利用すれば検索条件の追加が可能で、ページ合成前や、ボタンを押してページ合成ができます。後者の利用方は、「検索ページ」を構成するひとつの方法です。検索条件を与えて検索をさせる場合、デバッグ情報に表示されるXML共有のURLの一部をよく確認して、意図した条件設定になるかを確認しましょう。→ページ合成およびブラウザー判定に使用したAPI　このセクションのプログラムで使用したAPIや関連するAPIについて、まとめておきます。INTERMediator.→construct(context, recordset)　ページ全体あるいは部分→→の合成を行います。データベースの内容を表示するには、必ずこのメソッドは呼び出す必要がありますが、ページをロードしたときには自動的にこのメソッドが呼び出されます。Ver.5.4-devの途中まではonloadイベントでこのメソッドの呼び出しが記述される必要がありましたが、現在は記述の必要はありません。記述の必要があるのは、ページ表示後に表示内容の更新を意図的に行うような場合です。（返り値はなし）引数指定内容contexttrueあるいは省略ならページ全てを合成する。contextを指定すると、そのコンテキストのみを再合成するが、その場合はIMLIbContext変数をクラスとしたコンテキストへの参照を指定するrecordsetページ全体の合成では省略する。ここにオブジェクトの配列の形式でレコードを指定すると、そのレコードに関連したレコードを、contextで指定したコンテキストに対して再合成する表6-1-1　INTERMediator.constructメソッドの引数INTERMediatorOnPage.→INTERMediatorCheckBrowser(deleteId)　定義ファイルの設定、あるいはparams.phpを参照して、サポートしている→→ブラウザーなのかどうかを判定します。サポートしていない場合には既定のエラーメッセージのみを画面に表示します。なお、このメソッドは、ページをロードするときに自動的に呼びだされるため、通常は使用することはないと思われます。引数指定内容deleteId判定の後、非対応ブラウザーであれば削除されるBODY要素内の要素のid属性の値[返り値]対応ブラウザーならtrue、そうでなければfalse表6-1-2　INTERMediatorOnPage.INTERMediatorCheckBrowserの引数と返り値INTERMediatorOnPage.→doBeforeConstruct() = function() {...}　→→ページ合成が行われる直前で呼び出されるメソッドで、アプリケーションはこれを呼び出すのではなく、アプリケーション側で定義しておくことで、INTER-Mediatorによって呼び出されます。引数および返り値はありません。INTERMediatorOnPage.→doAfterConstruct() = function() {...}　→→ページ合成が終わったときに呼び出されるメソッドで、アプリケーションはこれを呼び出すのではなく、アプリケーション側で定義しておくことで、INTER-Mediatorによって呼び出されます。引数および返り値はありません。INTERMediatorOnPage.→isAutoConstruct　ページをロードしたときの自動的なページ合成を行うかどうかを指定します。既定値はtrueです。ページの自動合成をさせたくないような場合、これをfalseとします。例えば、doBeforeConstructメソッドの中で特定の条件が成り立てばこのプロパティにfalseを代入して、→→ページ合成処理をさせないようにできます。このプロパティの値に関係なくdoBeforeConstructメソッドは定義されていれば実行されますが、doAfterConstructメソッドはこのプロパティがtrueの時のみ実行されます。→コンテキストの検索条件を追加指定するAPI　INTERMediatorOnPage.→getURLParametersAsArray()　自分自身のページのURLに含まれる→パラメーターを、オブジェクトとして返します。引数指定内容[返り値]URLのパラメーターにある「キー=値」のそれぞれのセットについて、キーをプロパティ名、値をそのプロパティに対する値として持つオブジェクト表6-1-3　INTERMediatorOnPage.getURLParametersAsArrayの返り値INTERMediator.→clearCondition(contextName)　コンテキストに対して追加される→→検索条件を、指定したコンテキストに対して消去します。（返り値なし）引数指定内容contextNameコンテキスト名、すなわち定義ファイルのコンテキスト定義にあるnameキーの値表6-1-4　INTERMediator.clearConditionの引数INTERMediator.→addCondition(contextName, criteria)　コンテキストに対する→→検索条件を追加します。（返り値なし）引数指定内容contextNameコンテキスト名、すなわち定義ファイルのコンテキスト定義にあるnameキーの値criteria検索条件を示すオブジェクト。プロパティはfield、operator、valueで、それぞれ定義ファイルでのqueryキーの配列におけるキーと対応している表6-1-5　INTERMediator.addConditionの返り値　addConditionやaddSortKeyメソッドを利用するときの注意点があります。これらのメソッドで登録した条件は、クライアントのブラウザーのセッションストレージに記録されます。その結果、以前にそのページで設定していた検索条件やソート対象フィールドを、改めてページ表示するときに自動的に適用されることになります。そのため、検索条件の設定時にはINTERMediator.clearCondition()メソッドで、条件をクリアをしないと、既存の条件に追加されてしまうことになります。clearConditionにコンテキスト名の引数をつければ、指定したコンテキストの検索条件をクリアします。また、引数を省略すると、追加の検索条件すなわちaddtionalConditonプロパティが何も設定されていない状態になります。　なお、ページを閉じた後、検索条件がセッションストレージに保持され、そのページを再度開いた場合に復元されてしまうと思わぬ副作用ももたらします。あるコンテキスト定義が複数の箇所に流用されているような場合には要注意です。ページを開いた後、追加条件なしでコンテキストを利用し、その後、条件を追加してコンテキストを利用したとします。そして、改めてそのページを開くと、最初のコンテキスト利用では後の利用での条件が適用されてしまい、意図しない検索条件が付与されることになります。この場合、ページ移動間での検索条件の保持が不要なら、INTERMediatorOnPage.doBeforeConstructメソッドの最初に「INTERMediator.clearCondition();」を呼び出して、ページ開始時には常に検索条件がクリアされているようにすることで回避はできます。しかしながら、設計上はこうしたコンテキストの使い回しは行わないで、コンテキスト定義自体を分離して別々のコンテキスト定義を行いそれぞれを利用するのが適切です。→このセクションのまとめ　コンテキストに対する検索条件は、定義ファイルのコンテキスト定義に追加できるだけでなく、『2-5　検索と並べ替えに関する設定』の『ユーザーインターフェースの定義だけで検索条件を付与する』では、宣言的な記述だけで検索処理をページに組み込む方法を説明しました。これらの方法に加えてJavaScriptでの追加も可能です。JavaScriptを利用すれば、プログラムでデータに対するさまざまな処理が可能です。検索で指定する文字列とデータベースのフィールドに入っているデータに直接関係がないような場合でも対処できます。例えば、日付データがひとつのフィールドに入っていて、そこへの検索において、年月日を別々にテキストフィールドやポップアップメニューで指定したいような場合が相当します。→6-2コンテキストオブジェクトデータベースから取り出したデータは単にノードに合成するだけでなく、データそのものも残してあります。さらに、単に残すだけでなく、ページ上に展開したデータや要素などの情報を保持して、同一フィールドの要素の情報を連動させるなど、クライアントサイドの「モデル」としての機能が組み込まれています。このような、コンテキスト定義を現実のデータや要素と連動できるようにするオブジェクトを「コンテキストオブジェクト」と呼びます。エンクロージャーがひとつあれば、コンテキストオブジェクトもひとつが作られます。→→コンテキストオブジェクト　INTER-Mediator上でプログラムを作る場合、コンテキストオブジェクトの存在を知っておくことで、ページ上のデータのやりとりが非常に効率的になります。定義ファイルに定義する「コンテキスト」については、「コンテキスト定義」と呼ぶことにします。　コンテキストオブジェクトは、コンテキスト定義をもとにして、データベースから取り出されたデータなどを保持しているオブジェクトであり、INTER-Mediatorは自動的に作成されます（図6-2-1）。基本的には、エンクロージャーの数だけ、コンテキストオブジェクトの実体が作られます。したがって、ひとつのコンテキスト定義から、ひとつのコンテキストオブジェクトの場合もあれば、複数存在することもあります。APIを利用すれば、コンテキスト名からコンテキストオブジェクトを参照できます。また、nav-controlでのマスターおよびディテールのコンテキストオブジェクトを直接取り出すメソッドもあります。図6-2-1　コンテキストオブジェクトの立ち位置→→コンテキストオブジェクトとそのプロパティ　→IMLibContext変数が参照するオブジェクトをクラスとして生成するコンテキストオブジェクトには、データベースから取り出し、ページ上のいずれかのノードに展開したデータが保持されています。ページ展開で得られたデータを取り出すには、このコンテキストオブジェクトに保持された値を利用するのがひとつの方法です。表6-2-1には、コンテキストオブジェクトで利用することがありそうなプロパティをまとめておきました。プロパティ内容→contextName→コンテキスト名→enclosureNode→エンクロージャーのノードへの参照→repeaterNodes展開前に初期状態として保持した→リピーターで、ノードへの参照の配列→storeデータベースから取得し、ページに展開したデータ→storeCapturedページ展開直後のページに展開したデータ（Control+Shift+Zによる復帰をサポートするため）表6-2-1　使用する機会のあるコンテキストオブジェクトのプロパティ　表6-2-1で、→→ページに展開したデータは、storeプロパティに保持されています。storeプロパティは若干複雑なオブジェクト構成になっています。レコードを示すキー値として、「主キーフィールド名=フィールドの値」の形式を持ちます。主キーフィールド名は、コンテキスト定義のkeyキーに対する値です。keyキーの値が「id」だった場合、例えば、「id=3」などがレコードを示すキーになります。そしてひとつのレコードは、フィールド名がプロパティになり、その値がデータベースから得られた値になります。例えば、表6-2-2のようなリレーションが得られた場合、3つのフィールドがいずれもページ上に展開されれば、storeプロパティの値はリスト6-2-1のような形式になります。idtext1num11suger43142salt29833saurce9223表6-2-2　コンテキストで得られたリレーションの例リスト6-2-1　表6-2-2から構成されるコンテキストオブジェクトのstoreプロパティ{\n    \"id=1\": {\n        \"id\": \"1\",\n        \"text1\": \"suger\",\n        \"num1\": \"4314\"\n    },\n    \"id=2\": {\n        \"id\": \"2\",\n        \"text1\": \"salt\", \n        \"num1\": \"2983\"\n    },\n    \"id=3\": {\n        \"id\": \"3\",\n        \"text1\": \"saurce\",\n        \"num1\": \"9223\"\n    }\n}　storeプロパティを利用すれば、例えば、ページに展開したデータについて、複数のレコードの同一のフィールドの値を串刺しで取り出したり、同じレコードの特定のフィールドのデータを取り出すことができます。データはページ上に見えていますが、その値を取り出すにはDOMモデルに従って複雑なプログラムを書かざるを得ません。しかしながら、コンテキストオブジェクトであれば、データをページ上の要素とは独立して取り出すことができます。なお、ページ上に展開していないとstoreプロパティには保持されないので、表示は不要だがコンテキストオブジェクトに必要なフィールドは、type属性がhiddenのINPUTタグ等で、ページ内への展開を記述しておく必要があります。→コンテキストのデータの書き込み処理　データの取り出しは、storeプロパティを探るのが一番効率的ですが、コンテキストへのデータの設定は、用意されているメソッドを利用するのが良いでしょう。基本的に、コンテキストの特定のレコードの特定のフィールドに値を設定すると、そのフィールドとバインドしているページ上の要素でも設定した値が見えます。また、その値をデータベースへ書き込む処理も行うメソッドもあります。どういうメソッドがあるかは、この後の演習と記事を参照してください。→演習→→フィールドを更新するボタンを設置する　承認ワークフローを実装するようなアプリケーションにおいて、「承認した」ということを記録するために、承認日時とログイン名を記録するのがひとつの方法としてあります。その時、日時や名前などを手入力はしたくはないと考えるところでしょう。そこで、「ボタンを押すと、指定のフィールドに現在の日時が入力される」というプログラムをボタンで呼び出せば、承認ボタンに対するもっとも重要な要求が満たされます。もちろん、ユーザーに応じて異なる認証権限を与えるアクセス権設定や、承認のキャンセルをどうすればいいかなど、ワークフローに関わるアプリケーションは状態の遷移に伴って多数の要件が絡みます。この演習では、その処理の一部だけを紹介するものとなります。定義ファイルにデータベースアクセスに必要な設定を行う1演習環境を起動します（『1-2　演習を行うための準備』を参照）。続いて、ブラウザーで、「http://localhost:9080」に接続します。「トライアル用のページファイルと定義ファイル」というタイトルの部分を特定します。2「def18.phpを編集する」をクリックし、定義ファイルエディターでdef18.phpファイルを編集します。（もし、他の用途で18番目を利用しているのなら、例えば、def31.phpを利用するなど、別の番号のセットを使用してください。その場合ソースコードの記述が変わる部分がありますが、可能な限り注記します。）3Contextsの中のQueryと書かれた背景がグレーの部分を特定します。そして、その次の行の右の方にある「削除」をクリックして、Queryの設定がある行を削除します。4「レコードを本当に削除していいですか？」とたずねられるので、OKボタンをクリックします。5Contextsにあるname、table、viewの値を「testtable」とします。key、paging、repeat-control、records、maxrecordsについてはそのまま元から入っている情報をそのまま利用します。Sortingの次の行にあるfieldの値を「id」にします。directionは「ASC」のままにします。6Database Settingsに設定を行います。[MySQL]の場合db-classは「PDO」のままでかまいません。dsnに「mysql:host=db;dbname=test_db;charset=utf8mb4」と入力します。そして、userに「web」、passwordに「password」と入力します。[FileMaker]の場合db-classを「FileMaker_DataAPI」に書き換えます。databaseは「TestDB」、userに「web」、passwordに「password」、serverに「gateway.docker.internal」、portに「443」、protocolに「https」、cert-vefifyingに「false」と入力します。7Debugについては、「false」にすると、デバッグ情報が出なくなります。なお、デバッグ情報をみながら動作を確認したい方は、「2」のままにしてこの後の作業を行ってください。ページファイルの作成1「http://localhost:9080」で開いたページに戻り「page18.htmlを編集する」をクリックし、ページファイルのpage18.htmlを編集するページファイルエディターを開きます。HTMLでの記述内容を以下のように変更します。太字が追加する箇所を示します。なお、プログラムについては次の手順で示します。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n  &lt;title&gt;&lt;/title&gt;\n  &lt;script type=\"text/javascript\" src=\"def18.php\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\"&gt;\n    // 次のステップでここにプログラムを追加\n  &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n  &lt;table&gt;\n    &lt;thead&gt;\n      &lt;tr&gt;&lt;th&gt;案件番号&lt;/th&gt;&lt;th&gt;承認日時&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n      &lt;tr&gt;\n        &lt;td data-im=\"testtable@id\"&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;input type=\"text\" data-im=\"testtable@dt2\"/&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;span data-im=\"testtable@dt2\"&gt;&lt;/span&gt;&lt;/td&gt;\n        &lt;td&gt;\n          &lt;button onclick=\"approval($)\" \n                  data-im=\"testtable@id@$onclick\"&gt;承認&lt;/button&gt;\n        &lt;/td&gt;\n        &lt;td&gt;&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/tbody&gt;\n  &lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nページファイルのHTML部分はこれまでに説明してきたことから大きく違いはありません。testtableコンテキストは、testtableそのままの内容で、日付時刻型のdt2フィールドと、連番が自動的に設定されている数値型のidフィールドを表示しています。各行には、「承認」ボタンがあり、そのレコードのdt2フィールドに現在の日付時刻を入力する機能をもたせています。ここで、testtableのどのレコードなのかを特定するために、ボタンをクリックしたときに実行されるapproval関数の引数に、idフィールドの値を指定します。そのために、onclick属性では「approval($)」のように、フィールドのデータと置き換える箇所に$を記述します。そして、同じBUTTONタグのdata-im属性に指定したターゲット指定では、testtableのidフィールドに対して「$onclick」、つまり、idフィールドの値をonclick属性の$と置き換えるという動作を指定しています。例えば、idフィールドの値が23のレコードに対しては、onclick属性の値は「approval(23)」となり、approval関数の引数に、idフィールドの値が指定されます。2ヘッダー部のSCRIPTタブの指定箇所に、以下のプログラムを記述します。function approval(id)\t{\n    const currentDT = INTERMediatorLib.dateTimeStringISO();\n    const context = IMLibContextPool.contextFromName(\"testtable\");\n    context.setDataWithKey(id, \"dt2\", currentDT)\n}INTERMediatorLib.dateTimeStringISOメソッドは、引数なしで実行すると、現在の日付に対するISO8601形式の日付の文字列を返します。また、INTERMediatorLib.dateTimeStringFileMakerは現在の日付のFileMaker形式（ロケールに関わらず、月/日/年）の文字列を返します。IMLibContextPool.contextFromNameにより引数で指定したコンテキスト名に対するコンテキストオブジェクトへの参照を返します。コンテキストオブジェクトに対してsetDataWithKeyメソッドを実行すると、指定した主キーの値をもつレコードの指定したフィールドに指定したデータを入力できます。データはコンテキストに記録されるだけでなく、そのフィールドにバインドしている要素へも伝達され、さらにデータベースへの書き戻しも行います。したがって、画面上では「自動的に更新される」ように動作します。ページ上のプログラムを実行してみる1「http://localhost:9080」で開いたページに戻り、「page18.htmlを表示する」をクリックして表示したタブあるいはウインドウを表示します。testtableテーブルの内容が、1レコードずつ参照できます。最初のトライであるなら全くレコードが表示されていない状態かもしれません。ページネーションにある「レコード追加：testtable」の部分をクリックして、レコードを追加しておきます。2いずれかのレコードの「承認」ボタンをクリックします。対応する「承認日時」のテキストフィールドに、現在の日時が設定されました。また、同じフィールドにバインドしたSPAN要素の方にも同じ日時の文字列が表示されています。データベースに本当に保存されているのかを確認したいのであれば、ページネーションの「更新」ボタンをクリックして、ページを更新してみてください。同じ日時が2つのバインドした要素に見えているはずです。3もう一度レコードの「承認」ボタンをクリックします。対応する「承認日時」のテキストフィールドおよびSPAN要素の部分に、現在の日時が設定されました。4ページネーションにある「レコード追加：testtable」の部分をクリックして、レコードを追加し、「承認」ボタンをクリックします。やはり画面が更新されて、新しく作成された「承認日時」のテキストフィールドに、現在の日時が設定されました。演習のまとめJavaScriptのプログラム内で、データベースに対するCRUDおよびコピーの処理が可能です。特定のフィールドに直接値を設定することなどができますが、その後に対応するコンテキストを再描画することで、変更した結果がページに反映されます。→コンテキストオブジェクトへのデータの設定と取り出し　IMLibContext変数によって作られるオブジェクトでは、以下のメソッドも利用できます。IMLibContextの部分は、例えば、IMLibContextPool.contextFromName(\"...\")を使い引数に指定したコンテキスト名より得られたコンテキストオブジェクトの変数を指定します。いくつかのプログラム例を、メソッドの説明の後に示します。IMLibContext.→setValue(recKey, key, value, nodeId, target)　コンテキスト内の指定したレコードの指定したフィールドに→→値を設定する。ページ合成時に、INTER-Mediatorは自動的にこのメソッドを呼び出して、コンテキストとページ内の要素との対応情報を保持する。ページ合成後に、nodeIdとtargetを省略してこのメソッドを呼び出すと、値を保存すると同時に、他のコンテキストの同じテーブルの同じレコードの同じフィールドと→バインディングしている値も更新するので、結果として各要素に表示する値も更新される。ただし、データベース処理は行わず、ローカルのコンテキストの値を更新するのみである。引数指定内容recKeystoreプロパティのオブジェクトのプロパティ（id=1などのキー）を指定するkeyフィールド名value値nodeId[省略可能]コンテキストのこの値とバインディングした要素のid属性値target[省略可能]バインディングした要素のターゲット。ターゲットなしは \"\" を指定[返り値]更新された要素のid属性値の配列表6-2-3　setValueの引数と返り値IMLibContext.→setDataWithKey(pkValue, key, value)　コンテキスト内の指定したレコードの指定したフィールドに値を設定し、バインディングされている他の要素への更新を行うとともに、→→データベースへの更新を行う。引数指定内容pkValue主キー（コンテキスト定義のkeyキーで指定したフィールド）の値のみで対象レコードを指定keyフィールド名value値[返り値]更新された要素のid属性値の配列表6-2-4　setDataWithKeyの引数と返り値IMLibContext.→setDataAtLastRecord(key, value)　コンテキストの最後のレコードにある指定したフィールドに値を設定し、バインディングされている他の要素への更新を行うとともに、データベースへの更新を行う。引数指定内容keyフィールド名value値[返り値]（なし）表6-2-5　setDataAtLastRecordの引数と返り値IMLibContext.→getValue(recKey, key)　コンテキスト内の指定したレコードの指定したフィールドの→→値を得る。なお、マスター/ディテール形式のユーザーインターフェースにおいて、keyに \"_im_button_master_id\" を指定すると、→「詳細」ボタンの要素に設定されているid属性値を得られるので、プログラムでクリック操作をしたい時には利用できる。引数指定内容recKeystoreプロパティのオブジェクトのプロパティ（id=1などのキー）を指定するkeyフィールド名[返り値]（なし）表6-2-6　getValueの引数と返り値IMLibContext.→getDataAtLastRecord(key)　コンテキストの→→最後のレコードにある指定したフィールドの値を得る。引数指定内容keyフィールド名[返り値]最後のレコードの指定したフィールドの値表6-2-7　getDataAtLastRecordの引数と返り値→コンテキストの情報取得　コンテキストオブジェクトからコンテキスト定義を得るなどの情報取得のためのメソッドとして以下のようなものが利用できます。IMLibContext.→getContextDef()　定義ファイルに記述したコンテキスト定義を得る。返り値はひとつのコンテキスト定義を示すオブジェクト。IMLibContextPool.→contextFromName(contextName)　引数に指定したコンテキスト名に対する→コンテキストオブジェクトをひとつだけ返します。定義ファイルのコンテキスト定義よりひとつのコンテキストしか生成していない場合に利用します。引数指定内容contextNameコンテキスト名、すなわち定義ファイルのコンテキスト定義にあるnameキーの値[返り値]コンテキストオブジェクトへの参照表6-2-8　IMLibContextPool.contextFromNameの引数と返り値IMLibContextPool.→getContextFromName(contextName)　引数に指定したコンテキスト名に対する→コンテキストオブジェクトの配列を返します。定義ファイルのコンテキスト定義から複数のコンテキストを生成している場合に利用します。引数指定内容contextNameコンテキスト名、すなわち定義ファイルのコンテキスト定義にあるnameキーの値[返り値]コンテキストオブジェクトへの参照の配列表6-2-9　IMLibContextPool.getContextFromNameの引数と返り値IMLibContext.→getContextInfo(nodeId, target)　要素のid属性値とターゲットから、→コンテキスト情報を得る。引数指定内容nodeId要素のid属性値target要素のターゲット。ターゲットなしは \"\" を指定[返り値]要素とバインディングしているコンテキスト情報（{context: this, record: recKey, field: key}形式のオブジェクト）表6-2-10　getContextInfoの引数と返り値IMLibContext.→getContextValue(nodeId, target)　要素のid属性値とターゲットから、コンテキストの値を得る。引数指定内容nodeId要素のid属性値target要素のターゲット。ターゲットなしは \"\" を指定[返り値]引数で指定した要素とターゲットにバインディングしている値表6-2-11　getContextValueの引数と返り値→コンテキストを利用したサンプルプログラム　プログラムの簡単なサンプルを示します（リスト6-2-2）。INTER-Mediatorで作成したアプリケーションでは、ひとつのコンテキスト定義をもとにしたページ上の→コンテキストはひとつだけという場合がよくあります。その時、コンテキストオブジェクトを参照するには、IMLibContextPool.contextFromName(...)を利用できます。引数はコンテキストの \"name\" キーの値、つまりコンテキスト名を指定します。もし、コンテキストが複数ある場合には、IMLibContextPool.getContextFromName(...) を使用して、該当するコンテキストを返された配列から取り出さなければなければなりません。　ひとつのコンテキストに→レコードがひとつだけという場合はよくあります。つまり、コンテキスト定義の \"records\" キーの値を1にしているような場合です。コンテキストのメソッドの中に「最後のレコード」に対応するものが用意されていますが、もちろん複数のレコードの最後のレコードに適用できると同時に、1レコードしかない場合には、確実にその1レコードに対して処理をするメソッドとしても利用できます。getDataAtLastRecordメソッドで引数にフィールド名を指定すれば、データベースの値を取得できます。また、setDataAtLastRecordメソッドを利用すれば、コンテキストの値を更新してバインディングしている他の要素の値も更新するとともに、データベースの該当フィールドを更新します。リスト6-2-2　コンテキストを利用したプログラムの例var context = IMLibContextPool.→contextFromName(\"contextName\");\nvar idValue = context.getDataAtLastRecord(\"id\");\ncontext.setDataAtLastRecord(\"price\", 350);　もし、複数レコードがあるようなコンテキストを変数contextで参照していたとしたら、→Object.keys(context.store)で、レコードを指定するキーが配列で得られます。必要であれば、そのキーをもとに順番に処理をしたり、あるは→for..inを利用するなどして、コンテキストの各レコードに対して処理を行うことができます（リスト6-2-3）。リスト6-2-3　複数レコードのコンテキストに対するプログラムの例var context = IMLibContextPool.contextFromName(\"productList\");\nfor (var recKey in context.store) {\n    var unitPrice = context.getValue(recKey, \"unitprice\");\n    if (unitPrice &gt; 1000)  {\n        context.setDataWithKey(recKey, \"unitprice\", unitPrice * 1.05);\n    }\n}　このように、クライアントサイドの→→プログラムによる値の変更は、コンテキストを中心に考えれば、プログラムはシンプルに作成できます。　内部では、コンテキストオブジェクトを使ってさまざまな作業を行います。例えば、同一のフィールドを2つのテキストフィールドにバインドしたとき、一方のデータを変更してデータベースへの更新を行うとともに、もう一方に表示するテキストも更新されます。こうした動作の基礎になっているのがコンテキストオブジェクトです。　JavaScriptのプログラムを作る上で一番便利なのは、ページ上の要素にバインドした値が保持されていることです。もちろん、要素から値を取り出すAPIもありますが、要素の種類に応じてプログラムをつくり分ける必要があります。コンテキストオブジェクトは単に値だけがあるので、要素の種類を気にかける必要はありません。また、特定のコンテキストだけを再合成する仕組みもあります。実際の使用方法は、この章で紹介するプログラムとともに示します。→→ローカルコンテキスト　ブラウザーでページ合成を行えば、ローカルコンテキストというオブジェクトがひとつ生成されます。このコンテキストは、データベースとは連動しておらず、クライアントで独立して利用できます。その値はローカルストレージあるいはクッキーに値を保持することで、一度コンテキスト内に作った値を、ページを閉じて開いた後にも復帰させることができます。　ローカルコンテキストは、レコードという構造は持たないキー/バリュー形式のストレージです。ページファイル内の要素とバインドでき、要素のdata-im属性に例えば、リスト6-2-4のように記述します。リスト6-2-4　ローカルコンテキストにバインドしたテキストフィールド&lt;input id=\"myVal1\" data-im=\"_@myvalue1\" /&gt;　data-im属性において、コンテキスト名に「→_」（半角のアンダーライン）を指定します。その後に、任意のフィールド名を与えます。これにより、ローカルコンテキストのmyvalue1フィールドとテキストフィールドがバインドされます。テキストフィールド内の値を変更すると、ローカルコンテキストのmyvalue1フィールドが更新されます。そして、ページを閉じてもローカルストレージ等にmyvalue1フィールドの値を残し、再度ページを開くと、ローカルコンテキストのmyvalue1フィールドは以前の値になります。そして、バインドしているテキストフィールドにも、以前の値が見えるようになります。ローカルコンテキストのAPIを利用すれば、値の取得や設定が可能です。　なお、『2-5　検索と並べ替えに関する設定』の『ユーザーインターフェースの定義だけで検索条件を付与する』で説明した、検索ページを宣言的な記述だけで作成する手法は、ローカルコンテキストを応用したものです。　ローカルコンテキストの値の設定や取り出しをJavaScriptのプログラムで行う場合、以下のメソッドを利用できます。ローカルコンテキストは、変数名IMLibLocalContextで参照できるオブジェクトです。IMLibLocalContext.→getValue(key)　ローカルコンテキスト内の引数keyに指定したキーに対する→→値を返す。IMLibLocalContext.→setValue(key, value)　引数keyに指定したキーに対する値valueを→→ローカルコンテキストに設定する。→→→ローカルコンテキストの初期値　ローカルコンテキストの値は、例えばテキストフィールドにバインドしているのであれば、テキストフィールドに値を入力したときに設定されます。加えて、Ver.5.4-devより、定義ファイルへの設定を行えば、ローカルコンテキストの値の初期値を設定することができます。リスト6-2-5のように、IM_Entry関数の2つ目の引数（オプション指定）に、→local-contextキーで配列を指定します。リストでは、ターゲット指定で、「_@pageTitle」で参照されるコンテキストに対して、初期値として、「IM Samples」という文字列を設定しています。複数のキーに値を与えるには、→keyキーと→valueキーを持つ連想配列を書き並べます。リスト6-2-5　ローカルコンテキストの初期値を設定した定義ファイルの例IM_Entry(\n    array( /* コンテキスト */ ),\n    array(\n        \"local-context\" =&gt; array(\n            array(\"key\" =&gt; \"pageTitle\", \"value\" =&gt; \"IM Samples\"),\n        ),\n    ),\n    array( /* DB接続定義 */ ),\n    false\n);　この定義ファイルを読み込んでいるページファイルにおいて、例えば、ヘッダー部のTITLEタグで、リスト6-2-6のようにローカルコンテキスト参照をしたとします。すると、ページのタイトルには「IM Samples」という文字列が設定されます。データベースからのデータを手軽にバインドできる一方、なんでもデータベースに記録しなければならないのなら、データベースに多様なデータが保存されることになります。ビジネスに直結したデータは当然ながらデータベースに保存するとしても、ちょっとした見栄えを良くするためだけに使う付随的なデータもビジネスロジックを交えて管理するのはかえって大変です。ここではページタイトルを例に出しますが、例えばページタイトルはカスタマイズしたいけれども、全部のページは同じということであれば、このようにコンテキストで与えておくか、あるいは『2-6　設定ファイルparams.php』で説明するようにparams.phpファイルに記述しておくことでも対処ができます。リスト6-2-6　&lt;html&gt;\n&lt;head&gt;\n     &lt;title data-im=\"_@pageTitle\"&gt;&lt;/title&gt;\n     &lt;script type=\"text/javascript\" src=\"context_of_above.php\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n:→このセクションのまとめ　コンテキストオブジェクトは、INTER-Mediatorの稼働においては重要な位置を占めますが、プログラミングを行う段階にならないと、その存在は意識することはまずないでしょう。データ処理を絡めたプログラムの作成が必要になる場合には、コンテキストオブジェクトの存在を忘れないようにしましょう。→6-3データベースへの書き込みを直接行うテキストフィールドなどは「バインド」という手法で、自動的にデータベースと結合されているので、読み書きのためのプログラムは一切追加しないでも、データベースとページ上の表示は同期されます。しかしながら、バインドとは別にデータベースとのやりとりをしたい場合があります。表示に関しては、計算プロパティ（『4-4　計算プロパティの設定』）を利用する方法などがありますが、逆に更新ではJavaScriptのプログラムを利用して、データベースへの直接の書き込みが可能です。→→データベース処理メソッドの利用　INTER-Mediatorのクライアント側のプログラムには、データベースの4つの基本操作であるCRUD（Create Read Update Delete）、そしてレコードのコピーに対応するメソッドがあり、フレームワークの処理に利用されています。他に、ファイルのアップロードや、パスワードの変更のメソッド等も利用できますが、アプリケーションで利用したいメソッドは、CRUDおよびコピーのメソッドと思われます。それぞれ、パラメーターをどのように指定するのかということで説明は終わってしまいますが、個別のメソッドの利用方法は演習の後にまとめておきます。　なお、基本的なデータベース処理については、前の節で説明したコンテキストに対するsetDataWithKeyメソッドや、コンテキストのstoreプロパティの参照でも可能です。この節で紹介するデータベース処理は、それらコンテキストでうまくできないような処理や一括処理をやりたいような場合に利用することになるでしょう。→データベースへの直接的な処理に利用できるAPI　データベース処理を行うメソッドの引数には、通信終了後に呼び出される関数を記述するcompletion引数があります。この関数は引数をひとつ設定します。呼び出すときに引数に設定する値については、関数ごとに違いますので、以下の記述の表の中を参照してください。　なお、各メソッドについては、返り値はありません。成功時と失敗時にクロージャーの呼び出しがあります。失敗時のクロージャーは引数はありませんが、成功時のクロージャーにはひとつだけ引数が設定され、その引数に与えられるオブジェクトは、リスト6-3-1のような形式になります。つまり、左側のキーを利用すれば、右側に記載した内容のデータが得られます。なお、キーに対する値は操作によってはあったりなかったりします。リスト6-3-1　成功時に呼び出されるクロージャーへの引数{\n    dbresult: /* クエリー結果、レコードに対応するオブジェクトの配列 */,\n    resultCount: /* 検索して得られたレコード数 */,\n    totalCount: /* 条件に合致するレコード数 */,\n    newRecordKeyValue: /* 新規レコードの主キー値 */,\n    newPasswordResult: /* パスワード変更の結果 */,\n    registeredId: /* クライアント間連携で使うコード */,\n    nullAcceptable: /* null値を使うかどうか */\n}INTERMediator_DBAdapter.db_→createRecord_async(args, successProc, failedProc)　指定したコンテキストに新たな→→レコードを作成します。既定値には引数で指定するものの他に、コンテキストに定義したdefault-valuesおよび、INTERMediator.additionalFieldValueOnNewRecordプロパティに設定した既定値についても追加されます。引数指定内容args以下のname, datasetプロパティを持つオブジェクト→name処理対象のコンテキスト名を文字列で指定する→dataset{field:xx, value:xx}の形式のオブジェクトの配列。新しいレコードに対して指定フィールドに値を設定するcompletion, successProcデータベース処理が成功した後に呼び出されるクロージャーfailedProcデータベース処理が失敗した後に呼び出されるクロージャー[返り値]作成したレコードのキーフィールドの値（引数completionの関数呼び出しの引数に設定される値も同様）表6-3-1　引数と返り値INTERMediator_DBAdapter.→db_query_async(args, successProc, failedProc)　指定したコンテキストに対して検索を行います。検索条件およびソート条件として、引数だけでなく、コンテキスト定義のquery、sortキーによる指定、INTERMediator.additionalConditionおよびINTERMediator.additionalSortKeyプロパティの定義についても適用されます。さらに、ローカルコンテキストにあるターゲット指定が \"_@condition:....\", \"_@valueofaddorder:....\", \"_@limitnumber:....\" の指定についても反映されます。→→引数指定内容args以下のname〜primaryKeyOnlyプロパティを持つオブジェクト→name処理対象のコンテキスト名を文字列で指定する→records取り出すレコード数。省略するとコンテキスト定義の値。uselimitも参照→fields取り出すフィールド一覧（省略可能）。Ver.5.3現在この情報は未使用→parentkeyvalue関連レコードの検索時に利用（省略可能）→conditions追加の検索条件で、{field: xxx, operator: xxx, value: xxxx}形式のオブジェクトの配列（省略可能）→useoffsetこの引数がtrueでINTERMediator.startFromプロパティが設定されていれば、オフセットを指定する（省略可能）→uselimit取り出すレコード数としてtrueならINTERMediator.pagedSize、falseあるいは省略ならこのオブジェクトのrecordsプロパティが指定される→primaryKeyOnlytrueなら検索条件は主キーフィールドのみを指定してデータベースアクセスする（省略可能）completion, successProcデータベース処理が成功した後に呼び出されるクロージャーfailedProcデータベース処理が失敗した後に呼び出されるクロージャー[返り値]以下のプロパティを持ったオブジェクト（引数completionの関数呼び出しの引数に設定される値も同様）→recordset検索して得られたレコード。1レコードはフィールドをキーとしたオブジェクトで、その配列がこのプロパティの値→totalCount検索条件に合致したレコードの総数→count実際に取り出したレコード数→registeredidこのコンテキストの登録ID値。マルチユーザー利用での同期のときに利用される→nullAcceptableデータベースがnull値をサポートすればtrue。Ver.5.3現在、積極的な利用はされていない情報表6-3-2　引数と返り値INTERMediator_DBAdapter.→db_update_async(args, successProc, failedProc)　指定したコンテキストに対して既存の→→レコードの更新を行います。検索条件として、引数だけでなく、コンテキスト定義のqueryキーによる指定、INTERMediator.additionalFieldValueOnUpdateプロパティの設定も適用されます。引数指定内容args以下のname, conditions, datasetプロパティを持つオブジェクト→name処理対象のコンテキスト名を文字列で指定する→conditions検索条件で、{field: xx, operator: xx, value: xx}の形式のオブジェクトの配列。→dataset{field:xx, value:xx}の形式のオブジェクトの配列。指定フィールドに値を設定するcompletion, successProcデータベース処理が成功した後に呼び出されるクロージャーfailedProcデータベース処理が失敗した後に呼び出されるクロージャー[返り値]更新したレコード。1レコードはフィールドをキーとしたオブジェクトで、その配列がこのプロパティの値（引数completionの関数呼び出しの引数に設定される値も同様）表6-3-3　引数と返り値INTERMediator_DBAdapter.→db_delete_async(args, successProc, failedProc)　指定したコンテキストの→→レコードを削除します。検索条件として、引数だけでなく、コンテキスト定義のqueryキーによる指定、INTERMediator.additionalFieldValueOnDeleteプロパティの設定も適用されます。引数指定内容args以下のname, conditionsプロパティを持つオブジェクト→name処理対象のコンテキスト名を文字列で指定する→conditions検索条件で、{field: xx, operator: xx, value: xx}の形式のオブジェクトの配列。completion, successProcデータベース処理が成功した後に呼び出されるクロージャーfailedProcデータベース処理が失敗した後に呼び出されるクロージャー[返り値]オブジェクトが返るが、アプリケーションにとって有用な情報はない表6-3-4　引数と返り値INTERMediator_DBAdapter.→db_copy_async(args, successProc, failedProc)　指定したコンテキストに対して、検索結果のレコードに対する複製→→レコードを作成します。検索条件として、引数だけでなく、コンテキスト定義のqueryキーによる指定も適用されます。引数指定内容args以下のname, conditions, associatedプロパティを持つオブジェクト→name処理対象のコンテキスト名を文字列で指定する→conditions検索条件で、{field: xx, operator: xx, value: xx}の形式のオブジェクトの配列。→associated複製する関連レコードの指定で、{name: xx, field: xx, value: xx}の形式のオブジェクトの配列。nameはコンテキスト名、fieldは外部キーフィールド名、value外部キーフィールドの値を指定するcompletion, successProcデータベース処理が成功した後に呼び出されるクロージャーfailedProcデータベース処理が失敗した後に呼び出されるクロージャー[返り値]{newKeyValue: xxx, recordset: xxx}形式のオブジェクトで、前者が新規に作成されたレコードの主キー値、後者は新規に作成されたレコードのオブジェクトで、フィールド名がプロパティ（引数completionの関数呼び出しの引数に設定される値も同様）表6-3-5　引数と返り値　このAPIを使ったサンプルプログラムとしては以下のようなものです。おおむね、前の節の演習と同様な処理になります。INTERMediator_DBAdapter.db_update_asyncは非同期通信処理を行うので、原則的にはこの呼び出し後には何も記述がないのが一般的でしょう。通信後の処理は、引数にクロージャーとして記述します。通信成功時には、コンテキストの再描画を行い、書き込んだ結果を反映させています場合によっては変数resultの結果からデータベース処理結果を取り出すこともできます。失敗時には単にアラートを出すだけになっています。リスト6-3-2　直接的な通信処理を利用するプログラムの例function approval(id)\t{\n    const currentDT = INTERMediatorLib.dateTimeStringISO();\n    const args = {\n        name: \"testtable\",  // 更新対象となるコンテキスト名\n        conditions:[{field: \"id\", operator: \"=\", value: id}], // 更新対象のレコード検索条件\n        dataset:[{field: \"dt2\", value: currentDT}] // 更新するフィールドとデータ\n    }\n    INTERMediator_DBAdapter.db_update_async(args,\n        (result) =&gt; { // 通信成功時に呼び出される\n            const context = IMLibContextPool.contextFromName(\"testtable\");\n            INTERMediator.construct(context);\n        },\n        () =&gt; { // 通信失敗時に呼び出される\n            alert(\"Error\");\n        }\n    );\n}→サーバーとの通信を直列化する　INTER-Mediatorは、Ver.5.7現在、ページ合成のためのサーバーからの読み出し処理は、非同期通信で行っているため、通信処理は→直列化されています。しかしながら、データ更新の処理は同期処理での通信を利用するため、直列化はされていません。状況によってはそれでも稼働しますが、認証を行う場合、チャレンジ取得とデータ処理の通信が対応している必要があるため、並列的に通信処理を行うと、認証が切れるなどの問題が発生します。そこで、キューを使って通信処理を直列化しています。→キューは、変数→IMLibQueueのオブジェクトとして用意されています。独自に作成するJavaScriptのプログラムでも、直列化しないと問題が発生する場合がありますが、その時には、以下のメソッドを使ってください。このメソッドは先入れ先出しの動作となります。IMLibQueue.→setTask(func, true, lowPriority)　キューに引数のクロージャーを登録し、キューは順番にしたがって処理をし、クロージャーを実行する。クロージャーはひとつの引数を持つが、この引数のクロージャーを実行することで、次のキューに移行できる。2つ目の引数は必ずtrueを指定する。3つ目の引数がfalseなら通常の優先度、trueなら低い優先順位のキューに投入する。低い優先順位のタスクは、通常の優先順位のタスクが全て終わらないと実行されない。なお、2番目以降の引数は省略でき、その場合は通常の優先順位のキューとなる。　実際に、更新処理を直列化するプログラム例を見てください。setTask関数の引数は、ローカル変数にdb_update_asyncへの引数をキャプチャしたクロージャーを返します。クロージャーは引数completeTaskがあり、クロージャー内での処理が終わると「completeTask();」の形式でキューの最後であることを示すようにします。そうしないと、次のキューに移行しません。キューの処理は非同期でも構いませんが、どこかで必ず引数の処理を実行します。リスト6-3-3　キューに通信処理を組み入れるプログラムの例IMLibQueue.setTask((() =&gt; {\n    const arcsCapt = args;\n    return (completeTask) =&gt; {\n        INTERMediator_DBAdapter.db_update_async(arcsCapt,\n            (result) =&gt; {\n                //更新成功時の処理\n                completeTask();  // 引数の変数に()をつけてクロージャーを実行\n            },\n            () =&gt; {\n                //更新失敗時の処理\n                completeTask();  // 引数の変数に()をつけてクロージャーを実行\n            }\n        );\n    };\n})());　INTER-Mediator内部でも、以下のメソッドで同様にIMLibQueue.setTaskメソッドを利用しています。例えば、テキストフィールドの値を変更すると、IMLibUI.valueChangeメソッドが呼び出され、実際にデータベース更新が必要な処理はいきなり実行するのではなく、IMLibQueue.setTaskメソッドでキューに入れて、順次実行されるようになっています。これらのメソッドを利用する場合には、逆にsetTaskを使う必要はありません。→→IMLibUI.valueChangeIMLibUI.copyButtonIMLibUI.deleteButtonIMLibUI.insertButtonIMLibContext.prototype.setDataAtLastRecordIMLibContext.prototype.setDataWithKeyIMLibPageNavigation.copyRecordFromNaviIMLibPageNavigation.deleteRecordFromNaviIMLibPageNavigation.insertRecordFromNavi→→→日付時刻の文字列生成のメソッド　JavaScriptの中ではDateオブジェクトで日付や時刻を扱います。しかしながら、データベースの日付や日付時刻型のフィールドに設定する値は、適切な書式の文字列である必要があります。以下のように、ISO8601形式の日付時刻、あるいはFileMaker Server向けの日付時刻の文字列を得るためのメソッドを用意しましたので、Dateオブジェクトからの変換ではこれらのメソッドを使えばOKです。なお、MySQL、PostgreSQL、SQLite、SQL Serverは、→ISO8601形式で受け付けます。いずれのメソッドも、引数はDateオブジェクトで、返り値は文字列です。引数を省略すると、現在の日時の文字列を生成します。NTERMediatorLib.→dateTimeStringISO(dt)　引数のDateクラスの値を、ISO8601形式（2015-06-21 00:00:00）に変換します。引数を省略すると、現在の日付を返します。日時はブラウザーのローカル時刻に応じたものです。INTERMediatorLib.→dateTimeStringFileMaker(dt)　引数のDateクラスの値を、FileMaker Serverのタイムスタンプ型フィールドが受け付ける形式（06/21/2015 00:00:00）に変換します。引数を省略すると、現在の日付を返します。日時はブラウザーのローカル時刻に応じたものです。INTERMediatorLib.→dateStringISO(dt)　引数のDateクラスの値を、ISO8601形式（2015-06-21）に変換します。引数を省略すると、現在の日付を返します。日時はブラウザーのローカル時刻に応じたものです。INTERMediatorLib.→dateStringFileMaker(dt)　引数のDateクラスの値を、FileMaker Serverが受け付ける形式（06/21/2015）に変換します。引数を省略すると、現在の日付を返します。日時はブラウザーのローカル時刻に応じたものです。INTERMediatorLib.→timeString(dt)　引数のDateクラスの値を、時刻の形式（12:34:56）に変換します。引数を省略すると、現在の日付を返します。日時はブラウザーのローカル時刻に応じたものです。このメソッドは、FileMaker ServerおよびSQLデータベースのどちらにも共通で利用できます。→→まとめて更新する処理　『3-1　更新可能なテキストフィールド』『まとめて更新処理を行う』での説明の通り、IM_Entryの2つ目の引数の配列内に、キーが→transactionで値が「none」の要素を追加することで、テキストフィールドなどを更新するごとにデータベースに書き込みをするのではなく、後からまとめて更新することができました。ナビゲーションバーが表示されていれば「保存」ボタンで保存ができましたが、プログラムで保存処理を呼び出したい場合には、以下のメソッドを利用します。「IMLibPageNavigation」はINTER-Mediatorで定義されているオブジェクトを参照する変数で、プログラムではそのまま記述します。→IMLibPageNavigation.→saveRecordFromNavi(dontUpdate)　更新処理が必要なフィールドを、まとめて更新します。引数にtrueを設定すると、更新処理を行った後にページ全体を「INTERMediator.constructMain(true)」で再度描画し直します。→このセクションのまとめ　データベースとバインドしたユーザーインターフェースだけでなく、ボタンなどによるアプリケーション特有の処理を組み込む場合、データベース処理のニーズが発生します。特に、データベースの更新処理の利用が一般的でしょう。その場合、JavaScriptで利用できるデータベースとの直接のやりとりが可能なAPIを利用することで、必要な機能を組み込むことができます。→6-4ページ合成に割り込む処理の追加INTER-Mediatorではページ合成を行い、ページのテンプレートとデータベースのデータが統合されます。その処理に割り込むことにより、合成処理途中に自分で作成したプログラムを実行させることができます。難易度は高くなりますが、高度な機能も組み込めます。演習では、小計を表示するといったことを行ってみます。→ページ合成に割り込む処理　ページ合成の手法については、『4-2　ページを合成するときのルール』ですでに解説をしてありますが、本セクションは、合成の流れを理解していないと何を意味するのかまったく分からないと思います。もし、『4-2　ページを合成するときのルール』を読んでいないのであれば、先にそちらを読み進めてください。　INTER-Mediatorはページ合成時に、エンクロージャーとリピーターのセットを発見すると、リピーター内部のターゲット指定の状況を見てコンテキストを決定して、データベースアクセスを行います。そして、1レコード分を取り置いてあるリピーターの複製にマージして、エンクロージャーの子要素として追加をします。まず、この追加直後に、指定したメソッドの実行ができます。このメソッドは、例えば、10レコード分が得られていれば、10回呼び出されることになります。そして、エンクロージャーに最後のリピーターが追加された後にも、別のメソッドを呼び出すことができます。こちらはレコード数に関係なく、ひとつのエンクロジャーとリピーターのセットの合成に対して1回呼び出されます。　これらのメソッドは、定義ファイルのコンテキスト定義の中で指定します。リピーター追加ごとに呼び出されるメソッドはpost-repeater、エンクロージャーが完成したときに呼び出されるメソッドはpost-enclosureキーで、メソッド名を指定します。コンテキストに依存しないで、リピーター追加ごとあるいはエンクロージャー完成時に呼び出されるメソッドの定義もありますが、こちらは開発初期の時代のもので、現在はコンテキストごとに指定する方法を利用することで、ニーズは十分に満たせるでしょう。なお、これらのキーの値は、定義ファイルエディターでは、Show Allボタンをクリックして全項目を表示しないとページ上には見えてきません。　post-repeaterで指定したメソッドはひとつの引数を持ち、その引数には追加したばかりのリピーターのノードに対する配列が設定されて呼び出されます。post-enclosureで指定したメソッドもひとつの引数を持ち、その引数には完成したエンクロジャーのノードへの参照が設定されています。つまり、そのノードより下位のノードとして、実際にデータベースのデータをマージした要素や、あるいはその他の要素が存在します。ターゲット指定がある要素については、INTERMediatorOnPage.getNodeIdsHavingTargetFromNodeメソッド（詳細は演習の後に記載）を利用して、指定したターゲット指定の要素のid属性あるいはそのノードへの参照を得ることで、後はDOMに関するさまざまなメソッドやプロパティを利用して、新たにデータを追加したり、スタイルシート設定を行うことなどが可能です。ターゲット指定でないものは、class属性を指定しておき、DOMのAPIであるgetElementsByClassNameメソッドを使うことで、そのノードへの参照を得ることができます。なお、getElementsByClassNameはInternet Explorerで使用できないメソッドとして有名ですが、Ver.9以降は利用できます。INTER-Mediator Ver.5.0でInternet Explorer Ver.8はサポート対象としなくなっているので、getElementsByClassNameを利用する上での互換性の問題は基本的にはありません。→演習→合計や→小計を表示する　ページ合成の途中に割り込むメソッドを利用して、リストの合計を表示したり、あるいはレコードのグループごとの小計を求める方法を説明します。合計に関しては、一覧部分の全体を含むようなコンテキストを定義して、そのコンテキスト側に計算プロパティを設定することでも実現しますが、小計についてはJavaScriptを組む方法でしか実現しません。なお、この演習は、INTER-Mediator Ver.5.3以降を利用して行ってください。http://localhost:9080」に接続したページの最初に、稼働しているINTER-Mediatorのバージョンが記載されているので、それを手掛かりにしてください。演習環境の更新方法は、『1-2　演習を行うための準備』にある『演習環境内のINTER-Mediatorのアップデート』を参照してください。定義ファイルにデータベースアクセスに必要な設定を行う1演習環境を起動します（『1-2　演習を行うための準備』を参照）。続いて、ブラウザーで、「http://localhost:9080」に接続します。「トライアル用のページファイルと定義ファイル」というタイトルの部分を特定します。2「def19.phpを編集する」をクリックし、定義ファイルエディターでdef19.phpファイルを編集します。（もし、他の用途で19番目を利用しているのなら、例えば、def31.phpを利用するなど、別の番号のセットを使用してください。その場合ソースコードの記述が変わる部分がありますが、可能な限り注記します。）3Contextsの中のQueryと書かれ背景がグレーの部分を特定します。そして、その次の行の右の方にある「削除」をクリックして、Queryの設定がある行を削除します。4「レコードを本当に削除していいですか？」とたずねられるので、OKボタンをクリックします。5同様に、Sortingの次の行にある「削除」ボタンを押し、確認にOKボタンをクリックして、こちらの設定も削除しておきます。6name、tableともに「item」、keyを「id」、recordsとmaxrecordsを「10000」、つまりitemテーブルのレコード数より多い数とします。7[MySQL]の場合viewを「item_display」にします。[FileMaker]の場合viewを「item」にします。8Contextsのその他のテキストフィールドは空白にします。9Database Settingsに設定を行います。[MySQL]の場合db-classは「PDO」のままでかまいません。dsnに「mysql:host=db;dbname=test_db;charset=utf8mb4」と入力します。そして、userに「web」、passwordに「password」と入力します。[FileMaker]の場合db-classを「FileMaker_DataAPI」に書き換えます。databaseは「TestDB」、userに「web」、passwordに「password」、serverに「gateway.docker.internal」、portに「443」、protocolに「https」、cert-vefifyingに「false」と入力します。10Debugについては、「false」にすると、デバッグ情報が出なくなります。なお、デバッグ情報をみながら動作を確認したい方は、「2」のままにしてこの後の作業を行ってください。ページファイルの作成と初期データの確認1「http://localhost:9080」で開いたページに戻り「page19.htmlを編集する」をクリックし、ページファイルのpage19.htmlを編集するページファイルエディターを開きます。HTMLでの記述内容を以下のように変更します。太字が追加する箇所を示します。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n  &lt;title&gt;&lt;/title&gt;\n  &lt;script type=\"text/javascript\" src=\"def19.php\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;table&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;product_id&lt;/th&gt;&lt;th&gt;name&lt;/th&gt;&lt;th&gt;unitprice&lt;/th&gt;\n      &lt;th&gt;qty&lt;/th&gt;&lt;th&gt;amount&lt;/th&gt;&lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;td data-im=\"item@product_id\"&gt;&lt;/td&gt;\n      &lt;td data-im=\"item@name\"&gt;&lt;/td&gt;\n      &lt;td data-im=\"item@unitprice\"&gt;&lt;/td&gt;\n      &lt;td data-im=\"item@qty\"&gt;&lt;/td&gt;\n      &lt;td data-im=\"item@amount\"&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;2「http://localhost:9080」で開いたページに戻り、「page19.htmlを表示する」をクリックして表示したタブあるいはウインドウを表示します。itemテーブルの内容が、1レコードずつ参照できます。itemテーブルは、『4-4　計算プロパティの設定』でも利用したものですが、サンプルにある「Sample_invoice」フォルダーで伝票形式のページ作成での明細で利用しているテーブルです。ここでは、product_idフィールドの値が同一のレコードが少なくとも2つ以上はある状態（以下の図ではproduct_id=3のレコードが2つあります）にしてください。ない場合には、『4-4　計算プロパティの設定』の演習結果のページで、同一product_idに対して複数の明細レコードができるように、レコードを追加してください。合計金額を表示できるようにする1「def19.phpを編集する」をクリックして表示された定義ファイルエディターのウインドウあるいはタブを選択して、def19.phpを定義ファイルエディターで表示します。もし、閉じてしまっていれば「http://localhost:9080」で開いたページに戻り、「def19.phpを編集する」をクリックして表示します。（別の番号のファイルで作業している場合には、その番号に応じた定義ファイルを開いてください。）2ページ上部の「Show All」をクリックして、すべての設定項目を表示します。3itemコンテキストのpost-enclosureに「afterItemList」と入力します。Tabキーを押して次のフィールドに移動し、入力結果を確定しておきます。4「page19.htmlを編集する」をクリックして表示されたページファイルエディターのウインドウあるいはタブを選択して、page19.htmlをページファイルエディターで表示します。もし、閉じてしまっていれば、「http://localhost:9080」で開いたページに戻り「page19.htmlを編集する」をクリックします。HTMLでの記述内容を以下のように変更します。太字が追加する箇所を示します。ヘッダー部分にJavaScriptのプログラムを表示します。また、テーブルにはTFOOTタグを追加して、フッターを追加します。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n  &lt;title&gt;&lt;/title&gt;\n  &lt;script type=\"text/javascript\" src=\"def19.php\"&gt;&lt;/script&gt;\n次のステップで、プログラムをここに追加\n&lt;/head&gt;\n&lt;body&gt;\n&lt;table&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;product_id&lt;/th&gt;&lt;th&gt;name&lt;/th&gt;&lt;th&gt;unitprice&lt;/th&gt;\n      &lt;th&gt;qty&lt;/th&gt;&lt;th&gt;amount&lt;/th&gt;&lt;th&gt;&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;td data-im=\"item@product_id\"&gt;&lt;/td&gt;\n      &lt;td data-im=\"item@name\"&gt;&lt;/td&gt;\n      &lt;td data-im=\"item@unitprice\"&gt;&lt;/td&gt;\n      &lt;td data-im=\"item@qty\"&gt;&lt;/td&gt;\n      &lt;td data-im=\"item@amount\"&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n  &lt;tfoot&gt;\n    &lt;tr&gt;\n      &lt;td&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;/td&gt;\n      &lt;td id=\"total\"&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tfoot&gt;\n  &lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;合計をテーブルのフッター部に表示することにします。単にセルをひとつだけ追加するだけでは、レコードの部分の列の並びとずれてしまいます。そこで、TFOOTタグ内には、TBODYタグ内と同じ数だけセルを表示し、一番最後のセルに対して、id属性として「total」を設定しておきます。ここでは特にスタイルは変更していませんが、例えば罫線を消すなど必要に応じてスタイル指定をすれば、より見やすくなるでしょう。5前のステップのヘッダー部に示した箇所に、以下のプログラムを追加します。&lt;script type=\"text/javascript\"&gt;\n    INTERMediatorOnPage.afterItemList = function(target) {\n      const context = IMLibContextPool.contextFromName(\"item\");\n      const keys = Object.keys(context.store);\n      let s = 0;\n      for (let i = 0 ; i &lt; keys.length ; i++ ) {\n        const value = context.store[keys[i]][\"amount\"];\n        s += parseFloat(value);\n      }\n      const fmtValue = IMLibFormat.numberFormat(s, 0);\n      const node = document.getElementById(\"total\");\n      const tNode = document.createTextNode(fmtValue);\n      node.appendChild(tNode);\n    }\n&lt;/script&gt;テーブルに利用しているitemコンテキストのpost-enclosureで指定した名前は、INTERMediatorOnPageオブジェクトに定義するメソッドの名前と同一にしておきます。また、このメソッドは引数をひとつだけ持つことができ、引数にはエンクロージャーへの参照が得られます。このafterItemListは、itemコンテキストをページ上に展開し、すべてのレコードに対するリピーターがエンクロージャーに追加された後に呼び出されます。特定のコンテキストについてデータベースとHTMLの合成処理が終わった後に呼び出されます。プログラムの前半は、コンテキストオブジェクトを参照して、その内容、すなわちデータベースから取り出したデータを取り出して、すべてのレコードについて、amountフィールドの値を取り出しています。コンテキストオブジェクトを参照する変数contextに対してstoreプロパティを利用すると、データベースから取り出したデータのうち、ページ上に展開したものがすべてそこに入っています。通常は3階層のオブジェクトになっており、storeの直下はレコードを指定するプロパティ（「主キーフィールド名=主キーフィールド値」の形式の文字列）です。さらにそこから参照されるオブジェクトは、キーがフィールド名、値が対象レコードのフィールドの値となっています。構造は複雑ですが、表構造であるリレーションを、階層構造として記録したのがstoreプロパティです。変数sに対して、amountフィールドの内容を累積して合計を求めています。なお、フィールドの値は文字列として扱うので、数値への変換メソッドとしてJavaScriptの組み込み関数であるparseFloat関数を利用しています。IMLibFormat.numberFormatはカンマ付きの数値にするメソッドで、フッターにあるid=totalのセルを参照して、そこに書式化した合計値をテキストとして追加し、セル上に計算結果を見えるようにしています。6「page19.htmlを表示する」をクリックして表示されたページファイルエディターのウインドウあるいはタブを選択してpage19.htmlを表示し、ブラウザーの更新ボタンをクリックして画面を更新します。もし、閉じてしまっていれば、「http://localhost:9080」で開いたページに戻り「page19.htmlを表示する」をクリックします。一連のレコードの最後に行が追加されており、amountフィールドの合計が表示されています。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）金額の小計を表示できるようにする1「def19.phpを編集する」をクリックして表示された定義ファイルエディターのウインドウあるいはタブを選択して、def19.phpを定義ファイルエディターで表示します。もし、閉じてしまっていれば「http://localhost:9080」で開いたページに戻り、「def19.phpを編集する」をクリックして表示します。（別の番号のファイルで作業している場合には、その番号に応じた定義ファイルを開いてください。）2itemコンテキストのSortingの下にある「追加」ボタンをクリックします。本当にレコードを作成して良いかをたずねられるので、OKボタンをクリックして項目を1行追加します。3fieldに「prodcut_id」、directionに「ASC」を指定します。小計を求めるためには、どのフィールドの値を記述にしてグループ化するかを決める必要がありますが、ここではproduct_idが同一のレコードについて小計を取ることとします。そのためには同一のグループが連続している必要があるので、ソート条件として該当するフィールドを指定します。4ページ上部の「Show All」をクリックして、すべての設定項目を表示します。5itemコンテキストのpost-repeaterに「afterItemRecord」と入力します。Tabキーを押して次のフィールドに移動し、入力結果を確定しておきます。6「page19.htmlを編集する」をクリックして表示されたページファイルエディターのウインドウあるいはタブを選択して、page19.htmlをページファイルエディターで表示します。もし、閉じてしまっていれば、「http://localhost:9080」で開いたページに戻り「page19.htmlを編集する」をクリックします。HTMLでの記述内容を以下のように変更します。太字が追加する箇所を示します。ヘッダー部分にあるJavaScriptのプログラムを修正します。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n  &lt;title&gt;&lt;/title&gt;\n  &lt;script type=\"text/javascript\" src=\"def19.php\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\"&gt;\n    INTERMediatorOnPage.afterItemList = function(target) {\n      addSubTotalLine(null, false);\n      const context = IMLibContextPool.contextFromName(\"item\");\n      const keys = Object.keys(context.store);\n      let s = 0;\n      for (let i = 0 ; i &lt; keys.length ; i++ ) {\n        const value = context.store[keys[i]][\"amount\"];\n        s += parseFloat(value);\n      }\n      const fmtValue = IMLibFormat.numberFormat(s, 0);\n      const node = document.getElementById(\"total\");\n      const tNode = document.createTextNode(fmtValue);\n      node.appendChild(tNode);\n    }\n    \n    INTERMediatorOnPage.afterItemRecord = function(target) {\n      let nodes = INTERMediatorOnPage.getNodeIdsHavingTargetFromNode(\n                target, \"item@product_id\");\n      if (nodes.length &gt; 0)\t{\n        const node = document.getElementById(nodes[0]);\n        const groupId = parseFloat(node.innerHTML);\n        nodes = INTERMediatorOnPage.getNodeIdsHavingTargetFromNode(\n                  target, \"item@amount\");\n        if (nodes.length &gt; 0) {\n          const node = document.getElementById(nodes[0]);\n          const value = parseFloat(node.innerHTML);\n          if (prevId != groupId &amp;&amp; prevId != -1) {\n            addSubTotalLine(target, true);\n            subtotal = 0;\n          }\n          subtotal += value;\n        }\n        prevId = groupId;\n      }\n    }\n    \n    function addSubTotalLine(target, isBefore) {\n      const context = IMLibContextPool.contextFromName(\"item\");\n      const insertRepeater = context.repeaterNodes[0].cloneNode(true);\n      const nodes = INTERMediatorOnPage.getNodeIdsHavingTargetFromNode(\n                       insertRepeater, \"item@amount\");\n      if (nodes.length &gt; 0) {\n        if (isBefore)\t{\n      \t      context.enclosureNode.insertBefore(insertRepeater, target[0]);\n        } else {\n      \t      context.enclosureNode.appendChild(insertRepeater);\n        }\n        const fmtValue = IMLibFormat.numberFormat(subtotal, 0);\n        const tNode = document.createTextNode(fmtValue);\n        nodes[0].style.backgroundColor = \"white\";\n        nodes[0].appendChild(tNode);\n      }\n    }\n    \n    let prevId = -1, subtotal = 0;\n  &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\t\t:\n&lt;/body&gt;\n&lt;/html&gt;2つのfunctionによりメソッドが追加されています。まず、コンテキストのpost-repeaterに指定した名前と同じ名前のafterItemRecordメソッドを、INTERMediatorOnPageオブジェクトに定義します。このメソッドが定義されると、itemコンテキストのひとつのリピーターがエンクロージャーに追加された後に呼び出されます。引数には、直前に追加されたリピーターの配列が表示されます。INTERMediatorOnPage.afterItemRecordメソッドでは、INTERMediatorOnPage.getNodeIdsHavingTargetFromNodeメソッドを使用して引数に渡されたリピーターのノードより下位に存在する、ターゲット指定が「item@product_id」のノードを探しています。つまり、ページ上のproducut_idが表示されたセルのid属性を得ています。このメソッドの返り値は配列ですが、該当するノードはひとつに限るので、添え字が0の要素があれば、product_idが表示されたセルのid属性が分かります。そして実際にそのノードにある文字列をinnerHTMLプロパティで取り出しています。さらに同様に、追加されたばかりのリピーターからamountフィールドの値を取り出しています。プログラムの最後の方に、グローバル変数のprevIdとsubtotalが定義されています。INTERMediatorOnPage.afterItemRecordメソッドは、レコードの数だけ呼び出されるのですが、1回の呼び出しで合計を求めるより、グローバル値に累積させた方がプログラムがシンプルになるので、amoutフィールドの値の小計を累積するための変数としてsubtotalを使います。そして、prevIdは前のレコードのproduct_idフィールドの値です。このフィールドの値が、直前のレコードから変化していれば、そこに小計のテーブル行を追加します。追加する処理は、addSubTotalLine関数で行います。ここで若干ややこしくなるのは、product_idの値が変わってしまった状態のレコードがすでにエンクロージャーに追加されてしまっていることです。したがって、小計自体の行は、現在のリピーターの前に追加しなければなりません。1行目よりも前に表示されないようにするために初期値を-1にして、それも交えて判定を行い、行の追加を行います。なお、addSubTotalLineのisBefore引数は、通常はリピーターの前に小計を入れますが、すべてのレコードの処理を終えた後には無条件に小計の行を追加しなければならないので、前か後かを指定できる関数にしました。addSubTotalLineメソッドは、リピーターのノードの配列と、小計行をリピーターの前に入れるかどうかのフラグをそれぞれ引数として持ちます。実際に小計の行を作るには、コンテキストオブジェクトのrepeaterNodesプロパティから、取り置いてあるリピーターを参照し、その複製をcloneメソッドで作成して得ています。このプログラムは、リピーターのルートはひとつのTRタグ要素なので、repeateNodesの最初の要素だけを複製するだけでリピーターの複製が得られます。そして、複製したリピーターの中にあるamountフィールドを表示するセルをINTERMediatorOnPage.getNodeIdsHavingTargetFromNodeメソッドで取得しています。引数に応じて、複製したリピーターを、現在挿入されたレコードのデータを合成したリピーターの前か後かに追加をします。その後、subtotal変数の値を、amountフィールドのセルに設定していますが、小計で追加された行であることが分かるように、セルの背景を白にしておきました。7「page19.htmlを表示する」をクリックして表示されたページファイルエディターのウインドウあるいはタブを選択してpage19.htmlを表示し、ブラウザーの更新ボタンをクリックして画面を更新します。もし、閉じてしまっていれば、「http://localhost:9080」で開いたページに戻り「page19.htmlを表示する」をクリックします。product_idフィールドの値の変わり目に行が追加されており、amountフィールドの小計が表示されています。また、合計は合計で表示されています。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）この演習のまとめひとつのリピーターの処理後、あるいはひとつのエンクロージャーの処理後に呼び出されるメソッドを定義できます。その中では、特定のターゲット指定を持つノードを検索し、そのidフィールド値を返すメソッドを利用して、処理対象のノードを探すこことができます。データベースから得られたデータは、コンテキストオブジェクトのstoreプロパティに残っており、そこから表示された値を得ることができます。→→→ページ合成処理に割り込むメソッド　ページ合成に割り込むメソッドを、アプリケーション側で定義することができます。詳細はこのセクションの最初の部分でも解説しています。→post-repeaterキーの値をメソッド名にした場合、メソッドを呼び出すときの引数は、追加したリピーターを参照しています。→post-enclosureキーの値のメソッドの場合は、引数はエンクロージャーのノードです。いずれのメソッドも、返り値は不要です。INTERMediatorOnPage.《post-repeaterキーの値》 = function(target) {...}INTERMediatorOnPage.《post-enclosureキーの値》 = function(target) {...}→→ノード検索のためのメソッド　あるノードから、引数に指定したターゲット指定を持つノードを返すメソッドがいくつかあります。演習で使用したものは、最初のひとつだけですが、いくつか異なるバリエーションのメソッドを用意してあります。INTERMediatorOnPage.→getNodeIdsHavingTargetFromNode(nodes, targetDef)　指定したノードの配列の子要素の中で、引数に指定したターゲット指定を持つノードのid属性値、あるいはそのノードへの参照を配列で返します。引数指定内容nodesルートとなるノードあるいはノードの配列targetDef検索するターゲット指定[返り値]該当するノードがid属性があればそのid値、id属性がなければそのノードへの参照を返す。指定したターゲット指定のノードが複数あることもあるので、返り値は文字列ないしはノードへの参照の配列になる。表6-4-1　引数と返り値INTERMediatorOnPage.→getNodeIdsHavingTargetFromRepeater(fromNode, targetDef)INTERMediatorOnPage.→getNodeIdsHavingTargetFromEnclosure(fromNode, targetDef)　指定したノードより上位階層にさかのぼり、最初に見つけたリピーターあるいはエンクロージャーに含まれる子要素で、引数に指定したターゲット指定を持つノードのid属性値、あるいはそのノードへの参照を配列で返します。引数指定内容fromNode基準となるノードtargetDef検索するターゲット指定[返り値]該当するノードがid属性があればそのid値、id属性がなければそのノードへの参照を返す。指定したターゲット指定のノードが複数あることもあるので、返り値は文字列ないしはノードへの参照の配列になる。表6-4-2　引数と返り値→→書式設定のためのメソッド　書式設定や数値化のためのメソッドとして以下のようなものが用意されています。もちろん、自分で作ったり、他のライブラリを利用して書式を整えてもかまいません。IMLibFormat.→numberFormat(value, digits)　数値を→3桁ごとのカンマ付きおよび小数点以下の桁数指定をして書式化した文字列を返す。引数指定内容value書式化の対象となる値digits少数以下の桁数[返り値]書式化した文字列表6-4-3　引数と返り値→このセクションのまとめ　ページ合成の処理に割り込むメソッドを利用することで、ページ合成の結果をダイナミックに変化させることができます。DOM関連のプログラムはコンテキストオブジェクトの使いこなしなどが必要になりますが、複雑な要求に応えるにはここまでの処理が必要になるかもしれません。→6-5Post Onlyモードと連動した処理データベースへの新規レコードを作成する→Post Onlyモードは、アンケート入力などを簡単に作成できるのですが、新規入力に連動する処理が必要なアプリケーションもあります。そのため、レコード作成の前後にプログラムを追加できるようになっています。このセクションには演習が2つあり、異なるテーマでのWebページ作成を行います。→Post Onlyモードの動作とカスタマイズ　Post Onlyモードのページのカスタマイズ可能な箇所は、data-im-control属性が「post」のボタンをクリックしたときの処理です。ボタンを押した後、実際にデータベースにレコードを作成し、テキストフィールドに入力した文字列などをフィールドの初期値とします。このデータベースを処理する前と後に、定義したメソッドを実行できます。データベース処理前のメソッドは、例えば、入力したデータに不正がないかを調べたりもできます。ただし、この処理はバリデーションで実施してもいいのですが、複数のフィールドにまたがるような判断、例えばパスワードのフィールドが2つあって同じものかどうかを判定したいような場合には、データベースの処理の前に判断する方がページ自体は作りやすいでしょう。データベースの処理前のメソッドは論理値を返す必要があり、falseを返せばデータベース処理はキャンセルされて、ページはそのままの状態で止まります。もちろん、データに何か問題が見つかればfalseを返し、問題なければtrueを返せばよいのです。なお、この後の演習では、もう少し複雑な状況での例を出します。演習は、「状況に応じて、フィールドの初期値をプログラムで定義する」といったテーマになります。　一方、データベース処理の後に呼び出されるメソッドは、データベース処理が成功したときにだけ呼び出され、作成されたレコードそのものや、あるいはレコードの主キー値を得ることができます。つまり、新規に作成されたレコードの情報を得た上で、別の処理に引き継ぐことができます。こちらの処理は、ページを遷移したりすることが前提になります。このメソッドがなくても、コンテキスト定義により別のページに移動しますが、メソッド側でページを移動すると、それ以降はPost Onlyモードのページ側の処理はすべてキャンセルされます。　以上はデータベースを書き込むという意味では、Post Onlyモードのページの最終段階で利用できる機能です。Post Onlyモードのページでも、通常のINTER-Mediatorベースのページと同様に、ページ構築時の機能は使用できます。しかしながら、通常の検索結果を表示するページと異なり、Post Onlyモードの場合は、id属性は元のページファイルの状態をキープします。また、ローカルコンテキストは構成しません。したがって、HTMLの段階で後から処理をしたいテキストフィールドに自由にid属性を設定しておき、そのid値を利用してオブジェクトへのアクセスができます。　Post Onlyモードでも、INTERMediator.construct()メソッドを呼び出して、ページ合成の処理は必要です。その前にプログラムを追加したり、INTERMediatorOnPage.doAfterConstructメソッド（『8-5　ブラウザーを判断するページ』を参照）を定義して、ページ合成直後に行う処理を記述することもできます。これらの仕組み利用して、Post Onlyモードのページでの拡張を行うことができます。→演習Post Onlyモードを利用して→→関連レコードを追加する　Post Onlyモードで単一のレコードの作成は簡単にできるのですが、伝票における明細のレコードをPost Onlyモードで作成しようとした場合、単に明細側のコンテキストに対するHTMLを記述すればいいだけではありません。この場合、外部キーに相当するフィールドに、適切な値を入れて、リレーションシップに基づく関連付けをしなければいけません。このような場合は追加で自動的に特定のフィールドに値を与えることが必要になります。このことをPostOnlyモードで実現する方法を紹介します。なお、この演習では、『4-4　計算プロパティの設定』で作成したものの計算式を設定していないものを作成します。ページファイルの記述の一部は、コピー&amp;ペーストで入力してもいいでしょう。定義ファイルにデータベースアクセスに必要な設定を行う1演習環境を起動します（『1-2　演習を行うための準備』を参照）。続いて、ブラウザーで、「http://localhost:9080」に接続します。「トライアル用のページファイルと定義ファイル」というタイトルの部分を特定します。2「def20phpを編集する」をクリックし、定義ファイルエディターでdef20.phpファイルを編集します。（もし、他の用途で20番目を利用しているのなら、例えば、def31.phpを利用するなど、別の番号のセットを使用してください。その場合ソースコードの記述が変わる部分がありますが、可能な限り注記します。）3Contextsの中のQueryと書かれ背景がグレーの部分を特定します。そして、その次の行の右の方にある「削除」をクリックして、Queryの設定がある行を削除します。4「レコードを本当に削除していいですか？」とたずねられるので、OKボタンをクリックします。5同様に、Sortingの次の行にある「削除」ボタンを押し、確認にOKボタンをクリックして、こちらの設定も削除しておきます。6Contextsでは、name、table、viewに「product」、keyに「id」、pagingに「true」、repeat-controlに「confirm-insert confirm-delete」、recordsに「1」、maxrecordsに「1」を指定します。その他のテキストフィールドは空白にします。7Contextsの見出しの下にある「追加」ボタンをクリックします。追加するかどうかをダイアログボックスで確認するので、OKボタンをクリックして、コンテキストの定義をひとつ追加します。8新しく追加されたコンテキストでは、name、table、viewに「item」、keyに「id」、epeat-controlに「confirm-insert confirm-delete」を指定します。その他のテキストフィールドは空白にします。9後から作ったitemコンテキストの中のRelationshipの見出しを見つけます。その下にある「追加」ボタンをクリックします。追加するかどうかをダイアログボックスで確認するので、OKボタンをクリックして、設定を1項目分追加します。10Relationshipの新しい行では、foreign-keyに「product_id」、join-fieldに「id」、operatorに「=」を指定します。Tabキーを押して次のフィールドに進み、入力結果を確定させておきます。11Database Settingsに設定を行います。[MySQL]の場合db-classは「PDO」のままでかまいません。dsnに「mysql:host=db;dbname=test_db;charset=utf8mb4」と入力します。そして、userに「web」、passwordに「password」と入力します。[FileMaker]の場合db-classを「FileMaker_DataAPI」に書き換えます。databaseは「TestDB」、userに「web」、passwordに「password」、serverに「gateway.docker.internal」、portに「443」、protocolに「https」、cert-vefifyingに「false」と入力します。12Debugについては、「false」にすると、デバッグ情報が出なくなります。なお、デバッグ情報をみながら動作を確認したいので「2」のままにして、この後の作業を行ってください。ページファイルの作成と初期状態の確認1「http://localhost:9080」で開いたページに戻り「page20.htmlを編集する」をクリックし、ページファイルのpage20.htmlを編集するページファイルエディターを開きます。HTMLでの記述内容を以下のように変更します。太字が追加する箇所を示します。なお、このページは、『4-4　計算プロパティの設定』の演習で作成したページとおおむね同一です。そちらのページファイルの内容をコピーして編集してもかまいませんが、いくつか削除が必要な箇所もありますので、以下のような結果になるように変更をしてください。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n  &lt;title&gt;&lt;/title&gt;\n  &lt;script type=\"text/javascript\" src=\"def20.php\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n  &lt;table&gt;\n    &lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;td data-im=\"product@id\"&gt;&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;th&gt;acknowledgement&lt;/th&gt;\n      &lt;td data-im=\"product@acknowledgement\"&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;&lt;th&gt;name&lt;/th&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"product@name\"/&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;&lt;th&gt;unitprice&lt;/th&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"product@unitprice\"/&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;&lt;td colspan=\"2\"&gt;\n      &lt;table&gt;\n        &lt;thead&gt;\n          &lt;tr&gt;&lt;th&gt;invoice_id&lt;/th&gt;&lt;th&gt;qty&lt;/th&gt;\n          &lt;th&gt;unitprice&lt;/th&gt;&lt;th&gt;price&lt;/th&gt;&lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n          &lt;tr&gt;\n            &lt;td data-im=\"item@invoice_id\"&gt;&lt;/td&gt;\n            &lt;td&gt;&lt;input type=\"text\" data-im=\"item@qty\"/&gt;&lt;/td&gt;\n            &lt;td&gt;&lt;input type=\"text\" data-im=\"item@product_unitprice\"/&gt;&lt;/td&gt;\n            &lt;td&gt;&lt;/td&gt;\n          &lt;/tr&gt;\n        &lt;/tbody&gt;\n      &lt;/table&gt;\n    &lt;/td&gt;&lt;/tr&gt;\n  &lt;/table&gt;\n  \n  &lt;table&gt;\n    &lt;thead&gt;\n      &lt;tr&gt;&lt;th&gt;qty&lt;/th&gt;&lt;th&gt;unitprice&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody data-im-control=\"post\"&gt;\n         &lt;tr&gt;\n            &lt;td&gt;&lt;input type=\"text\" data-im=\"item@qty\"/&gt;&lt;/td&gt;\n            &lt;td&gt;&lt;input type=\"text\" data-im=\"item@product_unitprice\"/&gt;&lt;/td&gt;\n            &lt;td&gt;&lt;button data-im-control=\"post\"&gt;追加&lt;/button&gt;&lt;/td&gt;\n          &lt;/tr&gt;\n        &lt;/tbody&gt;\n  &lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;ページファイルでは、2つのテーブルがあり、最初のテーブルの中にはさらにテーブルがあります。最初のテーブルはproductコンテキストを使用し、その中にあるテーブルはitemコンテキストを利用しています。productテーブルのある商品とその売り上げに対する1対多の関係にあるitemテーブルのレコードが、内部のテーブルでいくつか表示されます。ページの最後の方にあるテーブルは、Post Onlyモードでitemコンテキストに新しいレコードを作るためのものです。ここまでは、『3-4　入力専用のPost Onlyモード』や『4-3　複数のコンテキストとリレーションシップ』で説明した内容と大きくは違いません。2「http://localhost:9080」で開いたページに戻り、「page20.htmlを表示する」をクリックして表示したタブあるいはウインドウを表示します。productテーブルの内容が、1レコードずつ参照でき、それぞれのページではproductテーブルのidフィールドと同じ値のproduct_idフィールドの値を持つitemフィールドの値が表示されています。また、ページの下の方には、Post Onlyモードのテーブルが表示されています。3Post Onlyモードのテーブルのqtyとunitpriceに適当な数値を入力して、「追加」ボタンをクリックします。itemテーブルを展開している部分に変化はありません。デバッグメッセージの中で、MySQLではINSERTステートメント、FileMakerでは-newパラメーターでXML共有へのアクセスを記録している部分を参照すると、qtyとunitpriceの2つのフィールドにしか値は設定されていません。itemテーブルのproduct_idフィールドはnullになっているので、リレーションシップ上ではproductテーブルのレコードとの関連はないレコードが作成されてしまいました。[MySQLの場合]\nINSERT INTO item (qty,unitprice) VALUES ('555','666)\n[FileMakerの場合]\nhttp://192.168.56.1:80/fmi/xml/FMPXMLRESULT.xml?-db=TestDB&amp;-lay=item&amp;-max=1&amp;qty=555&amp;unitprice=666&amp;-new→外部キーのフィールドにも適切な値を入力する1「page20.htmlを編集する」をクリックして表示されたページファイルエディターのウインドウあるいはタブを選択して、page20.htmlをページファイルエディターで表示します。もし、閉じてしまっていれば、「http://localhost:9080」で開いたページに戻り「page20.htmlを編集する」をクリックします。HTMLでの記述内容を以下のように変更します。太字が追加する箇所を示します。ヘッダー部分にJavaScriptのプログラムを追加します。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n  &lt;title&gt;&lt;/title&gt;\n  &lt;script type=\"text/javascript\" src=\"def20.php\"&gt;&lt;/script&gt;\n  &lt;script style=\"text/javascript\"&gt;\n    INTERMediatorOnPage.processingBeforePostOnlyContext \n      = function(targetNode) {\n        const context = IMLibContextPool.contextFromName(\"product\");\n        const keys = Object.keys(context.store);\n        const pid = context.store[keys[0]][\"id\"];\n        INTERMediator.additionalFieldValueOnNewRecord[\"item\"]\n          = {field:\"product_id\", value:pid};\n        return true;\n      }\n  &lt;/script&gt;\n&lt;/head&gt;INTERMediatorOnPage.processingBeforePostOnlyContextメソッドは、Post Onlyモードでの「追加」ボタンを押した直後に呼び出されます。まだ、データベース処理に移行する前であり、ここで値のチェック等も行えます。ここでは、一番外側のテーブルで利用しているproductコンテキストのコンテキストオブジェクトを参照し、最初のレコードのidフィールドの値を変数pidに取得しています。productコンテキストは1レコードのみなので、一番最初のキーのものしか存在しません。そして、INTERMediator.additionalFieldValueOnNewRecordを利用すると、指定したコンテキストに対して新たなレコードを作成するとき、フィールドの初期値を指定できます。ここではitemコンテキストに対してproduct_idの値が、productコンテキストのidフィールドの値になるような定義が追加されることになります。INTERMediatorOnPage.processingBeforePostOnlyContextメソッドは明示的にtrueを返さないと、レコード作成の処理が中断して、データベース処理に入りません。2「page20.htmlを表示する」をクリックして表示されたページファイルエディターのウインドウあるいはタブを選択してpage20.htmlを表示し、ブラウザーの更新ボタンをクリックして画面を更新します。もし、閉じてしまっていれば、「http://localhost:9080」で開いたページに戻り「page20.htmlを表示する」をクリックします。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）3Post Onlyモードのテーブルのqtyとunitpriceに適当な数値を入力して、「追加」ボタンをクリックします。itemテーブルを展開している部分に変化はありませんが、デバッグメッセージの中のINSERTステートメントの部分（図では選択している部分）を参照すると、qtyとunitpriceに加えて、外部キーとなるproduct_idフィールドの3つのフィールドに値が設定されています。product_idフィールドへの追加は、プログラムで追加した部分により実現されています。[MySQLの場合]\nINSERT INTO item (product_id,qty,unitprice) VALUES ('1','44','789)\n[FileMakerの場合]\nhttp://192.168.56.1:80/fmi/xml/FMPXMLRESULT.xml?-db=TestDB&amp;-lay=item&amp;-max=1&amp;product_id=1&amp;qty=44&amp;unitprice=789&amp;-new入力後にコンテキストを更新する1「page20.htmlを編集する」をクリックして表示されたページファイルエディターのウインドウあるいはタブを選択して、page20.htmlをページファイルエディターで表示します。もし、閉じてしまっていれば、「http://localhost:9080」で開いたページに戻り「page20.htmlを編集する」をクリックします。HTMLでの記述内容を以下のように変更します。太字が追加する箇所を示します。ヘッダー部分にJavaScriptのプログラムを追加します。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）&lt;script style=\"text/javascript\"&gt;\n    INTERMediatorOnPage.processingBeforePostOnlyContext \n      = function(targetNode) {\n        const context = IMLibContextPool.contextFromName(\"product\");\n        const keys = Object.keys(context.store);\n        const pid = context.store[keys[0]][\"id\"];\n        INTERMediator.additionalFieldValueOnNewRecord[\"item\"]\n          = {field:\"product_id\", value:pid};\n        return true;\n      }\n    INTERMediatorOnPage.processingAfterPostOnlyContext \n      = function(targetNode, returnValue) {\n        const context = IMLibContextPool.contextFromName(\"item\");\n        INTERMediator.construct(context);\n    }\n&lt;/script&gt;INTERMediatorOnPage.processingAfterPostOnlyContextメソッドは、Post Onlyモードでの処理において、データベース処理が成功すると呼び出されます。引数には、エンクロージャーのノードと、新たに作成されたレコードの主キー値が設定されて、定義したメソッドの呼び出しが行われます。ここでは、単にitemコンテキストの再描画を行っているだけです。これにより、itemテーブルに関連レコードが作成され、再度itemコンテキストの展開が行われ、増えたレコードが追加されて表示されます。2「page20.htmlを表示する」をクリックして表示されたページファイルエディターのウインドウあるいはタブを選択してpage20.htmlを表示し、ブラウザーの更新ボタンをクリックして画面を更新します。もし、閉じてしまっていれば、「http://localhost:9080」で開いたページに戻り「page20.htmlを表示する」をクリックします。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）3Post Onlyモードのテーブルのqtyとunitpriceに適当な数値を入力して、「追加」ボタンをクリックします。itemテーブルを展開している部分に追加されました。データベースへの入力とともに、コンテキストの更新をその後に行うことで、追加後に即座に表示されるようになりました。演習のまとめPost Onlyモードにおいて、テキストフィールド等に指定されていないフィールドに新たな値を追加するには、INTERMediator.additionalFieldValueOnNewRecordプロパティを利用することができます。上記のプロパティに値を設定するタイミングとして、「追加」のボタン（data-im-control属性が「post」のボタン）を押した直後に呼び出されるメソッド内を利用できます。Post Onlyモードによる新規レコードを作成直後に画面更新をするには、データベースに新規レコードを作成した直後に呼び出されるメソッドを定義して、そこに画面更新のプログラムを記述します。→演習Post Onlyモードのページに引き続いてページを表示する　『3-4　入力専用のPost Onlyモード』で、Post Onlyモードのページに確認のページが不要な点を説明しましたが、一方で、入力後に処理をした結果を確認するという構成も欲しくなります。この場合、入力と確認のページを同一ページに作り、表示と非表示をうまく行う方法を、『3-4　入力専用のPost Onlyモード』で説明しました。一方、入力ページはPost Onlyモードで作成し、確認のためのページを別途作り、そちらは新たに作られたレコードの内容を表示するようにするという方法もあります。こうすれば、サーバー側あるいはデータベース上で複雑な処理を記述できます。こうしたページの作成は、例えばシンプルな通販サイトなどで見られ、合計金額や地域に応じた送料の適用などの応用例が考えらます。その一方で、さまざまなビジネスロジックを組み込むと複雑なシステムになります。そこで、この演習では、ビジネスロジックが極端に簡単な通販サイトを想定することにします。Post Onlyモードのページと、確認のページをどのように「つなぐ」ということを行うのかということを示すためのサンプルであり、通販に必要なロジックをすべて実装したものではありません。　演習を行う前に、どのような動作を行うのかをまず確認しておきます。図6-5-1は、最初に表示されるPost Onlyモードのページです。購入者名と、購入品目をチェックボックスで用意します。金額は意図的にページ上に書いていませんが、これは次のページで計算する合計金額がPost Onlyモードページ内にある金額値を取り込んで計算しているかのような誤解がないようにするためのものです。使い勝手としては悪くなりますが、組み込む機能をより明確にしたいので、あえて表示しないでおきます。金額は、引き続くページのコンテキストに定義した計算式に織り込むようにしました。そして、「購入」ボタンを押すと、図6-5-2のページにジャンプします。ここで購入品目と、それに合わせた合計金額が表示されています。ロジック的なものは、このページのコンテキストに定義した計算式により、選択した品目に応じた合計金額が表示されるということです。この状態からの発展については、ページを作成する作業の後に説明します。図6-5-1　名前と購入品目を指定するページ図6-5-2　前のページに応じて、合計金額表示される最初のページ用の定義ファイルに必要な設定を行う1演習環境を起動します（『1-2　演習を行うための準備』を参照）。続いて、ブラウザーで、「http://localhost:9080」に接続します。「トライアル用のページファイルと定義ファイル」というタイトルの部分を特定します。この演習では、2つのページを作成します。以下の流れでは、page21.html/def21.phpとpage22.html/def22.phpを利用します。もし、それらの番号を他の用途に使ってしまっていれば、別の2組のセットを利用してください。連続していなくてもかまいませんが、連続している方が解りやすいでしょう。異なる番号のセットを利用した場合、ソースコードの記述が変わる部分がありますが、可能な限り注記します。2「def21.phpを編集する」をクリックし、定義ファイルエディターでdef21.phpファイルを編集します。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）3Contextsの中のQueryと書かれ背景がグレーの部分を特定します。そして、その次の行の右の方にある「削除」をクリックして、Queryの設定がある行を削除します。4「レコードを本当に削除していいですか？」とたずねられるので、OKボタンをクリックします。5同様に、Sortingの次の行にある「削除」ボタンを押し、確認にOKボタンをクリックして、こちらの設定も削除しておきます。6Contextsでは、name、table、viewに「testtable」、keyに「id」と指定します。Contextsにあるその他のテキストフィールドは空白にします。7Database Settingsに設定を行います。[MySQL]の場合db-classは「PDO」のままでかまいません。dsnに「mysql:host=db;dbname=test_db;charset=utf8mb4」と入力します。そして、userに「web」、passwordに「password」と入力します。[FileMaker]の場合db-classを「FileMaker_DataAPI」に書き換えます。databaseは「TestDB」、userに「web」、passwordに「password」、serverに「gateway.docker.internal」、portに「443」、protocolに「https」、cert-vefifyingに「false」と入力します。8Debugについては、「false」にすると、デバッグ情報が出なくなります。なお、デバッグ情報をみながら動作を確認したい方は、「2」のままにしてこの後の作業を行ってください。最初のページのページファイルの作成1「http://localhost:9080」で開いたページに戻り「page21.htmlを編集する」をクリックし、ページファイルのpage21.htmlを編集するページファイルエディターを開きます。HTMLでの記述内容を以下のように変更します。太字が追加する箇所を示します。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。番号にかかる部分は、SCRIPTタグのプログラムの内部にもあります。）&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n  &lt;title&gt;&lt;/title&gt;\n  &lt;script type=\"text/javascript\" src=\"def21.php\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\"&gt;\n    INTERMediatorOnPage.processingAfterPostOnlyContext\n      = function(targetNode, returnValue){\n        location.href = \"page22.html?id=\" \n                            + encodeURIComponent(returnValue);\n      }\n  &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;table&gt;\n  &lt;tbody data-im-control=\"post\"&gt;\n    &lt;tr&gt;\n      &lt;th&gt;お名前&lt;/th&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"testtable@text1\"/&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;購入品目&lt;/th&gt;\n      &lt;td&gt;\n        &lt;input type=\"checkbox\" value=\"1\" data-im=\"testtable@num1\"/&gt;なべ\n        &lt;input type=\"checkbox\" value=\"1\" data-im=\"testtable@num2\"/&gt;やかん\n        &lt;input type=\"checkbox\" value=\"1\" data-im=\"testtable@num3\"/&gt;フライパン\n      &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;&lt;button data-im-control=\"post\"&gt;購入&lt;/button&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n  &lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;Post Onlyモードのページ部分はすでに説明した通りで、testtableコンテキストにあるtext1、num1、num2、num3の4つのフィールドにページ上で指定した値が設定されるようになっています。SCRIPTタグのプログラムを見てください。INTERMediatorOnPage.processingAfterPostOnlyContextは、Post Onlyモードでのデータベース処理が終わった後に呼び出されるメソッドです。引数は新たにtesttableテーブルに作成したレコードの主キーフィールド値が設定されます。つまり、testtableテーブルのidフィールドであり、コンテキスト定義のkeyキーに対する値が主キーフィールド名になります。その値が120であれば、変数returnValueが120になり、結果として「location.href = \"page22.html?id=120;」というJavaScriptのプログラムが実行されます。結果的にページに表示される内容は、page21.htmlからpage22.htmlに移行しますが、id値をパラメーターに伴って別のページが呼び出されることになります。2番目のページの定義ファイルを設定する1「def22.phpを編集する」をクリックし、定義ファイルエディターでdef22.phpファイルを編集します。（もし、他の用途で22番目を利用しているのなら、例えば、def31.phpを利用するなど、別の番号のセットを使用してください。その場合ソースコードの記述が変わる部分がありますが、可能な限り注記します。なお、以下画面ショットはpage32.html/def32.phpを使用しています）2Contextsの中のQueryと書かれ背景がグレーの部分を特定します。そして、その次の行の右の方にある「削除」をクリックして、Queryの設定がある行を削除します。3「レコードを本当に削除していいですか？」とたずねられるので、OKボタンをクリックします。4同様に、Sortingの次の行にある「削除」ボタンを押し、確認にOKボタンをクリックして、こちらの設定も削除しておきます。5Contextsでは、name、table、viewに「testtable」、keyに「id」、recordsに「1」と指定します。Contextsにあるその他のテキストフィールドは空白にします。6ページの最初にある「Show All」ボタンをクリックして、すべての設定項目を表示します。7Calculationsの下にある「追加」ボタンをクリックし、確認のダイアログボックスでOKをクリックして、項目を作成します。全部で4つの項目を作成し、それぞれ、fieldとexpressionに次のようにフィールド名と式を設定します。field = total, expression = num1 * 2000 + num2 * 3500 + num3 * 3333\nfield : item1, expression : if ( num1 == 1, 'inline', 'none' )\nfield : item2, expression : if ( num2 == 1, 'inline', 'none' )\nfield : item3, expression : if ( num3 == 1, 'inline', 'none' )合計金額はtotalという計算プロパティで計算されます。現状は個数を指定しているのではなく、num1〜num3については買うなら1、買わないのならnullになります。計算においてはnullは0になるので、チェックのついた項目に対する金額、2000円、3500円、3333円のいずれかの合計がtotalに求められます。item1〜item3については、num1〜num3の値が1なら、「inline」となり、displayスタイル属性に指定することで、SPANタグ内の文字列を表示します。値が1でなければ「none」をdisplayスタイル属性に設定して非表示にします。この次のページファイルで、totalやitem1〜item3がどのような使われ方をしているのかを確認してください。8Database Settingsに設定を行います。[MySQL]の場合db-classは「PDO」のままでかまいません。dsnに「mysql:host=db;dbname=test_db;charset=utf8mb4」と入力します。そして、userに「web」、passwordに「password」と入力します。[FileMaker]の場合db-classを「FileMaker_DataAPI」に書き換えます。databaseは「TestDB」、userに「web」、passwordに「password」、serverに「gateway.docker.internal」、portに「443」、protocolに「https」、cert-vefifyingに「false」と入力します。9Debugについては、「false」にすると、デバッグ情報が出なくなります。なお、デバッグ情報をみながら動作を確認したい方は、「2」のままにしてこの後の作業を行ってください。2番目のページのページファイルの作成1「http://localhost:9080」で開いたページに戻り「page22.htmlを編集する」をクリックし、ページファイルのpage22.htmlを編集するページファイルエディターを開きます。HTMLでの記述内容を以下のように変更します。太字が追加する箇所を示します。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n  &lt;title&gt;&lt;/title&gt;\n  &lt;script type=\"text/javascript\" src=\"def22.php\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\"&gt;\n    INTERMediatorOnPage.doBeforeConstruct = function () {\n      const params = INTERMediatorOnPage.getURLParametersAsArray();\n      if (params[\"id\"])\t{\n        INTERMediator.clearCondition(\"testtable\");\n        INTERMediator.addCondition(\"testtable\",\n            {field: \"id\", operator: \"=\", value: params[\"id\"]});\n      }\n    }\n  &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;table&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;お名前&lt;/th&gt;\n      &lt;td data-im=\"testtable@text1\"&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;購入品目&lt;/th&gt;\n      &lt;td&gt;\n        &lt;span data-im=\"testtable@item1@style.display\"&gt;なべ&amp;nbsp;&lt;/span&gt;\n        &lt;span data-im=\"testtable@item2@style.display\"&gt;やかん&amp;nbsp;&lt;/span&gt;\n        &lt;span data-im=\"testtable@item3@style.display\"&gt;フライパン&lt;/span&gt;\n      &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;合計金額&lt;/th&gt;\n      &lt;td data-im=\"testtable@total\"&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;&lt;button onclick=\"\"&gt;決定&lt;/button&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n  &lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;このページのTABLEではtesttableコンテキストを利用していますが、ヘッダー部分のプログラムにあるように、URLのパラメーターから取り出した値を、INTERMediator.addConditionメソッドを使ってtesttableコンテキストに検索条件として加えています。このプログラムについては、『6-1　再合成を利用した検索ページ』での演習とほぼ同様ですが、ここではid=のパラメーターが設定されていない場合はページ合成も行いません。通常、レコードとして存在する値をid=の後に与えて検索条件としてその値が指定されれば、主キーなので必ず1レコードが返ります。しかしながら、念のためにコンテキスト定義のrecordsも「1」にしています。なお、「決定」ボタンを押しても何も起こりません。プログラムを実装していないということです。実際にページの移動を確認する1「http://localhost:9080」で開いたページに戻り「page21.htmlを表示する」をクリックします。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）2名前やチェックボックスを適当に設定して、「購入」ボタンをクリックします。3次のような警告が出る場合もありますが、ここでの検証ではこれは無視してOKをクリックしてそのまま続けて問題はありません。この警告が出てもレコードは作成されます。4名前と、購入品目、総合計を確認するページに移動しました。URLがpage22になっており、id=の後に整数が設定されていることを確認します。演習のまとめPost Onlyページでのレコード作成後に呼び出されるメソッドを利用すれば、新規に作成されたレコードの主キー値が得られます。主キー値を元に別のページで、今作成したばかりのレコードを表示することができるので、データベースやあるいはコンテキストなどにロジックを組み込むことで入力データを元にしたデータ処理は可能です。なお、実用的なサイトにするには考慮すべきことは多々あります。それについては、この演習の後に解説します。→入力と確認をより確実に行わせるために　直前まで行っていた『Post Onlyモードのページに引き続いてページを表示する』については、もっとも根幹的な部分だけの作成になりました。現実のアプリケーションではここからさまざまな仕組みの実装が必要になります。それらのヒントをここではまとめておきます。セキュリティ面での考慮　このままでは、他人の注文ページを参照できてしまうことは明白です。page22.html?id=1などとアドレスバーに入れて、1から順番に見ていけばいいのです。これを排除する方法のひとつは、すべて認証した状態で注文をするようにすることです。加えて、レコード単位のアクセス権の設定を行い、Post Onlyモードで作成したレコードは、作成者しか見えないようなコンテキスト定義をdef22.phpで行うというのがもっとも確実な方法です。認証とアクセス権については、『Chapter 7　セキュリティと認証・アクセス権』で説明します。　もし、これを認証なしに行いたい場合、他人に見られる確率は0ではありませんが、限りなく0に近くできる手法はあります。Post Onlyモードでレコード作成をしたとき、レコード作成日時を適当な日付時刻型フィールドに保存しておきます。データベースエンジンで設定する方法、あるいは、INTERMediator.additionalFieldValueOnNewRecordプロパティを使う方法などがあります。そして、ここでのpage22.htmlにおいて、主キー値だけでなく、レコード作成日時と現在の日時の時間を見て、一定範囲内であれば表示するようにします。もちろん、数秒としたいところですが、ネットワークが遅いことを考えれば、30秒程度の範囲くらいが妥当なところと思われます。なお、page22.htmlは「更新」ができなくはなりますが、それは「セキュリティ上の理由」で納得してもらえるのではないかと思います。　しかし、それでも、主キー値が連番なら、自分のときが245だったら、そのうち300番が来るのは明白なので、10秒ごとにアクセスしてみるというアタックも可能かもしれません。それを防ぐには、主キー値（あるいは主キーフィールドとは別にフィールドを設ける）をランダムかつ長い値にします。数値10桁くらいにしておくと、予測はほとんどつきません。もちろん、偶然当たることもあるかもしれませんが、この完全に0ではないものの極めて低い確率をどのように評価するかは、隠匿したい情報の内容や、発注者の要求レベル、あるいは公開されてもリスクが発生しない業務形態など、個々の案件に依存すると思われます。認証をさせるのが手堅いのですが、認証をしないのは単にリスクをある意味意図的に増やしているということでもあります。コンピューターはなんでもできる万能機械ではないことを理解していただき、落とし所を探りましょう。発注状況の記録　もうひとつ大きな問題があります。こうして蓄積されたレコードは、全部が「発注した」ものかというと、そうではありません。ここでは、「決定」ボタンをクリックしたら発注が確定したということにしたいわけです。このようなステータス管理を行うには、一般にはステータスを記録するフィールドをひとつ用意して、1なら確定、空白なら未確定、9ならキャンセルといったような値を割り当てておく方法がひとつあります。別の方法としては、特定の状態へ移行した日時を記録する方法があります。これら、どちらがいいというわけではなく、他の用途と密接に関連します。例えば、会計と出荷の処理のように、事象確定のタイミングが異なるような場合であれば、さらにテーブルを分けるべきかもしれません。　いずれもして、一番手軽な方法は、「決定」ボタンをクリックすることにより、あるフィールドに現在の日時を設定する方法です。その日時フィールドが空欄なら確定していない発注であり、空欄でなければ確定した発注です。「発注一覧」の検索条件にそのフィールドがnullでないことを追加すればおおむね大丈夫です。明細を別テーブルに分けたい　このための手法として、Post Onlyモードを1対多での運用はできません。そこで、Post Onlyモードで使用するテーブルには、明細行のためのフィールドを、10個あるいは15個くらい用意しておきます。つまり、product_idN、qtyN（N=1〜10）のようなフィールドを用意しておきます。場合によってフィールドの種類も増えるでしょう。第一正規形が崩れますがこれは一時的なものとして許容します。そして、どこかで、product_idNとqtyNを別のテーブルに新規レコードおよび転記を行って、1対多の関係に展開します。　どこでやればいいのかという点についてはいろいろな場面が考えられますが、Post Onlyモードによる新規レコード作成の直後がベストではないかと思います。そうすれば、次のページの処理では、1対多に展開した状態で、さまざまなロジックを組み込むことができるからです。JavaScriptではINTERMediatorOnPage.processingAfterPostOnlyContextメソッドに、多のテーブル側への追加のプログラムを書くことができるでしょう。あるいは『Chapter 8　サーバーサイドでのプログラミング』で説明する方法を使えばサーバーサイドで別テーブルへの追加部分を記述してもいいかもしれません。また、FileMakerを使っている場合には、コンテキストのscriptキーを使って、データベース上に定義したスクリプトを利用して、明細のレコードを作るということもできるでしょう。→Post Onlyモードで利用できるAPI　Post Onlyモードだけで利用できるAPIを紹介します。以下のメソッドは定義すれば、ページ内のすべてのコンテキストで呼ばれます。しかしながら、通常Post Onlyモードのコンテキストが複数あるようなページはあまり作られないと思われます。どうしてもコンテキストが複数あってそれらを区別したい場合は、引数で参照したエンクロージャーにid属性あるいはclass属性を指定しておき、その値で区別する方法があるでしょう。INTERMediatorOnPage.→processingBeforePostOnlyContext = function(targetNode) {...}　メソッドを定義すれば、→バリデーションが完了した後で、データベースへの書き込み前に呼び出されます。このメソッドがfalseを返すとデータベースの書き込み処理はキャンセルされます。引数targetにはPost Onlyモードのエンクロージャーへの参照が設定されます。INTERMediatorOnPage.→processingAfterPostOnlyContext = function(targetNode, idValue) {...}　メソッドを定義すれば、新規レコードを作成した直後に呼び出されます。引数targetにはPost Onlyモードのエンクロージャーへの参照が設定されます。引数idValueは新たに作成されたレコードの主キー値が設定されます。引数に値が設定されていない場合は、レコード作成ができなかったことをしますがデータベースにエラーがある場合にはこのメソッドの呼び出しは行われません。→このセクションのまとめ　Post Onlyモードは、データベースへのレコード作成の前後に、プログラムを追加することができます。演習で示したように、関連レコードのコンテキストにレコードを追加することが可能なPost Onlyモードのコンテキストとページ要素を定義したり、あるいは、新規レコードを作成後にそのレコードを引き継いで新たなページを表示するなどにこの仕組みは応用できます。→6-6JavaScriptコンポーネント用のアダプターの開発方法→→すでに存在するJavaScriptコンポーネントをバインド可能にするためには、アダプターが必要です。アダプターの開発方法を説明しますが、コンポーネントごとに動作が違うため、最終的には使用するコンポーネントの特性に合わせて調整が必要になります。まだ公開されていないコンポーネントのアダプターを開発したら、是非ともコミットしてください。→コンポーネントの定義と一例　リスト6-6-1は、jQueryUIに含まれているDatePickerを利用するためのアダプターの例です。DatePickerはカレンダー形式のユーザーインターフェースで日付の選択入力が可能なものです。テキストフィールドに対して、クリックすればDatePickerのカレンダー画面がポップアップするといった動作を行います。　このコンポーネントを使用できるようにするドライバーがリスト6-6-1です。IMParts_Catalogというグローバル変数に、「jquery_datepicker」というプロパティを用意し、そのプロパティにドライバーのオブジェクトを設定しておきます。この「jquery_datepicker」は、data-im-widget属性に記述する値です。リスト6-6-1　jquery_datepicker_im.jsIMParts_Catalog[\"jquery_datepicker\"] = {\n    instanciate: function (targetNode) {\n        const nodeId = targetNode.getAttribute('id');\n        this.ids.push(nodeId);\n\n        targetNode._im_getComponentId = function () {\n            const theId = nodeId;\n            return theId;\n        };\n        targetNode._im_setValue = function (str) {\n            const aNode = targetNode;\n            aNode.value = str;\n        };\n        targetNode._im_getValue = function () {\n            const aNode = targetNode;\n            return aNode.value;\n        };\n    },\n\n    ids: [ ],\n\n    finish: function () {\n        for (let i = 0; i &lt; this.ids.length; i++) {\n            var targetId = this.ids[i];\n            var targetNode = $('#'+targetId);\n            if (targetNode) {\n                targetNode.datepicker({\n                    onSelect: function(dateText) {\n                        this.value = dateText;\n                        IMLibUI.valueChange(this.id);\n                    }\n                });\n             }\n        }\n        this.ids = [ ];\n    }\n};　INTER-Mediatorのレポジトリには、Samples/Sample_webpageフォルダーに、リスト6-6-2に加えて、TinyMCEやCodeMirrorのドライバーがあります。同じフォルダーに、それらのドライバーの利用例のページファイルもあります。詳細は、『5-4　JavaScriptコンポーネントの利用』を参照してください。→ドライバーオブジェクトの構成　ドライバーのオブジェクトに必要なメソッドは、引数をひとつ取る→instanciateと、引数のないの2つのメソッドです。加えて、これらのメソッド間でコンポーネントを適用したオブジェクトを後から参照するためにid属性を記録しておくidsプロパティを定義して、初期値は要素のない配列にしておきます。　INTER-Mediatorは、data-im-widget属性がある要素の場合、その値からドライバーのオブジェクトを参照します。そして、そのオブジェクトのinstanciateメソッドを呼び出します。その要素には通常はターゲット指定を行っているはずですが、id属性を設定した後にドライバーのinstanciateメソッドが呼び出されます。そして、instanciateメソッドの引数は、data-im-widget属性がある要素を参照した状態で呼び出されます。　コンポーネントによってその後の構成は異なりますが、jQueryUIのDatePickerは比較的シンプルな方です。引数に与えられた要素への参照からid属性値を得て、idsプロパティへ要素として追加しています。HTMLエディターのTinyMCEでは、要素の子要素にTEXTARERタグの要素を追加し、その要素をTinyMCEに渡してエディターを構築するようにしています。これら、実装はコンポーネントの初期化の動作に依存します。　instanciateメソッドは、リピーターにデータベースのデータを合成しているときに逐一呼び出されます。したがって、レコード数×data-im-widget属性がある要素の数だけ呼び出されることになります。一方、finishメソッドは、エンクロージャーの中にすべての複製されたリピーターが挿入された最後に呼び出されます。つまり、ページのDOMの中に、データベースのデータを合成したものがすべて含まれる状態で呼び出されます。通常はコンテキストにつき1回だけ呼び出されます。　このように、instanciateとfinishがあるのは、instanciateを実行する段階では、ページのDOMの中に要素はなく、リピーターの複製をエンクロージャーに追加する前に呼び出されるからです。このような状態では初期化がうまくいかないコンポーネントがあるため、個別の呼び出しとページに組み込まれてから呼び出される2つのメソッドを用意しました。→ドライバーオブジェクト内で行うこと　ドライバーオブジェクトのinstanciateおよびfinishメソッド内では、各data-im-widget属性が指定された要素に対して、表6-6-1のメソッドを定義することです。メソッドの設定はinstanciate側では、_im_getComponentIdは必ず行えるとして、_im_setValueメソッドもそこで指定します。そうしないと、データベースのデータの合成で値の設定が正しく行われません。_im_getValueについてはinstanciateあるいはfinishのどちらでもいいのですが、通常はinstanciateで設定してみてうまくいかないときにはfinishメソッド内で、idsプロパティに保存されているid属性値ひとつひとつについて処理をするといった思考錯誤が必要です。これらのメソッド内では、コンポーネント特有の事情を考慮して、値を設定したりあるいは取り出したりということを行います。jQueryUIのDatePickerの場合は、比較的シンプルですが、別のコンポーネントではコンポーネントに特有のAPIを利用する必要がある場合もあります。メソッド名引数動作（返り値）→_im_getComponentIdなし要素のid属性値を返す→_im_setValueひとつ要素に引数の値を設定する。返り値なし→_im_getValueなし要素の値を取り出して返す表6-6-1　data-im-widget属性のある要素に付加するメソッド　なお、jQueryの場合は、ページ上にあるテキストフィールドを参照してオブジェクトが増やされますが、そのテキストフィールドは追加されたオブジェクトから独立しています。通常のテキストフィールドだと、テキストを修正して別のフィールドに移動するときにchangeイベントが発生しますが、DatePickerはテキストフィールドとしてのイベントは発生されません。そこで、datepickerメソッドで各要素でDatePickerを有効にしたときに、onSelectメソッドを実装して、選択時の処理を記述しています。IMLibUI.valueChangeは、テキストフィールドのchangeイベントが呼び出されたときに使用するもので、id属性を与えれば、データベースの更新や別の要素で表示しているフィールドの表示、さらには再計算など必要な更新処理をすべて行うメソッドを呼び出しています。結果的に、_im_setValueは使われることなく、コンポーネントのイベントを得て更新処理を実施しています。→ドライバーのサンプルで利用したAPI　DatePickerのドライバーは以下のメソッドを利用していますが、ドライバーに特有なAPIではなく、他の場面でも利用できるものです。IMLibUI.→valueChange(idValue)　引数に指定したid属性値を持つ要素に見えている値を用いて、データベースの更新やバインドされている他のフィールドへの反映、再計算などを行います。通常、テキストフィールドは、changeイベントが発生したときにこのメソッドが呼び出されるようになっています。→このセクションのまとめ　JavaScriptで作られたコンポーネントをバインドできるようにするためにはドライバーが必要です。ドライバーはグローバル変数IMParts_Catalogのdata-im-widget属性に指定する値と同一の名称のプロパティにオブジェクトとして定義します。オブジェクトでは、instanciateとfinishのメソッド定義し、_im_getComponentId、_im_setValue、_im_getValueの3つのメソッドを、data-im-widget属性が設定されている要素に追加する必要があります。それ以上の実装に関することは、コンポーネントの事情に応じて対処する必要があります。\n"
    },
    {
        "id": 1007,
        "parent": "/ja/tutorial/",
        "path": "/ja/tutorial/proof-07.html",
        "title": "セキュリティと認証・アクセス権",
        "breadcrumb": "chapter 7",
        "body": "→Chapter 7セキュリティと認証・アクセス権この章は、INTER-Mediator Ver.11をもとに記載しました。この章が目指す最も重要な目標は、作成するアプリケーションのセキュリティを確保することです。もちろん、手軽にできるのであれば長々と説明する必要はありません。しかしながら、INTER-Mediator自身のさまざまな設定に加えて、INTER-Mediator外のデータベースやサーバーOSといった部分にも注意が必要です。この章では、全体的なセキュリティ設定に加えて、データベースエンジンで確保すべき動作と、INTER-Mediatorのソリューションに対する設定などを説明します。→7-1Webアプリケーションセキュリティの前提INTER-Mediatorによるシステムを作成した場合の、サーバーやクライアントにおいて、何を前提として→セキュリティ設計するべきかをまず最初にまとめておきます。→INTER-Mediatorを稼働する→→サーバーの前提条件　INTER-Mediatorで作成したソリューションを稼働するには、原則として何らかのサーバーが必要です。すでにこれまでに紹介している通り、Dockerコンテナでの稼働も可能ですが、サーバー機での運用、クラウドサービス上のインスタンス、VPS、レンタルサーバーなど、さまざまな形態で稼働させることができます。ここでのセキュリティ上の原則は、「管理者以外はログインできない」そして「サーバーは健全に稼働している」ということです。　管理者であれば、ログインできて、ファイルの内容を参照したり、ファイルを書き換えたりができますが、そうでないユーザーはログインができないということが大原則になります。この原則が守られていて、サーバーが意図した通りに稼働していれば、PHPのファイル、つまり定義ファイルや、あるいは別の設定ファイルなどにデータベース利用のための「パスワードを記述する」ということをしても、パスワード自体は外部に漏れません。　また、以前にはよく見られたトラブルとして、PHPが稼働していないときにWebブラウザーから.phpファイルを開くと、PHPのプログラムが丸見えになるようなことがあります。この時、もちろん、プログラム自体に何かのパスワードが書かれていれば、見えてしまい、パスワードの漏洩が発生します。しかしながら、これは意図した動作ではありません。そうならないように稼働させるのが管理者の役割であり、あるいはプロバイダの役割でもあります。「Webサーバーは生きているのにPHPだけ落ちる可能性がある」という指摘もあるかもしれませんが、問題がある状況を前提にするのは、かなり信頼性が疑われるシステムであり、このようなシステムはそもそも業務の実運用に利用するべきではありません。通常の「稼働していることが前提」のシステムは、問題があればWebサーバーを停止させるのが原則であり、言い換えれば、問題があれば一切の機能を落とすくらいの作業をしなければ、「PHPのソースが見える」だけでなく、さまざまな悪影響が出てしまう可能性があります。これは、サーバー運用のポイントでもあります。　結果的には、サーバーでは、管理者が意図したサービスのみをクライアントに提供している状態にするのが原則です。例えば、WebサーバーでTLS（一般にはSSLと言われますが、この章ではSSLの後継規格である「TLS」を用います）でしか接続させていないというのであれば、そのサーバーはネットワークから見ると、443番ポートしか開いていないというのが原則です。管理者がそのようにセットアップをして、第三者による変更を許さないようサーバー管理者が責任を持つ、という前提条件でWebアプリケーションは成り立っています。→INTER-Mediatorを利用する→→ネットワークの前提条件　Webアプリケーションなので、ネットワーク上に存在しているということは当然なのですが、業務系のアプリケーションの場合、文字通りの意味で世界中のネットワークを通るわけではなく、場合によっては、組織内のクローズドなネットワークだけを通してのアプリケーションの利用に限られていることもあります。状況に応じて脅威は変化し、対策も変わってきます。　しかしながら、アプリケーションの開発者や利用者にコントロールできるのは、TLSの利用をするかどうかという点が一番大きいでしょう。また、アプリケーションによっては認証の利用やアクセス権（認可）の設定が必要かどうかを検討するかもしれません。認証やアクセス権については、この章の大きな目的であって各所で説明があるので、ここではTLSについての基本的なスタンスを説明します。　執筆時点で最新規格であるTLS 1.3は、送信者と受信者以外に通信内容を取り出せないように暗号化通信を実現できます。その前の規格のTLS 1.2の段階では「適切な暗号スイートを利用すれば」と但し書きが必要でしたが、TLS 1.3は安全な暗号スイートに絞られており、設定のミスで危険性を高める可能性は低いと言えます。TLSを利用すれば、暗号化した通信内容を解読するには極めて長い時間を要することから、将来致命的な弱点が見つからない限り、現実的な時間での解読はほぼ困難と言えるでしょう。なお、SSLについては攻撃手段が発見されて、通信の傍受の可能性は0ではなくなったので、利用する仕組みとしては現在は既に除外されています。　TLSで守られるとしたら、どういう状況でしょうか？　まず、クライアントとサーバーでは、通信前後に暗号化が解除される段階があるので、TLSによって、すべてが守られるわけではありません。一方、Wi-Fiの電波を解析したり、Ethernetに流れる通信結果を取り出しても前述の通り解析は事実上不可能ですので、漏洩はTLSを使う限り原則的には発生しません。通信内容を読み取られたとしても通信経路上のデータは暗号化されているからです。また、サーバーとクライアントの間には、たくさんのルーティングの機材（ルータあるいはホスト）が介在しますので、その機材を通る間のパケットを傍受される可能性もあります。しかし、TLSの場合は、中間で暗号化の解除は通常はできませんので、この脅威も取り除かれることになります。　では、組織内のネットワークしか通過しないのなら、TLSは必要でしょうか？　これは、組織内のネットワークが正しく運用されているかと、組織内のスタッフを信用できるかどうかに関わってきます。「社内だから大丈夫」と思ったら、Wi-Fiに誰もが入れるようなお粗末な管理だと、「内部ネットワーク」とは言えず、結果的にはインターネットカフェなどと同じ程度の安全性になります。つまり、組織内だからTLSは不要であるという結論を出すには、ネットワークの管理が正しく行われているかどうかに依存します。その上で、スタッフを信頼できるかどうかは、是非とも組織内でディスカッションをしてみるべきテーマです。→→→ブラウザーのセキュリティ　現在、セキュリティ上の懸念点があるのは、サーバーやネットワークよりもむしろブラウザーであると言えるでしょう。ソフトウェアは作り方によってはセキュリティ上の問題点を発生します。特にXSS（クロスサイトスクリプティング）については、あらゆるWebアプリケーション開発者が常に意識すべき問題です。これについては、このすぐ後の『クロスサイトスクリプティング攻撃（XSS）とinnerHTML』で説明します。　ブラウザーでの一番の問題は、利用者が切り替わる場合の対処です。認証が必要なサイトをあるユーザーが利用していたとして、しばらくデスクを空けていたとします。その間に、画面がスリープやロックになって、元のユーザーにしか分からないパスワードでしか解除できない状況なら問題はありません。しかし、ブラウザーのウインドウが開きっぱなしならどうでしょうか？　それまでのユーザーになりすまして、別のユーザーも利用できてしまいます。これは、使用中だけでなく、使用後と思っても正しくログアウトできていない場合、やはり別のユーザーが偶然に認証済みのページを見つけてしまうかもしれません。この問題は、すべてのアプリケーションに存在し、防ぐ方法はありません。言い換えれば、利用者が端末を適切な方法で利用しない場合には、脅威として必ず存在します。もちろん、INTER-Mediatorだけの問題ではありません。アプリケーションを実装するときに、何もしないと認証が時間切れになる仕組みを利用したり、あるいはその時間を短くするなどで、他人がなりすます可能性を少しは減るかもしれませんが、力ずくで端末を開いた状態で取り上げられるようなことがあれば、やはり脅威となり得るのです。　ブラウザー上で稼働するJavaScriptのプログラムの場合、常に、変数の結果を参照したり、あるいは書き換えたり、場合によってはプログラムの書き換えができてしまう点に注意を払う必要があります。INTER-Mediatorでは、パスワードそのものは変数にも残さないようにしていますが、認証の手がかりとなる情報は変数に残しています。ある操作をすれば、それは参照できますが、原則として、本人が操作して見えてしまっても、本人である限りは問題ないと言えます。また、書き換えた結果、何もできなくなるのなら、それは書き換えた人の責任であり、開発する側は責任を取る必要はないと考えます。しかしながら、問題になるのは、そうして書き換えをした結果、別のユーザーになりすますことができるような状況があるかどうかです。INTER-Mediatorでは、その点はテストしており、認証時に別のユーザーになりすますことはできない仕組みになっています。少なくとも、開発時にはその点も考慮しました。　いずれにしても、JavaScriptのプログラムをクライアントで触れる点は問題になりそうですが、それによって他のユーザーになりすましたり、あるいはシステムやデータに損傷を加えることがなければ問題はないと言えます。ただし、この点について「バグが発見されていない」というだけのことで、この点について保証できるものではありません。潜在的には何かしらの問題点がある可能性があります。バグによる脆弱性の存在の可能性はINTER-Mediatorに限らずどんなソフトウェアにも存在します。何らかの懸念点があれば、アプリケーション開発者でもフレームワークの動作を検証する必要はあるかもしれません。→→クロスサイトスクリプティング攻撃（→XSS）と→innerHTML　クロスサイトスクリプティング攻撃（XSS）は、現在のWebアプリケーション開発において、必ず考慮されなければならないセキュリティ要件です。このXSSは、攻撃者が仕込んだ任意のJavaScriptが実行できる状況において発生し、その結果、例えばある特定のサイト向けのクッキー情報やページ上に表示された情報を、攻撃者のサイトにネットワーク転送してしまうような悪用が考えられます。つまり、ページ上で、任意のスクリプトが実行される状況を作ってしまうと、XSSが可能なセキュリティホールが発生します。これは、フレームワークに内在する問題ではなく、どんなフレームワークを使っても、アプリケーション側で意図せずに実装されてしまう可能性のあるセキュリティホールです。　XSSが発生する代表的な例が、「誰でも書き込みができるBBS」の事例です。せっかくのBBSを盛り上げるために、HTMLで自由にスタイルなどを設定するようにしていたとします。すると、書き込むメッセージにSCRIPTタグがあるとします。そのSCRIPTタグのプログラムは、書き込んだ人だけでなく、BBSを閲覧している人のブラウザー上でも実行します。クッキーの情報は、記録したドメインと同じドメインのサイトに接続しないと読み出せないといった制限がかかってはいるものの、スクリプトはまさにそのサイトにおいて実行しているので、他の人のクッキーを得ることができます。クッキーに含まれる情報で認証の成立を確認する状況は比較的利用されており、クッキーを第三者に取り出されてしまうと、その第三者によってなりすましのログインができてしまう場合も最悪はあり得ることになります。　この時、メッセージのHTMLテキストを表示するのに利用されるひとつの方法が、innerHTMLプロパティへの代入です。HTML文字列をそのまま代入できて便利なのですが、その文字列にSCRIPTタグが含まれている可能性があるならば、innerHTMLの利用は危険です。INTER-Mediatorでは、意図的にinnerHTMLを使用するように設定した場合と、認証パネルのカスタマイズの部分を除いて、innerHTMLは利用しないようになっています。通常のデータベースから得られたデータをタグ要素にマージするときには、DOMのAPIを使ってテキストノードとして追加をしています。　INTER-Mediatorで制限付きながらもinnerHTMLをサポートしている理由を説明しましょう。innerHTMLの危険性がある一方で、innerHTMLがあれば必ずXSS攻撃を受けてしまうということにはなりません。任意のHTMLテキストをデータとして書き込めるユーザーを限定すれば、第三者からのXSS攻撃は防ぐことができます。例えば、ある組織の通販サイトを運用するのであれば、メッセージを書き込むのは通常は通販会社の担当者です。利用者からのメッセージは例えばテキストだけにするということが一般的です。そういう状況においては、INTER-Mediatorは「任意のスクリプトを第三者が実行できる」状態にはなっていません。そのためにも、HTMLテキストを書込み権限は認証したユーザーだけに与えることをベースにして設計する必要があります。悪意のある人に書き込み権限を与えない方策を備えていれば、innerHTMLを全面的に排除していないことが、問題にはならないと考えています。すなわち、システムを運用する組織としての信頼関係があるユーザーだけに書き込みを許可すれば、XSSの発生となる根本原因を除去できるということです。もちろん、信頼した相手が攻撃をしないという前提の元で成り立つことです。→→クロスサイトリクエストフォージェリ（→CSRF）を排除する　クロスサイトリクエストフォージェリ（CSRF）は、最終的にはユーザーが意図しないサイトへ誘導されて、意図しない処理をさせられてしまう可能性のある攻撃です。攻撃者は攻撃用のWebページを公開し、あるユーザーがそのWebページを参照したとします。そのページの中にあるJavaScriptが、全く別のサイトに接続してリクエストを送るということができます。例えば、偽の「お買い得情報！」メールを送り、それを見たユーザーが攻撃者のサイトとは知らずにアクセスしたとします。その際に、そのサイトのファイル一式の中に、オンラインショップに接続して何か購入することを決定するようなスクリプトが組まれていたとしたらどうでしょう。そのユーザーがいつも使うオンラインショップであれば、認証がすでに有効になったままかもしれません。そのままJavaScriptのAJAXの機能を利用して自動的にオンラインサイトを操作して、購入決定までさせてしまうことは技術的には可能です。購入操作が無事完了したかに見えますが、商品は届かないかもしれません。もちろんオンラインショップのコントロールは難しそうですが、匿名の掲示板だとそれほど困難ではありません。ユーザー自身が知らないうちにあちこちのBBSに、攻撃者が記述したなりすましメッセージを書き込まれてしまうということにもなってしまいます。　INTER-Mediatorでは、作成したアプリケーションがCSRFを受け入れる脆弱性を持ってしまうことを防ぐための対策も組み入れています。対策方法としては、リクエストヘッダーにX-FromおよびOriginを利用する手法を利用しました。ポイントは、HTTPリクエストがサーバーに来た時にOriginヘッダーをチェックすることです。JavaScriptで作成した通信処理はXMLHttpRequestクラスを利用しますが、通信においてはそのページが生成されたサーバーのURLがクライアント側で自動的に→Originヘッダーの値に設定されます。そこで、INTER-Mediatorのサーバーでは自分自身のFQDN値を記録し、クライアント側では→X-Fromヘッダーにその値に付与するように動作します。元サーバーから自動的に付与されるOriginがX-Fromと同じであり、それがサーバーに設定したFQDNと同じであれば、CSRF攻撃ではないと判断できます。さらに、DNSサーバーの応答を操作することでの攻撃を回避するためにHostヘッダーも確認しています。攻撃側では攻撃対象のサーバーのFQDNはもちろん分かりますが、それを攻撃プログラムに組み込んでもDNSが正しく稼働している限りはOriginは攻撃者のサーバーになるので、OriginとX-Fromは一致せずCSRF攻撃であるとみなして処理はスキップします。X-Fromを攻撃者のサーバーと同じに設定しても、サーバーに設定したFQDNとも違うので、やはり攻撃が成り立ちません。CSRF対策として自分自身のFQDNをサーバーへ設定する方法については『2-6　設定ファイルparams.php』で説明します。→データベースアカウントへのアクセス権設定　データベースエンジンには通常、アクセスするためのアカウントを設定可能です。INTER-Mediatorはデータをデータベースに保持するので、→データベースアカウントを利用することで、可能な限り安全な運用が可能です。なお、SQLデータベースのひとつであるSQLiteではアカウントの設定機能はありません。設定の詳細については、『2-1　データベースからの取り出し設定』で説明があります。　SQLiteはネットワーク接続ができませんが、その他のINTER-Mediatorが対応するデータベースはすべてネットワークからの接続ができます。しかしながら、INTER-MediatorあるいはWebサーバーで稼働するWebアプリケーションから利用するときには、ネットワーク接続が必須なわけではありません。例えば、Webサーバーとデータベースサーバーが同一の場合は、データベースへのネットワーク接続は不要です。その場合は、localhostからの接続だけに限定することで、セキュリティ面では「他のコンピューターからの直接接続」は排除できて、不正なアクセスを許す要因は取り除かれます。また、Webサーバーとデータベースサーバーが異なるホストでも、データベース側ではWebサーバーからのアクセスのみを許可することで、他のコンピューターからの接続は排除できます。不要なネットワーク処理を利用できる状態にしないというのは、データベースに限らず、すべてのサーバー運用では鉄則と言える対処です。　MySQLやPostgreSQLなどSQLサーバーでデータベースを構築するときには、データベースサーバー自体に対して何でもできるスーパーユーザーを設定します。MySQLではroot、PostgreSQLではpgsql、SQL ServerではSAというユーザー名が一般的でしょう。また、FileMaker Serverは、各データベースにすべての設定変更が可能な管理者ユーザーを設定します。名称は任意ですが、Adminなどの名前をつけます。これらのアカウントには原則としてパスワードを設定します。PostgreSQLの場合は、OSのアカウントを利用するのですが、パスワードを利用してログインをします。これらデータベースエンジンのアカウントは、最初にデータベースを作ったり、スキーマの適用をする場合には必要になりますが、実運用、特に、Web経由のアクセスに応答するために利用することは、可能なかぎり避けるべきでしょう。理由は、「制限したユーザーでの利用の方が少しでも安全になる確率が高い」からです。　もし、Webアプリケーションからのアクセスが、データベースからの読み出しのみの場合、データベースのユーザーは、スキーマ定義ができないことはもちろん、必要なテーブルに対してSELECTのみ、あるいは読み出しのみの権限のみを与えておきます。また、Web側から更新があるのなら、スキーマ定義はできないものの、SELECT/DELETE/INSERT/UPDATE、あるいは読み書き権限を与えておきます。こうした、スーパーユーザーでないユーザーの運用制限を加えておくことで最悪の事態が起きた場合でもデータの安全が確保されることになります。最悪の場合に考えられるのは、ソースコードごと漏洩してデータベースのスーパーユーザーが知られてしまう可能性があることや、設定を誤り、抜け道を作ってしまい、読み出ししかできないはずが認証もなくデータを消すことができてしまったといったことがあります。　もし、サーバー管理を正しく構築し、ソリューションにセキュリティホール無く作ることができれば、スーパーユーザーでも問題ないのかもしれません。しかしながら、一種の保険として、データベースへのアクセス権を必要以上に広げないようにすることをお勧めします。そんなことは不要、あるいは過剰と思われるかもしれませんが、サーバー運用において不要なポートを閉じるのと同様な、予防的な措置として検討しましょう。　なお、プロバイダのレンタルサーバーでは、スキーマ定義や読み書きができるひとつのアカウントしか使えないことがあります。その場合は仕方ありませんので、他の手法でセキュリティを確保することにします。→セキュリティ設定に関連するヘッダーを通信に含める　セキュリティの確保のための設定がparams.phpにあります。表7-1-1にある変数を定義することで、通信ヘッダー等に情報が追加されます。変数名既定値用途$xFrameOptions\"SAMEORIGIN\"変数に指定した値を→X-Frame-Optionsヘッダーの値として応答に含める。使用できる文字列は、\"SAMEORIGIN\", \"DENY\", \"ALLOW-FROM uri\"の形式で、\"\"（空文字列）にすれば、X-Frame-Optionsヘッダー自体を出力しない$contentSecurityPolicy\"\"(空文字列)変数に指定した値を→Content-Security-Policyヘッダーの値として応答に含める。\"\"（空文字列）にすれば、Content-Security-Policyヘッダー自体を出力しない$accessControlAllowOrigin（未定義）変数に指定した値を→Access-Control-Allow-Originヘッダーの値として応答に含める。未定義ないしは \"\"（空文字列）の場合は、Content-Security-Policyヘッダー自体を出力しない$webServerName設定なしWebアプリケーションが稼働しているホストのFQDN名を配列で指定してCSRF攻撃対策を行う。例えば、array('www.inter-mediator.com', 'inter-mediator.org')など。ひとつだけであってもarrayで指定する表7-1-1　params.phpに記述できるセキュリティ関連の変数　HTTPレスポンスに含めるセキュリティ関連のヘッダーについての変数が、$xFrameOptionsと$contentSecurityPolicyです。→X-Frame-Optionsヘッダーは通常、値が→SAMEORIGINでヘッダーに含まれています。異なるドメイン名のサイトの内部にINTER-Mediatorのページをiframeタグ要素で挿入するような場合、このヘッダーを非表示にしたり、特定URIに対する許可を与えるなどする必要がありますが、その場合→クロスサイトスクリプティング攻撃の可能性が高まりますので注意が必要です。→Content-Security-Policyヘッダーは通常は出力されていませんが、こちらも必要なら指定ができます。このヘッダーを適切に指定することで、クロスサイトスクリプティング攻撃の機会を減らすことができます。設定の記述は多岐に渡りますので、詳細はこちらを参照してください。さらに、$webServerName変数を指定することで、→CSRF対策を行います。URLと接続した先のサーバー名が同一FQDNかどうかを判定する仕組みを稼働させます。Webアプリケーションのセキュリティに関することは、『7-1　Webアプリケーションセキュリティの前提』も参照してください。　Webアプリケーションは通常サーバーに配備され、クライアントはそのサーバーとのやりとりだけで完結できます。しかしながら、クライアントがさらに→→別のサーバーに対してAjax通信を行おうとしても、ブラウザーはセキュリティ上の理由（→Same-Originポリシー）から通常は阻止をします。その時は、→Access-Control-Allow-Originヘッダーを応答に追加すれば、値に指定したURLの通信は別のサーバーでも許可されます。params.phpファイルに$accessControlAllowOrigin変数を定義して、URLを含む文字列の値を代入します。サーバーAとクライアントCがあって、サーバーAにあるWebアプリケーションにクライアントCから接続して利用している場合を想定してください。この場合、AとCのやり取りは特に何もしなくても可能です。もし、Cのクライアントアプリケーションで、別のサーバーBに対してAjaxつまりXMLHTTPRequestクラスを使った通信を行おうとするとき、通常はエラーになります。このとき、AのサーバーのURLを値に持つAccess-Control-Allow-OriginヘッダーをBのサーバーがクライアントCに返すことで、Aの配下のクライアントCであってもBへのアクセスを許可します。Access-Control-Allow-OriginヘッダーをINTER-Mediatorで使う場面として、→Web APIを作成するような場合があります。任意のクライアントからWeb APIを利用できるようにこのヘッダーの指定が必要になります。もしくは、定義ファイルを複数のサーバーで分散処理する場合にもこのヘッダーを利用する必要があります。INTER-Mediatorが扱う分散処理の例として、ページファイルのサーバーと定義ファイルのサーバーが異なるURLになる場合があります。そのような場合にはこのヘッダーの設定を利用して、ページファイルのURLからの要求を定義ファイルを供給する側のサーバーで許可するように設定します。→セクションのまとめ　Webアプリケーションは、「サーバー側を誰もが自由に参照したり改変することはできない」という前提のもとで、セキュリティ対策を行っています。つまり、Webサーバーにログインできるユーザーを制限することが大前提です。また、データベースを利用するためのユーザーについても、余分な処理をできないようにしておくことで、他の問題が発生してもセキュリティが確保される確率は幾分は高くなるでしょう。→7-2ユーザー認証とアクセス権適用を行う仕組みINTER-Mediatorは従来形式のWebアプリケーションと違い、クライアントサイドでの処理がむしろ主になっています。認証とアクセス権適用の考え方については、クライアントとサーバーでの役割が従来とは異なります。ただし、アプリケーション利用者にとっては違いがないようになっています。このセクションでは、INTER-Mediatorの認証やアクセス権の機能に加えて、その実現に必要なことを説明します。→認証とアクセス権　改めて、「→認証（Authentication）」についての定義を記載します。認証は、利用者の特定を行い、アカウントが確定することです。ユーザー名とパスワードを入力するのが認証の代表的な手法です。何らかの方法で、アカウント、つまりシステムに記録された利用者のどれかを確定することが認証で実現されることです。もちろん、他のアカウントになりすましたり、他のアカウントとして振るまえてしまうということがないようにする必要があります。ユーザー名とパスワードを使う方式ではさまざまなセキュリティ的なリスクがありますが、一番大きいものが「→→パスワードの漏洩」です。言い換えれば、パスワードはそのアカウントに対応する人しか知りえないという前提の下で成り立つセキュリティの確保の手法です。　「→アクセス権（Authorization）」は、「認可」とも呼ばれます。通常は認証によって確定したアカウントに対する処理範囲の制限を行う機能です。制限は、アプリケーション開発者やあるいはシステム管理者によって指定されます。一般には、特定の処理だけに制限するような設定、ないしは特定のアカウントに対してだけ特定の処理の許可を与えるといった設定が可能です。アクセス権についてのセキュリティ的なリスクとしては、もちろん、フレームワークのバグや、バックドアなどのアクセス権回避手段が存在しないといった、フレームワークの実装面のことがあります。また、アクセス権の設定は複雑になりがちであり、設定のミスが起こりやすいとも言えるので、作成したアプリケーションの十分な実証テストは欠かせません。→アカウントとグループ　INTER-Mediatorは、→アカウントとして「→ユーザー」「→グループ」、そして内部的なアカウントとして「クライアント」の3種類をサポートします。グループは、ユーザーの集合ではありますが、グループにグループを所属させることができます。ユーザーは自分が所属するグループの一覧を得て、アクセス権の適用を受けます。　ユーザーのアカウントを記録する方法としては、アプリケーションが利用するデータベースに含まれるテーブルあるいはビューを利用する方法（→ユーザー認証）が基本です。また、外部の認証サーバを利用するSAML認証にも対応していますが、その場合でも利用するデータベースでのユーザー用テーブルは必須となります。　一方、グループについては、INTER-Mediator側で定義したものだけが指定できます。データベースエンジン側で定義したものに対してのアクセス権設定はできません。ユーザー認証時はもちろん、ネイティブ認証時にもアプリケーションが利用するデータベースにグループを管理するためのテーブルを定義し、そのグループレコードの利用のみです。　→→クライアントのアカウントは、通信のやり取りが発生したときにINTER-Mediatorによって自動的に割り振られるコードです。専用のテーブルは不要ですが、認証のための情報を記録するテーブルのひとつのフィールドとして記録されます。このクライアントコードを利用して、クライアント、正確には「ブラウザーのウインドウ」を識別しますので、同じページを同一のブラウザの別々のタブで表示していても、クライアントとしては別々のものとして認識しています。→→→ユーザーのテーブル　利用するデータベースでは、ユーザーのテーブルが必要です。既定のテーブル名は「→authuser」としています。この名前は設定で別のものにもできますが、以下、特定しやすいように、ユーザーアカウントのテーブルはauthuserテーブルと呼ぶことにします。なお、テーブル名は任意の名前を指定できますが、フィールド名は決められたもののを使用する必要があります。表7-2-1に必要なフィールドを記述します。認証だけならテーブル自体は読み込みのみのアクセス権でも構いませんが、パスワードの変更をログインパネル上で行う場合には、パスワードのフィールドは書き込み可能である必要があります。また、テーブルの内容をアプリケーションで追加編集する場合には、一般には読み出しだけでなく変更や追加、削除の権限も必要になります。サポートするデータベースのサンプルファイルあるいはサンプルスキーマには、authuserテーブルそのものあるいは生成コマンドが含まれているので、自分で作成するアプリケーションの場合はその部分をコピーすると良いでしょう。フィールド名型の例説明idINT AUTO_INCREMENT連番の数値を入れて、キーフィールドとするusernameVARCHAR(48)ユーザー名（重複した名前が定義されないようにする）hashedpasswdVARCHAR(72)パスワードのハッシュ値（パスワード変更があるなら要書き込み）emailVARCHAR(100)ユーザーのメールアドレス（メールアドレスをユーザー名にするときには必須）limitdtDATETIMESAML認証で必要。キャッシュしたアカウントの期限表7-2-1　authuserテーブルのフィールド　→パスワードのフィールドには、パスワードはそのまま入れずに→ダイジェスト関数によって処理された値を使います。当初はSHA-1を利用していましたが、セキュリティ上の問題が内在されておりSHA-1の利用自体が問題視される状態になったので、Ver.8でSHA-256に対応しました。なお、認証におけるセキュリティ的な問題は、ダイジェスト関数の脆弱性によるものだけでなく、むしろディクショナリ攻撃や不味い運用（全員同じパスワードなど）によるものの方が深刻であると考えられるものの、SHA-1を使っているというだけでセキュリティ上の問題と判断される風潮でもあるので、SHA-2ベースに移行しました。SHA-1を使っている状態を「認証バージョン1」、その後に改訂してSHA-256を使っている状態を「認証バージョン2」と称することにします。Ver.11現在、過去との互換性を考慮して、既定値は認証バージョン1になっています。新たにアプリケーションを構築する場合は特に縛りはないと思われるので、認証バージョン2での運用をお勧めします。なお、認証バージョン2で運用している場合でも、以前のアプリケーションでバージョン1のみで運用していた時代のauthuserのレコードはそのまま認証で使えます。　パスワードのハッシュ値の計算方法は以下のとおりです。独自に生成する場合には、saltを常に異なる値にすることが必要です。なお、JavaScript側のライブラリの制約により、パスワードおよびsaltはASCII文字として表現可能な範囲にします。コントロールコードや漢字は利用しないようにします。シェルスクリプトで生成する場合のサンプルは、INTER-Mediatorのレポジトリにあるdist-docs/usergenerator.shを参照してください。リスト7-2-1　hashedpasswdフィールドの値の求め方pw：パスワード\nsalt：4バイトのソルト値\nhash()：認証バージョン1ではSHA-1、認証バージョン2ではSHA-256を5000回繰り返しによるダイジェスト値を求める関数\nhex()：16進法による表記に変換する関数\n+：文字列の結合\n\nhashedpasswdフィールドの値 = hex(hash(pw + salt)) + hex(salt)\n認証バージョン1は48バイト、認証バージョン2は72バイト　表7-2-1に示したauthuserテーブルのフィールドは必須のフィールドですが、任意のフィールドを追加してもかまいません。例えば、VARCHAR(20)型のrealnameフィールドに、ユーザーのフルネームを入れておけば、ログインした人の氏名をページ上に表示するようなことにも利用できるでしょう。　もし、すでに別の名前でユーザーテーブルが作られているのであれば、SQLデータベースの場合には、authuserビューを定義し、フィールド名はビュー定義のコマンドで別の名前に付け替えるような記述を行えば良いでしょう。FileMakerの場合には、レイアウト名をauthuserにすることで、任意のテーブルを利用できます。ただし、既存のフィールドが作られている場合ではフィールド名が表7-2-1のようになっていない可能性があります。その場合はフィールド名を変更するか、あるいは計算フィールド等フィールドの追加を行い、表に示したフィールドが存在するように見えるようにします。→→→グループのテーブル　グループを構成するテーブルは2つ必要です。まず、ひとつはグループそのものを定義する「→authgroup」テーブルです。加えて、ユーザーやグループの所属関係を定義する「→authcor」テーブルです。いずれも、任意の名前を利用できますが、テーブルの種類を特定する場合、authgroupテーブル、authcorテーブルと呼ぶことにします。表7-2-2と表7-2-3に、必要なフィールドを記述します。フィールド名型の例説明idINT AUTO_INCREMENTグループを識別するための番号groupnameVARCHAR(48)グループ名表7-2-2　authgroupテーブルのフィールドフィールド名型の例説明idINT AUTO_INCREMENTレコードを識別するための番号user_idINT所属するユーザーのidフィールドの値group_idINT所属するグループのidフィールドの値dest_group_idINT所属されるグループのidフィールドの値表7-2-3　authcorテーブルのフィールド　authgroupテーブルは単にグループ名とid番号の割り当てのためのものです。グループへの所属関係を記録するauthcorテーブルのひとつのレコードでは、user_idフィールドもしくはgroup_idフィールドのどちらかを入力し、一方はNULL（FileMakerでは\"\"）にします。これらのフィールドには、authuserおよびauthgroupテーブルのidフィールドの値を設定します。dest_group_idフィールドにはauthgroupテーブルに存在するidフィールド値を指定します。ユーザー名やグループ名を指定するのではありません。　例えば、{user_id: 1, group_id: NULL, dest_group_id: 101}といったレコードがあれば、authuserテーブルのid=1のレコードが示すユーザーが、authgroupテーブルのid=101というグループに所属することを意味します。また、autugroup_id=3のグループがauthgroupテーブルのid=101というグループに所属することは、{user_id: NULL, group_id: 3, dest_group_id: 101}と言ったレコードで記述します。→→→ユーザーレコード生成のためのスクリプト　データベースのスキーマを読み込む段階で、すでにいくつかのユーザーを作っておきたい場合もあるでしょう。もちろん、自分でハッシュを計算することで可能ですが、INTER-Mediatorには、macOSあるいはLinuxで利用できるユーザーレコード作成のコマンドが用意されています。INTER-Mediatorフォルダー内のdist-docsフォルダー内にある「→passwdgen.sh」というシェルスクリプトです。　このシェルスクリプトを使えば、hashedpasswdフィールドの値を求め、場合によっては、→SQLステートメントの形式で得られます。INTER-Mediator/dist-docsがカレントディレクトリにあるとして、例えばリスト7-2-2のようにコマンド入力できます。行の最初に$があるのがコマンド入力行です。最初のコマンド例は、引数として--userでユーザー名、--passwrodで→パスワード文字列を指定しており、出力は、CSVファイルの形式で、ユーザー名、パスワード、hashedpasswdフィールドの値の順に表示されます。ソルトは乱数で生成しています。2つ目のコマンド例は、さらに、--sqlを引数に指定しており、これにより、SQLステートメントの形式で出力をしています。なお、ハッシュ値の計算は、認証バージョン2に対応したものです。opensslで5000回のハッシュ計算を内部的には行えず、コマンドを5000回処理しているので、スクリプトの処理にはちょっと時間がかかります。リスト7-2-2　passwdgen.shスクリプトの利用例$ ./passwdgen.sh --user=test --password=testpassword\n'test','testpassword','07559ce0fc95e44760dcb9a7794060ab740aad861b41f12b0a4856323d6e3b4c677a6867'\n$ ./passwdgen.sh --user=test --password=testpassword --sql\nINSERT authuser(username,initialpass,hashedpasswd) INSERT authuser(username,initialpass,hashedpasswd) VALUES('test','testpassword','a1ec3bb4e914822a35427c0fce3e25a43e86dbbc753ca525488bc9d8426df5f4636e6246');　一方、CSVファイルを用意して、そのファイルを「./passwdgen.sh --sql --csv=CSVファイルのパス」のように指定すると、上記の処理をCSVファイルから取り出して行うので、多数のユーザー用のSQLステートメントを生成できます。CSVファイルは1列目がユーザー名、2列目がパスワードです。カンマで区切りますが、それぞれのフィールドは、シングルクォートやダブルクォートで囲っても構いませんし、囲わなくても構いません。　同じフォルダーに、→usergenerator.shというスクリプトファイルもあり、こちらは、パスワードの自動生成などを行います。なお、引数は特に取りません。なお、これらのスクリプトでは不満がある場合もあるかもしれません。いずれもシェルスクリプトですので、必要に応じて改良して使ってください。また、スクリプトのソースはユーザー自動生成の方法の参考になると思います。→→→ハッシュ値用テーブルの内容　認証を行う場合、ユーザとグループのテーブルだけでなく、表7-2-4に示すテーブルが必要です。このテーブル名についてもカスタマイズは可能ですが、ここでは既定値の「→issuedhash」テーブルと呼ぶことにします。通信を行うたびにレコードを生成するので、1回のページ表示でたくさんのレコードを作成します。そのため、このテーブルをFileMakerで運用するにはパフォーマンス上の問題が発生しますが、FileMaker Serverで運用しつつ、→→issuedhashテーブルのみをSQLiteで運用するということもできるようになっています。FileMakerではこの方法により、パフォーマンスを大きく損なうことなく認証処理ができるようになっています。フィールド名型の例説明idINT AUTO_INCREMENTレコードを識別するための番号user_idINTauthuserテーブルのキーフィールドとなるid値clienthostVARCHAR(64)クライアントを識別する自動生成されるコードhashVARCHAR(64)チャレンジに使うハッシュ値。実際には24バイトの16進数文字列expiredDateTimeチャレンジの有効期限を示すタイムスタンプ値表7-2-4　issuedhashテーブルのフィールド　このテーブルの意味を理解するには、INTER-Mediatorのクライアントサーバー間でのプロトコルを理解する必要があります。ここで解説は行いますが、機能を利用する上ではこの仕組みまで知る必要はありません。セキュリティのアセスメントが必要な方はソースコードを分析して理解してください。→INTER-Mediatorの認証プロトコル　INTER-Mediatorの認証プロトコルは、『7-3　認証とアクセス権の設定』の『定義ファイルでの設定』で説明する、→storingの設定に依存します。この設定は当初は、coockieおよびcookie-domainの設定しかできず、クッキーを利用した認証のみでした。その後にsession-storageを利用した認証が加わりましたが、その後にセキュリティ面を見直して、「→credential」という設定を追加しました。原則として、これらの設定はいずれも使用は可能ですが、現在はもっともセキュリティへの配慮が進んだcredentialを使ってください。以下の説明も、基本的はcredentialを使った上での説明を中心とします。credentialは、http-onlyのクッキーを使った手法です。初期からある方法とは大きく異なり、認証を成立させる方法を、クライアント側のJavaScriptから一切取り出せないようにすることを意図した手法です。　表7-2-5は、クライアントからサーバーに対してデータベースアクセス等の要求がある場合のやり取りに、認証情報がどのように関わるかを示したものです。storingがcredential以外の手法は、常にこのプロトコルに従いますが、credentialの場合にはこのプロトコルは認証パネルを出して、最初に認証するときのみに利用されれます。変数名と計算方法はリスト7-2-3に示します。単にアクセス要求と応答があるのではなく、チャレンジ要求が最初にあり、チャレンジをもとに要求を出したときに、サーバー側で認証が判定されるという点が大きな流れです。もちろん、認証が成立したら、データベースから取り出したデータを返したり、更新処理に入ります。認証が成立しなければ、ログインパネルを再度表示し、このプロトコルを最初からやり直します。クライアント側での処理転送される認証情報サーバー側での処理チャレンジ要求→user→データベースよりhpwを取得しsaltを求めるchを乱数より生成，cidが未発行なら乱数で生成user, cid, ch, 日付時刻をデータベースに記録resを求める←salt, cid, ch←データベース要求→cid, user, res→issuedhashテーブルより，cidからチャレンジを取得res'を計算し、resと同じなら認証成立表7-2-5　認証を伴う処理の場合のINTER-Mediatorプロトコルリスト7-2-3　変数と式user：ユーザー名（ユーザーが入力）\npw：本来のパスワード（ユーザーが入力）\nsalt：ユーザーごとに異なるソルト（4バイトのASCII文字）\nhpw：データベースに保存されているパスワードのハッシュ値\npw'：入力したパスワード\ncid：クライアントid（16進数で記述）\nch：サーバーから送られるチャレンジ（16進数で記述）\nres：クライアントから送られるレスポンス\nres'：サーバー側の情報から得られるレスポンスの期待値\nhash()：認証バージョン1ではSHA-1、認証バージョン2ではSHA-256を5000回繰り返しによるダイジェスト値を求める関数\nhmac(k, m)：HMAC-SHA256で求められるMAC値を求める関数。ハッシュ関数はSHA-256，鍵がk，メッセージがm\nhex(m)：16進法による表記に変換する関数（hex(m) + hex(n) = hex(m + n)が成り立つ）\n+：文字列の結合\n\nhpw = hash(pw + salt) + salt\nres = hmac(hash(pw' + salt) + salt, ch)\nres' = HMAC(hpw, ch) = hmac(hash(pw + salt) + salt, ch)\npw = pw' であれば res' = res となる　まず、ログインパネルでユーザー名とパスワードを入力します。そして、ユーザー名（user）をサーバーに送ります。サーバー側では、そのユーザーのパスワードハッシュ値（hpw）とidフィールドの値をauthuserテーブルから取得します。hpwの最後の8バイトからソルト（salt）が得られます。そして、クライアントid（cid）とチャレンジ（ch）を乱数で生成します。そして、issuedhashテーブルにレコードを作成して、ユーザーのid値、cid、ch、日時を記録します。クライアントへは、応答としてsalt、cid、chを送ります。クライアントはデータベースの要求に加えてres値を計算して、サーバーへの要求に付加します。res値は、応答で得られた値と、入力したパスワードから求めておきます。また、要求にはuser、cidも返します。要求を受け取ったサーバーは、issuedhashテーブルを検索して、chを求めます。そして、ユーザー名から得られるsalt、返されたcidをもとに、res'を計算します。このres'がresと等しければ、クライアント側で正しいパスワードが入力されたと判断できるということです。resとres'は、式の上ではpwとpw'の部分だけが違います。　この手法の大きな特徴は、ネットワーク上に流れるデータからパスワードを求めることができないということです。ネットワーク上のデータは、user、salt、cid、ch、resであり、これらの値からパスワード自体を求めることはできません。ハッシュ値hpwをデータベースに保存はしますが、パスワードはもちろん、そのハッシュ値自体もネットワーク上を流れないということです。この一連の作業で使われるチャレンジ（ch）は、サーバー側では共有しません。原則として1回のやり取りの間だけ有効になり、リクエストがあるたびに生成をします。したがって、resの値は要求ごとに異なる値になります。　クライアントid（cid）については、可能な限り再利用を行います。この認証だけなら、cidでなくても認証はできそうに見えるかもしれませんが、同一ユーザーで同時に複数のページを利用している場合があることを考えれば、チャレンジ要求とデータベース処理要求を結びつける意味では必要です。　なお、認証をすれば通常は1回の通信が2回へと倍になるのではないかと思われるかもしれませんが、より効率的な動作をします。データベース処理に対する応答には、次の要求のためのチャレンジ（ch）などのデータがすでに含まれていて、2回目以降は、データベースの応答と次のチャンレンジ応答を1回の応答で済ませてしまいます。したがって、認証がない時にn回の通信をする場合、認証があればn+1回の通信を行うことになり、1回、つまり最初のチャレンジ要求だけが増えることになります。　storingにcredentialを指定した場合は、認証成立後に、http-onlyのクッキーがサーバから送られてクライアントに記録されます。クッキーの値は、その時のチャレンジ、クライアントid、ユーザパスワードのハッシュ値を合成した文字列に対するSHA-256のハッシュ値を求めています（sha256(ch + cid + (hash(pw + salt) + salt)）。クッキーに記録されたので、次にまたサーバを利用する時にはその値がサーバに送られます。そして、サーバーで値が正しいものかを判定し、正しければ認証が成立したものとみなします。前の応答では、{cid, ch, user} がissuedhashテーブルに記録されているので、cidを元に残されたデータを検索して、クッキーで送り込まれたハッシュが正しいものかは判定できます。なお、ユーザ名は応答に入れてありますが、issuedhashテーブルのレコードの検索に利用するので、クライアント側でユーザ名を書き換えれば異なるチャレンジを想定していることになり認証は成立しません。応答時には、また新しいチャレンジが生成されるので、クライアントに送り込むクッキーも新しいものが生成されます。　このように、credentialを使った認証ではJavaScript側からクッキーを取り出したりあるいは書き込むことができないことから、何らかの方法でXSS等で第三者によるコード実行ができたとしても、認証に使うクッキーには手を出せない状態になっています。もちろん、第三者によるコード実行はできないようにしておくのが基本です。　ログインパネルが表示された場合、そこにパスワードは打ち込まれる必要があります。そしてそれはプログラム処理するために変数に設定される必要がありますが、ローカル変数に設定されるため、時間的には即座に消えると考えてください。パスワードを取得したら、即座にresの値を求めますが、認証が成功すると、プロパティに置いたresはそこでクリアします。したがって、認証が成功したら、パスワード、そしてパスワードのハッシュ（hpw）、認証で利用するresの値は全部消されます。XSSによる第三者コードを使ってパスワードなどが、JavaScriptのコードを通じて盗まれる可能性はかなり低いと言えるでしょう。もちろん、第三者のコードが実行される機会がなければ、パスワードやハッシュ値は横取りされる心配はないと言えるでしょう。→演習→→ユーザー管理の簡易アプリケーションを使ってみる　INTER-Mediatorにはauthuser, authgroup, authcorテーブルの内容を編集する簡易アプリケーションが付属しています。テーブルの定義は必要ですが、それに加えて、このアプリケーションをベースにして、独自のユーザー管理アプリケーションを作成することもできるでしょう。この演習では、単にアプリケーションの存在と動作の確認だけ行います。実際の利用は、この後のセクションで何度か出てきます。ユーザー管理アプリケーションを参照する1演習環境を利用して、認証に利用するユーザなどのデータがどのようにデータベースに格納されているのかを確認します。ブラウザーで、「http://localhost:9080」に接続します。2ページ内にある「トライアル用のページファイルと定義ファイル」というタイトルの部分を特定します。「ユーザー管理ページサンプル」というタイトルの部分をクリックします。3ユーザー名とパスワードを入力するパネルが表示されるので、ユーザーに「user1」、パスワードに「user1」と入力して、「ログイン」ボタンをクリックします。このアプリケーションは「認証が通れば参照して変更できる」ようになっていますが、一般には、こうしたアプリケーションのユーザー管理機能は特定のグループのユーザーだけが参照し変更できるようにするのが安全な利用方法です。4ページが表示されました。「User Accounts」と「Group Accounts」の2つのテーブルが表示されています。パスワードの変更はこの段階では行わないでください。変更するには、ページ冒頭にある「New Password」の右にあるテキストフィールドにパスワードを入力して、User AccountsのHashed Password列の該当するユーザーの「Set」ボタンをクリックします。この操作により、ソルトの自動生成やハッシュ値の計算などを自動的に行って、hashedpasswdフィールドへ正しい値を設定します。設計内容を確認する1このアプリケーションの定義ファイルを参照します。GitHubにあるソースコードを参照しましょう。こちらをクリックして、内容を参照します。2認証の設定は次のセクションで説明します。ここでは関連テーブルの内容の把握が主な目的です。定義ファイルを見ると、次の5つのコンテキストが定義されています。nameキーの値と、（）内にはviewおよびtableキーの値をピックアップしました。また、relationキーの有無も記載しました。authuser（view/table=authuser）belonggroup（view/table=authcor）relation有りgroupname（view/table=authgroup）authgroup（view/table=authgroup）groupingroup（view/table=authcor）relation有り3ページの最初の方に、このファイルへのパス「INTER-Mediator/Auth_Support/MySQL_contexts.php」が見えている箇所があります。ここで、「Auth_Support」をクリックすると、Auth_Supportフォルダーの内容が表示されます。そこにあるページファイルの「MySQL_accountmanager.html」をクリックして、MySQL_accountmanager.htmlファイルの中身を表示します。4User Accountsの見出しの下のテーブルを見てみます。authuserコンテキストのusernameやhashedpasswdフィールドなどが見えています。また5列目は、belonggroupコンテキストがSPANタグで展開されていますが、SELECTタグによるポップアップメニューは、belonggroupコンテキストの関連レコードdest_group_idを表示するようになっています。また、ポップアップメニューの選択肢はgroupnameコンテキストにより、authgroupテーブルのすべてのレコードが表示されています。5列目は、結果として、そのユーザーが所属するグループの数だけポップアップメニューが並びます。つまりひとつのリピーターにひとつのポップアップメニューがあるので、該当するauthuserテーブルのidフィールドと同じ値をauthcorテーブルのuser_idフィールドに持つ関連付けられたレコードの数だけ繰り返されます。dest_group_idフィールドはauthgroupテーブルのidフィールドの値が入力されていますが、実際のグループ名に変換するのはポップアップメニューの仕組みを使っています。この点は、このすぐ後にauthcorテーブルの内容を確かめるので、その時に改めて内容を確認すると良いでしょう。authuserコンテキストのbelongingフィールドは、元のテーブル定義にはありません。これは、サーバー側のPHPプログラム（同じフォルダーにあるUserList.php）によって、検索後にサーバーサイドの処理で付加されたフィールドです。この仕組みは、『Chapter 8　サーバーサイドでのプログラミング』で説明します。5スクロールして、Group Accountsの見出しの下のテーブルを見てみます。authgroupコンテキストのgroupnameフィールドが見えています。2列目は関連付けられたgroupingroupコンテキストのdest_group_idフィールドの値を持つポップアップメニューが定義されています。そして、ポップアップメニューの選択肢はgroupnameコンテキストから得ています。2列目のポップアップメニューは、User Accountsテーブルの5列目と同様な構成になっています。ユーザーとグループの対応関係を確認する1「ユーザー管理ページサンプル」をクリックして表示した、ユーザー管理アプリケーションのページを表示します。通常は、以前に開いたタブあるいはウインドウがあるので、それを呼び出せば良いでしょう。2User Accountsのうち、Groupsの列を見て、group1に含まれているのは、user1とuser2、user3の3つのアカウントであることを確認します。3Group Accountsのgroup1は、さらにgroup3に含まれていることを確認します。4User Accountsの中で、user1とuser2、user3は、Groupsの列を見る限りはgroup1にしか登録されていません。しかしながら、Belongingsの列を見ると、group1とgroup3に含まれていることになっています。つまり、group1に含まれるユーザーは自動的にgroup3にも含まれることになります。5逆にgroup3に含まれるユーザーは、Belongingsの列にgroup3があるユーザーで、user1〜user5が相当します。言い換えれば、group3に対してアクセス権を与えることで、user1〜user5に与えるということができます。6このように、グループは単にユーザーの分類ではなく、グループを所属させることによる階層的な構成をとることもできます。authuserとauthgroupテーブルの内容は、ページファイルに見える通りですが、authcorテーブルはこの状態では以下のような内容です。なお、フィールドの内容は実際にはidの整数値ですが、それだと分かりにくいので、対応するusernameあるいはgroupnameフィールドの値を（）で付記しました。user_idgroup_iddest_group_id1（user1）NULL1（group1）2（user2）NULL1（group1）3（user3）NULL1（group1）4（user4）NULL2（group2）5（user5）NULL2（group2）4（user4）NULL3（group3）5（user5）NULL3（group3）NULL1（group1）3（group3）表7-2-6　authcorテーブルの値演習のまとめINTER-Mediatorでの認証やアクセス権設定に使うテーブル、authuser、authgroup、authcorの関係を確認しました。これらのテーブルのデータ処理を行えるWebアプリケーションがあるので、実際のアプリケーション開発ではこれを元にユーザー管理機能を構築すると良いでしょう。→セクションのまとめ　INTER-Mediatorでの認証やアクセス権設定では、ユーザーやグループを使用します。それらは、authuser、authgroup、authcorのそれぞれのテーブルに記録しておくのが基本です。これらのテーブルの内容を編集するためのWebアプリケーションがINTER-MediatorのレポジトリのAuth_Supportフォルダーに作られています。さらに、認証をチャレンジ-レスポンスによって行うためのissuedhashテーブルも必要です。認証のための通信では、パスワードやそのパスワードから求められてデータベースに記録されたハッシュ値を通信経路上に流すことなく、認証が行われます。→7-3認証とアクセス権の設定認証やアクセス権に対する設定は、params.phpファイルや定義ファイルに行います。これらの設定は、原則としてJavaScriptでカスタマイズすることはできません。言い換えれば、設定はクライアント側から変更することを一切できないようにすることで、セキュリティの確保を行っています。このセクションでは、設定方法と設定例を説明します。→→→認証バージョンの指定　認証バージョンの指定については、→params.phpファイルで行います。このファイルを利用した設定の全体像については、『2-6　設定ファイルparams.php』で説明します。params.phpファイル内では、以下のような認証に関連する変数設定を行う箇所があります。ここで、→$passwordHash変数の行の頭の//を削除して、変数定義を有効にし、=の右側の値を '2' にすることで認証バージョン2で稼働します。新規に稼働するアプリケーションの場合には、 '2' に設定しておくのが良いでしょう。リスト7-3-1　params.phpファイルの一部で認証バージョン指定等の箇所/* Authorization\n * =================== */\n//$passwordHash = '1';  // '2m' supports SHA-256 and Wrapping SHA-1 with SHA-256,\n// '2' supports SHA-256 password hash only,\n// No specification or other string support SHA-1, SHA-256, and wrapping.\n//$alwaysGenSHA2 = true; // On the password changing, generate SHA-2 hash. The default is false.\n//$migrateSHA1to2 = true;// If the login account relays on SHA-a, exchange it with 2m style SHA-2 hash. The default is false.\n//$credentialCookieDomain = \"\"; // The domain information of the cookie for 'credential' auth. Falsy value means no domain, also the default.\n　ここで、以前から認証バージョン1で運用したシステムを利用している方向けの情報を記述します。$passwordHashの値を無指定、あるいは1にすると、認証バージョン1で稼働するのはもちろんですが、認証バージョン2およびそれらの中間とも言えるマイグレーションモードでの稼働も行うようになっています。$passwordHashを'2m'にすると、マイグレーションモード、'2'にすると認証バージョン2のみでの運用となります。　→マイグレーションモードは、文字とおり、SHA-1とSHA-2との混在を示しています。ハッシュ値自体はSHA-1のものを利用しますが、通信上ではSHA-2によるハッシュを行うため、全面的にSHA-1ではないという状態です。ユーザのデータベースをそのままに可能な限りSHA-2で運用するというモードです。　認証バージョン1で運用しているときに、→$alwaysGenSHA2をtrueにする、つまりparams.phpのこの変数の定義部分のコメントを外すと、パスワードの変更を行ったときに、パスワードのハッシュ値は認証バージョン2に対応したものになります。つまり、認証バージョン1で運用を続けるものの、パスワード変更を行ったユーザはそれ以降はSHA-2対応のハッシュ値で計算がなされるようになります。さらに、変数→$migrateSHA1to2をtrueにすれば、ログイン成功時に、そのユーザのパスワードはSHA-2に移行します。ログイン時にはパスワードが入力されているので、こうした自動変換が可能です。→定義ファイルでの設定　認証やアクセス権に関する設定は、定義ファイルで行います。JavaScriptのAPIは用意していないので、原則として、すべて定義ファイル側で行うと考えてください。設定項目は多岐に渡ります。まず、リスト7-3-2に示したのは、定義ファイルのPHPによる記述で記述可能なキーをすべて示したものです。それぞれのキーに対する設定内容は、後で示します。IM_Entry関数の最初の引数（コンテキスト定義）に指定するコンテキスト定義に設定する項目があり、加えてIM_Entry関数の第2引数（オプション設定）に指定する項目もあります。リスト7-3-2　定義ファイルでの認証やアクセス権設定の場所IM_Entry(\n\tarray(\t//コンテキスト定義\n\t\tarray(\t\n\t\t\t\"name\"=&gt;\"context\",\t// コンテキスト名\n\t\t\t\"authentication\"=&gt;array(\n\t\t\t\t\"all\" =&gt; array(\n\t\t\t\t\t\"user\" =&gt; array( .... ),\n\t\t\t\t\t\"group\" =&gt; array( .... ),\n\t\t\t\t\t\"target\" =&gt; \"....\",\n\t\t\t\t\t\"field\" =&gt; \"....\",\n\t\t\t\t),\n\t\t\t\t\"read\" =&gt; array(\n\t\t\t\t\t/* \"all\" と同様 */\n\t\t\t\t),\n\t\t\t\t\"update\" =&gt; array(\n\t\t\t\t\t/* \"all\" と同様 */\n\t\t\t\t),\n\t\t\t\t\"create\" =&gt; array(\n\t\t\t\t\t/* \"all\" と同様 */\n\t\t\t\t),\n\t\t\t\t\"delete\" =&gt; array(\n\t\t\t\t\t/* \"all\" と同様 */\n\t\t\t\t),\n\t\t\t),\n\t\t\t\"protect-writing\" =&gt; array( .... ),\n\t\t\t\"protect-reading\" =&gt; array( .... ),\n\t\t),\n\t),\n\tarray(\t//オプション設定\n\t\t\"authentication\"=&gt;array(\n\t\t\t\"user\" =&gt; array( .... ),\n\t\t\t\"group\" =&gt; array( .... ),\n\t\t\t\"user-table\" =&gt; \"string\",\n\t\t\t\"group-table\" =&gt; \"string\",\n\t\t\t\"corresponding-table\" =&gt; \"string\",\n\t\t\t\"challenge-table\" =&gt; \"string\",\n\t\t\t\"authexpired\" =&gt; \"string\",\n\t\t\t\"storing\" =&gt; \"cookie|cookie-domainwide|session-storage|credential\",\n\t\t\t\"realm\" =&gt; \"string\",\n\t\t\t\"email-as-username\" =&gt; \"boolean\",\n\t\t\t\"issuedhash-dsn\" =&gt; \"string\",\n\t\t),\n\t),\n....);　定義ファイルエディターでのコンテキスト内の設定は図7-3-1のようなもので、「Show All」ボタンをクリックすることで表示されます。最初の状態では認証関連の設定は見えていません。このうち、リスト7-3-3で、「array(...)」つまり配列で指定が必要な項目については、半角のカンマ（,）で区切ってテキストを記述することで、それぞれを要素とする配列をキーに対する値として設定します。設定値については、表7-3-1に示します。表に記載の内容も、順次説明します。図7-3-1　定義ファイルエディターでのコンテキスト定義内の認証関連設定指定場所キーキー値と動作コンテキスト/→authenticationallCRUDのすべての操作に対する設定をまとめて与える→userユーザー名の配列を指定すれば、それらのユーザーのみに許可が与えられる。省略するとすべてのユーザー→groupグループ名の配列を指定すれば、それらのグループのみに許可が与えられる。省略するとすべてのグループ→target\"table\"あるいは省略の場合テーブルに対してアクセス権を設定、\"field-user\"あるいは\"field-group\"なら次のfieldキーの値で指定したフィールドにあるデータをユーザー名ないしはグループ名として、レコード単位でそのユーザーあるいはグループに対してのみアクセス権を付与する→fieldレコード単位のアクセス権設定において、ユーザー名やグループ名が入力されるフィールドの名前readテーブルからの読み出し（クエリー）に対するアクセス権を設定するuser/group/target/field（\"all\"の場合と同じ）updateレコードへの更新に対するアクセス権を設定するuser/group/target/field（\"all\"の場合と同じ）createテーブルへの新規レコード作成に対するアクセス権を設定するuser/group/target/field（\"all\"の場合と同じ）deleteテーブルからのレコード削除に対するアクセス権を設定するuser/group/target/field（\"all\"の場合と同じ）media-handlingtrueを指定すると、メディア向けのチャレンジを生成してクライアントに送るコンテキスト→protect-writingフィールド名を配列で指定する。これらのフィールドはクライアントからの→→更新を受け付けなくなる→protect-readingフィールド名を配列で指定する。これらのフィールドはクライアントからの→→読み出しを受け付けなくなる表7-3-1　コンテキスト定義内の認証関連設定　定義ファイルエディターでのオプション設定にある認証関連の設定は図7-3-2のようなものです。こちらにも、userおよびgroupは配列での指定が必要であり、複数の要素を設定する必要がある場合にはカンマで区切って指定します。設定値については、表7-3-2に示します。表に記載の内容も、順次説明します。図7-3-2　定義ファイルエディターでのオプション設定内の認証関連設定指定場所キー値と動作オプション/→authentication→userユーザー名の配列を指定すれば、それらのユーザーのみに許可が与えられる。省略するとすべてのユーザー→groupグループ名の配列を指定すれば、それらのグループのみに許可が与えられる。省略するとすべてのグループ→user-tableユーザーテーブルの名前がauthuserでない場合にここにその名前を指定する→group-tableグループテーブルの名前がauthgroupでない場合にここにその名前を指定する→corresponding-tableグループ対応テーブルの名前がauthcorでない場合にここにその名前を指定する→challenge-tableハッシュテーブルの名前がissuedhashでない場合にここにその名前を指定する→storing→→認証情報を記録して再利用する方法を指定する。\"→cookie\"ならそのディレクトリ内で共有、\"→cookie-domainwide\"は同一ドメイン内で共有、\"→session-storage\"はブラウザーのデータベースを利用して共有、\"→credential\"は認証情報をhttp-onlyのクッキーに保存する。既定値はcredentialであり、原則として、credentialを利用するように設定する。→authexpired認証情報の記録の→タイムアウト。ここで指定した時間、通信がないと認証状態を無効にする。既定値は3600秒→realm→認証領域名。ログインパネルに表示される。また、認証状態の記録時のキー名に付加される。この文字列には半角のドットは指定しない→email-as-username→→emailフィールドの値をユーザー名として受け入れる場合にはtrue、省略はfalseと同じ→issuedhash-dsnisshedhashテーブルが存在するデータベースのDSNを指定する。省略時は他で指定されるデータベースでisshedhashテーブルを運用表7-3-2　オプション設定内の認証関連設定　ユーザーやグループなど、同様な設定がコンテキスト定義にもオプション設定にもあります。もちろん、オプション設定は、定義ファイルで定義したすべてのコンテキストに対して適用されるのに対して、コンテキストへの定義はそのコンテキストだけに適用されるものです。ただし、すべての設定が両方にあるわけではなく、実運用を考慮してオプション設定には全体的な設定、コンテキスト定義には詳細な設定が存在するようにしました。　storingキーには多様な選択肢がありますが、Ver.11現在で新たなアプリケーションを開発する場合は、credentialにして、http-onlyのクッキーに認証情報を記録する方法を採用してください。この方法では認証情報はJavaScriptから取得ができなくなり、安全性がいくらか高くなります。それ以外の方法ではJavaScriptから認証情報を取り出せるため、何らかのアタックに引っかかった場合に認証情報が第三者に取り出される可能性はあります。→設定例による→→認証の設定　設定の詳細も重要ですが、複雑なので、ここと次のセクションで、用途に応じてどのような設定を行うのかを例で示します。以下の表記は定義ファイルでのPHPでの記述を行います。なお、いずれも、『7-2　ユーザー認証とアクセス権適用を行う仕組み』で説明したテーブルが用意されていて、ユーザーやグループが定義されていることを前提として説明します。すべてのコンテキストで認証が必要　あるページにおいて、認証を必要とするものの、認証さえできれば、ページ内での読み書きすべてができるといった、非常にシンプルな動作の場合は、リスト7-3-3のように、オプション設定にauthenticationキーの値さえあれば構いません。なお、定義ファイルでは、値が「array()」という設定はできません。そのため、storingキーで認証継続の設定や、authexpiredキーで認証継続の時間等をデフォルトと同じでもいいので設定をして、authenticationキーに要素のある配列が設定されるようにします。リスト7-3-3　すべてのコンテキストで認証が必要になる定義ファイルIM_Entry(\n\tarray(\t/* コンテキストにauthenticationの指定はなし*/\t),\n\tarray(\n\t\t'authentication' =&gt; array( ),\t//項目のみ\n\t),\n\t...\n)特定のユーザーのみがログインできる　ページ全体にわたって、特定のユーザーのみがログインして利用できるようにするには、リスト7-3-4のように、オプション設定のauthenticationキーに、userキーの配列を指定します。この設定は定義ファイルエディターではuserの項目に「user3, user4」のように指定をします。カンマの前後の空白は無視します。したがって、読みやすくするために自由に空白を入れることができます。ここでは、user3ないしはuser4はログインができて、ログイン後は読み書きの処理が全て許可される状態になります。その他のユーザーは、たとえパスワードが正しくても、認証エラーとなってログインができず、データ処理は一切できない状態になります。なお、この目的だけなら、オプション設定のauthenticationキーは不要ですが、認証継続の方法などの指定が必要ならば、オプション設定の記述を行います。リスト7-3-4　特定のユーザーのみがログインできる定義ファイルIM_Entry(\n\tarray(\t/* コンテキストにauthenticationの指定はなし*/\t),\n\tarray(\n\t\t'authentication' =&gt; array(\n\t\t\t'user' =&gt; array( 'user3', 'user4' ),\n\t\t),\n\t),\n\t...\n)特定のグループのユーザーのみがログインできる　ページ全体にわたって、特定のグループに所属するユーザーのみがログインして利用できるようにするには、リスト7-3-5のように、オプション設定のauthenticationキーに、groupキーの配列を指定します。この設定は定義ファイルエディターではgroupの項目に「group1, group2」のように指定をします。カンマの前後の空白は無視します。ここでは、group1ないしはgroup2に所属するユーザーはログインができ、ログイン後は読み書きの処理が全て許可される状態になります。その他のユーザーは、たとえパスワードが正しくても、認証エラーとなってログインができず、データ処理は一切できない状態になります。なお、この目的だけなら、オプション設定のauthenticationキーは不要ですが、認証継続の方法などの指定が必要ならば、オプション設定の記述を行います。リスト7-3-5　特定のグループのユーザーのみがログインできる定義ファイルIM_Entry(\n\tarray(\t/* コンテキストにauthenticationの指定はなし*/\t),\n\tarray(\n\t\t'authentication' =&gt; array(\n\t\t\t'group' =&gt; array( 'group1', 'group2' ),\n\t\t),\n\t),\n\t...\n)→→→ログインの継続方法と設定　storingの設定がcredentialの場合は、ログインパネルでログインをした結果、その後にログイン状態を続けるためにクッキーを利用しています。同一の認証空間で、複数のページがある場合、あるページで認証したら、その状態を継続して別のページでも利用できないとかなり不便です。INTER-Mediatorはクッキーで認証情報を記録しており、ページ内はもちろん、ページ間をまたいでの認証継続も可能です。その場合、同一のissuedhashテーブルを使っている範囲が「同一の認証空間」となります。なお、authexpiredキーの値が経過すると、認証は不成立となります。この設定を省略すると、3600秒つまり1時間と成ります。この設定は、最後にアクセスしてからの時間であり、「何もしない時間がauthexpiredだけあればクッキー情報は消える」ということになります。　クッキーやセッションストレージに記録される情報を表7-3-3にまとめました。なお、realmキーの値を設定すると、これらのキーの後にアンダーラインに続いて指定されます。realmが「Sample」なら、最初のキーは「_im_username_Sample」となります。異なるサイトで別々に認証したいのは当然なので、通常はサイトに固有のrealmの値を指定する必要があるでしょう。キー名記録内容→_im_usernameログインしているユーザー名→_im_clientidサーバー側で発行したクライアントID→_im_credential_token認証用のトークン（http-only）→_im_mediatoken画像等のメディア認証のための情報表7-3-3　クッキーに記録される情報　クッキーでの記録はブラウザーを終了しても時間が来るまで残るので、その意味では便利です。期間を1週間くらいにしておくと、ほぼずっと認証が継続されるようになります。クッキーを第三者に取り出される危険性は、通信の傍受と、任意のJavaScriptコードを実行される場合があります。傍受ができないように、必ずTLSを使用してクライアントとサーバー間の通信を暗号化してください。さらに、_im_credential_tokenについては、JavaScript側から参照したり書き換えができないクッキーですので、任意のコードを実行されても取り出すことはできません。もちろん、任意のコードが実行できる状態でも大丈夫と言えなくもないのですが、任意のコードを実行できる状態では他にたくさんのセキュリティ的なアタックが可能なので、そのような状態にしないようにするのが基本です。　この章の最初でも説明したとおり、認証に関する大きな脅威はログイン中のブラウザーを他人が使うことです。あるユーザーがログインをしてサイトを利用している時、PC/Macを操作できる状態で席を立つとします。すると、別の人が開いているブラウザーを使用して、元からログインをした人になりすますことができます。この問題は、すべての認証を伴うWebサイトに発生する問題点であり、INTER-Mediatorも例外ではありません。もちろん、クリックするたびにパスワード入力をすれば防げるとはいえ、それではシステムを利用する気にはなれないでしょう。この問題は、「ログアウトしない」という点に集約できます。利用者が席をはずすときには、ログアウト、あるいはOSの機能を利用してロックするのが現在のPC/Macの利用の上では原則です。INTER-Mediatorではその対策はできないですが、それは他のフレームワークやシステムも同様です。→ユーザ名を電子メールアドレスにする　通常は、authuserのusernameフィールドの値をユーザー名としますが、→→電子メールアドレスをユーザー名としたい場合もあります。その時は、オプション設定に、email-as-usernameキーと値を追加し、値はtrueにします。あるいはparams.phpファイルで変数emailAsAliasOfUserNameにtrueを代入します。これで、authuserテーブルのemailフィールドの電子メールアドレスをユーザー名として扱って認証ができます。ただし、内部的には、usernameの値を使うので、usernameは一意な値を指定しておく必要があります。電子メールでの認証を可能にした場合、電子メールアドレスをusernameフィールドの値に変換するためにデータベース処理が増えます。SQLサーバーはその程度であればあまり問題にならないでしょうが、FileMakerの場合はパフォーマンスに影響が出る可能性があるので、慎重に導入しましょう。→issuedhashテーブルのみPDO経由で利用する　オプション設定にあるissuedhash-dsnキーには、issuedhashテーブルに対するDSNを別途指定することができます。params.phpファイルでは$issuedHashDSN変数で指定します。FileMakerデータベースではissuedhashテーブルのやり取りに多数のデータベース処理を行うと目に見えてパフォーマンスが落ちます。そこで、issuedhashテーブルをSQLiteで運用することができるように、こうした設定を追加しました。issuedhashテーブルは独立して利用できるように設計されています。authuserテーブルなどはFileMaker側に持ち、issuedhashテーブルだけをSQLiteで運用します。データベースを保存したパスなどを含むDSNを値として指定します。なお、SQLiteのデータベースを用意するには、INTER-Mediatorに含まれているdist-docs/sample_schema_sqlite.sqlを利用します。このファイルよりデータベースファイルを作り、それを利用することで問題ありません。他のテーブルは無視されます。こうして作成したSQLiteのデータベースを/var/db/imに置いたとすれば、issuedhash-dsnキーの値としては以下のように指定して利用することができます。リスト7-3-6　issuedhash-dsnキーの指定例'issuedhash-dsn' =&gt; 'sqlite:/var/db/im/sample.sq3',リスト7-3-7　$issuedHashDSN関数の指定例$issuedHashDSN = 'sqlite:/var/db/im/sample.sq3';→ログインパネルとカスタマイズ　INTER-Mediatorでは→ログインパネルを自動的に生成します。どのようなログインパネルなのかはこの後の演習の画面ショット等で確認してください。ログインパネルのページがあるわけではなく、既存のページで認証が要求されると自動的にオブジェクトをページに追加して、ログインパネルを表示します。背景が薄く見えるようなスタイル付けをしています。　なお、→ログアウトは、ページネーションコントロールに表示されるので、ページネーションの表示の定義が行われていれば、ログアウトボタンもページ上に表示されます。あるいは、以下の1行のプログラムを実行するボタン等を追加してください。なお、この1行の実行にも、ページファイルを読み込むSCRIPTタグが必要です。リスト7-3-8　ログアウトを行うJavaScriptのプログラムINTERMediatorOnPage.logout();location.reload()　→→INTER-Mediator標準のログインパネルの動作等をカスタマイズするためのJavaScriptのAPIをリスト7-3-9に紹介します。いずれも、INTERMediatorOnPage.doBeforeConstructメソッド（『8-5　ブラウザーを判断するページ』を参照）内など、ページ合成の前に実行します。設定が全てプロパティとなっているので、代入文による利用がほとんどでしょう。リスト7-3-9　標準のログインパネルのカスタマイズ//→→認証の失敗回数の変更（既定値は4）\nINTERMediatorOnPage.→authCountLimit = 2;\n\n//→パスワード変更の機能をログインパネルに出さない\nINTERMediatorOnPage.→isShowChangePassword = false;\n\n//→→ログインパネルのスタイル設定をしない\nINTERMediatorOnPage.→isSetDefaultStyle = false;\n\n//→→ログインパネルのRealm名を置き換える\nINTERMediatorOnPage.→authPanelTitle = 'なんとかシステム';\n\n//ログインパネル自体を独自のHTMLに置き換える\nINTERMediatorOnPage.→loginPanelHTML = \"....\";　カスタムログインパネルは、params.phpファイルで$customLoginPanel変数にHTMLの文字列を定義しても構いません。　ログインパネルの各要素は、スタイルシートを利用して、スタイルの設定ができます。ただし、「INTERMediatorOnPage.isSetDefaultStyle = false;」を実行して、INTER-Mediator側のスタイル設定をしないようにします。そして表7-3-4に示す、クラスあるいはID属性の要素に対して、スタイル設定を行います。もちろん、一部の設定のみを変更しても構いません。分類キーワードタグ設定対象class→_im_authpanelDIV認証パネル全体→_im_authlabelSPAN「ユーザー名」などのラベルid→_im_usernameINPUTユーザー名のテキストフィールド→_im_passwordINPUTパスワードのテキストフィールド→_im_authbuttonBUTTONログインボタン→_im_newpasswordINPUT新しいパスワードのテキストフィールド→_im_changebuttonBUTTONパスワード変更ボタン表7-3-4　→→ログインパネルのスタイル設定のためのセレクタ　ログインパネル自体を完全に置き換えるには、リスト7-3-9のリストの最後にあるINTERMediatorOnPage.loginPanelHTMLプロパティへ、HTMLで記述した文字列の代入を行います。ここでのHTMLは、HTMLタグから始まるものではなく、通常はDIVタグで開始することになると思われます。この時、HTML内では、表7-3-4の1列目がidの要素が含まれているようにします。例えば、「&lt;input type=\"text\" id=\"_im_username\"/&gt;」などの要素が含まれている必要があります。少なくとも、最初の3つは必要ですが、パスワードの変更が不要なら、最後の2つの要素は用意する必要はありません。また、FORMタグは必要ありません。→→→パスワードのリセット　パスワードのリセットは、ログインパネルにその機能を含めてあります。この時、現在のパスワードを正しく入力しないと、パスワードの変更はできません。もし、独自にパスワード変更のページを作成したいとしたら、JavaScriptでリスト7-3-10のAPIを呼び出すことで可能です。リスト7-3-10　パスワード変更のAPIINTERMediator_DBAdapter.→changePassowrd(ユーザー名, 旧パスワード, 新パスワード);　なお、現在の自分のパスワードが分からなくなってしまった場合は、事前に登録してある電子メールアドレスへのメッセージを利用してパスワードをリセットする機能もINTER-Mediatorで利用できますが、PHPを利用したプログラミングが必要です。[別の場所]で説明を行います。-->→演習認証の実現とパスワード変更　この演習では、認証が必要なページを作成するための必要な記述と、実際の認証の動作を確認します。設定により、INTER-Mediatorによってログインパネルが表示されてログインができるようになります。また、ユーザーが自分自身のパスワードを変更する方法を説明します。最初のページ用の定義ファイルに必要な設定を行う1演習環境を起動します（『1-2　演習を行うための準備』を参照）。続いて、ブラウザーで、「http://localhost:9080」に接続します。「トライアル用のページファイルと定義ファイル」というタイトルの部分を特定します。2「def22.phpを編集する」をクリックし、定義ファイルエディターでdef22.phpファイルを編集します。（もし、22番を他の用途に使ってしまっていれば、別の番号のファイルを利用してください。異なる番号のセットを利用した場合、ソースコードの記述が変わる部分がありますが、以下の手順では可能な限り注記します。）3Contextsの中のQueryと書かれた背景がグレーの部分を特定します。そして、その次の行の右の方にある「削除」をクリックして、Queryの設定がある行を削除します。4「レコードを本当に削除していいですか？」とたずねられるので、OKボタンをクリックします。5同様に、Sortingの次の行にある「削除」ボタンを押し、確認にOKボタンをクリックして、こちらの設定も削除しておきます。6Contextsでは、name、table、viewに「invoice」、keyに「id」、pagingに「true」repeat-controlに「confirm-insert confirm-delete」、recordsおよびmaxrecordsに「1000」と指定します。Contextsにあるその他のテキストフィールドは空白にします。この設定によりinvoiceテーブルを表示し、ページナビゲーションは表示しますが、ページの移動はおそらく発生しないくらいの1ページのサイズになります。7Database Settingsに設定を行います。[MySQL]の場合db-classは「PDO」のままでかまいません。dsnに「mysql:host=db;dbname=test_db;charset=utf8mb4」と入力します。そして、userに「web」、passwordに「password」と入力します。[FileMaker]の場合db-classを「FileMaker_DataAPI」に書き換えます。databaseは「TestDB」、userに「web」、passwordに「password」、serverに「gateway.docker.internal」、portに「443」、protocolに「https」、cert-vefifyingに「false」と入力します。8Debugについては、「false」にすると、デバッグ情報が出なくなります。なお、デバッグ情報をみながら動作を確認したい方は、「2」のままにしてこの後の作業を行ってください。最初のページのページファイルの作成1「http://localhost:9080」で開いたページに戻り「page22.htmlを編集する」をクリックし、ページファイルのpage22.htmlを編集するページファイルエディターを開きます。HTMLでの記述内容を以下のように変更します。太字が追加する箇所を示します。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。番号にかかる部分は、SCRIPTタグのプログラムの内部にもあります。）&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n  &lt;title&gt;&lt;/title&gt;\n  &lt;script type=\"text/javascript\" src=\"def22.php\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n&lt;table&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;th&gt;作成日&lt;/th&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"invoice@issued\"/&gt;&lt;/td&gt;\n\t&lt;td&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;th&gt;タイトル&lt;/th&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"invoice@title\"/&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;2「http://localhost:9080」で開いたページに戻り「page22.htmlを表示する」をクリックします。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）初期状態では3レコードが作られていますが、別の演習でレコードが増減しているかもしれません。ここでは内容はなんでも構いませんので、レコードが見えていることをまずは確認してください。ページを開くのに認証を必要とするように変更する1def22.phpを定義ファイルエディターで編集します。すでにタブあるはウインドウで見えている場合はそれを呼び出します。閉じてしまった場合には、「http://localhost:9080」で開いたページに戻り「def22.phpを編集する」をクリックします。2ページの最初にある「Show All」ボタンをクリックして、設定項目を全て表示します。そして、ページの最後の方に移動し、Optionsの中の「Authentication and Authorization」の「storing」に「credential」と入力します。Tabキー等をクリックして別のテキストフィールドに移動し、確実に設定を保存してください。3page22.htmlを表示します。すでにタブあるはウインドウで見えている場合はそれを呼び出します。そして、ブラウザーの更新ボタンをクリックして、画面の更新を行ってください。閉じてしまった場合には、「http://localhost:9080」で開いたページに戻り「page22.htmlを表示する」をクリックしてページを開きます。4すると、ログインパネルが表示されます。このログインパネルは、INTER-Mediator標準のもので、フレームワークが生成しています。5まずは、正しいユーザー名とパスワードを入力してみます。ユーザー名とパスワードいずれも「user1」と入力して、「ログイン」ボタンをクリックします。6ページが表示され、データベースの内容が表示されています。見えている内容が、認証を必須にする前と同様であれば問題はありません。ここではすでに認証に必要なテーブルが用意されていて、ユーザーも最初から設定されているので、ページの定義ファイルに認証が必須になるような設定を追加するだけで認証ができるようになっています。作業は簡単ですが、実際の開発ではテーブルを用意したりといった作業が発生する点は知っておきましょう。7ページナビゲーションには、ログインしているユーザーとして「user1」が見えています。また、「ログアウト」ボタンも見えています。「ログアウト」ボタンをクリックして、ログアウトしておきます。認証とパスワード変更の動作を確認する1ログアウトすると、またログインパネルが表示されます。ここで、ユーザー名は「user1」として、パスワードに空欄あるいは「user1」以外の間違えたパスワードを入力して、「ログイン」ボタンをクリックします。赤い文字でエラーが表示されログインができず、ページの内容やデータベースのデータは表示されません。2間違ったパスワードを何度も入力してみてください。5回目に認証エラーとなって、これ以上作業はできなくなります。パスワードを空欄で入力した場合はカウントされませんので、適当に間違えたパスワードを何か入力してください。3ブラウザーの更新ボタンをクリックして画面を更新します。するとログインパネルがまた表示されます。続いて、パスワードの変更を行ってみます。4ユーザー名に「user1」と入力します。パスワードは「user1」以外の文字列を入力します。つまり、パスワードは違っている状況であるとします。「新パスワード」に「1234」と入力します。「パスワード変更」ボタンをクリックします。すると、パスワードの変更に失敗したことがレポートされています。この状態ではパスワードは変わっていません。5ユーザー名とパスワードに、いずれも「user1」と入力します。つまり、正しいユーザー名とパスワードを入力します。「新パスワード」に「1234」と入力します。パスワードはなんでも構いませんが、以下の手順をこの通り進めるために、ここでは「1234」と入力してください。そして「パスワード変更」ボタンをクリックします。パスワード変更が成功したメッセージが表示されます。認証の継続の様子を確認する1ユーザー名「user1」、パスワード「1234」でログインを行って、認証された状態でページを表示します。ここでページのウインドウあるいはタブを閉じます。2「http://localhost:9080」で開いたページで「page22.htmlを表示する」をクリックしてページを再度開きます。3元のページが表示されており、認証が成功したことを示しています。認証情報はクッキーで保存されているため、ページを閉じても認証情報は残っており、指定した一定時間内であれば認証は継続するようになっています。認証の継続の仕組みを確認する1クッキーにどのような情報が記録されているかを確認してみます。以下の操作はブラウザの「デベロッパーツール」を使います。場合によってはクッキーの情報は、ここでの画面ショットを見るだけでも結構です。2デベロッパーツール（Safariでは「Webインスペクター」）を表示して、上のタブで、「ストレージ」を選択します。左側でCookieを選択すると、現在のページに設定されたクッキーが一覧されています。3_im_usernameはユーザー名が設定されます。_im_clientidは、クライアントごとにサーバから振られるランダムな番号です。_im_credential_tokenは認証が成功した時にサーバ側から設定され、この値をサーバに接続するごとに送信して、以前に認証が成功したことを伝達します。この値は、第三者に漏れるとそのユーザーとしてサーバーにアクセスできてしまう可能性があるものですが、HttpOnlyのチェックがついており、クライアントのJavaScriptからは読み出すことができません。また、通常はドメイン制限をしているので、他のサイトに移動したときに取り出すこともできません。HTTPの通信を暗号化したHTTPSで通信していれば、第三者による取得が可能な明確な方法はないと言えます。4データベースに保存されているhashedpasswdフィールドの値を調べてみます。データベースエンジンによって操作が違います。5[MySQLの場合]「http://localhost:9080」のアドレスのページを開き、「ユーザー管理ページサンプル」をクリックして、ユーザー管理アプリケーションを起動します。ログパネルでは、ユーザー名に「user1」、パスワードに「1234」を入力して、認証を行います。user1のHashed Passwordの列の値と、_im_credential_tokenの値は違うものになっています。6[FileMakerの場合]FileMaker Proで、Test_DBデータベースを開き、「authuser」レイアウトを開きます。そこで、該当するユーザーのhashedpasswdフィールドの値を確認してください。セキュリティ上で考慮しなければならない点は、すでに説明しています。認証情報をクッキーに入れる場合にはクッキーのデータがHTTPのやり取りでネットワークを流れるので、少なくとも、TLSを利用して、通信を傍受されないようにすることは必須です。演習のまとめ定義ファイルのIM_Entry関数の呼び出しにおいて、第2引数（オプション）にauthenticationキーの設定を行うことで、すべてのコンテキストの利用に認証が必要になります。認証の継続のために、セッションストレージやクッキーに、認証情報を保存することができます。クッキーの場合はブラウザーを再起動しても認証は継続しますが、データベースに記録するハッシュ関数から得られた値をネットワークに流すので、最低限でもTLSでの運用が必要です。パスワードの変更は、ユーザーによって、ログインパネル上で行うことができます。→メールを利用したユーザー登録\nINTER-Mediatorには、メールを利用してのユーザー登録や、メールを利用したパスワードのリセットを行う仕組みを組み込む最低限の機能を持ったファイルを、samples/Auth_Support/User_Enrollmentおよびsamples/Auth_Support/PasswordResetフォルダーに入れています。こちらについてはサーバーサイドのプログラムについての全般的な知識が必要なので、『7-6　メールを利用したユーザー登録とパスワードのリセット』でまとめて説明をします。\n\n→→パスワードポリシーの定義\n　params.phpファイルで$passwordPolicy変数を定義して、→→パスワードのルールを指定できます。表7-3-5に設定可能なキーワードを示します。これらの文字列を空白で区切ってひとつの文字列で指定します。例えば、\"useNumber useAlphabet length(10)\" は、指定したパスワードに、数字、アルファベットが必ず含まれ、かつ10文字以上である必要があることを定義します。\n\nキーワード適用されるルールuseAlphabetアルファベットが必ず入っているuseNumber数字が必ず入っているuseUpperアルファベットの大文字が必ず入っているuseLowerアルファベットの小文字が必ず入っているusePunctuation記号類が必ず入っているlength(n)長さがn文字以上notUserNameユーザー名と同一ではいけない表7-3-5　パスワードのルールに指定できる文字列\n\n　なお、この設定は、authuserテーブルに単にパスワードを指定するときには適用されません。初期パスワードをSQLステートメントのテキストで与えるような場合には、ここで指定したルールに合致しているかどうかの判定は行われません。ここで指定したパスワードのルールは、ログインパネル上でパスワードの変更したときや、ログインパネルのパスワード変更処理で呼び出されるJavaScriptあるいはPHPのメソッドを利用した場合に、ルールが適用できます。したがって、このルール適用は、パスワード変更時に適用されるという理解で問題はありませんが、初期値がルール通りかどうかは開発者あるいはシステム管理者が決定して必要なら自身でチェックをしてください。\n\n→このセクションのまとめ\n　認証のための設定は、多くは定義ファイル上で行うことで実現可能です。むしろ、データベースにユーザーやグループのテーブルを用意する方がよほど手間がかかる仕事と言えるでしょう。このセクションでは認証を実現する方法やそこでのさまざまな設定、ログインパネルやそのカスタマイズなどを説明しました。しかしながら、認証を伴うアプリケーションはセキュリティ上の問題を抱えやすいシステムでもありますので、どういう原理で認証が稼働していて、やってはいけないことや、運用上どうしても必要になることに対してなぜそのような結果になっているのかをなるべく正しく理解をするようにしましょう。\n\n\n→7-4コンテキストにおけるアクセス制御\nアクセス権の制御は、基本となる4つのデータ操作のCRUD（Create Read Update Delete）について、それぞれ、どのユーザーあるいはグループに対して許可しているのかをコンテキスト定義で規定します。操作ごとのアクセス権は、オプション設定では指定はできず、個々のコンテキスト定義で行います。\n\n→設定例による→→アクセス権の設定\n　前のセクションに続いて、用途に応じてどのような設定を行うのかを例で示します。以下の表記は定義ファイルでのPHPでの記述を行います。なお、いずれも、『7-2　ユーザー認証とアクセス権適用を行う仕組み』で説明したテーブルが用意されていて、ユーザーやグループが定義されていることを前提として説明します。また、設定の詳細は、『7-3　認証とアクセス権の設定』の最初の部分に表で示してあります。\n\n読み出しはできて書き込みができないコンテキスト\n　読み出しはできても書き込みを一切できないようにしたい場合、認証の設定を使わない方法もあります。リスト7-4-1のように、コンテキストのviewキーの値には存在するビューやテーブル名を指定し、tableキーの値には存在しないエンティティ名（ビューあるいはテーブルの名前）を指定します。authenticationキーの設定はありません。もちろん、その状態で書き込みをしてもエラーになるということで何も起こらないことを意図したものです。ユーザーインターフェースで書き込み可能なものを配置しないだけでは、定義ファイルへネットワークを通じて直接アクセスされた場合に書き込みや更新ができてしまう可能性があります。この設定は、そうした意図しないアクセスからも、書き込み処理を排除してデータを保護します。単に読み出しだけでいいようなコンテキストは認証の有無にかかわらずよくあり、安全面からも、なるべくtableキーの値に存在しないエンティティ名を指定するようにすべきです。また、認証がされていても書き込みを排除したい場合には、この手法は有効です。\n\nリスト7-4-1　読み出しはできて書き込みができないコンテキスト定義IM_Entry(\n    array(\n        array(\n            'name' =&gt; 'person',\n            'view' =&gt; 'person_view',\t//データベースには存在する\n            'table' =&gt; 'dummydummy',\t//データベースには存在しない\n            'records' =&gt; 1,\n            'key' =&gt; 'id',\n        ),\n    ),\n    array( ... ),\n    ...\n);\n\n特定のユーザーが読み込みだけの権限でログインできる\n　特定のコンテキストで、認証を必要とし、加えて書き込みができないようにするには、リスト7-4-2のような定義ファイルを作成します。この例では、コンテキストのtableキーに存在しないテーブル名を指定して、書き込み処理がエラーになるようにしています。そして、adminユーザーは認証して読み出しができますが、書き込みができるユーザーは誰もいないという状態になります。この時、この定義ファイルの他に、authenticationキーのないコンテキストがあれば、どのユーザーもログインを行うことなくデータベースを利用できます。\n\nリスト7-4-2　特定のユーザーが読み込みだけの権限でログインできるコンテキストを含む定義ファイルIM_Entry(\n\tarray(\t\n\t\tarray(\n\t\t\t'name' =&gt; 'mycontext',\n\t\t\t'view' =&gt; 'mycontext',\n\t\t\t'table' =&gt; 'dummydummy',\t//実在しないテーブル名\n\t\t\t'authentication' =&gt; array(\n\t\t\t\t'read' =&gt; array(\n\t\t\t\t\t'user' =&gt; array( 'admin' ),\n\t\t\t\t),\n\t\t\t),\n\t\t),\n\t),\n\tarray(\t/* 'authentication' キーはなし */ ),\n\t...\n)\n\n認証したユーザーに対して読み出しと更新のみを許可するコンテキスト\n　データベースの4つの主要な処理であるCRUDそれぞれに対するアクセス権を、コンテキスト定義の中で設定することができます。この時、read、update、create、deleteの4つの操作をすべて記述してください。そして、その中で、userあるいはgroupキーで許可を与えるユーザーやグループを配列で与えます。それぞれの操作で一切許可しないものは、架空のグループを割り当てておけば良いでしょう。リスト7-4-3のコンテキストmycontextでは、adminsグループのユーザーであればログインをして、読み出しと更新処理はできますが、dummyグループは存在しないグループなので、レコード作成や削除ができなくなります。ここでは、viewとtableキーがないので、「mycontext」テーブルに読み書き処理が行われます。\n\nリスト7-4-3　認証したユーザーに対して読み出しと更新のみを許可するコンテキストを含む定義ファイルIM_Entry(\n\tarray(\t\n\t\tarray(\n\t\t\t'name' =&gt; 'mycontext',\n\t\t\t'authentication' =&gt; array(\n\t\t\t\t'read' =&gt; array('group' =&gt; array( 'admins' ),),\n\t\t\t\t'update' =&gt; array('group' =&gt; array( 'admins' ),),\n\t\t\t\t'create' =&gt; array('group' =&gt; array( 'dummy' ),),\n\t\t\t\t'delete' =&gt; array('group' =&gt; array( 'dummy' ),),\n\t\t\t),\n\t\t),\n\t),\n\tarray( /* 'authentication' キーはなし */ ),\n\t...\n)\n\n認証したユーザーに対して全ての操作を許可するコンテキスト\n　CRUDのそれぞれの操作に対する設定が全て同じであるのなら、allキーを使って1行で指定が可能です。リスト7-4-4のコンテキストmycontextでは、adminsグループのユーザーであればログインをして、データベースの全ての処理ができます。\n\nリスト7-4-4　認証したユーザーに対して全ての操作を許可するコンテキストを含む定義ファイルIM_Entry(\n\tarray(\t\n\t\tarray(\n\t\t\t'name' =&gt; 'mycontext',\n\t\t\t'authentication' =&gt; array(\n\t\t\t\t'all' =&gt; array('group' =&gt; array( 'admins' ),),\n\t\t\t),\n\t\t),\n\t),\n\tarray( /* 'authentication' キーはなし */ ),\n\t...\n)\n\nコンテキストでのフィールド単位の制限\nコンテキスト定義の中では、特定のフィールドに対する書き込みや読み出しできないようにする設定が可能です。リスト7-4-5のように、protect-writingあるいはprotect-readingというフィールドの設定ができます。例えば、外部キーフィールドや、次のセクションで説明するユーザー名のフィールドに対して更新できないようにしたり、検索やソートでは使うものの読み出しはできないようにしたいフィールドがあれば、その名前を配列で指定します。\n\nリスト7-4-5　コンテキストでのフィールド単位の制限を含む定義IM_Entry(\n    array(\n        array(\n            'name' =&gt; 'person',\t// view, tableは省略\n            'records' =&gt; 1,\n            'key' =&gt; 'id',\n            'protect-writing' =&gt; array( 'id' ),\n            'protect-reading' =&gt; array( 'username' ),\n        ),\n    ),\n    array( ... ),\n    array( ... ),\n    false\n);\n\n→演習コンテキストにアクセス権を設定する\nコンテキストに対するアクセス権の設定を行ってみます。ここでの演習は、『7-3　認証とアクセス権の設定』の『認証の実現とパスワード変更』で作成したページを続けて利用します。データベースの4つの処理に対して、それぞれ可能なユーザーやグループの設定ができます。ここではグループの設定と、権限がない場合にはデータベース処理がなされないことを確認します。\n\nアクセス権の設定と動作を確認する\n1前のセクションの演習から続けて作業を行う場合には、いったんWebブラウザーを終了して、改めて起動し、「http://localhost:9080」に接続して演習環境のホームを表示してください。\n2def22.phpを定義ファイルエディターで編集します。すでにタブあるはウインドウで見えている場合はそれを呼び出します。閉じてしまった場合には、「http://localhost:9080」で開いたページに戻り「def22.phpを編集する」をクリックします。\n3ページの最初にある「Show All」ボタンをクリックして、設定項目を全て表示します。そして、コンテキストの途中にある「Authentication, Authorization and Security」で入力を行います。readのgroupに「group2」、updateのgroup、createのgroup、deleteのgroupに存在しないグループである「dummy」を指定します。　最後にTabキーを押して、4つのテキストフィールドに対応するフィールドの更新を確実に行うようにします。\n\nここでの設定は、このコンテキストからの読み出しはgroup2に対して許可するが、その他の更新や新規レコード、レコード削除はdummyグループに対してのみ許可することを意味します。しかしながら、dummyグループは存在しないので、すべてのユーザーは更新などの書き込み処理はできません。コンテキストのユーザーやグループの設定を行うときには、4つのデータベース処理のすべてに対して設定を行ってください。空欄にすると、設定がないものとみなしてしまいます。\n4page22.htmlを表示します。すでにタブあるはウインドウで見えている場合はそれを呼び出ます。そして、ブラウザーの更新ボタンをクリックして、画面の更新を行ってください。閉じてしまった場合には、「http://localhost:9080」で開いたページに戻り「page22.htmlを表示する」をクリックしてページを開きます。\n5ログインパネルが表示されるので、ユーザー名とパスワードに「user2」と入力して、「ログイン」ボタンをクリックします。user2はgroup2には所属していないために、正しいパスワードを入力してもページの表示は行いません。つまり、アクセス権が設定されていないので、認証はできても認可エラー扱いにして、再度認証パネルが表示されます。\n\n6group2に所属する「user4」でログインします。ユーザー名もパスワードも「user4」です。すると、データベースの内容を表示することができました。ログインユーザーがuser4であることを確認してください。\n\n7ここで、適当なテキストフィールドのデータを変更してTabキーを押して、更新を行います。ここで、このコンテキストのupdateのgroupに存在しないグループのdummyが設定されていることを思い出してください。\n\n8ページが表示されますが、データは修正されていません。ブラウザーの更新ボタンをクリックして、画面を更新し、データベースの値を再度取り出してみます。すると、フィールドに見えている値は修正前の値になっています。したがって、実際には、データベースの更新はアクセス権がないために行われませんでした。\n\n更新できない時の動作としてはあまりスマートな感じではありませんが、ここでの演習は、「コンテキストにアクセス権を設定すれば、更新が阻止できる」ことを示すためのものです。もし、あるデータベースフィールドの内容を表示しかしないのであれば、ここで作ったページのようにテキストフィールドを利用することはあり得ません。DIVやSPANタグで表示をすれば済みます。しかしながら、利用者がサーバー通信を独自に構築して更新をしようとしても、コンテキストの設定で阻止ができることをこの演習で確認していただきました。コンテキストの設定はサーバー側で記録されているので、コンテキストのアクセス権の設定はユーザーには変更できず、アクセス権の設定は設計者の意図通りに機能します。\n\nレコード作成と削除の権限がない場合の動作\n1def22.phpを定義ファイルエディターで編集します。すでにタブあるはウインドウで見えている場合はそれを呼び出します。閉じてしまった場合には、「http://localhost:9080」で開いたページに戻り「def22.phpを編集する」をクリックします。\n2ページの最初にある「Show All」ボタンをクリックして、設定項目を全て表示します。そして、コンテキストの途中にある「Authentication, Authorization and Security」にあるupdateのgroupに「group2」を指定します。Tabキーを押して、テキストフィールドに対応するフィールドの更新を確実に行います。\n\n3page22.htmlを表示します。すでにタブあるはウインドウで見えている場合はそれを呼び出ます。そして、ブラウザーの更新ボタンをクリックして、画面の更新を行ってください。閉じてしまった場合には、「http://localhost:9080」で開いたページに戻り「page22.htmlを表示する」をクリックしてページを開きます。\n4適当なフィールドの内容を変更してTabキーを押し、データの更新を行います。\n\n5問題なく、更新ができました。今度は、group2に対して更新の権限が与えられているので、group2に所属するuser4での更新ができたということです。\n\n6何からのレコードの「削除」ボタンをクリックして、レコード削除を試みます。確認のダイアログボックスでは、OKをクリックします。\n\n7ページが再度表示されていますが、削除したレコードはそのままで削除はされていません。ブラウザーの更新ボタンをクリックして、ページを再表示しても、削除しようとしたレコードは削除されずに残っています。つまり、user4には削除の権限が与えられていないので、レコード削除ができないのです。\n\n8ページネーションコントロールにある「レコード追加: invoice」をクリックして、レコードの追加を試みます。ダイアログボックスが表示されれば、OKをクリックします。以降、適当にダイアログボックスへ対処してください。\n\n9ページが再表示されますが、レコードの個数を見ても、レコードが新しく作れていないことは確認できます。ブラウザーの更新ボタンをクリックしても、レコードが追加された形跡はありません。user4にはレコード作成の権限が与えられていないのです。\n\nレコード作成や削除ができない時の動作としてはあまりスマートな感じではありませんが、ここでの演習は、「コンテキストにアクセス権を設定すれば、レコード作成や削除が阻止できる」ことを示すためのものです。もし、あるコンテキストに対してレコード作成や削除をしないのであれば、ここで作ったページのように作成や削除のボタンを表示することはあり得ません。しかしながら、利用者がサーバー通信を独自に構築してレコードの作成や削除をしようとしても、コンテキストの設定で阻止ができることをこの演習で確認していただきました。コンテキストの設定はサーバー側で記録されているので、コンテキストのアクセス権の設定はユーザーには変更できず、アクセス権の設定は設計者の意図通りに機能します。\n\n演習のまとめ\nコンテキスト定義にauthenticationキーでの指定を行うことで、データベースの4つの操作であるCRUDそれぞれに対して実施可能なユーザーやグループを定義できます。誰にも操作されたくない場合には、存在しないグループを指定するのが確実かつ手軽な方法です。\n\n→このセクションのまとめ\n　コンテキスト定義において、CRUDの各操作が可能なユーザーやグループの指定ができるので、特定のユーザーに対するアクセス権の付与が可能です。また、tableキーの値に存在しないテーブル名を与えて、書き込み処理を阻止するという手段も利用できます。\n\n\n\n→7-5レコード単位のアクセス権とメディアデータのアクセス権\n同一のテーブルでレコードごとに違うユーザーに読み書き権限を与えて運用できます。そして、各レコードは他のユーザーからは操作できないように保護されています。また、写真のファイル等の読み出しにおいて、レコード単位のアクセス権を適用することもできるので、画像などもユーザーごとに保護した状態で参照ができます。\n\n→→→レコード単位のアクセス権\n　同一のテーブルの個々のレコードに対してアクセス権を設定するためには、そのレコードが誰に対してアクセス権を持っているのかを何らかの方法で記録が必要です。そのために、そのテーブルに、ユーザー名あるいはグループ名を記憶するフィールドを設けて、そのフィールドに設定されているユーザーあるいはグループに対しての権限が与えられるような動作をフレームワークが行います。\n　設定はコンテキスト定義のauthenticationキーの配列の中で、操作名をキーにした配列で、targetキーとfieldキーを指定します。targetキーは、「field-user」ならfieldキーで指定したフィールドにある名前のユーザーに対して権限が与えられます。targetキーの値が「field-group」ならfieldキーで指定したフィールドにある名前のグループに対して権限を与えます。targetキーが「table」あるいは省略の場合には、テーブル全体で同一のアクセス権の設定となります。\n　fieldキーに指定するフィールドは文字型にします。そのフィールドには、authuserテーブルのusernameフィールドの文字列を入力します。主キーとなるidフィールドの値ではなく、ユーザー名の文字列を入力します。また、電子メールをユーザー名に使う場合でも、対応するusernameフィールドの値を設定します。\n　クエリーやレコード削除、更新の場合の検索条件に、ANDで「fieldのフィールド名=ログイン中のユーザー名」という検索条件を付与します。したがって、全ての操作で、他のユーザーのレコードに対してデータの削除・更新が行われることはありません。また、新規にレコードを作成するときに、fieldで指定したフィールドにユーザー名を自動的に設定します。こうして、レコードの生成から更新、削除に至る全ての場面で、ログインしているユーザーに権限のあるレコードだけが処理対象になるということです。また、言い換えれば、他人のレコードを削除しようとしても認証しない限りはできないのです。ただし、このAND演算がポイントであるため、FileMakerの場合に検索条件をORで構成している場合には、レコード単位のアクセス権の設定は適用できません。\n　リスト7-5-1はレコードごとのアクセス権を、chatというコンテキストに対して設定しています。オプション領域には、user1あるいはgroup2に所属するユーザーのみが、まず認証してログインできることが定義されています。その上でコンテキスト定義のauthenticationでは、全てのデータベースオペレーションに対して、userという名前のフィールドにユーザー名を記録して、各レコードはuserフィールドのユーザーだけが読み書きできるようになります。さらに、protect-writingキーで、userフィールドの更新を阻止します。この設定を行っても、新規レコードを作るときには、userフィールドにはログインしているユーザーのユーザー名が設定されます。\n\nリスト7-5-1　レコードごとのアクセス権を設定した例IM_Entry(\n    array(\n        array(\n            'records' =&gt; 100000000,\n            'name' =&gt; 'chat',\n            'key' =&gt; 'id',\n            'repeat-control' =&gt; 'delete',\n            'authentication' =&gt; array(\n                'all' =&gt; array(\n                    'target' =&gt; 'field-user',\n                    'field' =&gt; 'user',\n                ),\n            ),\n            'protect-writing' =&gt; array( 'user' ),\n        ),\n    ),\n    array(\n        'authentication' =&gt; array( // オプション設定\n            'user' =&gt; array('user1'), // ログイン可能なユーザー\n            'group' =&gt; array('group2'), // ログイン可能なグループ\n        ),\n    ),\n    array('db-class' =&gt; 'PDO'),\n    false\n);\n\n→演習レコード単位のアクセス権を設定する\n　同一のテーブル内で、レコードごとに参照できるユーザーを切り替えたい場合があります。その時、ユーザー名やグループ名を入力する文字型フィールドを用意して、そのフィールドをログインしているユーザー名で自動的に絞り込むという動作で実現しています。レコードを新規作成するときに、そのフィールドに自動設定されることなども確認しましょう。\n\n最初のページ用の定義ファイルに必要な設定を行う\n1演習環境を起動します（『1-2　演習を行うための準備』を参照）。続いて、ブラウザーで、「http://localhost:9080」に接続します。「トライアル用のページファイルと定義ファイル」というタイトルの部分を特定します。\n2「def23.phpを編集する」をクリックし、定義ファイルエディターでdef23.phpファイルを編集します。（もし、23番を他の用途に使ってしまっていれば、別の番号のファイルを利用してください。異なる番号のセットを利用した場合、ソースコードの記述が変わる部分がありますが、以下の手順では可能な限り注記します。）\n3Contextsの中のQueryと書かれ背景がグレーの部分を特定します。そして、その次の行の右の方にある「削除」をクリックして、Queryの設定がある行を削除します。\n4「レコードを本当に削除していいですか？」とたずねられるので、OKボタンをクリックします。\n5同様に、Sortingの次の行にある「削除」ボタンを押し、確認にOKボタンをクリックして、こちらの設定も削除しておきます。\n6Contextsでは、nameに「invoice-all」、table、viewに「invoice」、keyに「id」、pagingに「true」と指定します。Contextsにあるその他のテキストフィールドは空白にします。この設定によりinvoiceテーブルを表示します。単にすべてのレコードを一覧表示したいので、簡単な定義とします。\n7Contextsの見出しの下にある「追加」ボタンをクリックして新たなコンテキスト定義を追加します。そして、name、table、viewに「invoice」、keyに「id」、repeat-controlに「delete insert」と指定します。Contextsにあるその他のテキストフィールドは空白にします。この設定によりinvoiceテーブルを表示し、レコードの追加や削除ができるようにします。\n\n8定義ファイルエディターのページの冒頭にある「Show All」ボタンをクリックします。そして、nameが「invoice」の方のコンテキスト定義の中にある「Authentication, Authorizaton and Security」の見出しにあるall:targetを「field-user」、all:fieldを「authuser」とします。Tabキーを押すなどして、入力したフィールドから別のフィールドに移動して、確実に保存をしてください。\n\n9Optionsの中にある「Authentication and Authorizaton」を探します。そして、storingに「credential」、realmに「Sample」と入力します。こちらも、Tabキーを押すなどして、入力したフィールドから別のフィールドに移動して、確実に保存をしてください。\n\n10Database Settingsに設定を行います。\n[MySQL]の場合db-classは「PDO」のままでかまいません。dsnに「mysql:host=db;dbname=test_db;charset=utf8mb4」と入力します。そして、userに「web」、passwordに「password」と入力します。\n[FileMaker]の場合db-classを「FileMaker_DataAPI」に書き換えます。databaseは「TestDB」、userに「web」、passwordに「password」、serverに「gateway.docker.internal」、portに「443」、protocolに「https」、cert-vefifyingに「false」と入力します。\n11Debugについては、「2」のままにしてこの後の作業を行ってください。最後にデータベースとの通信結果を確認します。デバッグ情報を見ない場合には、ページの冒頭にある「clear」ボタンをクリックするなどして、適時画面から消しても構いません。\n\n最初のページのページファイルの作成\n1「http://localhost:9080」で開いたページに戻り「page23.htmlを編集する」をクリックし、ページファイルのpage23.htmlを編集するページファイルエディターを開きます。HTMLでの記述内容を以下のように変更します。太字が追加する箇所を示します。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。番号にかかる部分は、SCRIPTタグのプログラムの内部にもあります。）\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;script type=\"text/javascript\" src=\"def23.php\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div style=\"display: flex\"&gt;\n&lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n&lt;table&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;作成日&lt;/th&gt;&lt;th&gt;タイトル&lt;/th&gt;&lt;th&gt;ユーザー&lt;/th&gt;&lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;td data-im=\"invoice@id\"&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"invoice@issued\"/&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"invoice@title\"/&gt;&lt;/td&gt;\n      &lt;td data-im=\"invoice@authuser\"&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;table style=\"margin-left: 10px\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;作成日&lt;/th&gt;&lt;th&gt;タイトル&lt;/th&gt;&lt;th&gt;ユーザー&lt;/th&gt;&lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;td data-im=\"invoice-all@id\"&gt;&lt;/td&gt;\n      &lt;td data-im=\"invoice-all@issued\"&gt;&lt;/td&gt;\n      &lt;td data-im=\"invoice-all@title\"&gt;&lt;/td&gt;\n      &lt;td data-im=\"invoice-all@authuser\"&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n2「http://localhost:9080」で開いたページに戻り「page23.htmlを表示する」をクリックします。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）\n3ログインパネルが表示されるので、ここではユーザー名、パスワードを「user2」としてログインを行います。\n\n4ページが表示されました。authenticationのキーのある左側のinvoiceコンテキストはレコードが表示されていません。右側のinvoice-allのコンテキストは、invoiceテーブルのすべてのレコードを表示しています。ユーザー列は、authuserフィールドの値を示しており、おそらくすべてのレコードが空欄になっていると思われます。ページネーションコントロールでは、現在のログインユーザーを確認できます。\n\n\nコンテキストにレコードを追加する\n1左側のテーブルの下にある「追加」ボタンをクリックします。すると、左側にレコードが追加されます。作成日とタイトルを適当に入力します。作成日は、MySQLでは「2023-7-1」のように年月日、FileMakerでは「07/01/2023」のように、月日年でスラッシュ区切りとなるように入力します。\n\n2念のためにページネーションコントロールの「更新」ボタンをクリックして、ページ内容を更新します。左側には追加されたレコードが見えていますが、右側のテーブルにも見えるようになりました。\n3左側で「追加」ボタンをクリックしてもうひとつレコードを追加します。そして、適当にフィールドに入力し、「更新」ボタンをクリックして、右側のテーブルも更新します。\n\n右側のテーブルは、inoviceテーブルをすべて表示しています。これに対して、authenticationキーを設定した左側は、「ログインをしているユーザー名が、authuserフィールドに設定されているレコードのみ見えている」という状況になっています。\n4ページネーションコントロールの「ログアウト」ボタンをクリックして、ログアウトします。\n5ログインパネルが表示されるので、次は前と違うユーザーでログインをします。例えば、ユーザー名とパスワードに「user3」と入力して「ログイン」ボタンをクリックします。\n\n6user3でログインをしました。まだ、authuserフィールドがuser3のレコードがないので、左側のテーブルにはレコードは表示されていません。\n\n7「追加」ボタンをクリックします。左側の「ユーザー」列にはすでにuser3と見えており、ログインしているユーザーのユーザー名が自動的に設定されていることが分かります。\n\n8フィールドに適当に入力し、ページを更新します。今度は、ログインしているuser3のレコードだけが左側で見えています。\n\n\nデータベースへのリクエスト内容を確認する\n1ページを更新し、レコードが表示された状態で、デバッグログは消さずに、左側のテーブルの下にある「追加」ボタンをクリックした状態にして、データベースへ送信されたSQLステートメントあるいはリクエストのパラメーターを確認します。なお、以下の画面は一例です。異なるユーザーでログインしている場合にはその名前に入れ替わるなど状況によって異なるので、手元の結果を確認してください。\n2まず、invoiceコンテキストにレコードを追加する部分を探します。ログの中に「新規レコードアクセス: Accessing:/def23.php, Parameters:access=create&amp;name=invoice…」と記載された部分を特定します。\n3[MySQLの場合]少し先にINSERTステートメントがあり、初期値としてauthuserフィールドに対してログインしているユーザーのユーザー名が入力されたレコードのみを検索しているSQLコマンドが見えています。（[FileMakerの場合]は表示が異なります。）\n\n4続いて、invoiceコンテキストのデータ取得部分を探します。ログの中に「クエリーアクセス: Accessing:/def23.php, Parameters:access=read&amp;name=invoice…」と記載された部分を特定します。\n5[MySQLの場合]その少し先に「SELECT * FROM `invoice`…」の部分をみてください。ここでは、authuserフィールドがログインしているユーザ名のuser3のレコードに絞り込む検索条件が自動的に追加されています。（[FileMakerの場合]は表示が異なります。）\n\n\nユーザー名のフィールドの更新を阻止する\n1def23.phpを定義ファイルエディターで編集します。すでにタブあるはウインドウで見えている場合はそれを呼び出します。閉じてしまった場合には、「http://localhost:9080」で開いたページに戻り「def23.phpを編集する」をクリックします。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）「Show All」ボタンを押した状態でないのであれば、ページの冒頭にある「Show All」ボタンをクリックしてください。\n2nameが「invoice」の方のコンテキストを特定します。「Authentication, Authorizaton and Security」の見出しにあるprotect-writingを「authuser」とします。Tabキーを押すなどして、入力したフィールドから別のフィールドに移動して、確実に保存をしてください。\n\n3page23.htmlをページファイルエディターで編集します。すでにタブあるはウインドウで見えている場合はそれを呼び出します。閉じてしまった場合には、「http://localhost:9080」で開いたページに戻り「page23.htmlを編集する」をクリックします。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）\n4以下のように太字の箇所を変更します。左側のテーブルの「ユーザー」列のフィールドを、ページ上で変更可能にします。\n&lt;body&gt;\n&lt;div style=\"display: flex\"&gt;\n&lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n&lt;table&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;作成日&lt;/th&gt;&lt;th&gt;タイトル&lt;/th&gt;&lt;th&gt;ユーザー&lt;/th&gt;&lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;td data-im=\"invoice@id\"&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"invoice@issued\"/&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"invoice@title\"/&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;input type=\"text\" data-im=\"invoice@authuser\"/&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n:\n\n5page23.htmlがすでにタブあるはウインドウで見えている場合はそれを呼び出し、ブラウザーの更新ボタンをクリックして、ページを再度表示します。閉じてしまった場合には、「http://localhost:9080」で開いたページに戻り「page23.htmlを表示する」をクリックします。（別の番号のセットで作業している場合には、該当する番号のリンクをクリックしてください。）\n6左側のテーブルの「ユーザー」の列の適当なテキストフィールドの内容を書き換えてみます。\n\n7Tabキーを押して更新処理をしますが、更新ができない旨のエラーが表示されています。\n\n8ページを更新してください。書き直したフィールドは、データベース上では更新されていません。\n\nテキストフィールドでなければ書き直しはできませんが、それでも、定義ファイルへのアクセスを独自に記述して直接行うことで書き直してしまうことは、技術的には不可能ではありません（もちろん、プログラムを自分で作ることになります）。しかしながら、protect-writingの設定があれば、更新可能なコンテキストでも指定したフィールドは更新ができなくなります。\n9「追加」ボタンをクリックして、レコードを追加してみます。レコードの追加はエラーなく行え、ユーザー列には現在ログインしているユーザー名が見えています。\n\n\n演習のまとめ\nコンテキスト定義に設定を行うことで、レコード単位での参照や更新の可否を、ユーザーやグループに対して設定ができます。参照時や更新、削除時には、ログインしているユーザー名であるものだけを絞り込む検索条件を付加します。新規レコード作成時には、自動的にログインしているユーザーの名前を指定したフィールドに設定します。ユーザー名のフィールドだけをページ側から更新できなくすることもできます。\n\n→データベース外のファイルに対して→→認証アクセスする\n　データベースからデータを取り出すときに、認証を確認し、アクセス権を適用しますが、一方で、画像などのようにデータベースに入れない情報の取り出しについても認証やアクセス権を設定したい場合もあります。ここでは、画像ファイルなどのデータを「メディアデータ」と呼ぶことにします。\n　メディアデータを送信するための準備としては、メディアデータのファイルを保存するディレクトリをWebサーバーの公開ディレクトリ外に用意して、ディレクトリやファイルに適切な、すなわちWebサーバーのプロセスが、読み出し可能なアクセス権を設定しておくことです。そして、そのディレクトリのパスを、オプション設定（IM_Entry関数の2つ目の引数）のmedia-root-dirキーの値に指定します。これは、Webサーバーのドキュメントディレクトリ外にします。ドキュメント内部では、場合によっては偶発的にパスが漏洩してしまって、認証せずに画像を見られてしまうかもしれません。\n　画像などのメディアデータをWebブラウザーから参照させるには、定義ファイルへのアクセスを利用します。定義ファイル自体はINTER-Mediatorの本体を取り出したり、データベースアクセスを行って結果を送り返すなどさまざまな用途に利用しますが、URLのパラメーターにmedia=で値を指定すると、その値を相対パスとしたファイルの内容を取り出します。基準となるパスは、media-root-dirキーの値です。\n　例えば、nameキーの値がcontextというコンテキストがあって、そのコンテキストのimagefileフィールドに、画像ファイル名が入力されているとします。そのコンテキストにおいて、認証が通るか、オプション設定にあるユーザーやグループでの認証が通った時に、画像に対しても認証が通ったクライアントからのリクエストのみ受け付けるには、まず、コンテキストをリスト7-5-2のように記述します。必要最低限の記述を示します。\n\nリスト7-5-2　メディアデータの読み出しに認証を適用する定義ファイルの例IM_Entry(\n    array(\n        array( //コンテキスト定義\n            'name' =&gt; 'context',\n            'key' =&gt; 'id',\n            'authentication' =&gt; array(\n               'media-handling' =&gt; true,\n            ),\n        ),\n    ),\n    array( // オプション設定\n        'media-root-dir' =&gt; '/var/www/files',\n        'authentication' =&gt; array(\n        ),\n    ),\n    array('db-class' =&gt; 'PDO'),\n    false\n);\n\n　media-handlingがあれば、このコンテキストに対して読み出しのリクエストがあった時、そのレスポンスに、ランダムなコードを返します。そのコードを、定義ファイルのアクセス時にクッキーとしてサーバーに送り、そのコードがサーバーによって発行されたものであるならば、認証されたものとみなします。サーバーとクライアントで認証情報をやり取りする方法はクッキーで固定されています。1回のレスポンスで返るコードは、複数のメディアデータへのアクセスに利用できるので、逆に言えば、セキュリティ面には注意が必要です。この方法でメディアデータに認証を設定するのであれば、TLS 1.2での通信回線上の暗号化が必要になります。\n　リスト7-5-2の定義ファイルがdef.phpだとして、contextコンテキストのimagefileフィールドにパスが保存されていた場合のIMGタグの記述例はリスト7-5-3の通りです。例えば、あるレコードで、imagefileフィールドが「products/pencil.jpg」だったとします。すると、「def.php?media=products/pencil.jpg」というURLがsrc属性に設定され、その時に画像を取得するリクエストが定義ファイルに対してクライアントから送られてきます。media=とあるのでmedia-root-dirの値と合成され、サーバー上では「/var/www/files/products/pencil.jpg」という絶対パスのファイルを開き、ファイルの内容とともにMIMEタイプを適切設定されたレスポンスがクライアントに返されます。その結果、サーバー上にある画像ファイルの内容が、クライアントにも見えるということです。このリクエストを送る時、media-handlingキーが設定されているので、サーバーから得られたコードをクッキーに乗せてサーバーに送り込み、サーバー側では自分が発行したものかを確かめて、そうであるならファイルの内容を返します。関係ないコードの場合には何も返しません。\n\nリスト7-5-3　画像ファイルを取り出すIMG要素の例&lt;img src=\"def.php?media=\" data-im=\"context@imagefile@#src\" /&gt;\n\n　この章の最初に、ユーザー名やグループ名をフィールドに記述することで、そのレコードに対するアクセス権を指定したユーザーやグループにだけ許可する方法を『レコード単位のアクセス権』として説明しました。その特定のレコードに記録したパスのファイルを、特定のユーザーにだけ表示可能にすることもできます。なお、グループに対するアクセス権の設定はメディアデータではサポートしていません。\n　まず、定義ファイルの例は、リスト7-5-4の通りです。オプション設定側には、メディアデータのルートを指定するmedia-root-dirを指定しています。そしてコンテキスト定義「context」にはauthenticationキーがあり、メディアデータに対する認証を行うための情報をコンテキストの構築時にクライアントに送ります。また、userフィールドに設定されたユーザーに対してレコードのアクセス権をCRUDのすべての操作に割り当てるようにしています。\n\nリスト7-5-4　メディアデータの読み出しにレコードごとのアクセス権を適用する定義ファイルの例IM_Entry(\n    array(\n        array(\n            'name' =&gt; 'context',\n            'key' =&gt; 'id',\n            'authentication' =&gt; array(\n                'media-handling' =&gt; true,\n                'all' =&gt; array(\n                    'target' =&gt; 'field-user',\n                    'field' =&gt; 'user',\n                ),\n            ),\n            'protect-writing' =&gt; array( 'user' ),\n        ),\n    ),\n    array( // オプション設定\n        'media-root-dir' =&gt; '/var/www/files',\n        'authentication' =&gt; array(\n        ),\n    ),\n    array('db-class' =&gt; 'PDO'),\n    false\n);\n\n　そして、画像ファイルを取り出すIMG要素の例は、リスト7-5-5の通りです。レコード単位のアクセス権を設定するには、ファイル自体を規定されたディレクトリに入れる必要があります。例えば、ここでは、contextコンテキストのあるレコードについて、idフィールドは「120」、imagefileフィールドは「cutter.jpg」だったとします。以下のIMGタグの設定は、このファイルが「/var/www/files/context/id=120/cutter.jpg」である必要があります。つまり、media-root-dirと定義ファイルへのURLのmediaパラメーターの値を繋いだものがファイルのパスになるのは、単に認証を設定する場合と同じですが、そのファイルが、どのレコードに対するメディアデータなのかをパスで記録し、アクセス時には指定が必要です。つまり、「コンテキスト名/キーフィールド=その値」という相対パスを間に入れて、画像ファイル名を指定します。サーバー上でもこのようなディレクトリを用意して記録しておく必要があります。\n\nリスト7-5-5　画像ファイルを取り出すIMG要素の例&lt;img src=\"defs.php?media=context/id=$/\"\ndata-im=\"context@id@$src context@imagefile@#src\" /&gt;\n\n　ここでは、contextコンテキストは、すべて、フィールドuserにログインしているユーザーと同じユーザー名がある場合のみに、データベースに対する処理が許可されています。メディアデータの読み込みの場合も同様ですが、リクエスト自体からアクセス許可されているかどうかを判定します。前の例だと、id=120のcontextコンテキストのレコードのuserフィールドと、ログインユーザー名が同じかどうかを確認します。ここで、他のユーザーに対するアクセス権があるパスを指定しても、userフィールドの値とログインユーザーは異なるため、メディアデータへのアクセスは拒否され、メディアデータ自体がユーザーのアクセス権を適用されていることになります。\n　このような「context/id=120/cutter.jpg」のようなパスを指定するのは厄介ではありますが、計算フィールド等を利用して、パスを生成してもいいでしょう。また、『5-4　JavaScriptコンポーネントの利用』で指定したファイルのアップロードコンポーネントは、ファイルを保存するときにコンテキスト名や主キーフィールドと値を絡めたパスを生成します。つまり、「自分でアップロードしたファイルは自分しか見えない」という動作を想定して機能を組み込んでいます。\n\n→このセクションのまとめ\n　ユーザー単位あるいはグループ単位にアクセス権を設定するテーブルの運用も可能です。ユーザー名やグループ名を記録するフィールドを用意し、定義ファイルのコンテキスト定義で、必要な設定を行います。メディアデータについても認証をかけることができます。なお、ユーザーによる制限のみがメディアデータに対しては可能です。\n\n\n→7-6メールを利用したユーザー登録とパスワードのリセット\nINTER-Mediatorのレポジトリの中には、ユーザー登録をメール確認後に行う機能を作るためのファイルや、パスワードのリセットをメール経由で行うためのファイルが含まれています。これらは、全くそのまま使えるものではないかもしれませんが、主要な機能は組み込まれているので、ページのデザインを合わせれば即座に使えるものです。これらの機能の動作やカスタマイズのポイントを説明しましょう。\n\n→メールを利用した→→ユーザー登録\n　INTER-Mediatorのレポジトリにある「samples/→Auth_Support/User_Enrollment」フォルダーには、ユーザー登録を自動的に行う仕組みのための素材が入っています。管理者が1人ずつauthuserテーブルにレコードを作ればユーザーを増やすことができますが、オンラインサービスなどいつどこからアカウントの申し込みがあるか分からない場合には、リクエストごとにユーザーを追加するのは多大な手間を必要とします。そこで、オンラインから自動的に申し込みたいのですが、そうなると勝手に人のメールアドレスで登録をしてしまうなどのトラブルが懸念されます。そこで、メールアドレスとともに申し込みを行い、そのメールアドレス宛に本当に登録をしていいのかどうかを問い合わせ、メールを受信できた人が手作業で登録許可を行うという仕組みが一般的に利用されます。そのような仕組みは「→セルフサービス」と呼ばれることもあります。その仕組みの必要最小限の機能をコードで提供しますので、ご自分のニーズに合わせてデザインを行い、必要に応じて改変をしてください。ただし、改変にはPHPによるWebアプリケーションの開発に関する知識は必要です。『Chapter 8　サーバーサイドでのプログラミング』についても参照してください。\n　なお、メールアドレスでの確認プロセスを行うサイトでは、ユーザー名をメールアドレスにすることが一般的と思われます。ここで紹介するプログラムも基本的にはユーザー名はメールアドレスにすることを前提にしています。そのためには、例えばparams.phpファイルに「$emailAsAliasOfUserName = true;」という行を指定します。しかしながら、改造をすればユーザー名もユーザー自身で指定できるようにできます。ただしそれはかなり大幅な改造になります。\n　ユーザーの登録を「申し込み」と「確認」の2段階で行います。表7-6-1には、INTER-Mediatorに含まれるファイルのファイル名と主な用途をまとめました。\n\n段階ファイル名用途申し込みenroll.html申し込みのページの基本HTML。JavaScriptのプログラムを含むEnrollStart.phpユーザーレコードを追加後に行う処理enrollmail.txt申し込みをした後に送られるメールの本文。ここに確認に必要な情報が含まれるcontext.phpenroll.htmlで利用する定義ファイルaccountcheck.phpenroll.htmlで利用する指定したメールアドレスがすでに登録されているかを得るスクリプト確認confirm.php確認の段階で呼び出される。処理は呼び出したときに実行されるが、処理結果はHTMLで表示confirmmail.txt確認をした後に送られるメールの本文。ここにログインに必要な情報が含まれる表7-6-1　User_Enrollmentフォルダーにあるファイル\n\n　これらのファイルに記述された処理のポイントを説明し、読者の皆さんが改造して自身のアプリケーションに組み込むことができるようになることをここでの解説の目標とします。\n\n→名前とメールアドレスを入力するページ\n　まず、accountcheck.phpは、指定したメールアドレスのレコードがすでに存在するかどうかを確認するためのものです。URLに「m=メールアドレス」で指定して呼び出すと、そのメールアドレスのレコードがauthuserテーブルにいくつあるかを返します。単独のファイルで、INTER-Mediatorのデータベースからの読み出しを行ってレコード数を数えて、クライアントにその数値のみを返します。\n　enroll.htmlは、ポストオンリーモードで稼動するINTER-Mediatorのページファイルで、定義ファイルとしてcontext.phpを利用しています。authuserテーブルのrealnameとemailフィールドに入力するデータを受け付ける2つのテキストフィールドが用意されています。INTERMediatorOnPage変数のオブジェクトに定義するprocessingBeforePostOnlyContextメソッドを定義して、新規レコード作成のための通信を行う前に、メールアドレスがすでに登録されているものかどうかをaccountcheck.phpを同期通信で利用してレコード数を求め、すでに存在していればアラートボックスを表示して、新規レコードは作りません。\n　context.phpにはuser-enrollというコンテキストがひとつ定義されています。authenticationキーの指定により、新規レコードの処理しかできなくしてあります。また、validationキーにより、名前の入力やメールアドレスの形式判定を行っています。メールアドレスの形式判定の正規表現は、非常に大雑把なものですので、厳密な検査が必要な場合には、正規表現を変更してください。さらにsend-mailキーにより、新規レコードを作った時に、enrollmail.txtファイルの内容を本文のテンプレートとして、作成したテーブルのemail, realname, hashの3つのフィールドの値をテンプレートに埋め込んで、テキストフィールドに指定したメールアドレスにメールが送信されます。enrollmail.txtファイルはもちろん、送信者等はご自分で利用可能なメールアドレスに変更してください。enrollmail.txtファイルでは、confirm.phpを呼び出す正しいURLを記述します。\n\n→ユーザーレコードの作成前後に行う処理\n　コンテキストでは、extending-classキーで「EnrollStart」が指定されています。これにより、EnrollStart.phpファイルに記述された同名のクラスの処理が加わります。このクラスでは、新規レコードを作成する前に呼び出されるdoBeforeCreateToDBメソッドおよび作成後に呼び出されるdoAfterCreateToDBメソッドの2つのメソッドが定義されています。まず、doBeforeCreateToDBメソッドでは、authuserテーブルのハッシュ化したパスワードを保存するhashedpasswordフィールドの値として、無効な値であることが分かるように「dummydummydummy」を設定します。そして、usernameフィールドの値として、現在の日時とメールアドレスをつなげたものを指定しています。ここでは、usernameフィールドはユーザー側には見せないでシステム内部で使うためのものとして位置付けています。そのため、確実に重複のないユーザー名になるように文字列を作っています。もっとも、存在しないメールアドレスを利用しているのでシステム内のユニークIDとしてメールアドレスだけを使ったとしても、理論上は問題ありません。しかし、手作業でユーザーのレコードを作ることと併用したときに確実に区別できるように、意図的に日時とメールアドレスを組み合わせています。\n　doAfterCreateToDBメソッドでは、updatedRecordメソッドにより、新規に作成されたレコードを取得しています。そして、userEnrollmentStartメソッドで、ランダムな文字列を作成し返り値として得ます。そのランダムな文字列は、issuedhashテーブルに保存されます。clientidフィールドをNULLにして、ユーザー登録時のランダム文字列であることが分かるようにしています。そして、setUpdatedRecordメソッドで、新規作成したレコードの中にhashフィールドを新たに付け加えて、ランダム文字列を値に指定しています。これで、送信するメールのテンプレートの3つ目のフィールドがレコードに加わり、ランダム文字列をメールに含めて送信できるのです。\n\nDB_Proxy-&gt;→userEnrollmentStart($userID)\n引数に指定したユーザーID（idフィールドの値）のユーザーを、userEnrollmentStartメソッドで有効化するためのコードを生成して返す。ユーザー作成時にコードを生成してメールとしてユーザーに送り、そのメールを受け取ったユーザーがコードを利用してアカウントをアクティベートする仕組みを提供する。\n\n→レコード作成の確認とパスワードの設定\n　ユーザーレコードを作った後のメールに記載されたURLにより、confirm.phpが「c=ランダム文字列」のパラメーターを伴って呼び出されます。confirm.phpは、単独で稼働するファイルです。DB_Proxyクラスを生成してデータベース処理を2回行っています。まず、アルファベットと数字を使って6文字の初期パスワードを作成します。最初のDB_Proxyの生成ではコンテキストとは関係なく、userEnrollmentActivateUserメソッドを利用して、ランダム文字列を作成したユーザーのhashedpasswordフィールドに値を設定します。その処理に成功すると、2回目のDB_Proxyの生成を行い、その前に変数で定義したコンテキストに対するクエリーを行います。ここでは、作成したauthuserテーブルのレコードを検索して、その結果をもとにメールを送信することを行っています。メールのテンプレートはconfirmmail.txtです。このテンプレートによって出されるメールで、ユーザー名（メールアドレス）に対するパスワードが確定して通知されます。\n\nDB_Proxy-&gt;→userEnrollmentStart(userEnrollmentActivateUser($challenge, $password, $rawPWField = false))\n引数$challengeにはuserEnrollmentStartメソッドの返り値、$passwordには新たに設定するパスワードを指定して、ユーザーをアクティベートする。その結果、ユーザーには引数に指定したパスワードのハッシュが設定され、事前に決められたユーザー名とこのパスワードでログインができるようになる。もし、パスワードそのものをどこかのフィールドに残したい場合は3つ目の引数に、生のパスワードを残すフィールド名を指定する。\n\n→メールを利用した→→パスワードリセット\n　authuserテーブルのemailフィールドに、ユーザーごとに一意なメールアドレスが設定されている場合、そのメールアドレスを利用してパスワードのリセットを行うのが、INTER-Mediatorのディストリビューションにある「samples/Auth_Support/→PasswordReset」フォルダーにある一連のファイルです。\n　パスワードのリセットの処理は2段階で行います。最初の「変更要求」の段階では、フォーム上でメールアドレスを入力すると、そのメールアドレスに、ランダムな文字列を伴ったURLが送られます。その文字列はシステム側で、メールアドレスに対応したユーザーを特定することができます。メールのURLにアクセスすると、2段階目の「変更処理」に移行し、メールアドレスに対応するユーザーのパスワードを入力してリセットできるページが開きます。メールアドレスに届くメールが特定のユーザーにしか参照できない状況が保持されていれば、他人にパスワードのリセットは行えない仕組みです。しかしながら、メール自体は暗号化されていないこともあり、絶対安全とは言えない方法です。Webアプリケーション自体の通信がTLSで暗号化されているのであれば、2段階の処理をなるべく早く行い、リセットを行った後、ログインパネルからパスワードを変更するのが安全な方法であると言えます。ログインパネル上での通信はTLSで暗号化されていて盗聴の危険性はないからです。\n　それぞれのファイルについては表7-6-2に概要を示します。\n\n段階ファイル名用途変更要求requestpwreset.phpメールアドレスを指定して、変更処理が可能なURLをメールで知らせるrequestmail.txt変更処理可能なURLを通知するメールのテンプレート変更処理resetpassword.phpパスワードの変更処理を行うフォーム形式のページresetcontext.phpresetpassword.phpから利用する定義ファイルresetmail.txtパスワード変更を通知するメールのテンプレート表7-6-2　Auth_Support/PasswordResetフォルダーにあるファイル\n\n→パスワードの変更要求処理\n　パスワードの変更要求を行うrequestpwreset.phpには、メールアドレスを入力するテキストフィールドが2つあります。この部分は、INTER-Mediatorを使わない普通のフォーム形式になっています。Submitボタンをクリックすると、同じくrequestpwreset.phpを呼び出し、ファイルの前半に記述した処理を実行します。この部分のポイントは、DB_ProxyクラスのresetPasswordSequenceStartメソッドを呼び出しているところです。引数にはフォームで指定したメールアドレスを引数に指定します。そのメールアドレスを持つauthuserテーブルのレコードを特定し、issuedhashmテーブルにランダムな文字列をユーザーレコードのキーフィールドの値とともにレコードを作成して記述します。返り値はfalseなら処理が失敗、処理が成功すると連想配列が帰りますが、キーがranddataなら生成したランダム文字列、usernameならばauthuserテーブルのusernameフィールドを取り出すことができます。\n　その後に、requestmail.txtをテンプレートとしてパスワードの変更要求があったことを、メールで知らせます。requestmail.txtでは、次の段階であるresetpassword.phpを呼び出すURLを正しく記述します。\n\nDB_Proxy-&gt;→resetPasswordSequenceStart($email)\n引数に指定したメールアドレスemailフィールドに持つレコードのユーザーのパスワードをリセットするために呼び出す。返り値は連想配列で、'randdata'キーはランダムな値、'username'キーはユーザー名を得られる。ランダム値をresetPasswordSequenceReturnBackメソッドで与えてパスワードのリセットの可否を決める。\n\n→パスワードのリセット処理\n　resetpassword.phpは、定義ファイルをresetcontext.phpとするページファイルのようにも見えますが、このresetpassword.phpも一般的なフォームを利用したページです。定義ファイルを指定しているのは、パスワードのハッシュを生成するための関数を使うためだけです。\n　フォームには、メールアドレスと、パスワードを2つ入力する場所があります。メールアドレスは、パスワード要求時にクッキーに記憶させているので、その情報で自動入力可能ですが、もちろん、要求を出したときに使っていたブラウザーを開いたままパスワードリセットの処理に入る必要があります。フォームへの入力が正しく行われているかどうかなどは、一般的なPHPによるフォームのアプリケーションの作成方法です。\n　パスワードなどが入力されると、DB_ProxyクラスのresetPasswordSequenceReturnBackメソッドが呼び出されます。このメソッドは、メールアドレス、要求時に生成したランダムな文字列、そしてパスワードをハッシュ化した文字列を引数として持ちます。issuedhashテーブルを検索するなどして、ランダムな文字列がそのメールアドレスに対して発行されたものが確認されると、hashedpasswordフィールドの値を設定してパスワードのリセットが完了します。その結果trueが戻されます。\n　trueが戻されると、念のために、パスワードが変更されたことを指定したメールアドレス宛にメールを送ります。もちろん、自分が行っていないようなパスワードリセットが何かの問題（未知の問題）で発生したときの手がかりになります。\n\nDB_Proxy-&gt;→resetPasswordSequenceReturnBack($username, $email, $randdata, $newpassword)\n引数には順番にユーザー名、メールアドレス、resetPasswordSequenceStartで得られるランダムなコード、そして設定する新しいパスワードを指定する。設定に成功すればtrueが返され、失敗するとfalseが返される。\n\n→このセクションのまとめ\n　オンラインでメールを利用して承認を進める形式のユーザー登録、そしてメールアドレス宛にパスワード変更可能なURLを送付することでのパスワードリセット、これらの機能を持つ最小限のアプリケーションをINTER-Mediatorに含めています。オンラインサービスを構築するための素材として利用できます。このセクションではその動作の説明と、改良する場合のポイントをまとめてあります。\n\n\n→7-7SAML認証\n　INTER-Mediatorでは内蔵の認証システム以外に、SAMLに対応した外部の認証システムを利用した認証にも対応しています。ここではINTER-MediatorでSPを運用して、認証に利用する方法を説明します。なお、演習はありません。\n\n→SAMLについて\n　→SAML（Security Assertion Markup Language）は、異なるドメイン間での認証を実現するXMLベースの規格ですが、現在はアプリケーションサーバーとは異なる認証サーバーで認証してアプリケーションを利用できる仕組みの基礎となる規格として利用されています。SAML Ver.2が2005年に制定され、現在もそのバージョンで利用されています。認証に利用できるサーバにはさまざまな種類がありますが、その認証サーバをシンプルに使うとなると、認証サーバの種類や方式ごとにアプリケーションサーバー側での対応が必要になります。一方、SAMLを利用することで、認証サーバによらない統一的な方法でアプリケーションに認証機能を組み込めるという点で非常に便利です。\n　INTER-Mediatorでは内蔵の認証システムを持っており、単一の、あるいは同じデータベース上で稼働するアプリケーション上での認証機能はこれまでに説明したとおり実現できています。しかしながら、→Active Directoryや→LDAPサーバに認証情報がすでにあるという組織の場合、それら認証サーバにあるアカウントを利用したいと考えます。INTER-MediatorはVer.6までの間に、LDAP、GoogleのOAuthに対応したクラスを用意してきましたが、認証方式ごとに対応するのは効率的ではないと考え、SAML2での認証に一本化をする前提で進めています。INTER-MediatorはVer.8でSAMLに対応しました。\n　SAMLでは、認証の処理を実際に行う→IdP（→Identity Provider）と、認証要求を行う→SP（→Service Provider）が存在します。一般には、IdPは独立したドメインで運用し、SPはWebアプリケーションの内部に組み込んであるという状況が多いと思われます。IdP自身が認証処理を行う場合もありますが、別の認証サーバーと連携することもよく利用される形式です。例えば、IdPを立てると同時にIdPとLDAPサーバが通信して、実際のユーザ認証はLDAPサーバ側で行うという仕組みが構築できます。\n　一方、SPは、Webアプリケーションと直接やりとりを行う部分です。SPとIdPはお互いに相互に→メタデータ交換を行なっています。具体的には、SPのメタデータをIdPに登録すると同時に、IdPのメタデータをSPに登録します。メタデータにはそれぞれのホストのSAMLをやり取りするURLの情報などが入っています。加えて、それぞれのホストの公開鍵が入っており、この公開鍵を利用して、双方の通信を暗号化しています。交換されたということで、双方は信頼できると判断できますが、信頼性の検証は結果的に人間が行うことになります。\n　Webアプリケーションで認証が必要になり、SPを利用すると、最初はまずクライアントが、IdPの認証のためのURLにリダイレクトされて、ユーザは認証パネルでユーザ名とパスワードを入れることになります。認証が成功すると、Webアプリケーション側のURLにさらにリダイレクトされます。そして、WebアプリケーションがSPを利用すると、今度はIdPとのやりとりを含めて認証が成立しているので、Webアプリケーションはその結果をもとに認証が通った状態の処理を続けることになります。大まかには以上の流れで認証が進められます。\n\n→PHPでSAMLを実現するSimpleSAMLphp\n　PHPでは→SimpleSAMLphpという名前のライブラリがよく利用されており、INTER-MediatorでもこのライブラリをSPとして利用します。SimpleSAMLphpはSPとしての機能だけでなく、IdPにもなります。なお、SimpleSAMLphpは2023年まではVer.1系列が開発されてきましたが、2023年よりVer.2系列に入ったものの、さらにVer.3のアルファ版も見えるなど、どのバージョンを使うのか迷う状況でもあります。Ver.1系列は、Ver.1.19.4まであり、これを利用するという方法もありますが、Ver.2についてはVer.2.0.4までがリリースされています。これらはユーザインターフェースが結構違っており、Ver.2の方が洗練したデザインなのではありますが、状況によってはVer.1を使うことになるかもしれません。なお、SimpleSAMLphpのバージョン1も2も、SAMLのバージョンはVer.2ですので混同しないようにしましょう。\n　すでにIdPとなるものが存在していれば、Webアプリケーション側はSPの用意だけで済みます。例えば、→Shibboleth 1.3の認証サーバがある場合は、SPをセットアップすればOKです。なお、SimpleSAMLphpのVer.2ではShibbolethの機能は落とされているので、認証サーバがShibbolethの場合はVer.1系列で運用することも検討が必要です。\n　一方で、IdPになるものがない場合、独自にIdPを立てる必要があります。もちろん、SimpleSAMLphpを使えば良いのですが、やはりサーバをひとつ起動して色々セットアップも難しいだけに、そこそこの手間はかかります。例えば、LDAPサーバーを利用したい場合、LDAPサーバーとIdPが連携するように、IdP側に設定を行います。SPはそのIdPを利用するというのが基本的な設置方法になります。\n　ここからは、どこかにIdPが稼働しているという前提で話を進めます。IdP自体のセットアップも作業として発生する場合もあると思われますが、SimpleSAMLphpを使ったIdPの設置手順は筆者のBlog記事（SimpleSAMLphp Ver.2を使ってみる(1)、SimpleSAMLphp Ver.2を使ってみる(2)）で紹介しているので参考にしてください。\n\n→INTER-MediatorをSAMLのSPにする\n　SimpleSAMLphpは、INTER-Mediatorのレポジトリのルートにある→composer.jsonファイルに記述があるので、composerを動かしたときにセットアップされます。もし、INTER-Mediatorディレクトリのルートをカレントディレクトリにしてcompose update等でインストールした場合、「INTER-Mediator/vendor/simplesamlphp/simplesamlphp」にSimpleSAMLphpがインストールされることになります。アプリケーションのテンプレートなどをINTER-Mediator自体もcomposerのインストール対象になっている場合は、「アプリケーションのルート/vendor/simplesamlphp/simplesamlphpにSimpleSAMLphp」にインストールされます。\n　まず、そのSimpleSAMLphpのルートにあるpublicディレクトリが、Web公開されている必要があります。この部分へWebブラウザからアクセスすることにより、SPの管理ページを開くことができるのです。通常、INTER-Mediatorのディレクトリは公開しているので、publicディレクトリも公開されているのですが、さらに、「https://ホスト名→/simplesaml」のURLで、そのpublicディレクトリを参照できるように設定を行います。管理ツールを使う場合など、simplesaml以下に自動的にパスが設定されるので、ドキュメントルートからsimplesamlで、SimpleSAMLphpのpublicに接続できるようにしておく必要があります。例えば、Apache2の場合だとリスト7-7-1のようなAliasディレクティブを記述するなどします。\n\nリスト7-7-1　/simplesamlで公開すべきpublicディレクトをアクセスできるようにするAlias /simplesaml \"/var/www/demo_im_com/saml-trial/lib/src/INTER-Mediator/vendor/simplesamlphp/simplesamlphp/public\"\n# INTER-Mediatorは、/var/www/demo_im_com/saml-trial/lib/src/INTER-Mediator\n# INTER-Mediator/vendor内にSimpleSAMLphpが存在する\n\n→SPの設定ファイルを用意する\n　composerでインストールしたSimpleSAMLphpをSPとして利用するには、これらのディレクトリ内に設定ファイルを記述しなければなりません。設定ファイルをディレクトリ内部に直接記述してもいいのですが、composerの操作によってはそれらは消されてしまうので、どこか別のディレクトリに設定ファイルを作っておき、その設定ファイルを該当する場所にコピーして運用することにします。設定をサポートするスクリプトが「INTER-Mediatorのルート/samples/→saml-config」にあります。このsaml-configフォルダをどこかにコピーします。例えば、アプリケーションのルート以下、libディレクトリあたりにコピーをしておき、必要ならアプリケーション自体のレポジトリに設定ファイルを記録しておくと良いでしょう。以下、「コピーしたsaml-configフォルダ」として、コピー先のフォルダを参照します。\n　コピーしたsaml-configフォルダには、→gettemplates.shというスクリプトがあります。このスクリプトは、libあるいはlib/src、さらにはアプリケーションのルートにあるvendorディレクト以下のINTER-Mediatorを探して、そこから設定ファイルのテンプレートをコピーします。いずれにしても、このgettemplates.shをシェルスクリプトとして稼働すると、ディレクトリを探して、config.php、authsources.php、acl.php、saml20-idp-remote.php、saml20-idp-hosted.php、saml20-sp-remote.phpのコピーを作ります。ファイルが作られない場合には想定したフォルダにINTER-MediatorやSimpleSAMLphpが存在しないことになり、その場合はスクリプトを修正して、設定ファイルのテンプレートが存在するディレクトリに変更してください。これらのファイルのうち、通常はconfig.php、authsources.php、saml20-idp-remote.phpのファイルを変更します。\n\n→証明書の用意\n　SAMLではSP、IdPともに→証明書を作ります。証明書というよりも、→秘密鍵と公開鍵を作り、メタデータ交換により公開鍵を相手（SPならIdP）に渡しておくことで、自分自身への暗号化通信を実現しています。ただ、秘密鍵と公開鍵よりも、証明書として鍵を作った方が何かと便利なので、証明書を用意します。これは、WebサイトのTLSのために用意したものでも構いませんが、SimpleSAMLphpのインストールの説明では、自己署名証明書で期限が10年と言った証明書を作っており、確かに一定の条件を満たせば、それでも問題はないとも言えるでしょう。以下のコマンドは、saml-configディレクトリを利用するという前提なので、saml-configをカレントディレクトリにしてコマンド入力します。そして、生成する秘密鍵のファイルと証明書のそれぞれは、ファイル名をsp.pem、sp.crtというきめうちのファイル名にします。\n\nリスト7-7-2　自己署名証明書を生成するコマンドの例→openssl req -newkey rsa:3072 -new -x509 -days 3652 -nodes -out sp.crt -keyout sp.pem\n\n　このコマンド入力後、証明書の内容についての問い合わせが行われます。これらは適当に入力すればいいでしょう。ただし、Common NameではSPを稼働するホスト名を正しく入れておくのが良いと思われます。\n\n→設定ファイルの修正\n　続いて、コピーしてきた設定ファイルを修正します。まず、→config.phpについては、以下のキーの値を修正します。これらのキーはファイル内で連続した場所にないので、ひとつずつ探して修正をしていきましょう。なお、baseurlpathは、publicディレクトリがある場所への絶対パスを記述します。technicalcontact_emailは自分のメールアドレスを指定します。secretsaltについては乱数から生成しますが、ファイルのコメントで生成のためのコマンドが紹介されているので、そのコマンドで生成します。auth.adminpasswordはSPの管理ページで利用できるパスワードを指定します。\n\nリスト7-7-3　config.phpファイルの修正ポイント'baseurlpath' =&gt; 'saml-trial/lib/src/INTER-Mediator/vendor/simplesamlphp/simplesamlphp/public/',\n'technicalcontact_email' =&gt; 'your_email',\n'secretsalt' =&gt; 'your_salt',\n'auth.adminpassword' =&gt; 'your_admin_pass',\n\n　続いて→authsources.phpを修正します。default-spキーの配列の要素に、certificateとprivatekeyのエントリーを用意して、ここで作成したキーファイルと証明書ファイルを指定します。そして、entityIDをサイトのドメインに設定しておきます。\n\nリスト7-7-4　authsources.phpファイルの修正ポイント'default-sp' =&gt; [\n  'saml:SP',\n  'certificate' =&gt; 'sp.crt',\n  'privatekey' =&gt; 'sp.pem',\n\n   // The entity ID of this SP.\n   'entityID' =&gt; 'https://demo.inter-mediator.com/',\n   :\n\n　さらに、→saml20-idp-remote.phpを修正します。このファイルの最後（とはいえ、中身は短いコメントがあるのみ）に、IdPの管理ページからコピーした→→IdPのメタデータを示す配列をコピーしておきます。\n\n図7-7-1　saml20-idp-remote.phpにIdPのメタデータを追加する\n\n→書き直した設定ファイルなどを展開する\n　証明書を用意し、設定ファイルを書き直すと、→saml-configディレクトリに入っている→copyconfig.shというスクリプトファイルを実行します。これも、最初に稼働させたgettemplates.shと同様に、SimpleSAMLphpをいくつかの典型的な場所から探してその内部のいくつかのフォルダにファイルをコピーします。スクリプトを実行して、エラーが出なければ、おそらくはファイルの元をコピーしたSimpleSAMLphpのフォルダへ、設定ファイルを書き出していると思われます。もし、うまくいかない場合はスクリプトを修正するなどしてください。なお、このスクリプトで実行しているのは、sp.pem、sp.crtをSimleSAMLphpのルート以下certディレクトリへ、config.php、authsources.phpをconfigディレクトリへ、saml20-idp-remote.phpをmetadataディレクトリへコピーしています。\n　なお、設定変更するときには、saml-configディレクトリにあるファイルを変更して、その都度、copyconfig.shスクリプトを実行すれば良いでしょう。\n\n→→→SPのメタデータを取り出す\n　以上で、SPとして稼働するはずです。ここで、SPの管理ページにログインをして、SPのメタデータを取り出します。そのためには、ブラウザより「https://ホスト名→/simplesaml/admin」に接続します。図7-7-2のようなログインパネルが表示されるので、ユーザ名はadmin、パスワードはconfig.phpのauth.adminpasswordキーに指定したパスワードを指定して認証します。ログインできるはずです。\n\n図7-7-2　SPの管理ページにログインする\n\n　管理ページにはさまざまな機能がありますが、上部で「連携」をクリックして、Hosted entitiesを表示し、そこにあるdefault-spの「V」の部分をクリックして、メタデータを表示します。このメタデータを、IdPの管理者に渡してこのデータをIdP側に登録すると、SAML認証ができるようになります。なお、通常はメタデータはXMLですが、IdPがSimpleSAMLphpなら、PHPのコードの方が作業が一手間少なくて済みます。\n\n図7-7-3　SPのメタデータを取得する\n\n→→→SAML認証の設定と動作\n　SAML認証に関わる設定は、params.phpで行います。リスト7-7-5に使用できる変数を示しました。\n\nリスト7-7-5　params.phpファイルでのSAML関連の設定$isSAML = true; # The default value of isSAML is false.\n$samlAuthSource = 'default-sp';\n$samlExpiringSeconds = 1800;\n$samlWithBuiltInAuth = true;\n$samlAttrRules = ['username' =&gt; 'uid|0', 'realname' =&gt; 'eduPersonAffiliation|0'];\n$samlAdditionalRules = ['username' =&gt; '(user02|user03)'];\n\n　まず、SAML認証の機能を有効にするかどうかは、→$isSAML変数で指定をします。通常はfalseになっているので、ここで明示的にtrueを代入しなければなりません。あるいは、IM_Entry関数の第2引数（オプション設定）で、authenticationキーの配列で→is-samlキーでtrue値を指定しても設定可能です。この設定と同時に、$samlAutuSource変数で、→→SPのソース名を設定します。これまでの手順通りなら、設定名は「default-sp」になっているはずです。\n　$isSAMLをtrueにすると、認証が必要なページでは、IdPのログインページにリダイレクトし、認証後はアプリケーションのページに戻るという動作になります。このとき、INTER-Mediatorは、内部的には組み込みのユーザを作り、通常の認証はそちらで行います。これは、認証サーバに都度都度認証処理をさせるとスピードが遅くなることを懸念してのことで、IdPでの認証が成功すると、特別な組み込みユーザを作り、乱数でパスワードを自動生成して認証の継続を行うようにします。ただし、直前の処理から→$samlExpiringSecondsで指定した秒数経過していると、改めてIdPに認証を求めます。通常はIdP/SPの連携によって認証状態が継続されますが、例えば何日も経過していると、IdPの認証パネルが出てくるようになっているのが一般的な動作でしょう。\n　なお、SAML認証では、組み込みの認証の機能も使うので、$passwordHash = '2'; の定義も行うようにしてください。\n　→$samlWithBuiltInAuthをtrueにすると、組み込みのユーザでのログインが可能になります。これを未定義のままにすると、この変数値はfalseになり、SAMLつまりはIdPが管理するユーザで以外はログインできません。一方trueにすると、IdPのユーザと、authuserテーブルで定義したユーザの両方でのログインが可能になります。このとき、アプリケーションでは、INTER-Mediatorのログインパネルを表示しますが、ログインパネルに→「SAML認証」ボタンが追加されています。authuserに設定してあるユーザは通常通りログインパネルでユーザーとパスワードを入力してログインしますが、IdPのユーザでログインするには「SAML認証」ボタンをクリックして、IdPのログインページに移動して、ログインをする必要があります。\n　→$samlAttrRules変数は、認証時に得られる情報からauthuserテーブルにユーザを作るときにどのデータを取り出してどのフィールドに入力するかを示しています。変数に値を設定しなければ、uidの最初のデータをauthuserテーブルのusernameフィールドに設定するだけになります。この変数は連想配列で指定しますが、キーはauthuserテーブルのフィールド名、値はSAML認証で得られる認証ユーザーの情報からどのキーの何番目の配列の値を取り出すかを指定します。'realname' =&gt; 'eduPersonAffiliation|0'であれば、認証結果から得れたeduPersonAffiliationというキーの配列の最初の要素を、realnameフィールドにセットするということです。|の前にエントリー名、|に続いて配列の何番目の要素かを指定します。SAMLで得られるデータが複雑な場合は、この変数の要素として、'email' =&gt; 'urn:oid:0.9.2342.19200300.100.1.3|0' と言ったような記述を行うことにもなります。値の|までの部分はurn表記でのフィールド名となります。この設定は、次に説明する$samlAdditionalRulesに関連が深いとも言えます。\n　変数の→$samlAdditionalRulesは連想配列を指定し、authuserテーブルのフィールド名とそれに対する値を指定します。これは、認証したユーザーの情報に対して、特定のフィールドが想定された値であるかどうかをチェックすることを意味し、連想配列の定義、つまりあるフィールドの値が決められたものでなければ、認証を失敗したものとみなすという処理になります。言い換えれば、ユーザ属性に応じて認証を失敗させる設定が可能です。この配列の値は、正規表現での指定が可能です。'username' =&gt; '(user02|user03)'であれば、username、つまりSAML認証で得られたuid[0]の値がuser02かuser03のユーザでないと認証は成立しないようになります。\n　$samlAttrRulesと$samlAdditionalRulesの定義に関しては、一般的な説明が難しいですので、詳細な設定が必要な場合には、INTER-Mediatorのソースをチェックされることをお勧めします。設定に必要な情報はデバッグ情報として見えるようにはなっていますが、ソースと対照しないと分かりづらいと思われます。\n\n→SAML動作に関するJavaScript\n　通常は、JavaScriptでのプログラミングは、SAML認証に関しては不要です。ただし、→→SAMLのログアウトを行うためのURLについては、→INTERMediatorOnPage.logoutURLにセットされています。このURLにジャンプすると、SAML認証が解消されるので、自分でログアウトボタンを作る場合にはこれを利用すると良いでしょう。なお、INTERMediatorOnPage.logout()も同時に呼び出すようにしてください。ページネーションの「ログアウト」ボタンは、これらのメソッドやURLジャンプのいずれも組み込まれています。\n　$samlWithBuiltInAuthをtrueにしたときにログインパネルに表示される「SAML認証」ボタンにより、IdPのログインページに自動的に移動します。その移動さきのURLは、→INTERMediatorOnPage.loginURLより得られます。これについても、何かしら特定のUIを自分で組むようなときには必要な情報かもしれません。\n　なお、logoutURL、loginURLのいずれのプロパティも、最初にログインした直後や、あるいは設定を変えて使い始めた直後などはnullになっている場合もあります。念の為nullかどうかをチェックしてから利用するようにしてください。これらのプロパティは、SAML認証以外の場合ではnullになっています。\n\n→このセクションのまとめ\n　INTER-MediatorはSAMLに対応しています。SAMLのSPとして、Webアプリケーションに組み込んだSimpleSAMLphpを稼働させるための設定について、このセクションでは説明をしました。外部の認証サーバを利用したアプリケーション構築を行う場合には、SAMLの利用をまず検討しましょう。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-->\n\n\n\nOAuth2を認証に利用する\nINTER-Mediator Ver.5.3より、OAuth2〜での認証認証OAuth2での〜OAuth2での認証に対応しました。しかしながら、Ver.5.3の段階では、GoogleのアカウントによるOAuth2認証（もしくはOpenID認証）にのみ対応しています。今後のバージョンで、他のサービスプロバイダーにも対応が進むと思われますが、その場合には設定方法に若干違いが出てくる可能性もあります。\nOAuth2での認証を行うには、認証プロバイダーによって発行されるIDやパスフレーズなどを入手しなければなりません。以下、Googleでの準備の流れを記述しますが、Googleの開発者向けサイトは変更が多く、ここで記述した通りではないかもしれません。この画面は、2016年1月27日に撮影したものです。また、Googleには多種多様なアカウントがありますが、以下の流れは個人で取得したGmailのアカウントを利用しています。少なくとも、Google Apps for NPOGoogle Apps for NPOで作成したアカウントでは異なる応答をすることが分かっており、そのバリエーションはINTER-Mediatorに実装済みです。その他のバリエーションは確認のしようがないため、このセクションでは演習とせずに、手順のみを示します。\n\nGoogle Developers ConsoleGoogle Developers Console（https://console.developers.google.com/）に接続します。自分自身のGoogleのアカウントで認証してください。\n最初にプロジェクトを作成します。ひとつのWebアプリケーションでひとつのプロジェクトを作成するのが適切と考えられます。ページの上部の青背景のバーの中で右寄りの位置で文字が見えている箇所があります。画面ショットでは「IM-OAuth-Test」と見えていますが、この文字列はログインした人によって変わります。ここをクリックするとドロップダウンが表示されるので、「プロジェクトの作成」を選択します。\n\n新しいプロジェクトを作成するパネルが表示されました。ここでは適当にプロジェクト名を指定して、「作成」ボタンをクリックします。\n\nダッシュボードの冒頭に新しく作られたプロジェクトが表示されました。ページ上部の青背景のバーでは、作成したプロジェクト名が見えていて、現在、そのプロジェクトが選択されていることが分かります。プロジェクト名の下の部分をクリックすると、プロジェクトIDなどを表示したり非表示にしたりができます。これらの番号は、Webアプリケーションでは使用しません。\n\n続いて「API Manager」の機能を利用します。前の手順の画面ショットのように、「Google APIを利用する」という青いボックスが見えていれば、そのボックスをクリックします。すでにある程度の設定があれば青いボックスは見えないかもしれませんが、プロジェクトの概要の下に「API」マークのアイコンが見えている場合もあります。状況によって移動方法が変わりますので、臨機応変に作成をしてください。\n\n多数のAPI名がありますが、Social APIのグループにあるにある「Google+ API」をクリックします。画面ショットの状態から、少しスクロールすると、左側にSocial APIのグループが出てきます。\n\nGoogle+ APIは最初は無効になっていますが、ページ上部の「APIを有効にする」ボタンをクリックして、Google+ APIを有効にしてください。GoogleのOAuth2の仕組みを利用するには、このAPIをオンにしておく必要があります。\n\n左側にある「認証情報」をクリックします。そして、「新しい認証情報」ボタンをクリックして認証情報を追加します。\n\nポップアップメニューでは「OAuthクライアントID」をクリックします。\n\n何も項目がないときには、同意画面の仕様を決める必要があります。「同意画面を設定」をクリックします。\n\n同意画面では、ログインしているユーザーのメールアドレスとサービス名を指定します。他はオプションになっていますが、同意を求める時のアイコンなどは後からでも指定できます。「保存」ボタンをクリックします。\n\nアプリケーションの種類では「ウェブアプリケーション」を選択します。「名前」は適当な識別名を記述します。そして、「承認済みのリダイレクトURI」の指定を行います。このURLのファイルは、Webアプリケーション側に用意しておく必要があり、Webアプリケーションの利用者のブラウザーからアクセス可能なものを指定します。このファイルの内容については、この後に説明をします。「作成」ボタンをクリックします。\n\nクライアントIDとクライアントシークレットの2つのコードが発行されました。このコードは2つともWebアプリケーションの設定として追加します。OKボタンをクリックします。\n\n認証情報に、項目が追加されました。右端のボタンをクリックすると、Webアプリケーションに必要な値を含むJSON形式のファイルがダウンロードできるので、実際に開発しているアプリケーションで指定するときにはそのファイルを利用すると良いでしょう。\n\n\n以上の手順で認証情報をGoogle側に作成します。後からの変更や参照は、API Managerに移動して、左側で「認証情報」を選択することで可能です。その時、プロジェクトをページ上部の青背景のバーで選択をしておきます。\n認証情報の一覧の右にあるアイコンからダウンロードしたファイルの内容を整形したものを次のリストに示します。params.phpファイルには次のリストのように指定をします。$oAuthProviderは「Google」、$oAuthClientIDはJSONファイルのclient_idキーの値、$oAuthClientSecretはJSONファイルのclient_secretキーの値、$oAuthRedirectはJSONファイルのredirect_urisキーの値のひとつを指定します。JSONファイルのその他の値は指定しなくて構いません。\n\n\n生成した認証情報（一部のデータは省略）\n{\n    \"web\": {\n        \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\", \n        \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\", \n        \"client_id\": \"672355285449-utu17kjmnk70k06rauro2l....\", \n        \"client_secret\": \"Dp6Rhoc6V3KMH....\", \n        \"project_id\": \"bustling-shape-120216\", \n        \"redirect_uris\": [\n            \"http://msyk.net/awosomesystem/OAuthCatcher.php\"\n        ], \n        \"token_uri\": \"https://accounts.google.com/o/oauth2/token\"\n    }\n}\n\n\nparams.phpファイルに指定するOAuth2関連の設定\n$oAuthProvider = \"Google\";\n$oAuthClientID = '672355285449-utu17kjmnk70k06rauro2l....';\n$oAuthClientSecret = 'Dp6Rhoc6V3KMH....';\n$oAuthRedirect = 'http://msyk.net/awosomesystem/OAuthCatcher.php';\n\n\nこの状態で、例えばサンプルにある認証付きのフォームのページを動作してみます。サンプルの一覧では、左側の列で「Authentication Pages」に記述されているサンプルを動作させます。ファイルは、Samples/Sample_Authにあります。この段階でのテストでは、アクセス権の設定はしないで、認証だけが有効になるようにします。つまり、定義ファイルのコンテキストにはauthenticationキーの指定はなく、第2引数（オプション指定）にauthenticationキーがあり、そのキーの値の配列では、storingキーとrealmキーだけが指定されている状態にします。\nページを開くと、通常は最初にログインパネルが表示されます。ログインパネルには次の図のように「OAuth認証」ボタンが見えており、Googleのアカウントでログインをするにはこのボタンをクリックします。ログインパネルにあるパスワード変更では、Googleなどの認証サービスプロバイダー側のパスワードの更新はできません。通常のログインのためのユーザーやパスワードを入れる枠も、不要といえば不要です。ただし、Google等の外部のプロバイダーによるアカウント以外に、authuserテーブルに追加したユーザーでも認証して利用した場合には、このままでも可能です。つまり、OAuth2対応にしても通常のログイン認証もできます。\n\nOAuth2をサポートするページでの認証パネル\n\n\n「OAuth認証」ボタンにより、ブラウザーのページは認証情報にあるauth_uriのURLを開きます。すると、認証情報の利用の許可を求められます。次の図はその例ですが、ちょっと殺風景です。しかしながら、見出しにはプロジェクト名があるので、プロジェクト名を適当な名前にしないで、きちんとWebアプリケーションを連想させる名前を付けておくべきでしょう。Google Developer ConsoleのAPI Managerにある「認証情報」の「OAuth同意画面」のところに情報を加えれば、そこに指定した情報もこの許可をリクエストするページに表示されます。つまり、利用者は自分自身の手作業で、Googleのアカウントを認証情報として利用する許可を行います。なお、複数のGoogleアカウントにログインをしている場合は、どのアカウントを利用するのかをたずねるページも表示されるので、どちらかを選択します。\n\n認証情報の利用の許可を求められる\n\n\n「許可」をすれば、認証情報にあるredirect_urisキーのURLに対して、自動的にパラメーターが付与されてリダイレクトリダイレクトされます。この「リダイレクトURL」はWebアプリケーション側で用意をします。そのための雛型的なファイルがAuth_Support/OAuthCatcher.phpAuth_Support/OAuthCatcher.phpOAuthCatcher.phpです。実際に利用する場合には、このファイルをフォルダーの外にコピーして、改変して利用するのが良いでしょう。OAuthCatcher.phpでは、リダイレクトされたときにGoogleと通信を行い、まず、認証の確認を行います。その後、Googleと通信をして、そのアカウントのさまざまな情報を得ます。その中から、氏名と電子メール、そしてユーザー名に相当する情報を得て、authuserテーブルに対してそれぞれrealname、email、usernameのフィールドに追加します。realnameやemailフィールドがない場合には、氏名を記録できる文字型のフィールドを用意します。\nusernameに相当するユーザー名は、プロバイダーから与えられる一意な番号と、プロバイダーを示すドメイン名を@で結んで指定しています。この名前は自動的に入力するだけなので、手で打ち込むことはありません。初めて認証が成功したときには、authuserテーブルにユーザーを追加します。その時に、ランダムな文字列のパスワードを生成して、それをクライアントに伝達します。クライアントはユーザー名とパスワードのハッシュを保持することで、以後、認証状態を継続します。つまり、OAuth2による認証後は、INTER-Mediatorの通常の認証処理を行います。そして、24時間は認証結果を継続します（この有効時間はいずれ変数等で指定できるようにします）。\nOAuthCatcher.phpによってGoogleと通信して、認証の確認が行われ、その後に、「OAuth認証」ボタンを押したページにリダイレクトします。通常は、認証が成り立った後となるので、ページは自動的に開きます。次の図ではページネーションコントローラー（一定範囲のレコードだけを表示する仕組み）にユーザー名が見えていますが、長い数字がGoogleが識別のために利用している数値で、@以降が認証プロバイダーを示すドメイン名です。これがユーザー名です。\n\nGoogleのアカウントで認証したページ\n\n\nここでauthuserテーブルを参照します。サンプルデータベースを利用しているのなら、サンプルの一覧ページでは左側の列に「Account Manager」と記述された部分のリンクより参照できます。次の図ではリストの最後に見えるユーザーが、Googleアカウントで認証したことで作られたアカウントです。ここには表示していませんが、realnameフィールドには筆者の名前が入っているはずです。また、どのグループにも所属していません。パスワードのハッシュ値は自動生成され、認証の確認があるごとにパスワードは更新します。\n\nauthuserに追加されたレコードを確認する\n\n\n実際にアプリケーションを作る場合には、OAuthCatcher.phpをニーズに合わせて改変します。まず最初に、冒頭の方には$pathToIM変数で、INTER-Mediator.phpファイルがあるディレクトリへのパスを記述しています。そして、認証に関わる処理をOAuthAuthクラスで実施しています。通常は「OAuth認証」ページにリダイレクトされますが、setDoRedirectメソッドを使えば、リダイレクトしません。認証を受け付けてから、後で手作業等でグループに所属させたいような場合には、リダイレクトをしないようにして、OAuthCatcher.phpに必要な案内等を記述します。OAuthAuthクラスで利用できるメソッドとプロパティは、次の表の通りです。オブジェクトを生成したときに、サーバーのURL等がセットアップされ、isActiveでその状態を確認します。そして、afterAuthメソッドで認証処理を行うのが基本的な利用方法です。OAuthCatcher.phpには基本的な流れが作られているので、例えばメール送信を追加するなどの改変が必要になるかもしれません。認証したユーザーの情報は、getUserInfoメソッドで得られた連想配列から取得できます。\n\n\nOAuthAuthクラスOAuthAuthクラスのプロパティとメソッド\n\n種別記述動作\nプロパティisActiveisActiveプロバイダの設定がなされていればtrue\nプロパティdebugModedebugModetrueならデバッグモード（リダイレクトはしない）\nメソッドsetDoRedirectsetDoRedirect(value)引数をfalseにするとリダイレクトしない（既定値はリダイレクトを実施）\nメソッドafterAuthafterAuth()認証の処理を行い、成功すればtrueを返す\nメソッドjavaScriptCodejavaScriptCode()認証が成功したときのクライアント側の処理プログラムを出力\nメソッドerrorMessageerrorMessage()エラーメッセージをカンマで区切った文字列\nメソッドgetUserInfogetUserInfo()afterAuthが成功した後に得られるアカウント情報の配列。キーはそれぞれ、username、realname、emailが指定されている\nメソッドisCreateisCreate()afterAuthが成功した後新たにユーザーレコードを作ったらtrue、既存のレコードを更新したらfalse\n\n\n-->\n\n\n"
    },
    {
        "id": 1008,
        "parent": "/ja/tutorial/",
        "path": "/ja/tutorial/proof-08.html",
        "title": "サーバーサイドでのプログラミング",
        "breadcrumb": "chapter 8",
        "body": "→Chapter 8サーバーサイドでのプログラミングこの章は、INTER-Mediator Ver.11をもとに記載しました。この章では、サーバーサイドで稼働するスクリプトのプログラミングを解説します。アプリケーションの実行のために、サーバー上で動くPHPのプログラムを記述できます。なお、PHPのプログラミングについての詳細は、PHPのマニュアルサイトや解説書等をご覧ください。→8-1サーバーサイドでの処理の追加このセクションでは、サーバーサイドでの拡張機能の概要を説明します。本来、INTER-Mediatorでは色々な意味での拡張を持つようにしてきましたが、たくさんの案件をこなす中、PHPのプログラムを利用しての拡張は以下の3パターンに集約されます。汎用的な意味での拡張は、このチュートリアルのVer.5対応版『8-3 サーバーサイドでの処理の追加』で説明をしているので、そちらをご覧ください。このバージョンのチュートリアルは、アプリケーション利用の観点からの説明とします。「→アドバイス定義クラス」による、データベース操作の前後に処理を実行するclassをスキームにしたURLを使用した「→メディア拡張クラス」の利用「→独立したスクリプト」で、データベース等へのアクセスが伴うもの　最初の「アドバイス定義クラス」は、複雑なロジックを実装することを意図したものです。あるデータベース処理の前後に、定義したプログラムを実行できます。例えば、あるテーブルのレコードを作るときに、その関連レコードについても同時に新たに作るような場合に、数行のプログラムで対処が可能です。この場合は前者のテーブル、すなわちコンテキストに対するCreateのデータベース処理に対して、レコードが問題なく作成されれば、アドバイス定義クラスとして、関連レコードの新規作成を行えば良いのです。定義したメソッドは、前者のテーブルのレコードの値が得られるので、リレーションシップを確保することもプログラム上で記述可能です。　2つ目の「メディア拡張クラス」は、「定義ファイルへのURL?media=パス等」による機能を拡張できる方法で、media=以降をclass://とすることで、特定のプログラムを実行できます。例えば、伝票のPDFを生成するようなプログラムを持つクラスを指定すれば、データベースの値を元にPDFを生成するようなことができます。また、CSV等でエクスポートするような仕組みも、このメディア拡張クラスで実現できますが、CSVエクスポートはINTER-Mediatorに汎用的なメディア拡張クラスを定義してあり、プログラムを全く記述しなくてもCSV出力は可能ですが、カスタマイズが必要であれば、汎用クラスを継承するなどしてプログラムコードの記述が必要になるかもしれません。　ここまでの2つは、INTER-Mediatorの枠内での「拡張」を行う仕組みですが、3つ目の「独立したスクリプト」は文字通り、独立したものであり、PHPである必要はありません。しかしながら、INTER-Mediatorで作っているアプリケーションの内部を調べたり、あるいはデータベース処理のサポートを受けたいのであれば、PHPで作成し、INTER-Mediatorを読み込んで利用することをお勧めします。スクリプトは、INTER-Mediatorで作ったUIから起動することも可能ですが、cron等を利用してOSの仕組みを利用して一定時間毎に稼働させるということもよく行われるでしょう。なお、UIから起動するには、そのための「アドバイス定義クラス」を作成します。「独立したスクリプト」は、アプリケーションのAPIを作るための手法でもあります。→→PHPファイルの置き場所　サーバーサイドでの拡張処理は、すべてPHP言語で記述します。そのスクリプトは、.php拡張子のファイルに記述します。PHPでは、クラスの定義をする場合にはクラス名に.phpを付与したファイル名にすることが一般的です。独自に作成するPHPファイルをどこに置くのかですが、もっとも単純な手法は、定義ファイルと同じディレクトリーに保存をしておくことで、ほとんどの場合は問題がありません。　もし、いくつかのフォルダーにまたがる定義ファイル同士で同じ拡張のためのPHPファイルを利用するような、定義ファイルと別の場所に置く必要があるとしたら、次のように対処してください。それぞれの定義ファイルの最初に、INTER-Mediator.phpファイルへの読み込みをrequire_once関数等で行っていますが、その直後に、自分で作成したPHPファイル自身の読み込みを、require_once等で行ってください。パスは、絶対パスでも、相対パスでも構いません。処理の実行前に、確実にクラスをロードするためです。　PHPでは、php.iniファイルに記述したinclude_pathの値にしたがって、パスを検索します。このパスには、「.」つまりスクリプトを稼働させた時のディレクトリーを必ず探すような設定が既定値なので、定義ファイルと同一のディレクトリーに配置するのが確実な方法です。場合によっては、php.iniファイルのinclude_pathの設定に参照するパスを追加して、作成したPHPファイルへの参照をPHPのシステムレベルで行うようにすることも検討しましょう。ただし、ファイルが数個程度なら、定義ファイルの最初にrequire_onceで読み込んでおくのが手軽です。→PHPでの拡張クラス内でのデータベース処理　いずれにしてもプログラムの中では、何らかのデータベース処理を行うことが一般的でしょう。INTER-Mediatorではフレームワークを構成するためのAPIを使って、データベース処理を構築していましたが、Ver.9の段階で、シンプルな記述でデータベース処理が可能なトレイト「Proxy_ExtSupport」を開発しましたので、データベース処理はひとつのステートメントでできるようになっています。まず、このデータベース処理拡張トレイトについて説明をしましょう。トレイトを利用する具体的な方法は、この後に説明します。まずは、どのようなメソッドが用意されているのかをまとめます。　Proxy_ExtSupportトレイトが定義されている名前空間は、INTERMediator\\DBです。利用する場合は、useを記述します。結果的に、リスト8-1-1のような記述をクラスの前に記述し、クラスの中のプロパティ等を記述するレベルに、「use Proxy_ExtSupport;」と記述することが一般的かと思われます。リスト8-1-1　Proxy_ExtSupportトレイトの利用use INTERMediator\\DB\\Proxy_ExtSupport;　Proxy_ExtSupportトレイトのメソッドについては詳細に説明しますが、まずは、単純な利用方法を、リスト8-1-2に記述しておきます。要するに、データベース処理を1ステートメントで実装できるということです。これらは、もちろん、「use Proxy_ExtSupport;」を記述したクラスのメソッド内で出てくる記述になりますが、そのクラスにデータベース処理が「追加」されるので、$thisに対して、Proxy_ExtSupportクラスのメソッドを直接記述できます。リスト8-1-2　Proxy_ExtSupportのメソッド利用例// テーブルproductがあり、主キーフィールドがproduct_idであるとする\n\n// 以下のメソッドでproductテーブルの全レコードが配列$resutlに入る\n$result = $this-&gt;dbRead(\"product\");\n\n// 以下のメソッドでproductテーブルにあるproduct_idフィールドの値が3000から3999までのレコードが配列$resutlに入る。データベースから取り出した結果はproduct_idの昇順で並べ替えられている\n$result = $this-&gt;dbRead(\"product\",\n    [[\"field\" =&gt; \"product_id\", \"operator\" =&gt; \"&gt;=\", \"value\" =&gt; 3000],\n     [\"field\" =&gt; \"product_id\", \"operator\" =&gt; \"&gt;=\", \"value\" =&gt; 3000]],\n    [[\"field\" =&gt; \"product_id\", \"direction\" =&gt; \"asc\"]]);\n\n// 以下のメソッドでproductテーブルにあるproduct_idフィールドの値が3665のレコードが配列$resutlに入る\n$result = $this-&gt;dbRead(\"product\", [\"product_id\" =&gt; 3665]);\n\n// 以下のメソッドでproductテーブルにあるproduct_idフィールドの値が3665のレコードのpriceフィールドが23000に更新され、新たなデータが入ったそのレコードの内容が配列$resutlに入る\n$result = $this-&gt;dbUpdate(\"product, [\"product_id\" =&gt; 3665]\", [\"price\" =&gt; 23000]);\n\n// 以下のメソッドでproductテーブルにレコードが作成され、product_nameフィールドは「NewOne」、priceフィールドは7000に設定される。そして、新たなデータが入ったそのレコードの内容が配列$resutlに入る\n$result = $this-&gt;dbCreate(\"product\", [\"product_name\" =&gt; \"NewOne\", \"price\" =&gt; 7000]);　メソッドの利用例のプログラムを解説します。概して、db＊という名前のメソッドがあって、最初の引数にコンテキストを指定しますが、テーブル名を直接指定したいと思うような場合がほとんどでしょう。最初の引数にテーブル名を指定した時、それ以外に特に何もしなければ、主キーフィールド名は「テーブル名_id」であると仮定して処理を進めます。そうでない主キーフィールドの場合の対処は後で説明します。そして、検索条件や並べ替えのルールは、定義ファイルに記述するのと同じ記述方法が使えます。なお、検索条件については、演算子は=と固定になりますが、「フィールド名 =&gt; 値」の形式での指定もできるようになっています。処理が成功すれば、何かしらデータを返しますが、失敗したらfalsyな値を返します。通常、返り値が真かどうか、つまり「if (!$result) {エラー処理}」的なプログラムにより、エラーに対する対処の記述が可能です。以下、これらのメソッドについて解説しておきます。$this-&gt;dbRead($target, $query = null, $sort = null, $spec = null)コンテキストに対して、指定した検索条件、並べ替えるルールに従ってデータを取り出して配列で返す。$this-&gt;'dbUpdate($target, $query = null, $data = null, $spec = null)コンテキストに対して、指定した検索条件のレコードのフィールドの値を更新し、そのレコードのデータを配列で返す。$this-&gt;dbCreate($target, $data = null, $spec = null)コンテキストに対してレコードを新規作成して指定されたフィールドの値を設定し、そのレコードのデータを配列で返す。$this-&gt;dbDelete($target, $query = null, $spec = null)コンテキストに対して、指定した検索条件に合致したレコードを削除する。成功するとtrueが返る。返り値／引数設定内容返り値処理が正しく行われれば対象のレコードが、「フィールド名 =&gt; 値」の形式の連想配列を1レコードとして、その配列で得られる。なお、dbDeleteは論理値が返る。処理に失敗すれば、falseが返る$target事前にdbInitメソッドを利用したり第4引数の指定がある場合、利用するコンテキスト名。もし、コンテキスト定義がない場合は対象のテーブル名と解釈する$query検索条件を指定する。定義ファイルのコンテキスト定義にあるqueryキーの配列と同様な形式に加えて、「フィールド名 =&gt; 値」の形式での指定も可能で、その場合は演算子は=固定となる$sort並べ替えのルールを指定する。定義ファイルのコンテキスト定義にあるsortキーの配列と同様な形式に加えて、「フィールド名 =&gt;\"(ASC|DESK)\"」形式でも指定が可能$data更新するデータ、新規レコードのフィールドに設定するデータを、「フィールド名 =&gt; 値」の配列で指定する（なお、他のAPIと同様に[\"field\" =&gt; \"lastDT\", \"value\" =&gt; $nowDT]形式の配列の配列で指定は可能だが、「フィールド名 =&gt; 値」は同等でありよりシンプルである）$specコンテキスト定義等を指定する（別途、解説あり）表8-1-1　db＊メソッドの返り値と引数　前の例では、主キーフィールドに自由度がないと感じるかと思われます。その場合は、dbReadメソッド等を呼び出す前に、setFixedKeyメソッドを呼び出します。このメソッドを使う場合は、原則として、db＊メソッドの前に毎回このメソッドを呼び出すことを基本とします。$this-&gt;setFixedKey($key)コンテキストに対するkeyキーに対する値を引数に指定したものに固定する。　例えば、INTER-Mediatorの認証システムでは、ユーザをauthuserテーブルに記録しています。このauthuserテーブルに対して、コンテキストを指定しないで中身を全部読み出すのであれば、例えば、リスト8-1-3ようなプログラムになります。リスト8-1-3　setFixedKeyメソッドを利用する場合$this-&gt;setFixedKey('id');\n$result = $this-&gt;dbRead('authuser', null, ['realname' =&gt; 'ASC']);　コンテキストを定義してデータベース処理をしたいという場合には、最初にdbInitメソッドで定義をしておく方法と、db＊メソッドの$spec引数にそのメソッドの中だけでコンテキスト定義を指定する方法があります。リスト8-1-4に例を示します。dbInitを使うとしたら、一連のプログラムにいくつもコンテキスト定義をするのなら、最初にひとつにまとめて行ってそれぞれ名前だけで指定できるというところのメリットがあるでしょう。後半の例は、テーブル名を使いたいけど、主キーフィールド名が「テーブル名_id」のルールに従っていないような場合の対処とも言えます。いずれにしても、INTER-Mediatorに精通した方なら、コンテキストを使って定義することはそれほど難しいことではないと思われるので、さまざまな設定をどこで行うかという選択肢のひとつとして、PHPのプログラムでもコンテキストの定義が使えることを知っておいて損はないでしょう。$this-&gt;dbInit($datasource = null, $options = null, $dbspec = null, $debug = null)定義ファイルで使うIM_Entryと同様な引数を指定する。コンテキストをまとめて定義するという意味があり、定義したコンテキストは再定義するまで生きている。返り値はなし。リスト8-1-4　コンテキストを記述してデータベース処理をさせたい場合$this-&gt;// これ以降で、testtable_procというコンテキストが利用できる\n$this-&gt;dbInit([\n    ['name' =&gt; \"testtable_proc\",\n     'view' =&gt; \"testtable_adding\",\n     'table' =&gt; \"testtable\",\n     'key' =&gt; 'id']\n    ]);\n$result = $this-&gt;dbCreate(\"testtable_proc\")\n\n// testtableテーブルにレコードを作成するが、その時の設定は、3つ目の$spec引数に指定したものが利用される\n$result = $this-&gt;dbCreate(\"testtable\",\n    ['vc1' =&gt; 'a', 'vc2' =&gt; 'b',],\n    [['name' =&gt; \"testtable\", 'key' =&gt; 'id']]);　PDOのデータベースを利用する場合には、トランザクションにも対応しています。以下のメソッドを利用できます。$this-&gt;beginTransaction()トランザクションを開始する$this-&gt;rollbackTransaction()トランザクションを終了し、開始前の状態に戻す$this-&gt;commitTransaction()トランザクションを終了し、ここまでのデータベース処理を実際に記録する→8-2アドバイス定義クラスの作成このセクションでは、アドバイス定義クラスについての説明と、利用例を示します。PHP言語によるサーバー拡張を扱ったサンプルの解説を行うため、定義ファイルとページファイルというエディターを用意しているファイルだけでなく、拡張のプログラムファイルも作成する必要があります。そのため、VMでの開発作業はPHP経験者でないと難しい面もあるかと思います。一方、PHP経験者の方なら、結果だけを見ることで、開発方法の実例になると思われます。以上の理由で演習手順ではなくサンプルとしての解説を行います。→→アドバイス定義クラスの作成　「アドバイス」とは、アスペクト指向プログラミングにおける振る舞いを示す用語です。オブジェクト指向にアスペクト指向を適用した場合、複数のクラスに対して横断的な仕組みが存在する場合、それを「アスペクト」として認識します。アスペクトとして定義されたモジュールには、アドバイス（例えばメソッド）として実装されるものがあります。そして、クラスの中では、「ジョイントポイント」としてアドバイスを織り込む（「ウィーブする」と表現される）位置を指定します。この手法では、つまりは既存のクラスの中で、特定の振る舞いを注入することになります。もちろん、INTER-Mediatorはオブジェクト指向的な開発環境ではなく、アスペクト指向的な要素も薄いのですが、こうした動作に近い動きをする拡張機能を「アドバイス定義クラス」と命名しました。　アドバイス定義クラスは、簡単に言えば、データベース処理の前後に、メソッドの実行ができるものです。その意味では、→フィルタ的な動作と思っていただいて構いません。データベース処理の前後に追加されるでは、Proxy_ExtSupportトレイトにより、データベースへの処理が記述可能です。また、検索条件等はもちろん、JavaScriptで追加した条件や、あるいはコンテキストに定義されたさまざまな設定、更新や新規レコード時のフィールドのデータの取得や設定などもできます。INTER-Mediatorの標準機能だけでは実現できないような複雑なデータ処理を記述する、すなわち→→ロジックを追加するような用途にアドバイス定義クラスは利用できます。　前処理では、コンテキストで定義したデータベース処理を行う前であり、実際に行うかどうかの判定が複雑な場合での対処も記述できます。前処理の返り値に応じて、コンテキスト定義の処理をキャンセルすることも可能です。後処理では、コンテキスト定義に従ったデータベース処理の結果を、レコードを連想配列とした配列で得られます。その配列を自由に変更して構いませんが、何らかの同一形式、つまり、連想配列の配列を返り値として返す必要があります。その配列が、クライアントに送り届けられます。SQLデータベースの場合は集計処理を記述する方法もありますが、場合によっては生データを取り出して後処理で集計処理をするということも考えられます。→アドバイス定義クラスで利用するインターフェース　アドバイス定義クラスで利用する→インターフェースを以下のように定義しています。このインターフェースを使わなくてもメソッド呼び出しは行われますが、インターフェースを利用することで、メソッドの定義段階で、名前がちょっと間違っていたと言ったようなことが開発ツールによって検出できるので、インターフェースを使うことを基本とします。インターフェース定義はリスト8-2-1に示し、クラスの定義例は、その後に紹介します。リスト8-2-1　アドバイス定義クラスで利用できるインターフェース//データベースから読み出す処理の前処理のためのメソッド\ninterface INTERMediator\\DB\\Extending\\BeforeRead {\n    public function →doBeforeReadFromDB();\n}\n\n//データベースから読み出す処理の後処理のためのメソッド\ninterface INTERMediator\\DB\\Extending\\AfterRead {\n    public function →doAfterReadFromDB($result);\n}\n\n//データベースから読み出す処理の後処理のためのメソッド（ページネーションを行うとき）\ninterface INTERMediator\\DB\\Extending\\AfterRead_WithNavigation {\n    public function doAfterReadFromDB($result);\n    public function →countQueryResult();\n    public function →getTotalCount();\n}\n\n//データベースを更新する処理の前処理のためのメソッド\ninterface INTERMediator\\DB\\Extending\\BeforeUpdate {\n    public function →doBeforeUpdateDB();\n}\n\n//データベースを更新する処理の後処理のためのメソッド\ninterface INTERMediator\\DB\\Extending\\AfterUpdate {\n    public function →doAfterUpdateToDB($result);\n}\n\n//データベースに新規レコードを作成する処理の前処理のためのメソッド\ninterface INTERMediator\\DB\\Extending\\BeforeCreate {\n    public function →doBeforeCreateToDB();\n}\n\n//データベースに新規レコードを作成する処理の後処理のためのメソッド\ninterface INTERMediator\\DB\\Extending\\AfterCreate {\n    public function →doAfterCreateToDB($result);\n}\n\n//データベースからレコード削除する処理の前処理のためのメソッド\ninterface INTERMediator\\DB\\Extending\\BeforeDelete {\n    public function →doBeforeDeleteFromDB();\n}\n\n//データベースからレコード削除する処理の後処理のためのメソッド\ninterface INTERMediator\\DB\\Extending\\AfterDelete {\n    public function →doAfterDeleteFromDB($result);\n}\n\n//データベースでレコードの複製処理を行う前処理のためのメソッド\ninterface INTERMediator\\DB\\Extending\\BeforeCopy {\n    public function →doBeforeCopyInDB();\n}\n\n//データベースでレコードの複製処理を行った後処理のためのメソッド\ninterface INTERMediator\\DB\\Extending\\AfterCopy {\n    public function →doAfterCopyInDB($result);\n}→コンテキスト定義でクラス名を指定する　基本的には、いずれのインターフェースも、メソッドがひとつだけです。ただし、Extending_Interface_AfterRead_WithNavigationについては3つのメソッドの実装が必要になります。アドバイス定義クラスで、レコード数が変わってしまうような処理をした場合、そのコンテキストをページネーションに結びつけていると、ページネーションのコントールに対して、アドバイス定義クラスによる変更前の現在のレコード数や全レコード数が供給されます。これらの値を、アドバイス定義クラスのメソッドで修正した後の現在のレコード数や全レコード数をクライアントに供給できるように、それらの結果を返すメソッドも実装してください。　ここであるコンテキスト「salesitems」に対して、前処理と後処理を追加したいとします。その処理を記述するクラス名は、自分で命名します。もちろん、PHPのクラス名になり得るものを指定します。ここでは、「AdditionalProccess」とします。このクラス名は、コンテキスト定義にextending-classキーで記述する必要があります。したがって、定義ファイルでのコンテキスト定義は、例えば、リスト8-2-2のようになります。リスト8-2-2　アドバイス定義クラス名を指定したコンテキストの例&lt;?php\nrequire_once(\"pathTo/INTER-Mediator.php\");\n\nIM_Entry(\n    array(\n        array(\n            \"name\" =&gt; \"salesitems\",\n            \"view\" =&gt; \"items\",\n            \"query\" =&gt; array(array(\"field\" =&gt; \"year\", \"operator\" =&gt; \"=\", \"value\" =&gt; \"2016\"),),\n            \"extending-class\" =&gt; \"AdditionalProccess\",\n        ),→アドバイス定義クラスのPHPでの定義　そして、アドバイス定義クラスを、定義ファイルと同一のディレクトリーに作ります。ファイル名は、クラス名に.phpをつけた「AdditionalProccess.php」にします。こうすれば、ファイルを自動的に検出できるようにINTER-Mediatorではクラスローダーが機能します。したがって、アドバイス定義クラスを定義ファイル内でrequre_once等で読み出す必要は通常はないと思われます。AdditionalProccessクラスは、リスト8-2-3のように定義します。まず、classによってクラスを定義するとき、implementsで使用するメソッドのインターフェースを列挙します。また、UseSharedObjectsクラスを継承します。そして、それらのインターフェースで定義されている2つのメソッドを実装します。ここでは、サンプルなので、何も処理をしないものを記述しますが、実際にはメソッド内にはさまざまな記述がなされるでしょう。データベース処理前後に行いたい作業を、それぞれのメソッドに記述します。afterで始まる後処理のメソッドでは、$resultには検索結果のレコードが、連想配列の配列で返されます。アドバイス定義クラスがないときと同一の動きをさせるには、$result変数をreturnで返すだけでOKです。なお、これらのメソッド内でデータベース処理をすることが一般的でしょうから、Proxy_ExtSupportトレイトもクラス内部でuseで宣言しておきます。リスト8-2-3　アドバイス定義クラスの作成例&lt;?php\n\nuse INTERMediator\\DB\\UseSharedObjects;\nuse INTERMediator\\DB\\Proxy_ExtSupport;\nuse INTERMediator\\DB\\Extending\\BeforeRead;\nuse INTERMediator\\DB\\Extending\\AfterRead;\n\nclass AdditionalProccess extends UseSharedObjects\n    implements BeforeRead, AfterRead\n{\n    use Proxy_ExtSupport;\n    \n    public function doBeforeReadFromDB()  {\n    }\n\n    public function doAfterReadFromDB($result)  {\n         return $result;\n    }\n}　beforeで始まる前処理のメソッドは、返り値に応じてエラー処理などができるようになっています。返り値がない場合と\"\"が返された場合は、エラーがなかったものとしてそのままINTER-Mediator側のデータベース処理に移行します。一方、\"\"ではない文字列が返された場合、その文字列を警告として記録するとともに、エラーが発生したと解釈して、INTER-Mediatorのデータベース処理には移行しません。また、falseが返された場合もエラーとしてその先の処理をキャンセルします。もちろん、これらの場合は後処理も行いません。ブラウザ側では、その後に返された文字列がダイアログボックスで表示されるのが一般的なインターフェースです。→INTER-Mediatorの内部クラスとデータベース処理　ここで、INTER-Mediatorの内部でデータベース処理をしているクラスの概要を説明します。その知識をもとに、アドバイス定義クラスでのプログラミングが必要になる場合があると想定されるからです。　INTER-Mediator内部のデータベース処理はかなり複雑ですが、階層化はされています。中心的なものは、データベース利用のアーキテクチャごとに用意されたクラスで、ここでは「データベースクラス」と呼ぶことにします。総称としてはINTERMediator\\DB\\DBClassが抽象クラスとして定義されています。具体的なクラスは表8-2-1のようなクラスが定義されています。この種のクラスを新たに定義するという拡張も考えられますが、かなり多数のメソッドの実装が必要なので現実的ではないでしょう。むしろ、そういうことになった場合は、INTER-Mediator内部で新たなデータベースクラスの定義をすべきです。プロパティ名dbClassキーでの指定値利用アーキテクチャINTERMediator\\DB\\PDOPDOPHPのPDOINTERMediator\\DB\\FileMaker_FXFileMaker_FXFX.phpつまりFileMaker CWPのXML共有INTERMediator\\DB\\FileMaker_DataAPIFileMaker_DataAPIFileMaker Data APIINTERMediator\\DB\\TextFileTextFileテキストファイル（ただし読み出し処理のみ）INTERMediator\\DB\\NullDBNullDBs（何もしない）表8-2-1　INTER-Mediatorで定義されたデータベースクラス　内部ではさらに、データベースエンジンごとに異なる処理を実装するための仕組みもありますが、アプリケーション作成においては特にそこまで調べる必要がないので、本書では省略します。　データベースクラス以外に、INTER-Mediatorでは、INTERMediator\\DB\\Proxyというクラスが用意されています。クライアントからのリクエストは、Proxyが受け取り、使用するデータベースに応じてデータベースクラスに引き渡される形になります。Proxyではパラメータの処理や認証処理の主要部分などが組み込まれています。以前のバージョンでは、独自にデータベース処理を行う場合にはProxyを生成してメソッドを呼び出すことをしていましたが、Proxy_ExtSupportトレイトがあるので、現状ではProxyクラスのインスタンスを生成する必要はまずないと考えます。なお、Proxy_ExtSupportトレイトは独自にProxyを生成するので、アドバイス定義クラス内部でのみ使うProxyが背後で自動的に生成されていると考えてください。どうしてもアドバイス定義クラスでProxyを使いたいという方は、自分で生成ということもありますが、以下のように、Proxy_ExtSupportトレイトで生成したProxyの取得もできるようにしました。$this-&gt;getExtProxy()Proxy_ExtSupportトレイト内部で処理するために生成したProxyオブジェクトのインスタンスを取得する。　アドバイス定義クラスを定義するときにUseSharedObjectsを継承すると、INTER-Mediator内部のさまざまな情報が取得できます。表8-2-2に示すようなプロパティ参照を利用して、データベースクラス、Logger、Settingsクラスのオブジェクトへの参照を、アドバイス定義クラス内からできるようになります。クエリーを行うときにコンテキストなどで指定した検索条件を取り出すなどの作業は、後述するSettingsクラスのメソッドで行えます。プロパティ名クラス内からの参照クラス→dbClass$this-&gt;dbClassINTERMediator\\DB\\*→logger$this-&gt;loggerINTERMediator\\DB\\Logger→dbSettings$this-&gt;dbSettingsINTERMediator\\DB\\Settings表8-2-2　DB_Proxyクラスやアドバイス定義クラスで利用できるプロパティ　アドバイス定義クラスの定義において、UseSharedObjectsクラスを継承しなくてもかまいませんが、その時はデータベースの処理結果を配列でもらって処理する程度しかできず、定義ファイルの設定やクライアントのJavaScriptで追加された検索条件等へのアクセスはやりにくくなります。これらは、Settingsクラスのメソッドで取得できるので、さまざまな処理を組み込みやすくするためにもUseSharedObjectsクラスを継承しておくのが原則と考えてよいでしょう。　サーバサイドで利用可能なメソッドのうち、アプリケーション開発でよく利用されるものを本書では紹介していますが、より多くのAPIを知りたい方は、マニュアルの『サーバーサイドの拡張』を参照してください。もちろん、ソースコードも公開しているので、ソースを読むのも情報をえるひとつの手段です。→→ログ作成の機能　→エラーメッセージやデバッグメッセージは、サーバー側ではINTERMediator\\DB\\Loggerクラスで管理しています。シングルトンで管理しているため、Proxyを借りに複数利用したとしても、ログ自体は一本化されており、処理終了後にまとめてブラウザのコンソール等で確認ができるようになっています。以下のメソッドを使うことで、追加や参照が可能です。処理の途中でエラーがあるかどうかについては、getErrorMessagesメソッドが返す配列の要素数をcount関数で調べることで分かります。もちろん、$this-&gt;loggerという参照方法もありますが、シングルトンなのインスタンスを取得して処理をしても構いません。Logger::getInstance()Loggerクラスのシングルトンインスタンスを取得する。Logger-&gt;→setDebugMessage($str, $level)引数$strに指定した文字列を、引数$levelに指定したレベルでの→デバッグメッセージとして記録する。レベルは1ないしは2のみをサポートし、引数$levelを省略すると1になる。Logger-&gt;→setWarningMessage($str)引数$strに指定した文字列を、→警告メッセージとして記録する。Logger-&gt;→setErrorMessage($str)引数$strに指定した文字列を、→エラーメッセージとして記録する。Logger-&gt;→getDebugMessages()記録されたデバッグメッセージを要素として含む配列を返す。Logger-&gt;→getErrorMessages()記録された警告メッセージを要素として含む配列を返す。Logger-&gt;→getErrorMessages()記録されたエラーメッセージを要素として含む配列を返す。Logger-&gt;→getErrorMessages()記録されたエラー/警告/デバッグメッセージのいずれもクリアする。→コンテキストの指定と基本情報取得のAPI　コンテキストおよびそれに関連したさまざまな設定のためのAPIが→Settingsクラスとして利用可能です。アドバイス定義クラスを作成する場合、以下に示すメソッドのうちゲッターメソッドを使うことがほとんどかと思われます。Settings-&gt;→getDataSourceDefinition($dataSourceName)引数に指定した文字列をnameキーの値として持つコンテキスト定義の連想配列を返す。Settings-&gt;→getDataSourceTargetArray()現在、選択されている→→コンテキストの定義内容を連想配列で返す。Settings-&gt;→getDataSourceName()現在、選択されている→コンテキストのnameキーに対する値。Settings-&gt;→getEntityForRetrieve()クエリー処理に利用するエンティティ名を返す。つまり、viewキーの値が指定されていればその値、指定されていない場合にはnameキーの値が返される。Settings-&gt;→getEntityForUpdate()更新処理に利用するエンティティ名を返す。つまり、tableキーの値が指定されていればその値、指定されていない場合にはnameキーの値が返される。Settings-&gt;→setStart($st)検索結果の最初のいくつ目から結果として取り出すかを、引数の数値で指定する。クライアントのINTERMediator.startFromの値が自動的に設定される。Settings-&gt;→getStart()検索結果の最初のいくつ目から結果として取り出すかが得られる。Settings-&gt;→setRecordCount($sk)検索結果の中から、最大でいくつのレコードを取り出すかを引数の数値で指定する。コンテキストのrecordsキーの値や、クライアントINTERMediator.pageSizeの値など、すでに決まっている値が指定される。Settings-&gt;→getRecordCount()検索結果の中から、最大でいくつのレコードを取り出すかが得られる。→IM_Entry関数の呼び出し引数の設定と取り出し　アドバイス定義関数の中で、定義ファイルに指定した内容をそのまま利用したいときのために、以下のようなそれぞれの引数の記録および取り出しのメソッドを定義しています。Settings-&gt;→getDataSource()定義ファイルのIM_Entry関数の第1引数の値が返される。Settings-&gt;→getOptions()定義ファイルのIM_Entry関数の第2引数の値が返される。Settings-&gt;→getDbSpec()定義ファイルのIM_Entry関数の第3引数の値が返される。→→検索条件や→設定値などフィールドと値に関するAPI　Settingsには「フィールドの配列」と「値の配列」を保持するプロパティをそれぞれ持ちます。フィールドと値が対になる場合には要素数はそれぞれ同数になりますが、フィールドだけを指定した処理も想定して連想配列としないで、別々の配列を用意しています。その配列への設定や取り出しのメソッドが以下のように用意されています。　オペレーションが「read」の場合は、リピーター内にあるターゲット指定のフィールドがフィールドの配列に設定され、値の配列には何も設定されません。オペレーションが「update」の場合は、更新するフィールドとその値が、それぞれフィールドの配列と値の配列に設定されます。オペレーションが「delete」の場合はフィールドの配列も値の配列も使用しません。オペレーションが「create」の時は、新しいレコードの初期値の指定をフィールドの配列と値の配列で設定されます。通常は、コンテキストのdefault-valuesキーの値と、INTERMediator.additionalFieldValueOnNewRecordプロパティの値の両方が、フィールドの配列と値の配列に設定されます。オペレーションが「copy」の場合にはフィールドの配列も値の配列も使われません。　これらのメソッドは、アドバイス定義クラスでのデータベース処理前に呼び出されるメソッド、例えばレコード作成の場合のdoBeforeCreateToDBメソッド等で利用できます。新規作成されたレコードのフィールドの値を、PHPのプログラムで指定できるので、単にユーザーインターフェースから入力された値を初期値として利用するだけでなく、Web APIを呼び出して得られた値をあるフィールドの初期値として指定するようなことも可能です。Settings-&gt;→setFieldsRequired($fieldsRequired)フィールドの配列として、引数の配列を設定する。このメソッドは、配列そのものを設定するが、addValueWithField、addTargetFieldメソッドにより、フィールド一覧を管理する配列へ要素が追加される。Settings-&gt;→getFieldsRequired()フィールドの配列を返す。Settings-&gt;→addTargetField($field)フィールドの配列の要素として、引数に指定した文字列を追加する。Settings-&gt;→getFieldOfIndex($ix)フィールドの配列から、引数に指定した番号の要素を返す。Settings-&gt;→setValue($values)値の配列として、引数の配列を設定する。Settings-&gt;→getValue()値の配列を返す。Settings-&gt;→addValue($value)値の配列の要素として、引数に指定した文字列を追加する。Settings-&gt;→addValueWithField($field, $value)フィールドの配列および値の配列の要素として、引数に指定した文字列をそれぞれ追加する。Settings-&gt;→getValuesWithFields()フィールドの配列にある値をキー、そのキーに対する値を要素にした連想配列を返す。Settings-&gt;→getValueOfField($targetField)引数に指定したフィールド名をフィールドの配列の何番目なのかを判別し、値の配列の同じ番号の要素を返す。つまり、フィールド名に対応した値を返す。　以下のメソッドは、Settingsオブジェクトが持つ「→外部キー値の配列」を利用するためのものです。この外部キー値の配列は、オペレーションがreadの時にだけ使用され、親子関係にあるエンクロージャー／リピーターのセットを発見したとき、子のエンクロージャーに対するデータベースアクセス時において、その外部キーに対応する親のリピーターにあるフィールド名と値を記録します。Settings-&gt;→setForeignFieldAndValue($foreignFieldAndValue)引数を外部キーの値を保持する配列に指定する。引数は、field、valueをキーとした連想配列の配列である必要がある。Settings-&gt;→getForeignFieldAndValue()外部キーの値を保持する配列を返す。返される値は、field、valueをキーとした連想配列の配列。Settings-&gt;→addForeignValue($field, $value)引数に指定したフィールド名と値を、外部キーの値を保持する配列に追加する。Settings-&gt;→getForeignKeysValue($targetField)外部キーの値を保持する配列から、引数に指定したフィールドに対する値を返す。ない場合はnullが返る。　以下のメソッドは、Settingsオブジェクトが持つ「→検索条件の配列」に対するものです。createを除くオペレーションでは、コンテキストのqueryキーによる配列の設定が必ず適用されます。これらは、検索条件の配列には入力されず、データベースクラスが実際のデータベース処理を行うときにコンテキスト定義から取り出して検索条件として設定されます。オペレーションがreadの場合は、INTERMediator.additionalConditionプロパティの内容がこの配列に設定されます。オペレーションがreadやupdate、delete、copyの場合は、JavaScriptのAPIで追加した検索条件もこの配列に設定されます。オペレーションがcreateの場合はこの設定は利用されません。Settings-&gt;→addExtraCriteria($field, $operator, $value)追加的な検索条件を保持する配列に、引数の3つの要素を持つ連想配列として追加する。Settings-&gt;→getExtraCriteria()追加的な検索条件を保持する配列を返す。Settings-&gt;→unsetExtraCriteria($index)追加的な検索条件を保持する配列の中にある引数に指定したインデックスの要素を削除する。Settings-&gt;→getCriteriaValue($targetField)追加的な検索条件を保持する配列から、引数に指定した文字列をfieldキーの値として持つ最初の要素を特定し、その要素のvalueキーの値を返す。Settings-&gt;→getCriteriaOperator($targetField)追加的な検索条件を保持する配列から、引数に指定した文字列をfieldキーの値として持つ最初の要素を特定し、その要素のoperatorキーの値を返す。　FileMaker Serverを使う場合に、データベース処理前に→グローバルフィールドの設定をするとき、コンテキストのglobalキーを使用できますが、その値は実行時に動的に設定することができません。そこで、INTERMediator.additionalConditionプロパティに指定した上でアドバイス定義クラスのデータベース処理前のメソッドにおいて、getCriteriaValueを利用して検索条件から値を取り出し、setGlobalInContextでグローバルフィールドの設定に値を追加します。unsetExtraCriteriaを利用して追加の検索条件から設定値を取り除く必要があります。Settings-&gt;→setGlobalInContext($contextName, $operation, $field, $value)引数に指定したコンテキストに、残りの引数で指定した設定内容を持つglobalキーの連想配列を追加する。もちろん、FileMaker Serverのみで意味のある機能である。　楽観的ロックにおいては、レコードの特定を主キーだけを使い、他の条件を無視する必要があるかもしれません。他のユーザーがフィールドの値を変更して検索条件に合わない状態になっているとします。コンテキストの検索条件をすべて適用すると、レコードがヒットせず、今現在のフィールドの値を取得できません。そのために、検索においては主キーのみを使うという動作をサポートしています。通常は自動的に設定されますが、以下のメソッドで意図的に設定したり、あるいは現在の設定が分かります。Settings-&gt;→setPrimaryKeyOnly($primaryKeyOnly)Settings-&gt;→getPrimaryKeyOnly()検索条件の中から、主キー（コンテキストのkeyキー）で指定されたものだけを利用する設定とその状態の取得。なお、主キーのみを利用する検索は、データベースの更新前に楽観的ロックの仕組みを利用して、現在の値を取り出す場合に利用している。　データベースへのオペレーションがreadのとき、INTERMediator.→additionalSortKeyプロパティに指定したソートフィールドの昇順／降順の設定は以下のメソッドを使用して、Settingsオブジェクトに記録されます。なお、コンテキストに指定したsortキーによるソート条件は、データベースクラスで適用されます。値を得たい場合は、コンテキストの定義を取り出して読み出せばよいでしょう。Settings-&gt;→addExtraSortKey($field, $direction)追加のソート条件を記録した配列に、引数にしていたフィールドと基準（昇順ないしは降順）を追加する。Settings-&gt;→getExtraSortKey()追加のソート条件を記録した配列を得る。　オペレーションがcopyの時で、コピーするレコードを含むコンテキストに対してrelationキーによって関連レコードが定義されているときに関連レコードも含めてコピーしたいときがあります。その場合は、関連レコードのコンテキストと検索条件を以下のAPIで記録します。Settings-&gt;→addAssociated($name, $field, $value)レコードのコピーにおいて、関連するコンテキストに対する設定を追加する。Settings-&gt;→getAssociated()レコードのコピーにおいて使用される関連するコンテキストに対する配列を得る。→→データベース設定に関連するAPI　以下のSettingsクラスのメソッドは、データベース接続の設定、すなわちIM_Entry関数の3つ目の引数の配列に指定するデータの設定と取得ができるものです。メソッド名と配列のキーを対応付けているので、メソッド名のみの紹介で意味は理解できるので、メソッド名の紹介のみとします。ここで、ゲッターメソッドは、IM_Entryの引数の値ではなく、もし、params.phpファイル、あるいは現在のコンテキストに指定がある場合に、その値が設定されます。つまり、実際にデータベース処理で使われるサーバーのホスト名やデータベース名がゲッターから得られることになります。Settings-&gt;→setDbSpecServer($str)Settings-&gt;→getDbSpecServer()Settings-&gt;→setDbSpecPort($str)Settings-&gt;→getDbSpecPort()Settings-&gt;→setDbSpecUser($str)Settings-&gt;→getDbSpecUser()Settings-&gt;→setDbSpecPassword($str)Settings-&gt;→getDbSpecPassword()Settings-&gt;→setDbSpecDataType($str)Settings-&gt;→getDbSpecDataType()Settings-&gt;→setDbSpecDatabase($str)Settings-&gt;→getDbSpecDatabase()Settings-&gt;→setDbSpecProtocol($str)Settings-&gt;→getDbSpecProtocol()Settings-&gt;→setDbSpecDSN($str)Settings-&gt;→getDbSpecDSN()Settings-&gt;→setDbSpecOption($str)Settings-&gt;→getDbSpecOption()データベース処理に関する設定を行ったり取り出したりするメソッド。→認証やアクセス権に関わるAPI　→ログインしているユーザー名を得たり、認証に関するさまざまな設定を取得したい場合には、以下のメソッドを利用します。Settings-&gt;→getCurrentUser()クライアントから申告されたユーザー名を取得する。アドバイス定義クラスの処理を進める段階ではすでに認証の処理が行われており、ユーザ名とチャレンジが違っていれば、認証は成立しないので、チャレンジを送付したユーザと考えて良い。Settings-&gt;→getAuthenticationItem($key)IM_Entry関数の第2引数（オプション設定）のauthenticationキーに対する値に対し、さらに引数の文字列のキーの値を取り出す。もし、引数に与えたキーに対する値が定義されていない場合で、引数がテーブル名の場合には、規定のテーブル名を返す。あるいは認証継続時間の場合には既定値として8時間が返される。→[利用例] レコードを作成時に別のテーブルにも関連レコードを作成する　一般的な伝票では、伝票と明細が1対多の関係になっています。「伝票を作成するけど明細は作成しない」ということはまずなく、普通はひとつ以上の明細が存在します。であれば、伝票を作成時に明細をひとつ、あるいは複数個作成してしまうということが考えられます。こうした処理はアドバイス定義クラスで明細テーブル側のレコードを作成することができます。　まず、テーブル構成ですが、伝票側をaccountテーブル、明細側をdetailテーブルとして、自動連番が入力されるフィールドがそれぞれaccount_idとdetail_idがあり、いずれもサロゲートキーによる主キーとなっています。それぞれが1対多の関係にするために、detail側には、外部キーとして対応するaccountテーブルのレコードを特定するためのaccount_idフィールドが用意されています。伝票の一覧があり、リスト8-2-4のようにコンテキストが定義されているとします。ここでは、repeat-controlでconfirm-insertが設定されているので、ページ上のページネーションの部分にbutton-namesで定義した「新規会計項目」ボタンがあり、これをクリックすることで、accountテーブルにレコードが作成されるものとします。加えて、extending-class設定にCreateFirstItemが指定されています。リスト8-2-4　アドバイス定義クラスを利用したコンテキスト定義require_once './vendor/inter-mediator/inter-mediator/INTER-Mediator.php';\n\nIM_Entry(\n    [\n        [\n            'name' =&gt; 'account_list',\n            'table' =&gt; 'account',\n            'key' =&gt; 'account_id',\n            'default-values' =&gt; [....],\n            'repeat-control' =&gt; 'confirm-insert confirm-delete confirm-copy',\n            'button-names' =&gt; ['insert' =&gt; '新規会計項目作成'],\n            'calculation' =&gt; [....],\n            'numeric-fields' =&gt; ['item_total'],\n            'extending-class' =&gt; 'CreateFirstItem',\n            :\n        ], ... 　CreateFirstItemクラスは、定義ファイルと同じディレクトリ階層に、CreateFirstItem.phpという名前で作成しました。内容はリスト8-2-5のようになっていますが、AfterCreateインターフェースを実装しているように、レコード作成時に呼び出されます。レコードが作成された後にdoAfterCreateToDBメソッドが呼び出され、引数$resultには作成されたレコードが入力されています。通常は1レコードだけが作られるので、$recordは、フィールド名と値の連想配列がひとつだけ入っている配列になります。メソッド内では、dbCreateメソッドで、detailテーブルにレコードを作成しています。第2引数の配列で、新規作成されるレコードのフィールドの値を指定していますが、ここでは外部キーのaccount_idに、作成されたレコードの配列$recordから値を取り出して設定しています。この入力がないと、detail側に関連するレコードとしてレコードは作成されません。unit_priceとqtyは0が設定されており、ここでレコードの初期値が記述できることがわかります。引数をそのまま返しています。ここでは、このメソッドが呼び出された時には失敗しない前提となっていますが、$recordの要素数が1であるかどうかなどの検証は入れたほうが良いでしょう。なお、UseSharedObjectsを継承していますが、それに関係する仕組みはここでは使っていないので、継承は記述しなくても大丈夫です。リスト8-2-5　関連テーブルにレコードを作成するアドバイス定義クラスuse \\INTERMediator\\DB\\UseSharedObjects;\nuse \\INTERMediator\\DB\\Extending\\AfterCreate;\nuse INTERMediator\\DB\\Proxy_ExtSupport;\n\nclass CreateFirstItem extends UseSharedObjects implements AfterCreate\n{\n    use Proxy_ExtSupport;\n\n    public function doAfterCreateToDB($result)\n    {\n        $this-&gt;dbCreate('detail',\n            ['account_id' =&gt; $result[0]['account_id'], \"unit_price\" =&gt; 0, \"qty\" =&gt; 0,]);\n        return $result;\n    }\n}→[利用例] アドバイス定義クラスで→集計処理を行う　→アドバイス定義クラスは、データベース処理の前後に割り込むことで、サーバー側の動作をカスタマイズすることができます。もっとも理解しやすい例は、コンテキストで指定したレコードを取り出した後、そのレコード群をもとに集計処理を組み込むといったことです。しかしながら、MySQLなどのPDOを使ったデータベースについては、INTER-Mediator Ver.5.3より、aggregaton-selectキー等で、コンテキストに集計を行うSQLの生成を行うための定義を追加することができるようになりましたので、SQLで記述可能な集計はむしろそちらを利用した方がパフォーマンスが高くなります。一方、FileMaker Serverの場合、レイアウトによる集計機能はありますが、小計の機能をカスタムWebアクセス側では利用できないなどの制約があるので、集計やレコード間を跨ぐようなデータ処理をした結果をページに出したいような場合には、アドバイス定義クラスで検索後のデータを変更するプログラムを記述したほうが良い場合もあります。　サンプルプログラムのひとつで、アドバイス定義クラスを利用しています。アドバイス定義クラスにより集計処理をしているコンテキストもありますが、さらにレコードの生成をアドバイス定義クラスで行うといったことも行っています。演習環境を利用している場合には、ブラウザーで「http://localhost:9080」に接続し、そこにある「サンプルプログラム」のリンクをクリックして、サンプルプログラムの一覧を表示します。そして、「Server-side Extension」の行の「show(setting the class)」をクリックすると、図8-2-1のようにデータを集計したページが表示されます。図8-2-1　アドバイス定義クラスを使ったサンプルプログラムの動作結果　このサンプルのページファイルはこちら、定義ファイルはこちらから参照できます。ページファイルは、TABLEタグによる表の中に別のTABLEタグの表がある形式になっています。外側はeverymonthという名前のコンテキストで、内側は、summary1、summary2、dataというコンテキストが展開されていることを、ページファイルよりまずは読み取ってください。　リスト8-2-6は定義ファイルにあるeverymonthコンテキストの定義内容です。このコンテキストにより、連続した年月日のレコードを作成しています。viewキーによりitem_masterテーブルから検索を行っていますが、queryによる検索条件やrecordsによるレコード数は、単になるべく短く、しかしながらエラーなく検索が行われるようにするための設定であり、取り出すデータとは関係ありません。ここでのポイントになるのは、extending-classキーによってYearMonthGenクラスを指定していることです。リスト8-2-6　everymonthコンテキストの定義array(\n    'name' =&gt; 'everymonth',\n    'view' =&gt; 'item_master',\n    'query' =&gt; array(array('field' =&gt; 'id', 'operator' =&gt; '=', 'value' =&gt; '1'),),\n    'records' =&gt; 1,\n    'extending-class' =&gt; \"YearMonthGen\",\n),　同じフォルダーに、YearMonthGen.phpというクラス名と同じファイル名の.phpファイルがあります。リスト8-2-7がそのクラス定義の部分です（ファイル全体はこちらから参照できます）。アドバイスはデータベースの読み出し後に処理をするので、クラスにはインターフェースのExtending_Interface_AfterReadをインプリメントしておき、doAfterReadFromDBを定義します。引数の$resultは、メソッドの最初の行で空の配列を代入しているように、実際にはデータベースから取り出された結果は一切利用をしません。最後には、$resultを返していますが、プログラムを見ると、12のレコードを持つ配列が返されます。配列のひとつの要素は連想配列になっており、JSON記述で示すと {\"year\": 2010, \"month\": 1, \"startdt\": \"2010-01-01 00:00:00\", \"enddt\": \"2010-02-01 00:00:00\"} といった配列になります。つまり、yearとmonthが年と月、そして、日付やタイムスタンプのデータがあれば、startdt以上でenddtより小さいのであれば、yearとmonthで示される年月に含まれるデータであると判断するために利用することができます。リスト8-2-7　アドバイス定義クラスの内容use INTERMediator\\DB\\Extending\\AfterRead;\n\nclass YearMonthGen implements AfterRead\n{\n    public function →doAfterReadFromDB($result)\n    {\n        $result = array();\n        $year = 2010;\n        for ($month = 1; $month &lt; 13; $month++) {\n            $startDate = new DateTime(\"{$year}-{$month}-1 00:00:00\");\n            $endDate = $startDate-&gt;modify(\"next month\");\n            $result[] = array(\n                \"year\" =&gt; $year,\n                \"month\" =&gt; $month,\n                \"startdt\" =&gt; \"{$year}-{$month}-1 00:00:00\",\n                \"enddt\" =&gt; $endDate-&gt;format(\"Y-m-d H:i:s\"),\n            );\n        }\n        return $result;\n    }\n}　この後に紹介するコンテキストは月ごとにデータ集計をすることを意図しており、そのための基本的な検索条件をstartdtとenddtキーの値から生成します。年や月は、もちろん、PHPのプログラムを修正することで、例えば2016年4月から2017年3月といった範囲に変更できます。また、recordsキーの値は1になっていますが、実際に得られたレコードが12個あれば、ページファイルを展開するときに12レコード分の生成を行います。ページネーションにより一定数のレコードずつ表示する場合でない場合は、必要なレコードを含む配列を返すようにPHPのプログラムを作成すれば十分です。ページネーションを伴う場合には、この章の『8-1　サーバーサイドでの処理の追加』にある『アドバイス定義クラスの作成』で説明したAfterRead_WithNavigationインターフェースを実装して、結果の配列だけでなく、レコードの個数や検索条件に合うレコードの総数を返すメソッドも記述してください。　続いて別のコンテキストであるsummary1を見てみましょう。定義はリスト8-2-8の通りです。こちらはviewキーにあるように、saleslogテーブルにあるレコードを検索します。ページファイルではeverymonthコンテキストを展開したノードの中にあり、relationキーによる定義が検索時に条件として付加されます。つまり、year=2010、month=1のeverymonthコンテキスト内では、summary1コンテキストの内容は「dt &gt;= \"2010-01-01 00:00:00\" AND dt &lt; \"2010-02-01 00:00:00\"」という検索条件でsaleslogテーブルを検索した結果、すなわち2010年1月に含まれるレコードに絞られます。しかしながら、extending-classキーにSumForItemsクラスが指定されています。リスト8-2-8　summary1コンテキストの定義array(\n    'name' =&gt; 'summary1',\n    'view' =&gt; 'saleslog',\n    'relation' =&gt; array(\n        array('foreign-key' =&gt; 'dt', 'operator' =&gt; '&gt;=', 'join-field' =&gt; 'startdt',),\n        array('foreign-key' =&gt; 'dt', 'operator' =&gt; '&lt;', 'join-field' =&gt; 'enddt',),\n    ),\n    'extending-class' =&gt; \"SumForItems\",\n),　SumForItemsクラスのPHPプログラムは、リスト8-2-9の通りです（ファイル全体はこちらから参照できます）。これも、Extending_Interface_AfterReadインターフェースを実装したクラスです。doAfterReadFromDBメソッドの引数$resultには、saleslogテーブルから検索したデータが引き渡されます。このテーブルには1レコードが1件の販売データといった形式ですが、引数で得られるのはその販売データのうち、特定の月のものだけではありますが、1レコードはやはり1件の販売データを示すものです。そして、最初の繰り返し部分で、saleslogテーブルのitemフィールドの値ごとに、totalフィールドの値を合計しています。変数$recordは1レコードの連想配列が設定されるので、$record[\"フィールド名\"] により特定のフィールドの値を取り出せます。arsortにより、合計金額の多い順からソートされます。後半の繰り返しは、上位10件を取り出し、レコードにitemnameおよびtotalpriceキーに対して商品名と合計金額を値として与えています。もちろん、itemnameおよびtotalpriceはページファイル内のフィールド名として利用されます。リスト8-2-9　SumForItemsクラスuse INTERMediator\\DB\\Extending\\AfterRead;\n\nclass SumForItems implements AfterRead\n{\n    public function doAfterReadFromDB($result)\n    {\n        $sum = array();\n        foreach ($result as $record) {\n            if(! isset($sum[$record[\"item\"]]))  {\n                $sum[$record[\"item\"]] = $record[\"total\"];\n            } else {\n                $sum[$record[\"item\"]] += $record[\"total\"];\n            }\n        }\n        arsort($sum);\n        $result = array();\n        $counter = 10;\n        foreach ( $sum as $product =&gt; $totalprice )  {\n            $result[] = array(\n                \"itemname\"=&gt;$product,\n                \"totalprice\"=&gt;number_format($totalprice)\n                );\n            $counter--;\n            if ( $counter &lt;= 0 )    {\n                break;\n            }\n        }\n        return $result;\n    }\n}　ページファイルでは、1か月ごとに合計3種類の集計結果を表示しています。残りの2つは、計算方法は違いますが、計算処理の組み込み方法は、summary1コンテキストと同様です。→[利用例] FileMaker Serverで動的にグローバルフィールドを指定する　FileMakerの特徴として「グローバールフィールド」があります。グローバルフィールドは、どのレコードでもフィールドの値が一定という意味で「グローバル」です。データの実態はデータベースには保存されず、例えばFileMaker Proでログインした場合、そのFileMaker Proで開いた状態、すなわちFileMakerのセッションに対してデータが記録されます。そのため、グローバルフィールドの値は、共有はされません。　このグローバルフィールドの値を利用して検索条件を与えるようなことがよく行われてきました。例えば、会計システムの場合、複数年度に渡る会計データがデータベースに記録されています。一方、実際に集計したいのは2016年度だけといったことが普通です。この時、年度の指定を、グローバルフィールドで記録すれば、それを基にした検索条件を組み立てたり、あるいは年度を変更するユーザーインターフェースを構築できたりと便利な場合があります。もちろん、グローバルフィールドを使うのがこうした「全体に渡る検索条件」を実現する唯一の実装方法ではありませんが、FileMakerで古くからある方法であり、ユーザーインターフェースを構築するためにはフィールドとしての定義がどうしても必要であることなどから、利用されることは少なくないでしょう。　グローバルフィールドは、テーブルに定義されるので、通常のフィールドと同じに扱えそうに思われるかもしれませんが、FileMaker ServerのXML共有の仕様では、グローバルフィールドへの値の設定方法と、それ以外のフィールドへの値の設定方法が異なっていることに注意しなければなりません。そのために、コンテキスト定義にglobalキーを用意して、グローバル値の設定ができるようにしてあります。なお、読み出しは通常のフィールドと同様ですが、何もしなければ、グローバルフィールドは空白のままです。XML共有のアクセスは大まかに言って、FileMaker Proで開いて閉じる作業を毎回アクセスのたびに行っているのと同じです。グローバルフィールドに何か値が入った状態で読み出しをしたい場合は、globalキーを使うか、あるいはグローバルフィールドに値を入れるスクリプトを動かすなどの手立てが必要です。通常はグローバルフィールドに値を設定するニーズがほとんどだと思われます。　コンテキスト定義のglobalキーに値を与えることはできるとはいえ、それをクライアント側で動的に値を変更させるためのJavaScriptの変数等は用意されていません。その場合、クライアント側では、INTERMediator.addConditionメソッドを利用して、まずは普通に検索条件の追加を行います。リスト8-2-10はその例です。なお、INTER-Mediatorに付属するFileMakerのデータベースでは、グローバルフィールドの定義はなされていないので、以下は実際に稼働できるものではなく、作成例としてご覧ください。リスト8-2-10　コンテキストに動的に検索条件を与えて再合成するvar y = document.getElementById(\"annual\");\nINTERMediator.addCondition(\n    \"product\",\n    {field: \"gYear\", operator: \"=\", value: y}\n);\nvar targetContext = IMLibContextPool.contextFromName(\"product\");\nINTERMediator.constructMain(targetContext);　この例を見ると分かるとおり、productコンテキストが参照するFileMakerデータベースのテーブル内にgYearというグローバルフィールドが必要です。そして、extending-classクラスにリスト8-2-11に示したクラスの名前の「FMGlobalSeparate」を指定したとします。すると、gYearフィールドに対する検索条件は、データベースアクセス時には利用されず、グローバルフィールドの設定のためのパラメーターに置き換えられます。FMGlobalSeparateクラスはほぼ汎用的に作られており、最初の$fieldName変数に代入されている配列の要素に入れたフィールドは、検索条件からグローバルに移動するように作成してあります。リスト8-2-11　FMGlobalSeparateクラスclass FMGlobalSeparate\n    implements INTERMediator\\DB\\Extending\\BeforeRead\n{\n    public function doBeforeReadFromDB()\n    {\n        $fieldName = array(\"gYear\");\n        $dataSourceName = $this-&gt;dbSettings-&gt;getDataSourceName();\n        $criteria = $this-&gt;dbSettings-&gt;getExtraCriteria();\n        $counter = 0;\n        foreach ($criteria as $item) {\n            if (array_search($item[\"field\"], $fieldName) !== FALSE) {\n               $this-&gt;dbSettings-&gt;setGlobalInContext(\n                    $dataSourceName, \"read\", $item[\"field\"], $item[\"value\"]);\n               $this-&gt;dbSettings-&gt;unsetExtraCriteria($counter);\n            }\n            $counter += 1;\n        }\n    }\n}　まず、全体的に、アドバイス定義クラスなので、$this-&gt;dbSettingsというプロパティは、現在のデータベース処理のSettingクラスのインスタンスを参照しています。getDataSourceNameは選択されているコンテキスト名が得られますが、ここでは「product」という名前が得られるはずです。引数なしでgetExtraCriteriaメソッドを呼び出すと、クライアントで動的に指定した検索条件をすべて配列で取り出すことができます。その配列ひとつひとつについてフィールド名を調べ、変数$fieldNameにあるものであれば、そのフィールド名と値をsetGlobalInContextメソッドにより、グローバル変数の設定に追加します。そして、unsetExtraCriteriaメソッドにより、追加の検索条件の配列から削除しておきます。なお、unsetExtraCriteriaメソッドは、配列の要素をunsetするものですので、例えば、要素のインデックスが0、1、2…とある時に、1のインデックスの要素をunsetで削除すると、0、2、3…のように、その他の要素のインデックスは保持された状態になります。INTER-Mediatorはインデックスの数値自体を使わないので、unsetでの削除で問題ありません。→このセクションのまとめ　INTER-Mediatorの基本的な考え方は、サーバー側でプログラムを作るのではなく、コンテキスト定義とページファイルをもとにして、PHPやJavaScriptのプログラムを作成しなくても、データベース連動のWebアプリケーションの骨格が作成できるようにするという点です。しかしながら、それだけでは利用範囲は限られます。より完成度の高いアプリケーション開発を支援するためのプログラミングインターフェースを用意してあり、その代表的なものがアドバイス定義クラスによる拡張です。→8-3メディア拡張クラスの作成メディア拡張クラスは、UIから呼び出せる処理プログラムです。アドバイス定義クラスのようにデータベース処理と連携するということなしに、コンテキストに対する処理データを伴って直接呼び出すことができます。この仕組みは、画像などのメディアデータをページに表示するときに、フィールドにあるデータをURLやパスとして解釈する仕組みを汎用的に利用するもので、「メディア拡張クラス」と名付けることにします。→→→メディア拡張クラスの作成方法　メディアの中身を取り出す方法については、『メディアファイルの内容の取得』で説明していますので、それを踏まえて説明します。クライアントからの定義ファイルの呼び出しが「def.php」で行える場合、ページファイルのヘッダー部に「&lt;script type=\"text/javascript\" src=\"def.php\"&gt;&lt;/script&gt;」と記述されていて、定義ファイルへのクライアントからのアクセスが可能になっているとします。そのような状態において、リスト8-3-1のような相対パスのURLにより、「ClassName」で指定したクラス名のクラス（メディア拡張クラス）を生成して、そこに定義されたprocessingメソッドを呼び出します。つまり、mediaキーによるパラメータの値が「→class://」をスキームとしたURLになっています。リスト8-3-1　定義ファイル呼び出しでのメディア拡張クラスの指定def.php?media=class://ClassName/ContextName/Condition　この時、呼び出し前に、定義ファイル内に定義されたコンテキスト名「ContextName」で指定したコンテキストに対して、「Condition」で指定した条件を付与した上でクエリーを行い、クエリー結果をprocessingメソッドに引数で渡して利用できるようにします。Conditionは省略できますが、=を含む文字列を検索条件として認識し、最後のひとつだけが適用されます。なお「フィールド=値」の形式で記述しますが、この表記通り、実際の検索でも=演算子で条件を構築します。　例えば、ページファイル内でのHTMLでの記述例は、リスト8-3-2の通りです。ここでは、aタグによって、「PDF作成」という文字列がリンクとなります。クリックすると、href属性のURLをブラウザが開きます。ここで、ExtendedProcクラスのメソッドを実行することになりますが、その折に、tasklistというコンテキストに対して検索を行います。このコンテキストは、def.phpに定義されている必要があります。ここで、data-im属性があるので、例えば、idフィールド値が24であれば、href属性の最後に24が追加されます。そのURLを開くと、tasklistに対して「id=24」という検索条件が適用されることになります。リスト8-3-2　ページファイルでの利用例&lt;a href=\"def.php?media=class://ExtendProc/tasklist/id=\"\n   data-im=\"tasklist@id@#href\"&gt;PDF作成&lt;/a&gt;　拡張プログラムを記述するクラスExtendProcについては、リスト8-3-3のように定義します。また、ファイルのロードを自動的に行うために、ファイル名は「ExtendProc.php」としておいて、定義ファイルと同じ階層に配置します。クラス名は、mediaキーの値に記述するので、その都度異なる名前を付けても構いません。一方、クラスの定義内容は、processingメソッドがあり引数が2つなのは、常に同じです。processingメソッドは返り値は必要ありません。$contextDataには、mediaキーに指定したコンテキストと検索条件によって検索された結果が得られます。1レコードを示すフィールド名をキーとした連想配列がレコードの数だけ含む配列として得られます。2つ目の引数には、定義ファイルに記述したIM_Entryの第2引数の値がそのまま得られます。リスト8-3-3　新たに定義するクラスの基本構成class ExtendProc\n{\n    public function processing($contextData, $options) {\n    }\n}　このExtendProcクラスは、aタグのリンク先に含まれています。processingメソッドの記述は、ページファイルでの用途に応じた記述を行います。例えば、実際にPDFを生成したいのなら、processingメソッド内でデータベースから取り出した結果をもとにしてライブラリ等を使ってPDFを生成します。そして、header関数を使って適切なMIMEタイプを返し、さらにechoステートメント等でPDFデータを出力します。PDFの生成のサンプルは、INTER-MediatorのフォルダーのSamples/Sample_pdfにあります。　もし、リンク先からHTMLやテキストを返したいなら、echoステートメント等で、文字列を返します。例えば、リンクをクリックすればiCalendar対応のデータがダウンロードされるようにしたい場合には、header関数とechoステートメントで、適切なMIMEタイプのレスポンスヘッダーを返して、iCalendar形式のテキストをechoで出力します。　他には、データに応じて加工した画像を返したり、圧縮ファイルを返すなどの使い方もあります。これも、基本的に同様で、processingの中でサーバーからの応答を記述することになります。なお、processingの最初の引数で、必要なデータを得ておくのが手軽な方法ですが、それで足りない場合には、さらにデータベースアクセスを行うプログラムを記述する必要があります。→[利用例] テーブルの内容をエクスポート　ボタンやリンクをクリックすると、「定義ファイル名.php?media=....」のリンクに移動するように、例えば、location.hrefへの代入を行うようなJavaScriptを書いておきます。リンクやクリックによって、特定のテーブルのエクスポートが可能なメディア拡張クラスの定義が可能です。単独のテーブルはもちろんですが、自分のニーズに合ったエクスポート結果が欲しいなら、そのような結果が得られるビューを用意すればいいので、汎用的な機能といえます。そのようなクラスを作成しましょうということに以前はなっていたのですが、汎用的なエクスポートのクラスはINTER-Mediatorの内部ですでに用意されているので、そのクラスを使用すれば簡単にエクスポートの機能が実装できます。例えば、定義ファイルdef.phpに、コンテキストalldataが定義されているとします。その場合、リスト8-3-4ようなURLへのリンクへジャンプすれば、alldataコンテキストの内容がCSVファイルとしてダウンロードされるはずです。INTERMediator\\DB\\ExportがINTER-Mediatorで用意されたエクスポートのための汎用クラスです。リスト8-3-4　新たに定義するクラスの基本構成def.php?media=class://INTERMediator\\DB\\Export/alldata　INTERMediator\\DB\\Exportの動作については、以下のようになっています。文字コードがShift-JISのCSVファイルとしてダウンロードされる。ファイル名は「Exported-日付時刻.csv」。MIMEタイプは「application/octet-stream」。1行目にフィールド名によるラベル行が入り、実データは2行目からとなる。コンテキストから得られる前レコード、全フィールドが出力される。フィールドの順序はデータベースから取得された通りの順序になる。　INTERMediator\\DB\\Exportの動作をカスタマイズすることが可能です。そのためには、このクラスを継承したメディア拡張クラスを作って、media=class://の後には定義したクラスを指定します。以下は、カスタマイズ可能なプロパティやメソッドをまとめたものですが、もちろん、変更したいプロパティのみのクラスで構いません。また、keysAndLabelsプロパティ以外は、そのプロパティの規定値を示しています。リスト8-3-5　エキスポートをカスタマイズするメディア拡張クラスclass ExportSample extends INTERMediator\\DB\\Export\n{\n    protected $keysAndLabels = [\n           \"unitprice\" =&gt; \"単価\",\"name\" =&gt; \"商品名\",\"taxrate\" =&gt; \"消費税率\",\n    ];\n    protected $encoding = \"UTF-8\";\n    protected $fileNamePrefix = \"Exported-\";\n    protected $fileExtension = \"csv\";\n    protected $fieldSeparator = ',';\n    protected $quote = '\"';\n    protected $endOfLine = \"\\n\";\n\n    public function processing($contextData, $options) {}\n}　keysAndLabelsは、既定値は[]となっており、その場合は、コンテキストのフィールド名がそのままラベル行として出力されます。このプロパティに「フィールド名=&gt;ラベル名」の連想配列を指定すると、エクスポートしたファイルの1行目はラベル名が記述できます。また、ここで記載したフィールドのみが出力されます。　encodingプロパティは、エクスポートされるデータのエンコーディングで、PHPで利用できるエンコーディング名を指定します。Excelで読み込みがすぐできるようにするには、ここに「SJIS」等を設定してください。ダウンロードされるファイル名の既定値は、\"{$fileNamePrefix}{日付時刻}.{$fileExtension)\"で決定されます。通常は、このような形式でおおむね済むと思われます。　ファイル内部の形式としては、フィールドの区切りをfieldSeparatorプロパティ、文字列の囲みをquoteプロパティ、改行コードをendOfLineプロパティで指定することができます。タブ区切りなどの違い形式にした場合には、これらのプロパティを変更することになります。　継承したクラスではprocessingメソッドを指定することができます。このメソッドを指定すれば、元のクラスとは全く異なる出力形式のエクスポートも可能です。例えば、最初の方に数行の特別な行を入れたいと言ったことや、JSONで出力したいということであればprocessingメソッドを自分で記述します。しかしながら、そうなったら、むしろExportクラスを継承しない方がもはや早いかもしれません。自分でprocessingメソッドを記述する場合は、Exportクラスのprocessingを「parent::processing($contextData, $option);」などで呼び出して、その処理との違いを自分で記述するような場合に限定されると思われます。なお、CSV化はleague/csvというライブラリを利用しており、INTER-Mediatorではこのライブラリを必ずインストールするようにしているので、このライブラリの利用も検討してください。→[利用例] →メディアアクセスクラスを利用して→→PDFを生成する　サンプルプログラムには、データベースにあるデータをもとにPDFを生成可能なものがあります。PDFを生成するためのライブラリとして→tcpdfを利用しており、INTER-Mediatorのインストール時に自動的に入るようになっています。実際にサンプルを稼働させてみましょう。演習環境を利用している場合には、ブラウザーで「http://localhost:9080」に接続し、そこにある「サンプルプログラム」のリンクをクリックして、サンプルプログラムの一覧を表示します。そして、「PDF Generating」の行の「show」をクリックすると、図8-3-1のように、まず、商品一覧のようなページが見えています。そして、PDFのリンクをクリックすると、図8-3-2のように対応するレコードの内容がPDFに変換され、ブラウザーの画面に表示されます。PDFの見え方は、ブラウザーの設定により異なる可能性もあります。図8-3-1　商品の一覧ページにPDFリンクがある図8-3-2　特定のレコードのデータがPDFに表示された　実際にどのようにページが構築されているかを確認しましょう。まず、定義ファイルは「contexts_MySQL.php」、ページファイルは「list_detail_MySQL.html」です。ページ上に商品の一覧が出ていますが、この商品名などのコンテキストは、puroductlistコンテキストを利用しています。定義ファイルのコンテキストの定義はリスト8-3-6の通りで、viewキーの値がproductであり、productテーブルの内容を一覧しています。queryキーによる検索条件は、nameフィールドに何か入力されているという意味ではありますが、あまり深い意味はありません。ともかく、productテーブルのレコードをページに一覧表示しています。リスト8-3-6　productlistコンテキストの定義array(\n    'records' =&gt; 10,\n    'name' =&gt; 'productlist',\n    'view' =&gt; 'product',\n    'key' =&gt; 'id',\n    'query' =&gt; array(array('field' =&gt; 'name', 'value' =&gt; '%', 'operator' =&gt; 'LIKE')),\n    'sort' =&gt; array(array('field' =&gt; 'name', 'direction' =&gt; 'ASC'),),\n),　ここでページファイルの中でもPDFというリンク部分のタグがどのようになっているかを見てみましょう。そこを抜き出したのが、リスト8-3-7です。aタグにより、PDFという文字列を囲んでいます。そして、data-im属性を見ると、productlistコンテキストのidフィールドの値を、aタグ要素のhref属性内の$の文字と置き換えるという指定になっています。idフィールドはもちろん、主キーとなる連番のフィールドです。このdata-im関数により、もしidフィールドの値が「4」ならば、aタグ要素のhref属性は「contexts_MySQL.php?media=class://PDFSample/productlist/id=2/」といったURLになります。つまり、定義ファイルへのクライアントからのアクセスがあり、mediaというキーによるパラメーターが付与されているとうことです。mediaキーの値は「class://PDFSample/productlist/id=2/」です。リスト8-3-7　PDFリンクのタグ要素&lt;a href=\"contexts_MySQL.php?media=class://PDFSample/productlist/id=$/\"\n                   data-im=\"productlist@id@$href\"&gt;PDF&lt;/a&gt;　このmediaキーの値「class://PDFSample/productlist/id=2/」は次のように解釈されます。まず、class:なので、引き続いて、クラス名、コンテキスト名、検索条件が記述されることになります。ここではまず2つ目の項目である「productlist」があることに注目します。これにより、PDFのリンクをクリックして定義ファイルへアクセスしたとき、INTER-Mediatorはまずproductlistコンテキストに対して検索を行います。この時の条件「id=2」は、idフィールドが2であるレコードを意味します。idフィールドは主キーなので、ひとつのレコードが検索されます。そして、その検索した結果のレコードを引数に伴って、リスト8-3-8に示すPDFSampleクラス（ファイルはこちらから参照できます）のprocessingメソッドを呼び出します。ここで、idが2のレコードは、nameフィールドが「Orange」、unitpriceフィールドが「1540」などになっているので、processingメソッドの最初の引数には、JSON形式で記述すると、[{\"id\": 2, \"name\": \"Orange\", \"unitprice\": 1540, ...}] といった連想配列の配列が得られます。レコードがひとつしかない場合でも、全体は配列になります。例えば、nameフィールドの値は「$contextData[0]['name']」で得られます。processingメソッドの最初の部分で検索して得られたデータを変数に入れ、あとはtcpdfの機能を使ってPDFを生成しています。PDFの生成に関する部分は省略しますが、最後のOutputメソッドにより、PDFのデータが出力されます。ここでは、aタグ要素であったことを思い出してください。つまり、リンクをクリックすることにより、定義ファイルが呼び出されて、PDFのデータを出力します。したがって、header関数を使って応答のヘッダーのContent-Typeキーの値などを適切に設定しておくことで、ページ上に表示したり、あるいはダウンロードしたりといったことを、ブラウザーの設定に依存する面はあるかもしれませんが、ある程度はコントロールできるでしょう。リスト8-3-8　PDFSampleクラスclass PDFSample\n{\n    function processing($contextDatas)\n    {\n        $prodId = $contextData[0]['id'];\n        $prodName = $contextData[0]['name'];\n        $unitPrice = $contextData[0]['unitprice'];\n        $pFile = $contextData[0]['photofile'];\n        $timestamp = new DateTime();\n        $tsString = $timestamp-&gt;format(\"Y-m-d H:i:s\");\n        $fileName = \"{$prodId}.pdf\";\n        require_once './tcpdf/tcpdf.php';\n\n        $pdf = new TCPDF(\"P\", \"mm\", \"A4\", true, \"UTF-8\");\n        $pdf-&gt;setPrintHeader(false);\n        $pdf-&gt;setPrintFooter(false);\n        $pdf-&gt;SetMargins(0, 0, 0, 0);\n        $pdf-&gt;AddPage();\n        $pdf-&gt;setTextColor(100, 100, 100);\n        $pdf-&gt;SetFont('', '', 14);\n        $pdf-&gt;Text(40, 40, \"Product ID: {$prodId}\");\n        $pdf-&gt;Text(40, 50, \"Product Name: {$prodName}\");\n        $pdf-&gt;Text(40, 60, \"Unit Price: {$unitPrice}\");\n        $pdf-&gt;Text(40, 70, \"Today: {$tsString}\");\n        $pdf-&gt;Image(\"../Sample_products/images/{$pFile}\", 40, 80, 100);\n\n        header(\"Content-Type: application/pdf\");\n        header(\"Content-Disposition: attachment; filename=\\\"{$fileName}\\\"\");\n        header('X-Frame-Options: SAMEORIGIN');\n        $pdf-&gt;Output();\n    }\n}→このセクションのまとめ　メディア拡張クラスは、画像等のメディアを参照するための仕組みをさらに汎用的に利用できるようにしたものです。コンテキストとの絡みなどが若干ややこしくなりますが、データベースの処理を自動化し、追加の処理を自身で記述できるため、拡張機能のひとつとして利用できます。とは言え、この仕組みを利用して一番よく作っている機能はエクスポートです。INTER-Mediatorで汎用的なエクスポートクラスを用意したので、クラス自体を定義する機会はさらに減っています。→8-4独立したスクリプトでINTER-Mediatorを利用するcron等で一定時間毎にバッチ処理を行ったり、あるいはWebサーバの公開ドキュメントの中にある.phpファイル、つまり独立したWebページの中からINTER-Mediatorを使いたいという場合もあるでしょう。その場合のポイントを説明します。→プログラム作成に必要なこと　この種のプログラムを作ることで重要なことは、INTER-Mediatorの読み込みです。定義ファイルの最初にrequire_onceで「INTER-Mediator.php」を読み込みますが、それと同じことをどこかで行う必要があります。スクリプトの最初でもいいのですが、データベース処理などはクラスとして定義すれば、Proxy_ExtSupportトレイトを組み込んで、データベース処理が手軽にできるということもあるため、単なるフラットなスクリプトではなく、主要処理部分はクラスとして定義するのが適切です。そうであれば、そのクラス定義の最初に、INTER-Mediator.phpを取り込むステートメントを記述しておくのが一般的でしょう。そのクラスの中では、例えば、dbReadメソッドでデータベースの読み出し等ができるようになります。　cron等での一定時間毎に自動的に起動されるスクリプトでも原則は同じですが、phpスクリプトを直接稼働させるのではなく、通常のシェルスクリプトを記述して、その中ではスクリプトファイルのあるディレクトリをカレントにし「php スクリプトファイル.php」といったphpのコマンドラインインターフェースを利用して稼働するなどの工夫が必要になるかもしれません。→[利用例] →Web APIを作成する　サンプルプログラムには、Web APIとして稼働するものがあります。実際にサンプルを稼働させてみましょう。演習環境を利用している場合には、ブラウザーで「http://localhost:9080」に接続し、そこにある「サンプルプログラム」のリンクをクリックして、サンプルプログラムの一覧を表示します。そして、「API」の行の「show」をクリックすると、図8-4-1のようなフォームが見えます。このサンプルは、データベースに用意されたproductテーブルへidフィールド値を指定して検索を行い、その結果を上のテキストエリアに表示します。下のテキストエリアは、デバッグ情報を表示します。idは初期値では1〜5が用意されていますが、それ以外の値を指定するエラーメッセージが返されます。Web APIのデータベースアクセス部分はINTER-Mediatorで作成したものですが、HTMLページの方はごく簡単なWeb APIのデモ実行環境です。図8-4-1　Web APIのサンプルの実行結果　実際にどのようにページが構築されているかを確認しましょう。まず、ページのHTMLファイルは「api-test.html」です。このファイルのヘッダー部分にはSCRIPTタグによって定義ファイルへのアクセスを行う記述はありません。つまり、単独で稼働しているHTMLファイルです。id属性値が設定されたテキスト入力要素は、検索条件に含めるidフィールドの値を設定するテキストフィールド（id属性値は「product_id」）と、結果を表示するテキストエリア（id属性値は「result」）、デバッグ情報を表示するテキストエリア（id属性値は「log」）です。ボタンを押して呼び出されるプログラムは、リスト8-4-1に示しました。一部、重要でない部分は省略しています。リスト8-4-1　HTMLファイルにあるAPIを呼び出すプログラムfunction callAPI() {\n    var myRequest, jsonObject;\n    document.getElementById(\"result\").value = \"\";\n    document.getElementById(\"log\").value = \"\";\n    var id = document.getElementById(\"product_id\").value;\n    try {\n        myRequest = new XMLHttpRequest();\n        myRequest.open(\"GET\", \"api.php?id=\" + id, true);\n        myRequest.onreadystatechange = function () {\n            switch (myRequest.readyState) {\n\t\t\t\t:\n                case 4:\n                    try {\n                        jsonObject = JSON.parse(myRequest.responseText);\n                    } catch (e) {\n                        jsonObject = null\n                    }\n                    if (jsonObject.data) {\n                        document.getElementById(\"result\").value = JSON.stringify(jsonObject.data);\n                        document.getElementById(\"log\").value = JSON.stringify(jsonObject.log);\n                    } else {\n                        document.getElementById(\"log\").value = myRequest.responseText;\n                    }\n                    break;\n            }\n        };\n        myRequest.send();\n    } catch (e) {\n        document.getElementById(\"result\").value = \"Exception in commnication.\"\n    }\n}　最初に2つのテキストエリアのクリア、そして検索条件をid変数に設定し、tryで囲まれた部分に入ります。ここは、通常のAJAX通信を行っていますが、通信先は、同じフォルダーにあるapi.phpというファイルで、URLのパラメーターにidという名前のキーで、idフィールドの値を指定しています。例えば、idフィールドの値が3であれば、「api.php?id=3」というURLが得られて通信を行うことになります。通信後、onreadystatechangeプロパティに設定した関数が呼び出され、通信が成功すればreadyStateプロパティの値が4になります。その場合、通信結果のJSONデータをパースしたのち、dataプロパティ、logプロパティをそれぞれテキストエリアに表示させています。api-test.htmlのプログラムはこのように簡単なAJAX通信を行うものです。　Sample_APIフォルダーにあるもうひとつのファイル「api.php」が、Web APIの本体で、このひとつのファイルで構成しています。ファイルのコメント以外をリスト8-4-2に示します。単に$_GETグローバルから、idに対する値を得て、実質的にはDBOperationクラスに任せています。このapi.phpとDBOperation.phpの2つのファイルは同じフォルダにあります。api.phpはクライアントから呼び出される窓口業務的なことだけにしており、ここではINTER-Mediatorの機能は使っていません。リスト8-4-2　Web APIのサンプル&lt;?php\n\nrequire_once(dirname(__FILE__) . '/DBOperation.php');\n\n$pid = mb_eregi_replace(\"/[^0-9]/\", \"\", $_GET[\"id\"]);\nif ($pid &lt; 1) {\n    echo json_encode(array(\"ERROR\" =&gt; \"Invalid Product Number.\"));\n    exit();\n}\n\n$result = (new DBOperation())-&gt;readData($pid);\necho json_encode($result);　DBOperationクラスのプログラムは、リスト8-4-3に示します。ファイルは「DBOperation.php」です。最初にINTER-Mediator.phpを読み込んでいるところがポイントで、その結果、INTER-Mediatorの諸機能が使えるようになります。データベース処理を手軽に記述したいので、Proxy_ExtSupportトレイトを組み込んでいます。これにより、dbRead等でデータベース処理ができますが（『PHPでの拡張クラス内でのデータベース処理』を参照）、コンテキストの定義はプロパティとして定義して、複数のメソッドで使っています。なお、api.phpから呼び出されるのはreadDataメソッドのみです。リスト8-4-3　DBOperationクラス&lt;?php\n\nrequire_once(dirname(__FILE__) . '/../../INTER-Mediator.php');\n\nuse INTERMediator\\DB\\Proxy_ExtSupport;\n\nclass DBOperation\n{\n    use Proxy_ExtSupport;\n\n    private $contextDef = [\n        [\n            'name' =&gt; 'product',\n            'key' =&gt; 'id',\n//            'query' =&gt; array(array('field' =&gt; 'name', 'value' =&gt; '%', 'operator' =&gt; 'LIKE')),\n//            'sort' =&gt; array(array('field' =&gt; 'name', 'direction' =&gt; 'ASC'),),\n        ],\n    ];\n\n    public function readData(int $pid): array\n    {\n        $this-&gt;dbInit($this-&gt;contextDef, null, null, 2);\n        $condition = [\"id\" =&gt; $pid];\n        $pInfo = $this-&gt;dbRead(\"product\", $condition);\n        return [\"data\" =&gt; $pInfo, \"log\" =&gt; $this-&gt;getAllLogs()];\n    }\n\n    private function getAllLogs(): array\n    {\n        $logInfo = [];\n        $logger = Logger::getInstance();\n        $logInfo['error'] = $logger-&gt;getErrorMessages();\n        $logInfo['warning'] = $logger-&gt;getWarningMessages();\n        $logInfo['debug'] = $logger-&gt;getDebugMessages();\n        return $logInfo;\n    }\n\n    public function createData(string $prodName, int $prodPrice)\n    {\n        $this-&gt;dbInit($this-&gt;contextDef, null, null, 2);\n        $data = [\"name\" =&gt; $prodName, \"unitprice\" =&gt; $prodPrice];\n        $pInfo = $this-&gt;dbCreate(\"product\", $data);\n        return [\"data\" =&gt; $pInfo, \"log\" =&gt; $this-&gt;getAllLogs()];\n    }\n\n    public function updateData(int $pid, string $prodName, int $prodPrice): array\n    {\n        $this-&gt;dbInit($this-&gt;contextDef, null, null, 2);\n        $condition = [\"id\" =&gt; $pid];\n        $data = [\"name\" =&gt; $prodName, \"unitprice\" =&gt; $prodPrice];\n        $pInfo = $this-&gt;dbUpdate(\"product\", $condition, $data);\n        return [\"data\" =&gt; $pInfo, \"log\" =&gt; $this-&gt;getAllLogs()];\n    }\n}　readDataメソッドを詳細に見てみましょう。ここでは、処理ログも詳細に取りたいので、デバッグモードを「2」で実行したいところです。しかしながら、dbRead等は、通常はデバッグモードをfalseで実行します。そのため、dbInitメソッドを呼び出して、デバッグモードを2にします。このとき、コンテキスト定義を行なって、このコンテキスト定義を先のdbReadで利用します。ログについてはgetAllLogsメソッドにおいて、Loggerクラスのインスタンスを求めて、3種類のメッセージをそれぞれ取り出しています。　同様に、レコード作成やレコード更新のメソッドも作ってありますが、現状ではapi.phpからは呼び出されていません。作成のサンプル程度で見ておいてください。実際にはプログラムがもっと長くなるでしょうし、色々なテーブルやビューなどの取得メソッドを個別に記述するなど、クラスの定義自体も長くなると思われます。→このセクションのまとめ　INTER-Mediator外部のプログラムでも、INTER-Mediatorを取り込むなどすれば、データベース処理などが手軽に利用できます。INTER-Mediatorでユーザインターフェースを作る以外の部分でも、INTER-Mediatorを活用できます。→8-5ブラウザーを判断するページ→→ブラウザーの判定を行い、サポートするブラウザーとしないブラウザーの表示を切り替える方法を紹介します。特定のバージョン以前のブラウザを利用しないようにすることは設定だけで可能ですが、現在の開発状況では、むしろ、Internet Explorerを排除するのが最優先となるかと思われます。その点やあるいはWebアプリケーションの動作の点で、プログラミングを行う方がより良い結果となりますので、この章で説明をします。→ブラウザー制限のための戦略　INTER-Mediatorでブラウザーの制限をする理由は、JavaScriptの対応がブラウザーによってまちまちであることが理由です。INTER-Mediatorのフレームワクーク自体は、HTML5に対応したブラウザーを使用することを前提にしているので、当然ながら、「対応しないブラウザー」が存在します。このように、フレームワークが動作対象としていないブラウザーの排除のために仕組みがまずは必要です。さらに、アプリケーションによっては、サポートあるいはポリシーの関係で、特定のブラウザーだけに限定したい場合もあるかもしれません。その場合、さらなる制約をかけたいと考えるでしょう。INTER-Mediatorでは、ブラウザーとそのバージョンに対しての制約を設定することができます。　一方、「ブラウザーでJavaScriptが稼働する」ということも成立していない可能性も考えます。利用者が、JavaScriptの実行ができないように、ブラウザーを設定している可能性があります。その場合、当然ながら、INTER-Mediatorは稼働しませんので、なんらかのメッセージを出したいところです。この場合の対策を実現するために、HTMLページの内容は、JavaScriptが稼働していない、あるいは稼働しようとしても動かないくらい古いブラウザーに対するメッセージだけを表示して、実際のページのコンテンツは初期状態では非表示にしておきます。そして、JavaScriptが切りあるいはDOM非対応なら、そのまま何もしないようにします。そのための判定をJavaScriptで行いますが、そのプログラム自体が実行されなくても、HTMLページの初期状態がそのまま見えるだけです。つまり、JavaScriptが動かない場合には、そのためのメッセージを表示して、それ以上は何もしません。　もし、ブラウザーが対応しているバージョンであれば、非対応の場合のメッセージを見えないようにし、それまで非表示だったページ内容を表示するようにして、ページ生成の処理を行います。つまり、非対応メッセージは自動的に消されるという動作を期待しますが、これについては1行で済む処理なので、プログラムを記述していただく必要があります。具体的にはあとの演習を参照してください。→JavaScriptの稼働ができない場合の対処　JavaScriptの稼働ができないような場合に何らかのメッセージを出す仕組みとしては、まず、ページファイルのbodyタグ内での対処があります。bodyタグ内ではアプリケーションの表示を行う部分をdivタグ等でまとめて初期状態では、スタイルとして、display: none を指定しておきます。そして、そのdivタグとは別に、JavaScript稼働ができない場合のメッセージを表示します。それらメッセージは自由に作成できますが、JavaScriptが稼働できた場合には消したいので、やはりそれらをひとつのdivタグにまとめるということが典型的な手法になります。例えば、ページファイルをリスト8-5-1のように作成します。リスト8-5-1　JavaScript非稼働ブラウザ等を考慮したメッセージの追加&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ja\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;script type=\"text/javascript\" src=\"def16.php\"&gt;&lt;/script&gt;\n      &lt;script type=\"text/javascript\"&gt;\n        INTERMediatorOnPage.doAfterConstruct = function () {\n            var node = document.getElementById('container');\n            node.style.display = \"block\"\n        }\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"nonsupportmessage\" style=\"background-color:#333333\"&gt;\n    &lt;div style=\"text-align:center;color:yellow\"&gt;\n      If you see this, you must use any supported\n      web browser with Javascript enabled.\n    &lt;/div&gt;\n    &lt;div style=\"text-align:center;color:yellow\"&gt;\n      この表示はサポート対象外のWebブラウザーを使っているために表示されています。\n      対応ブラウザーをJavaScriptを有効にした上でお使い下さい。\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;div id=\"container\" style=\"display: none\"&gt;\n  &lt;table&gt;\n    &lt;tbody&gt;\n      &lt;tr&gt;\n        &lt;td data-im=\"postalcode@f3\"&gt;&lt;/td&gt;\n        &lt;td data-im=\"postalcode@f7\"&gt;&lt;/td&gt;\n        &lt;td data-im=\"postalcode@f8\"&gt;&lt;/td&gt;\n        &lt;td data-im=\"postalcode@f0\"&gt;&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/tbody&gt;\n  &lt;/table&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;　ページファイルのボディ部には、id属性が「→nonsupportmessage」のDIVタグ要素があり、そこにはJavaScriptがオフになっていたり、極端に古いブラウザーを使っていた場合を想定したエラーメッセージが記述されています。一方、実際に見せたいページの内容は、id属性が「container」のDIVタグ要素で囲って記述しておき、こちらも初期状態は非表示にしておきます。このように、ページの中の最上位のノードにおいて、「JavaScriptが動かなかった時に表示される内容」と「動いた時に表示される正しい内容」の2つの要素を求めておきます。そして、JavaScriptが動かない場合はそのままid属性が「nonsupportmessage」のDIVタグ要素だけが見えていますが、INTER-Mediatorが稼働して正しくページ合成すると逆にid属性が「nonsupportmessage」のDIVタグ要素は非表示に、id属性が「container」のDIVタグ要素は表示にして、ページの内容が見えるとともにエラーメッセージは見えないようにします。　ページをロードしたときにページ合成が自動的に行われますが、id属性が「nonsupportmessage」のDIVタグ要素がある場合には、オプション設定のbrowser-compatibilityあるいはparams.phpの$browserCompatibility変数の設定を使用して、対応ブラウザーかどうかのチェックを行います（詳細は事項の『ブラウザーを限定するための指定』を参照）。対応ブラウザーでない場合には、何もせず、id属性が「nonsupportmessage」のDIVタグ要素だけが見えている状態になります。対応ブラウザーであれば、ページ合成を行います。なお、このままだと、id属性が「container」のDIVタグ要素は非表示のままです。そこで、ページ合成が終わったときに呼び出されるメソッド、INTERMediatorOnPage.doAfterConstruct（（『8-5　ブラウザーを判断するページ』を参照））において、ページ要素を含むid属性が「container」のDIVタグ要素のdisplayスタイルシート属性をblockに変更するJavaScriptのプログラムを実行して、ページ要素を見えるようにしています。つまり、ブラウザー判定に合致して対応ブラウザーであると判定された場合、ページ合成を行い、ページ要素を見えるようにします。　なお、ブラウザーの判定を含むページファイルの雛形として、INTER-MediatorフォルダーのSamples/templatesにあるpage_file_complex.htmlというファイルがあります。ページファイルを作るときには、このファイルをコピーして作成してもいいでしょう。もちろん、定義ファイルの参照パス等は適時変更が必要です。→→→ブラウザーを限定するための指定　ブラウザーに関連する設定は、定義ファイルのIM_Entry関数の2つ目の引数（定義ファイルエディターではOptionsの領域）に、→browser-compatibilityキーで記述します。このキーに指定する値は少し複雑で、表8-5-1のようになっています。指定例はリスト8-5-2に記載します。ブラウザーの種類はJavaScriptの標準APIに含まれる→navigator.userAgentを利用しており、大文字小文字は関係なく指定をします。また、params.phpファイルにおいても、$browserCompatibility変数で同様な指定が可能です。こちらは、同様な形式の配列をPHPの形式で指定します。定義ファイルよりも、params.phpファイルの方が優先的に採用されます。なお、このブラウザを限定する機能は、ページファイル内にid属性が「nonsupportmessage」あるいは、params.phpファイルの$nonSupportMessageId変数で指定した文字列のものが存在する場合にだけ機能します。次元指定内容指定する値の例第1次元ブラウザーの種類chrome, msie, firefox, opera, safari, trident, webkit第2次元配列（OSを示すキー）mac, winバージョン記述文字列3+, 4-第3次元バージョン記述文字列（第2次元が配列のとき）3+, 4-表8-5-1　対応ブラウザーを指定する配列の構成リスト8-5-2　対応ブラウザーを指定する配列の定義ファイルでの記述例IM_Entry(\n  array( ... ),\n  array(\n    'browser-compatibility' =&gt; array(\n      'chrome' =&gt; '1+',\n      'firefox' =&gt; '2+',\n      'msie' =&gt; '8+',\n      'opera' =&gt; '1+',\n      'safari' =&gt; array(\n        'win' =&gt; '4+', \n        'mac' =&gt; '3+',\n      ),\n      'trident' =&gt; '5+',\n      'webkit' =&gt; '1+',\n   ), ....\n  ),\n\t....\n);　Internet Explorerは「msie」で選択ができるのは、Ver.10までで、それ以降はtridentというキーワードで判定します。しかしながら、Internet Explorerの最新版でもJavaScript対応バージョンが古く、INTER-Mediatorが稼働しないので、Internet Explorerの判定と排除は別の方法（この後の『Internet Explorerの排除』）を利用します。OSの種類はnavigator.platform、バージョンはnavigator.appVersionやnavigator.userAgentに含まれる数値から適宜判断して取得しています。OSの種類を指定しないと、OSの種類に関係なく判定されます。バージョン番号のあとに+をつければ、その番号を含むより新しいブラウザーも含まれます。なお、navigator.userAgentDataについてはVer.12で対応予定です。また、最近のスマートフォン用ネイティブアプリケーションでは、内部にWebブラウザーの機能を持つこともあります。そのようなブラウザー内での動作をさせるには、ブラウザーの種類に「webkit」という文字列を指定します。　なお、ここで、browser-compatibilityキーに対する連想配列のキーにおいては、safariよりも前にchromeを指定してください。Chromeのnavigator.userAgentにはSafariという単語が含まれているためです。browser-compatibilityキーがない場合には、判定において、すべてのブラウザーは非対応とみなします。このキーに、対応するブラウザーのバージョンを記述するというのが基本です。　この設定による判定によって、対象外と判断されたブラウザの場合は、図8-5-1のような表示を行います。図8-5-1　browser-compatibilityの定義外のブラウザで表示した場合リスト8-5-3　対応ブラウザーを指定する配列の定義ファイルでの記述例IM_Entry(\n  array( ... ),\n  array(\n    'browser-compatibility' =&gt; array(\n      'chrome' =&gt; '1+',\n      'firefox' =&gt; '2+',\n      'msie' =&gt; '8+',\n      'opera' =&gt; '1+',\n      'safari' =&gt; array(\n        'win' =&gt; '4+', \n        'mac' =&gt; '3+',\n      ),\n      'trident' =&gt; '5+',\n      'webkit' =&gt; '1+',\n   ), ....\n  ),\n\t....\n);　ここでのメッセージは、以前のInternet Explorerを考慮したものであったりするので、別のメッセージに変えたいと思うかもしれません。その場合、params.phpファイルで→→メッセージのカスタマイズを行います。例えば、リスト8-5-4のような変数定義をparams.phpファイルで行います。リスト8-5-4　システムメッセージをparams.phpの変数で置き換える$messages['default'][1022] = \"We don't support Internet Explorer. We'd like you to access by Edge or any other major browsers.\";\n$messages['ja'][1022] = \"Internet Explorerは使用できません。Edgeあるいは他の一般的なブラウザをご利用ください。\";　→$messages変数で2次元の配列を記述し、1次元目が言語、2次元目がメッセージ番号で、ブラウザの言語によって定義したメッセージを表示します。ブラウザ判定のエラーメッセージは、1022番の要素として定義されているので、番号はこのまま指定します。→→→Internet Explorerの排除　INTER-Mediator Ver.5までの仕組みでは、一部問題はあるもののINTER-Mediator自体はInternet Explorerで稼働しました。しかしながら、Ver.6で非同期通信をサポートした段階で、Internet Explorer Ver.11でも稼働しない状況になりました。この時、ブラウザの判定すらできない、つまりINTER-Mediatorのロードすらできない状態になりました。ここでどのような対処をするかを検討したのですが、その時点ですでにInternet Explorerのサポート終了も近づいたため、「Internet Explorer自体では稼働しない」という状況が基本的な対処で問題ないと考えました。実際、その時期では、対象ブラウザにInternet Explorerを含めない案件の方が増えてきたからです。しかしながら、INTER-Mediator自体の動作もできないのでは「Internet Explorerはサポート外なのでを使わないで欲しい」という意図すら伝わりません。そこで、そうした対処が必要な場合は、定義ファイルに仕込みを行います。例えば、定義ファイルの冒頭にリスト8-5-5のようなプログラムを記述します。リスト8-5-5　Internet Explorerを排除するための定義ファイル&lt;?php\n\n$userAgent = $_SERVER['HTTP_USER_AGENT'];\nif (stripos($userAgent, 'MSIE') !== false || stripos($userAgent, 'Trident') !== false) {\n    echo \"location.href='/ie.html';\";\n    exit;\n}\n\nrequire_once('lib/INTER-Mediator/INTER-Mediator.php');\n\nIM_Entry(...);　上記のようなプログラムがあれば、Internet Explorerを使っていると、定義ファイルへの応答は「location.href='/ie.html';」というJavaScriptの1行プログラムになります。定義ファイルは、ページファイルのscriptタグで取り込まれるのですが、その結果、この1行プログラムが実行されて、ブラウザでは/ie.htmlというファイルにリダイレクトされます。もちろん、ie.htmlファイルを作っておいて、そこに適切なメッセージを各種言語で記載しておくという対処が基本になります。この方法は、古いJavaScriptでもいいので、location.hrefへの代入でリダイレクトさえできれば、コントロールが可能です。　複数の定義ファイルに同じプログラムを記述するのが抵抗があるのであれば、require_onceより前の部分を単独のphpファイルで記述して、そのファイルをrequire_once等で読み込んでもいいでしょう。　この方法を利用すると、一定の日時まで、あるいは一定の日時以降は、別のページにリダイレクトさせて、ページを利用できる期間を設定するということにも使えます。また、IPアドレスに対する応答を切り替えるということにも利用できます。→このセクションのまとめ　非対応のブラウザーでアクセスしたときにメッセージを表示して、ページ合成を行わない仕組みをINTER-Mediatorは持っています。その仕組みを利用するためのページファイルの作成方法などがあり、どこまで制限を行うかによって対処を検討する必要があります。→8-6サービスサーバの役割と稼働INTER-Mediatorは、サーバサイドではPHPでのプログラムが稼働しますが、常駐したサービスを提供するために「サービスサーバ」というNode.jsによるサーバを起動することもできます。このセクションでは、サービスサーバの動作原理と管理手法を説明します。→→サービスサーバーの役割　サービスサーバは、サーバ上で常駐するサーバで、→→マルチクライアントでの同期（『5-3　マルチクライアントでの同期』で解説）を実現するために稼働するものです。現状はもうひとつ役割があって、それは、入力結果の検証を行う→バリデーション（『3-5　バリデーション』で解説）の設定があるとき、クライアントサイドだけでバリデーションを行うのではなく、サーバに伝達されたデータについても同一の式を検証して適用します。クライアント同期はサービスサーバが稼働していないと同期処理は動きません。サーバサイドのバリデーションはサービスサーバが起動すれば稼働しますが起動していない場合にはその処理は行われないようになっています。　動作上は、PHPからサービスサーバのHTTPのリクエストを出してさまざまな処理を行いますので、原理的にはINTER-Mediatorのサーバとは別にサービスサーバを稼働するということもできます。もちろん、単一のサーバで運用することもできます。少しややこしいですが、PHPで実装しているINTER-Mediatorのメインサーバと、サービスサーバ、そしてクライアントの関係を図8-6-1に示しました。1から順番に追っていただくと、ページの表示とその後の更新の伝達において、それぞれのモジュールがどんな役割を持っているのかがわかると思います。図8-6-1　クライアント同期とサービスサーバ→→→サービスサーバーを起動する方法　まず、サービスサーバのインストールですが、INTER-Mediatorではcomposerでnode.jsをインストールして、それを使って自動起動を試みます。そのため、何もしなくても動き始めるように見えるかもしれませんが、背後では色々と処理は進めています。なお、既定の状態では、サービスサーバは起動しないので、サービスサーバを手動で動かすことになります。サービスサーバのパラメータは、params.phpファイルに記述して、PHP側でそれを読み取って引数に指定してnodeを起動しているので、その必要なパラメータが分かれば、手動でのサービスサーバの起動は可能です。　変数既定値動作→$notUseServiceServertruefalseにするとサービスサーバを起動する→$activateClientServicefalsetrueにするとクライアント間の同期が機能する$serviceServerProtocolwsクライアント間同期で、クライアントがサービスサーバに接続するプロトコル。指定可能なものはws、http、wss、https$serviceServerHostlocalhostクライアント間同期で、クライアントがサービスサーバに接続するホスト名$serviceServerPort11478クライアント間同期で、クライアントがサービスサーバに接続するポート番号$serviceServerKey\"\"サービスサーバでのTLS接続をするためのキーファイルの指定$serviceServerCert\"\"サービスサーバでのTLS接続をするためのサーバ証明書ファイルの指定$serviceServerCA\"\"サービスサーバでのTLS接続をするための中間証明書ファイルの指定$serviceServerConnecthttp://localhostINTER-Mediatorサーバからサービスサーバに接続するためのURL$bootWithInstalledNodefalsetrueにすると、composerではなく独自にインストールしたnodeを使ってサービスサーバを起動する$preventSSAutoBootfalsetrueにするとサービスサーバの自動起動を行わない（利用するなら手動等での起動が必要）$backSeconds3600 * 24 * 2クライアント同期のためのデータを保持する期間を秒数で指定する$foreverLog-ログファイルのパス表8-6-1　サービスサーバに関するparams.phpファイルでの設定　サービスサーバは既定値ではオフにしています。Ver.6〜11までは、サービスサーバがオンの状態が既定値でしたが、特定の機能が必要になる時にオンにするように、Ver.11の途中で変更しました。サービスサーバを起動するには、$notUseServiceServer変数にfalseを入力します。これにより、サービスサーバが自動起動します。サービスサーバの起動は、composerでインストールしたnode.jsで行いますが、通常は、vendor/bin/nodeといったディレクトリにインストールされるはずです。このパスを考慮して自動起動するので、基本的には動くはずですが、もしその操作がうまくいっていないようなら、サーバ自体にnode.jsをインストールして、$bootWithInstalledNode変数をtrueにします。すると、単にパスにあるNode.jsを利用するようになります。　サービスサーバ自体はnodeコマンドで起動は可能ですが、→nodemonを利用して起動するようにします。nodemonはcomposerから呼び出されるnpmで自動的にインストールされます。したがって、デーモンの起動監視を行うnodeと、サービスサーバを動かすためのnodeの、2つのnodeによるプロセスが起動しているはずです。強制終了したい場合は、監視デーモン側を先に落とさないと、勝手に再起動がかかるので注意が必要です。　サービスサーバは動作状況を標準出力に書き出します。その結果を→→ログとして残せます。$foreverLogを省略すると、PHPのsys_get_temp_dir()関数で得られたディレクトリ以下にログファイルを残しますが、変数を絶対パスで指定するとそのファイルがログファイルになります。現在はサービスサーバの起動はnodemonを使って行っていますが、以前はforeverを使っていた名残で名前が残ってしまっていますが、今は、nodemonあるいはサービスサーバ自体の標準出力がログファイルに残るようになっています。　もし、サービスサーバの自動起動がうまくいかないあるいはサービスサーバが別サーバで運用したいなどの理由で、サービスサーバを自動起動しない場合は、$preventSSAutoBoot変数をfalseにします。→→この時、サービスサーバは、nodeあるいはnodeの代わりにnodaemonを使って、以下のようにパラメータを指定することで起動します。カレントディレクトリがINTER-Mediatorのルートであるとします。リスト8-6-1　サービスサーバを起動するコマンドとパラメータnode src/js/ServiceServer.js ポート番号 originURL キーファイル 証明書ファイル CAファイル　パラメータを順に解説します。ServiceServer.jsはサービスサーバのソースコードです。そして、開くポートの番号、そしてoriginURLを指定します。originURLはINTER-MediatorサーバのURLです。その後、キーファイル以降はそれぞれのパスを指定しますが、TLSを利用しないのであれば、キーファイル以降は指定は不要です。→クライアント同期を利用する場合のparams.phpでの設定　クライアント間の同期を利用する場合、$notUseServiceServerをfalseにすると同時に、$activateClientServiceをtrueにします。ただし、これだけではクライアントとサーバが同一のホスト、つまりは開発環境でしか稼働しないでしょう。クライアント間同期を実現数するためには、INTER-Mediatorサーバ、サービスサーバ、クライアントの3つの通信が確立している必要があります。このうち、INTER-Mediatorサーバとクライアントの間では、INTER-Mediatorアプリケーションが稼働する状態であれば当然ながら接続も確立しています。INTER-Mediatorサーバとサービスサーバ間の通信は、前者が後者をコールすることが発生します。その通信のための接続先の指定は、$serviceServerConnect変数に対してフルのURLで指定をします。同一サーバならhttp://localhostで構わないですが、異なるホストの場合には、IPアドレスやホスト名を指定します。　そして、サービスサーバとクライアントの間の通信は→WebSocketを利用します。JavaScriptのライブラリである→SocketIOを利用していますが、クライアントからサービスサーバに対してコネクションが確立しなければなりません。$serviceServerProtocol、$serviceServerHost、$serviceServerPortによって、クライアントから接続するサービスサーバのURLを合成します。ここで→→ポートは通常は使われていない大きな数字を指定しますが、何を指定すれば良いかという特に決まりはありません。すでにサーバとして使っているポートを指定した場合は、サービスサーバがエラーをログに出して、起動は行いません。起動はできたとしても、クライアントとサービスサーバが稼働しているホストが、指定したポート番号での通信ができる必要があります。うまくいかない場合は、まずはファイアウォールの設定を確認しましょう。インターネットでは通信経路にさまざまな機器が接続されていて、どこかで通信を遮断していればもちろん通信はできなくなります。　サービスサーバとクライアントの間の通信において、→→TLSでの運用をしたい場合は、キーファイルや→証明書ファイルの絶対パスを、それぞれの該当する変数に行います。ただし、これらのファイルは、Webサーバが実行しているユーザで読み出し権限がなくてはなりません。例えばLet’s Encryptでサーバ証明書を作ると、/etc/letsencrypt以下にファイルが作られるので、そのパスを指定すれば良いかと思うところですが、これらのファイルのうちキーファイルは、rootのみに読み書き権限がある状態になっています。それではアクセス権を変えてと思うかもしれませんが、それはセキュリティ上のリスクになります。Apacheはrootユーザでこれらのファイルを読み込むのですが、Node.jsでサーバを運用する場合はそうしたroot処理はありません。結果的に、キーファイルなどを含めて必要なファイルを別途どこかWeb公開していないような安全な場所にコピーして、そこの絶対パスをparams.phpファイルの変数に指定するのが順当と思われます。Let's Encryptの場合だと自動的に3ヶ月に1度証明書は更新されますが、スクリプトを組んで更新された証明書を別ディレクトリにコピーするなどして運用する必要が出てくるでしょう。　クライアント間同期が始まると、どのクライアントにどのテーブルのどのレコードが表示されているかをデータベース上のテーブルで管理するようにします。ページを正しく閉じればその情報も消されますが、Webブラウザの場合は正しく手順通りに閉じてくれない場合も発生します。そこで、$backSeconds変数に指定した秒数が経過すると、同期のための情報はクリアするように動作します。例えば、1日あるいは数日後に消えるというのは順当な設定かと思われます。→このセクションのまとめ　サービスサーバは、クライアント間同期を使うには、起動する必要がありますが、params.phpファイルを指定することで、基本的に自動的に起動します。\n"
    },
    {
        "id": 1009,
        "parent": "/ja/tutorial/",
        "path": "/ja/tutorial/proof-09.html",
        "title": "INTER-Mediatorの実環境での展開",
        "breadcrumb": "chapter 9",
        "body": "→Chapter 9INTER-Mediatorの実環境での展開この章は、INTER-Mediator Ver.12をもとに記載しました。INTE-Mediatorを実際にサーバー等で運用するまでの話題をこの章で扱います。具体的には、データベースとWebサーバーのインストールや運用、そして、INTER-Mediatorで作ったファイル群をどのように管理するのかなどを説明します。しかしながら、例えばMySQLの動作や設定方法の全てをここで説明するのはこのトレーニングコースのカバー範囲を超えてしまいます。データベースに関する知識は他の一般的な教材を使って習得済みであるとの前提で、INTER-Mediatorで使う場合のポイントなどを解説します。なお、筆者の新居は通常の開発はMySQLで行っているため、MySQLのみの詳細な解説となります。→9-1データベースとWebサーバのインストールINTER-Mediatorがサポートする3種類のオープンソースデータベース、そしてFileMaker Serverについてインストールと運用のポイントを解説します。それぞれの製品の概要などは各製品のサイトなどで確認してください。なお、FileMakerに関しては、『9-3　FileMakerを巻き込む開発に関して』にまとめてあります。→MySQLのインストール　→MySQLは最も人気の高いオープンソースデータベースであり、レンタルサーバーのプロバイダでも利用できる場合が多いこともあって、広く利用されています。→→MySQLのライセンス　MySQLはオープンソースソフトウェアとして開発されており、GNU →GPLv2と商用ライセンスのデュアルライセンスとなっています。用途によって無償で利用できるCommunity Edition（以下、「コミュニティ版」）を利用できますが、そうでなければ有償のStandard Edition、Enterprise Edition、Cluster CGE等（以下、まとめて「商用版」）をライセンス料を払って使用します。コミュニティ版を利用できる条件をまとめると次のようなものです。必須条件をいずれも満たした上で、条件1ないしは条件2を満たせば、コミュニティ版を利用できます。[必須条件] 開発したソフトの動作にMySQLが必要である。[必須条件] クラスタ、オンラインバックアップ、パーティショニング、Enterprise Monitor等商用版だけに搭載された機能を利用しない。[条件1] 開発したソフトを他の人に配布しない。[条件2] 開発したソフトを他人に配布する場合には、そのソフトウェアのソースコードを引き渡し、改変と再配布を誰にでもできるようにする。すなわち、GPLで利用する。　MySQLを前提にした開発アプリケーションを外部に対して全く公開しないのなら、[条件1]に該当してコミュニティ版を無料で使えます。また、ソフトウェアの複製や配布が伴わなければ、ソースコードを譲渡・公開することまでは強制されません。したがって、システムを一般に販売するわけではなく、コミュニティ版を入手した開発者がシステムを利用する範囲においてはGPLの適用を過度に恐れる必要はありません。　[条件2]は、解釈にもよりますが、受託開発したものについてはGPL運用しない限りはコミュニティ版を利用できる要求を満たさないと言えます。有償、無償を問わず複製および再配布の際にはソースコードも引き渡さなければいけないという点で、一般的なWebベースの業務システム開発への利用を躊躇する人もいます。GPLをそのまま適用するとしたら、開発物を複製・配布する際にソースコードを譲渡しない場合には商用版を購入して利用する必要がある一方、以下に示す例外措置とさまざまな情報を元にした解釈を元にすればGPL運用しなければならない範囲は限定的であると言えます。　まず、MySQLのライセンスドキュメントでGPLに加えて宣言されている→FOSS License Exception（Oracle's Free and Open Source Software License Exception、以下「FOSS」）で、オラクルはライセンスの例外措置を定義しています。FOSSによりオラクルが規定したいくつかのオープソースライセンスのソフトウェアに関して、MySQLと一緒に利用しても、オープンソース側のライセンスは変更する必要がありません。FOSSの範囲であれば、GPLを適用せずにコミュニティ版を利用できるケースがあるということです。関連するソフトウェアを対象としてライセンスがどうなるのかを検討すると、ApacheやPHPは本来のランセンスで利用でき、INTER-Mediatorも本来のMIT Licenseで利用が可能であることは確かです。　ここで、[条件1]や[条件2]での「開発したソフト」がどの範囲までなのかということが問題になります。MySQLが主張するGPLv2では、MySQLを利用した全ての開発物を配布する際にはソースコードも譲渡すれば違反しないと読み取れる内容です。したがって、全ての開発物を複製・配布する際にはソースコードを引き渡すのが「必要である」という解釈がなされるわけです。しかしながら、FOSSを記述したサイトのQ&amp;Aの最初の項目には、FOSS自体がMySQLのクライアントライブラリにおいてGPL以外のライセンスを可能にしているものだと説明されています。例えばPHPのMySQL向けドライバーは、MySQLが提供するライブラリをPHPから利用できるようにしたものであり、MySQLクライアントと強く結びついたものです。PHPのドライバーは明らかにMySQLを基にして作られたものであり、FOSSが宣言されていなければ、PHPのMySQLドライバーはGPLにしなければならないと言えますが、FOSSによってPHPライセンスであることを主張できます。　この点を考慮すれば、GPLの及ぶ範囲すなわち「開発したソフト」は、ライブラリ利用や完全統合といった強いソフトウェアの結びつきに対して適用され、「プロセス間通信」や「ネットワーク経由の通信」のような独立プロセス間を接続した場合には適用されないと解釈できます。したがって、コミュニティ版をそのまま使い、Apache+PHPでサーバーを組み、INTER-Mediatorでシステムを作ったときに、自分で作ったHTMLやJavaScriptのプログラムなどは、条件にある「開発したソフト」に該当せず、GPLの及ばない範囲として独自にライセンスを適用できることを意味していると読み取れます。ただし、これは記述されている事実を基に判断したことであり、Webサーバーや開発したアプリケーションに対してGPLの適用はしないと明確に書かれてはいないということをどのように考えるかにかかわる問題でしょう。　以上の解釈を元に、MySQLのコミュニティ版で稼働するINTER-Mediatorで受託開発をしたシステムを納品する場合について、いくつかの事例で考えてみます。自社で使用するシステムを開発する場合は[条件1]に該当するため、コミュニティ版を利用できます。顧客が契約したプロバイダのレンタルサーバーですでにMySQLをサービスとして稼働しているような場合は、受託開発部分にはGPL適用部分がないので[条件1]に該当し、コミュニティ版を利用できます。顧客が所有するサーバーにセットアップする場合、すでにMySQLがセットアップされているなら[条件1]に該当し、コミュニティ版を利用できます。一方、MySQLのセットアップを請け負った場合はやや難しいですが、顧客が入手したMySQLのセットアップ作業を代行するのであれば[条件1]に該当し、コミュニティ版を利用できます。一方、納品物に「MySQL」あるいは「MySQLセットアップ」という項目があり、業者側がMySQLを取得して顧客のサーバーにインストールするとしたら、クライアントライブラリも含まれるため[条件1]には該当しません。また、MySQLを搭載したサーバーとして納品する場合も最後の状況と同様です。この場合、開発した部分はGPL運用しなくてはいいものの、納品先でGPL運用する必要がある素材を渡すことになります。一般には、そのようなソースコード公開の必要がある品目を使用するよりも、商用版を購入してシステム全体を顧客が独占的に使用できる状態にする方が望まれるのではないかと思われます。MySQLで使用するキャラクタセット　本稿を執筆時点では、Ver.8.2がリリースされていますが、プロバイダーにあるものなどを含めて、Ver.5.7〜8.2が混在している状況です。なお、MySQLにはVer.6, Ver.7は存在せず、Ver.5.7の次はVer.8.0です。Ver.5系列は、Premier Supportは遥かに過ぎ、Extended Supportの期間を過ぎていても、プロバイダ等で利用可能な状態になっている場合がよくあります。バージョンをあげて動かなくなってしまうことを嫌っての対処となると思いますが、場合によっては古いバージョンを使わないといけないことがあります。バージョンの違いでまずは気をつけなければならないことは、Unicodeサポートです。Ver.5.1でUTF-8をサポートしていますが、この時は長さが3バイトまでしかサポートしていませんでした。日本語のカナや漢字のほとんどはUTF-8では3バイトですが、スマホの普及とともにUTF-8で4バイトになる文字も、クライアントで利用できるようになってきました。代表的なものは絵文字ですが、「𥔎」（サキ；石偏に立可）などの一部の人名で使われるような漢字も含まれています。3バイトまでのキャラクタセット名が「utf8」なのに対して、4バイトまでのUTF-8の文字を利用できるキャラクタセットは別の名前「→utf8mb4」となりました。これはデータベースの設定やあるいはスキーマ定義の時などに意識してutf8mb4と記述をしなければなりません。このエンコード名はVer.5.5.3からのサポートなので、入手できるVer.5.5のものでは原則利用できると考えて良いでしょう。また、バージョンごとに既定値が違うことから、以前のバージョンで動いていたビューがあるバージョンからダメになるなど、バージョン間の違いは無視できるものではありません。エラーメッセージを見ながら、必要な対処を行う必要があることは想定しておくべきです。インストーラを利用したインストール　MySQL Community版のインストールは、ダウンロードのページから適切なエディションやOS等を選択すれば可能です。一方で、Linuxの場合は、yumやapt-get、aptitude等を使うことになります。この時、公式のレポジトリでは古いバージョンしか入手できないかもしれません。これらのコマンドによるインストール機能向けのインストーラーも、MySQLのサイトで入手できます。ダウンロードのページで、サブメニューを見ると、Yum Repository、APT Repository、SUSE Repositoryといった項目が見えます。これらのページから、レポジトリとしてMySQLが用意した最新バージョンをインストールできる箇所を追加できる仕組みを提供しています。ここでの説明を見て、Linux上でレポジトリを追加して、インストール作業をすれば良いでしょう。　リスト9-1-1は、Ubuntu Server 22での例です。ディストリビューションの中にダウンロード可能なレポジトリは登録されているので、コマンドを入れてインストールするだけです。通常は、サーバ版とクライアントをインストールします。Ubuntu 22では、MySQL 8.0がインストールされます。一般に、ディストリビューションのメジャーバージョンごとに、サポートするMySQLなどのアプリケーションのバージョンも固定化されます。もし、8.2などの違うバージョンのMySQLをインストールしたいのなら、→→レポジトリを追加しますが、詳細はそれぞれのディストリビューションごとに異なるので調べて実施してください。リスト9-1-1　Ubuntu Server 22でMySQLサーバーをインストールする例sudo apt install -y mysql-server\nsudo apt install -y mysql-client　いずれの方法でインストールをしても、データベース領域の初期化が行われ、あらゆる権限を持った→→rootアカウントを自動的に作成します。インストーラーがあるものは、途中でそれをダイアログボックス等で表示するので、基本的にはそこで書き留めるか、画面ショット等を作成しておくのが良いでしょう。Ubuntu Server 22に入るMySQLだと、rootアカウント自体のパスワードは把握する必要がありませんが、MySQL自体をrootで利用するためには、root権限のあるアカウントでクライアントコマンド等を利用する必要があります。コマンドで作業しているのであれば、sudo実行可能なアカウントから「sudo mysql -uroot データベース名」のようなコマンドで、MySQLにrootとしてログインして、データベースを利用できるようになります。sudo実行のための現在ログインしているアカウントのパスワードはキータイプする必要がありますが、OSのrootあるいはMySQLのrootアカウントのパスワードは入力する必要はありません。　インストーラでのインストール後は、→mysql_secure_installationコマンドを実行するようにメッセージが出てきます。一方、最近のLinuxディストリビューションでは、このコマンドの実行に相当することは自動的に終わっているようです。このコマンドを実行することで、セキュリティ上の問題点となりそうな状態を、そうでない状態にしてくれます。以下の処理を行いますが、rootのパスワードの変更以外は、するかしないかの選択、つまりYes/Noの選択です。通常はYesを選んで設定変更をすべきですので、コマンドを実行して設定を変更しておきましょう。なお、rootパスワードについては、特にVer.5.7では複雑な文字列にしなければなりません。ここで適当にパスワードを変更するのは意外に難しいので、後から変える方がいいかもしれません。rootパスワードの変更。Yesを選択すると新たなパスワードを要入力ユーザーアカウントが指定されない時のアノニマスユーザーの削除別のホストからのrootアカウントによるログインを禁止するテスト用データベースの削除アクセス権設定を再度適用する（最後に念のため）MySQL向けのスキーマはどこまで記述が必要か　スキーマ定義では、テーブルとビューを定義します。テーブルでは、テーブル名やフィールド名とその型を記述するのは当然ですが、INTER-Mediatorの動作上はそこままでほぼOKです。ただし、主キー値を示す「primary key(フィールド名)」等の記述と、検索やソートに使用するフィールドに対するインデックスは必ず作成してください。なお、主キーについては定義ファイルでkeyキーで指定でき、スキーマ上での主キーをそのまま指定することがほとんどですが、動作上は別のフィールドも指定できますし、それが一意な値なら編集もできます。その場合はkeyキーに指定する値にインデックスを作成しておきます。　一方、外部キー制約については、必ずしも必要ではありません。制約として設定しておいて、データベース上に不整合が起こらないようにすることが必要と考えるのであれば、記述しても構いません。しかしながら、実際の動作は定義ファイルのrelationキーでの指定が利用されるため、データベーススキーマ上にテーブル間の関係は記述してもINTER-Mediatorとしては使いません。通常、不整合が発生するようなユーザーインターフェースを作ることはありえないと思われるので、正しくユーザーインターフェースを作成していれば、外部キーの指定はスキーマになくてもいいでしょう。データベースの利用方法や設定については『2-1　データベースからの取り出し設定』を参照してください。→MySQLの設定のポイント　→→MySQLの設定ファイルと言えば、/etc/→my.cnfの変更ということになりますが、実際にはいろいろなファイルで指定ができます。したがって、現在、どんなパスのファイルが使用されるかを知る必要があります。そのためには、「mysql --help」を実行します。もちろん、mysqlコマンドのヘルプを表示しますが、その中にリスト9-1-2のような記述が含まれていて、2行目のパスのファイルが順次読み込まれます。つまり、/etc/my.cnfなどのファイルが読み込まれますが、これらの順番に読み込みを全て行い、ファイルがあれば、その設定も読み込まれます。もし、複数のファイルで同一の設定対象に対する定義がある場合には、後から読み込んだファイルの内容が有効になります。/etc/my.cnfを読む限りは、このファイルはMySQLのアップデート時に上書きされる可能性があるので、自分自身の設定は別のファイルにするのが良いと記載されています。INTER-MediatorのVMは、/etc/mysql/my.cnfに実際の設定を行っています。リスト9-1-2　「mysql --help」コマンドの出力の一部Default options are read from the following files in the given order:\n/etc/my.cnf /etc/mysql/my.cnf /usr/local/mysql/etc/my.cnf ~/.my.cnf　クライアントからの接続をするためには、ホスト接続の場合はポート番号、ソケット接続の場合はそのパスを知りたくなります。→mysqlshowコマンドに--helpをつけて実行した結果の末尾に変数の値が出力されますが、その中にあるsocketやportを見ることで参照可能です。しかしながら、この場合は、my.cnfに設定がある場合には、この方法で参照できますが、コンパイル時の既定値で稼働させた時には、この方法でソケット等が確認できない場合もあります。リスト9-1-3　「mysqlshow --help」コマンドの出力の一部Variables (--variable-name=value)\nand boolean options {FALSE|TRUE}  Value (after reading options)\n--------------------------------- ----------------------------------------\ncharacter-sets-dir                (No default value)\ndefault-character-set             utf8mb4\ncount                             FALSE\ncompress                          FALSE\n\t:\nplugin-dir                        (No default value)\nport                              3306\nshow-table-type                   FALSE\nsocket                            /var/run/mysqld/mysqld.sock\nssl                               FALSE\n\t:　mysqlshowコマンドで参照できない場合には、→mysql_configコマンドを使用します。ただし、このコマンドはWindowsでは使えませんが、LinuxやmacOSでは利用可能です。引数なしはUsage:が見えるのですが、その下のOptions:の右の [...] で示されているのは、実際に設定された値です。この値がコンパイル時に指定されたもので、ソケットやポートは設定ファイルで変更していない場合にはこの設定に従うことになります。もし、設定ファイルで変更している場合には、ここで見える値は実際には使用されていないソケットのパスになります。リスト9-1-4　「mysql_config」コマンドの出力の一部Usage: /usr/bin/mysql_config [OPTIONS]\nOptions:\n        --cflags         [-I/usr/include/mysql -DBIG_JOINS=1  -fno-strict-aliasing    -g -DNDEBUG]\n        --include        [-I/usr/include/mysql]\n        --libs           [-L/usr/lib/x86_64-linux-gnu -lmysqlclient -lpthread -lz -lm -ldl]\n        --libs_r         [-L/usr/lib/x86_64-linux-gnu -lmysqlclient_r -lpthread -lz -lm -ldl]\n        --plugindir      [/usr/lib/mysql/plugin]\n        --socket         [/var/run/mysqld/mysqld.sock]\n        --port           [0]\n        --version        [5.5.49]\n        --libmysqld-libs [-L/usr/lib/x86_64-linux-gnu -lmysqld -lpthread -lz -lm -lwrap -lcrypt -ldl -laio]\n        --variable=VAR   VAR is one of:\n                pkgincludedir [/usr/include/mysql]\n                pkglibdir     [/usr/lib/x86_64-linux-gnu]\n                plugindir     [/usr/lib/mysql/plugin]設定ファイルへの記述　my.cnfファイルに記述する内容としては、キャラクタセットを「→default-character-set=utf8mb4」で指定しておくのが確実です。プロセスごとに [ ] で囲ってそれ以降の行に「変数名=値」の行を記述します。例えば、[mysqld] は、mysqldつまりMySQLのサーバーに対する処理を記述します。なお、現実には同じサーバーでMySQLのクライアントも利用しますし、SQLダンプでmysqldump等も使います。これらの設定も、my.cnfファイルに記述しておくと便利でしょう。リスト9-1-5はmy.cnfファイルの一例です。実際にはもっと多くの項目を設定することもあるでしょう。ソケットのパスを変えたいような場合でも、こちらに記述をすれば、コマンド起動時にパラメーターとして記述する必要は無くなります。なお、設定ファイルへの記述に問題があると、MySQLが起動しません。その場合、/var/log/mysql/error.logなど、エラーログを確認することで、問題のある記述がどの部分かは特定できます。リスト9-1-5　my.cnfファイルの例[mysqld]\nvalidate_password_policy = LOW\ncharacter-set-server = utf8mb4\ndefault_password_lifetime = 0\nsql_mode = TRADITIONAL\n\n[mysql]\ndefault-character-set=utf8mb4\n\n[client]\ndefault-character-set=utf8mb4\n\n[mysqldump]\ndefault-character-set=utf8mb4　ここで、mysqldにある設定項目は、Ver.5.7になってからの過去のバージョンとの互換性を確保するために、よく追加されるような項目を記述しました。まず、既定値の→パスワードポリシーは非常に厳しく、複雑な文字と思って作ったものでもその一部に単語として読めるものがあると排除するなど、手作業でパスワードを変更するのは一苦労しそうです。「→validate_password_policy = LOW」にすれば、ルールはかなり緩くなり、8文字以上であればパスワードとして認められます。その状態で、一定以上の複雑なパスワードを管理者が責任を持って指定することで、データベースサーバーのパスワード運用は問題なくできると考えます。このパスワードポリシーを運用するために、MySQLはプラグインを利用します。MySQLのサイトのレポジトリを利用してインストールした場合はこのプラグインが組み込まれます。　Ubuntu 16.04.1の場合には標準のレポジトリからのインストールでMySQL Ver.5.7が入ります。しかしながら、パスワードチェックのプラグインが組み込まれないため、validate_password_policyの記述自体の解釈ができずエラーとなってMySQLが起動しません。そのままプラグインなしで利用するなら、validate_password_policyの記述は削除してください。　MySQL Ver.5.7.4以降は、パスワードの有効期限が360日となっています。つまり、その期間内にパスワードの変更を行わないと、セットアップした1年後くらいにいきなり接続ができなくなります。しかしながら、これは、明らかに忘れてしまいそうな設定です。「→default_password_lifetime = 0」と設定すれば、パスワードは無期限に使えます。なお、Ver.5.7.11以降は既定値でパスワードの期限は無期限となりました。　MySQLはバージョンごとにSQLコマンドのエラー時の処理などが違っています。「→sql_mode = TRADITIONAL」を使えば、Ver.5.6以前に一番近い状態になります。SQLのエラーが出る場合には、この方法を試してみると、うまく行く場合もあります。INTER-Mediatorは内部でSQLコマンドを生成しているため、「SQLコマンドを変更する」ためにはソースコードを変更しなければなりませんが、それは簡単なことではありません。sql_modeをTRADITIONALにしなくても原則稼働するようにチェックはしていますが、漏れがあるかもしれません。もし、生成されたSQLに問題がありそうなら是非ともバグレポートをするとともに、この設定でMySQLの動作を古いバージョンと同様になるようにして運用をしてみてください。→→→PostgreSQLのインストール　PostgreSQLは古くからあるデータベースで、その起源は80年代にまで遡ります。早くから標準SQLの仕様のかなりの部分をカバーした本格的なRDBとして評価を得てきました。しかしながら、2000年前後は世界的に見ればSQLの制約があってもスピードの速いMySQLへの注目が集まる一方、なぜか日本ではPostgreSQLの方の割合が海外より高かった印象があります。日本人は「標準SQLに近い」ことに価値を感じるのかもしれません。その結果、日本語での情報も古くからインターネットを中心に共有されてきました。その後、PostgreSQLのVer.8の途中くらいからはMySQLとの性能差はほとんどなくなるくらい、パフォーマンスを上げてきました。もっとも、MySQLも制限のあったSQLのさまざまな機能をサポートしてきていることもあって、結果的にこれら2大オープンソースデータベースに大きな差がないのが現状です。　PostgreSQLとMySQLの比較の上で語られることが多いのは、ライセンスです。PostgreSQLはBSDライセンスであり、PostgreSQLを使用して作成したシステムのソースコードの公開は必要なく、ライセンスを明示すれば再配布は可能です。そのため、MySQLに比べてより確実な「フリー」であるソフトウェアと認識されています。　本稿を執筆時点では、Ver. 16.1がリリースされていますが、プロバイダーにあるものなどを含めて、Ver.9系列以降が混在している状況です。macOSやWindows向けにはインストーラーを配布しているので、原則として、それを使えばOKです。ダウンロードには、ダウンロードのページから適切なエディションやOS等を選択すれば可能です。Linuxの場合は、公式のレポジトリでは古いバージョンしか入手できないかもしれません。しかしながら、ダウンロードのページにはディストリビューションごとのインストール方法が記載されており、基本的にはパッケージシステムに新しいレポジトリを追加して、そこからバイナリをインストールする形式です。インストールするパッケージは「postgresql」あるいは「postgresql-9.5」などのバージョン入りのものも含めて、データベースサーバーのパッケージだけで基本的には利用できます。サーバーだけでなく、クライアントとして動作するためのライブラリやコマンドなども一緒にインストールされます。データベースの利用方法や設定については『2-1　データベースからの取り出し設定』を参照してください。→→→SQLiteのインストール　SQLiteはプロセスを起動しないタイプのデータベースです。ネットワークでの共有はSQLiteだけではできませんが、データベースファイルを用意するだけでいいので、手軽に利用できることがあります。利用するためにはOSに対応したライブラリが必要ですが、SQLiteのサイトからダウンロードできます。Linuxのパッケージでは、そのままの名前「sqlite」で検索をかけてみて、レポジトリの内容を確認しましょう。現在はUnicode対応したVer.3系列が主に利用されていますが、あまりバージョン間の違いについては話題にならないくらいなので、バージョンアップで大きな違いが発生するということはあまりないソフトウェアではないかと思われます。ただし、実際にバージョンが問題になったケースとして、SQLでのIIF文のサポートです。Ver.3.32.0で対応したのですが、それ以前のバージョンはいわゆるif文をSQL内で記述できず、caseを使う必要があり、記述が長くなりがちでした。　SQLiteは「パブリックドメイン」であるとして、ライセンス契約をするという考え方は基本的にはなく、自由に利用できるとされています。ただし、パブリックドメインという考え方が受容できない状況や、どうしてもライセンス契約が必要という場合には6000ドルでライセンス契約できることになっていますが、インターネット検索しても話題にもなっていないようなので、ほとんどの利用者はパブリックドメインで使用していると思われます。　SQLiteの使用においては、データベースファイルのパスを指定するだけです。ファイルが存在しなければ自動的にファイルは作られます。INTER-Mediatorのサンプルファイルは「/var/db/im/sample.sq3」というパスを利用しています。拡張子は統一したものはなく、また、SQLite自体も拡張子はどんなものでも動作はするようです。注意が必要なのはファイルのアクセス権です。このファイルは、PHPが稼働しているプロセスのユーザーに対して読み書きの両方の権限が必要です。LinuxやmacOSの場合、Apache 2の内部でPHPは動くので、www-dataや_apache、_wwwなどのApacheのユーザーが何かをpsコマンド等で調べてみて、そのユーザーに対するアクセス権を設定します。そして、ファイルだけでなく、前のパスの例では、そのファイルが存在するフォルダー「/var/db/im」も、同様にApacheのユーザーで読み出しだけでなく書き込みの権限が必要です。実際には、ひとつのファイルではなく、複数のファイルを利用するため、フォルダーにも書き込み権限がないと、他のファイルが作成できず、データベースとしては動作しなくなります。データベースの利用方法や設定については『2-1　データベースからの取り出し設定』を参照してください。→→→SQL Serverのインストール　MicrosoftのSQL Serverは、Windows版だけでなくLinux版もあります。開発に利用するDeveloper版であればライセンス料が不要ですので、手軽に試用することもできます。むしろ最近は、Azure上でのデータベースとしてSQL Serverが使いやすい状態になっていることもあり、注目されているとも言えるでしょう。　Ubuntu 16 Serverだと、「sudo apt-get install -y mssql-server」でサーバー本体はインストールできます。さらに、サーバーを利用するコマンドであるsqlcmdを利用できるようにするためには、以下のコマンド入力してセットアップが必要になります。いくつかのLinuxディストリビューションについては、Microsoftの「SQL Server on Linux」というページに記載があるので、そちらも参考にしてください。リスト9-1-6　SQL Serverのツールのインストールcurl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -\nsudo add-apt-repository \"$(curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list)\"\nsudo apt-get update\nsudo apt-get install -y mssql-tools unixodbc-dev\necho 'export PATH=\"$PATH:/opt/mssql-tools/bin\"' &gt;&gt; ~/.bash_profile\necho 'export PATH=\"$PATH:/opt/mssql-tools/bin\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc→このセクションのまとめ　INTER-Mediatorでサポートされているデータベースを利用するための情報について、MySQLを中心に説明をしました。いずれのデータベースも、インストールや運用の情報は、製品に添付されていたり、インターネットで検索することができます。それらの情報を有効に活用しましょう。→9-2Webサーバーのインストールと準備サーバーサイドには、データベース以外にPHPが稼働するWebサーバーが必要です。もちろん、適度に分散したり、あるいはデータベースサーバーとWebサーバーが別ホストといったこともあるかもしれませんが、基本は「PHPが稼働するWebサーバー」です。なお、FileMakerに関しては、『9-3　FileMakerを巻き込む開発に関して』にまとめてあります。→→→Webサーバーのインストールと管理　Windowsでは→IIS、LinuxやmacOSでは→Apacheが最も一般的なWebサーバーです。このところ、nginxも使われ始めていますが、IISやLinuxを使う上では、最新版のこれらのWebサーバーサービスを使うことで、おおむね目的は達成できるでしょう。また、以前はXAMPPなどを使ったり、VMを使うということもあったかもしれませんが、現状ではWindowsでLinuxを稼働させる「WSL（Windows Subsystem for Linux）」、あるいはさまざまなプラットフォームで稼働するDockerをはじめとするコンテナを使うこともでき、稼働環境は多種多様になっています。　Webサーバーの管理では、「ドキュメントルート」と呼ばれるWebサーバーで公開されるファイルシステムの領域の中の一番上位のディレクトがどこにセットされているかを知ることが重要です。また、Webサーバーを稼働させるための設定がどのディレクトリにあるのかを知る必要があります。WindowsでのWebサーバー　IISをインストールするには、Windowsサーバーの管理ツール「サーバーマネージャー」で、「役割の追加」の作業を行い、「Webサーバー（IIS）」を追加します。他に必要なサービスなどは通常は自動的に判定してインストールをしてくれます。　IISはWindows Serverの管理ツールを利用する事以外はありえないと思うので、それを使いこなしましょう。通常は、Cドライブのルートにinetpubフォルダー作られて、そこのwwwrootフォルダーがIISのドキュメントルートになっています。ルートのディレクトリの変更なども管理ツールで行います。また、ログファイルはCドライブのinetpubフィルダ内にあるlogsフォルダーの中のLogFilesフォルダーが既定値となっています。ここにW3SVCという名前で始まるファイル名で、ログファイルが作られています。エラーログなどそのほかのログは、logsフォルダー内にフォルダーで分類して作られます。LinuxでのWebサーバー　Linuxについては、通常はOSのディストリビューションでかなり新しいバージョンのビルドが常に手に入ります。例えば、apt-getでは「apache2」を、yumでは「httpd」をインストールすれば良いでしょう。　UNIX系ではOSやディストリビューションによって管理方法が微妙に違っています。ドキュメントルートは、以前は/var/wwwが多かったのですが、最近のディストリビューションでは/var/www/htmlであることが一般的となってきています。一方、設定ファイルについては、/etc/httpdの場合と、/etc/apache2の場合があります。いずれも、そのフォルダーにあるhttpd.confファイルが主要な設定で、そのファイルから別のファイルが取り込まれる設定になっているのが一般的です。その取り込まれる側の設定ファイルに、ホスト名ごとの設定やモジュールごとの設定が含まれるのが一般的です。そこでファイルを作ったり修正すれば事足りる、という簡単な話ではありません。ディストリビューションによって最適な管理手段が違う場合があります。例えば、CentOSは「設定ファイルを変更する」ことが主要な作業ですが、Ubuntuではモジュールやサイトの有効/無効をa2enmod、a2dismodといったコマンドを使い、設定ファイルをmods-availableに用意するとともにコマンドを使ってmods-enableディレクトリにシンボリックリンクを作成し、Apacheはmods-enablesディレクトリの設定だけを取り込むといったことを行います。このようなディレクトリに設定ファイルを用意して、コマンドでモジュールだけではなく、サイトの設定（a2ensite、a2dissiteコマンド）や、あるいは設定ファイルそのもの（a2enconf、a2disconfコマンド）の有効/無効を指定します。他のOSで設定ファイルの変更に慣れていると、Ubuntuの管理方法は最初は戸惑いますが、Ubuntuでは用意されている手法を活用することが重要ですので、まずはどのような手法なのかを確かめておきましょう。　なお、ファイアウォールが最初からセットアップされていて、一切のサーバー動作ができない状態になっている場合もあります。セットアップしたけれども繋がらないという場合には、ファイアウォールで一切ポートが開いていなかったというのがよくある原因です。セットアップしたOSはもちろん、スイッチ等ネットワーク上でのファイアウォールを含めて、その状態を確認した上でトラブルシューティングを進めましょう。macOSでのWebサーバー　macOSでは以前は「パーソナルWeb共有」として、システム環境設定からWebサーバーの起動もできましたが、Ver.10.8のMountain Lionからシステム環境設定よりその設定項目は消えました。しかしながら、必要なモジュールはすべてインストール済みになっていて、Webサーバーとして起動できます。リスト9-2-1のコマンドを入れればWebサーバーが起動し、再起動後も続けて利用できます。ドキュメントルートは、/Library/WebServer/Documentsで、設定ファイルは/etc/apache2です。ログファイルは、/var/log/apache2ディレクトリに作られるのが既定値です。リスト9-2-1　macOSでWebサーバー機能を有効にするsudo launchctl load -w /System/Library/LaunchDaemons/org.apache.httpd.plist　なお、macOSにServerアプリケーションをインストールすると、管理ツール上でWebサービス管理運用ができるようになります。既定のWebサイトのドキュメントルートは/Library/Server/Web/Data/Sites/Defaultですが、管理ツールを使ってバーチャルホストの追加などができるようになります。しかしながら、管理ツールで設定できる機能は限られています。さらにきめ細かい設定をしたい場合には設定ファイルを変更する必要も出てきます。最初に読み込まれる設定ファイルは、/Library/Server/Web/Config/apache2/httpd_server_app.confになりますので、ここから辿って必要な設定を見つけたり、あるいは設定を追加するファイルを探すなどします。ログファイルは/var/log/apache2ディレクトリに作られます。　Apple SiliconによるMacにラインナップが切り替わった現在、サーバ用途にMacそのものを使う機会はかなり減っています。むしろ、Macは、開発のためのマシンとして利用することが一般的になっているでしょう。そうなると、Webサーバーをはじめとするさまざまな素材は、Homebrewを利用してインストールするのが手軽でかつアップデートも素早くできて便利です。→→→PHPのインストールWindowsでのPHP　PHPのインストーラに関して、まずWindowsについてはさまざまな方法がありますが、Microsoftが配布しているWeb Platform Installerを利用してPHPをインストールするのが一番確実な方法です。ただし、更新頻度が低いこともあって、求めるバージョンのものがインストールされるかどうかはやや問題があると言えるでしょう。Windows Server 2012には対応していますが、Windows 10対応についてはリリース時期が古く明記されていません。ただし、WebMatrixのページからは、PHP7がダウロードできます。MicrsoftはPHP単体をリリースしているわけではなく、他のさまざまな素材のひとつとして配布しています。そのため、ページによって得られるものが違っており、どれを使うべきなのかはなかなか判断しにくいところですが、Web Platform Installerを利用するのが一番確実と考えられます。また、PHPのページでは、IISの設定を変更しながら手動でインストールする方法も説明されています。LinuxでのPHP　Linuxの場合はyumやaptでインストールはできますが、ディストリビューションのメジャーバージョンで入ってくるPHPのバージョンが決まってしまいます。決められたバージョンではなく、より新しいバージョンのものを入れたい場合には、レポジトリを追加する必要があります。　リスト9-2-2は、Ubuntu Server 22で、Apach、MySQLとともにPHPをインストールするコマンドの例です。PHPはVer.8.1がインストールされます。Linux上で作業するユーザは、admとsudoグループに入れておくことで、なんでも実行可能な管理者になります。Webのドキュメント等は、Webサーバの実行ユーザであるwww-dataを所有者とする一方、その中のファイルには、admグループに対して可能な限り読み書きができるように、chmod/chownコマンドでアクセス権設定を行っています。ディストリビューションやメジャーバージョンによってインストールが必要なライブラリが違ってくる可能性がありますが、後で説明するcomposer install/updateコマンドを実行したときにチェックされるので、その結果をみて不足するライブラリは追加でインストールすれば良いでしょう。リスト9-2-2　Ubuntu Server 22でのセットアップ例sudo apt -y update\nsudo apt -y upgrade\nsudo apt install -y apache2 php mysql-server mysql-client\nsudo apt install -y php-curl php-xml php-gd libicu-dev php-pdo-mysql\nsudo apt install -y nodejs\nsudo apt install -y composer\nsudo chmod -R g+w /var/www\nsudo chown -R www-data:adm /var/www\nsudo systemctl restart apache2macOSでのPHP　macOSでPHPを利用する場合は、Homebrewを使ってPHPをインストールします。例えば、コマンドとしては、Homebrewインストール後に、「brew install php」と入力することで最新のPHPがインストールされ、コマンドラインでphpコマンドが利用できるようになります。　INTER-Mediator Ver.12がサポートする→→PHPのバージョンはVer.7.4〜Ver.8.3となっています。ディストリビューション等の状況を見ながらサポートバージョンを決めていますが、PHPでも型を意識するプログラミングができるようになっており、最低7.4としているのは、そのための対処です。→→→PHPのモジュールと→→php.iniの設定　PHPをインストールした結果を参照する代表的な方法は、PHPプロセッサで「→phpinfo()」という関数をひとつ呼び出すことです。この関数はPHPの内部状態を検査して、その結果を見やすいWebページとして表示します。演習環境を起動し（『1-2　演習を行うための準備』を参照）、ブラウザーで「http://localhost:9080」に接続します。ページ内にある「その他のリンク」の「phpinfo()関数の実行」をクリックすると参照できます。図9-2-1　phpinfo()関数の実行結果　PHPをインストールした後に、このページを必ず確認します。まず、一番最初のPHPのバージョンは当然として、「Configuration File (php.ini) Path」で、各種動作の設定を記述するphp.iniファイルのパスを確認します。パスは「/usr/local/etc/php」となっているので、設定はこのディレクトリにあるphp.iniファイルを利用していることがわかります。しかしながら、そのすぐ先に、「Additional .ini files parsed」という設定もあり、他に読み込んでいるファイルもあります。これらはPHPのモジュールをインストールすると自動的に入ります。モジュールの動作を変更する場合は、php.iniではなく、その他の.iniファイルを変更した方がいい場合もあるでしょう。　そして、必要なモジュールが含まれているかを、ページをスクロールして、あるいはページ内部を検索して確認します。例えば、図9-2-2は、PDOおよび関連するデータベースのPDO用ドライバーがインストールされていることが確認できます。タイトルの文字の「PDO」や「pdo_mysql」から判断します。図9-2-2　phpinfo()関数の実行結果　表9-2-1には、INTER-Mediatorの稼働に必要なモジュールを、phpinfo関数で表示されるページの見出しのキーワードで示しました。「必須のモジュール」は、composer.jsonに記述したもので、これらがなくてはINTER-Mediatorのセットアップが途中で止まります。「データベース関連モジュール」は、使用するデータベースに依存しますが、MySQLを使うには、PDO、mysql、mysqli、pdo_mysqlが必要になります。ただし、pdo_mysqlをインストールすると、そのほかに必要なモジュールもインストールされるので、表ではPDOのモジュール名だけを記載しました。種類モジュール名必須のモジュールcurl、intl、json、mbstring、libxml、xml、gd、exifデータベース関連モジュールPDO、pdo_mysql、pdo_pgsql、pdo_sqlite、pdo_sqlsrv表9-2-1　INTER-Mediatorの稼働に必要なモジュール（Ver.12）　SQL Serverについては、やはりPDOのドライバーをインストールしなければなりません。PHP 7以降で利用できるドライバーが「→Microsoft Drivers for PHP for SQL Server」として公開されており、Windows版と UNIX OS版のそれぞれのページに、インストール方法が掲載されています。　→→ファイルのアップロードを行う場合、php.iniは必ず修正をしてください。初期値では、数メガバイト程度のファイルのアップロードしかできません。表9-2-2のディレクトティブに対する設定を指定します。時間は整数のみで秒単位で指定します。サイズは、「100M」や「1G」などの補助単位も指定できます。例えば、php.iniファイルの中に「post_max_size = 500M」といった行を追加します。この時、ファイル内にすでに同一のディレクティブの設定がないかを検索してから記述しましょう。コメントも含めて、すでに「post_max_size」という単語が見つかれば、その値を修正するか、あるいはコメントの行の頭のセミコロンを削除して有効にして、右辺の値を記述します。ディレクティブ定義される内容memory_limitメモリー利用量の上限post_max_sizePOSTデータの最大サイズupload_max_filesize1ファイルあたりの最大ファイルサイズmax_input_time入力にかける時間の上限値max_execution_time処理時間の上限値表9-2-2　ファイルのアップロードに関わるphp.iniの設定　ファイルのアップロードでは、ファイルのデータをそのままPOSTリクエストに載せます。同時に送られる情報は他にもありますがごく一部ですので、post_max_sizeギリギリまでのサイズのファイルはアップロード可能です。upload_max_filesizeはファイルのアップロード処理側で判定される値です。データは一度メモリーにロードされるので、memory_limitのサイズはファイルのサイズよりも大きくなければなりません。この3つの設定が、ファイルのアップロード処理に影響します。例えば、全部100Mに指定すれば、100M弱程度のファイルまではアップロードが可能になります。max_input_timeは、アップロードにかかる時間の上限値を指定します。これ以上時間がかかるとタイムアウトします。高速インターネットが当たり前な一方、モバイルでは極めて低速の通信しかできない場合もありますので、大きなファイルをアップロードさせたい場合には、この値を300など（つまり5分程度）大き目の値にしておきます。max_execution_timeはファイルのアップロードの時間には関係ありませんが、PHPのスクリプト処理のタイムアウト値を指定します。場合によっては、大量のデータを集計するなど、PHPの処理に時間がかかる場合もあります。その時には、この値を例えば300など（つまり5分程度）大き目の値にしておきます。→→プロバイダを利用した場合のデータベースとWebサーバー　サーバーを1台分自由に使えるサービスの場合、通常のサーバーと管理は特には変わりません。一方、共用サーバー（レンタルサーバー）の場合には、Webサーバーやデータベースがすでにセットアップされた状態で利用するのが一般的です。Webサーバーにモジュール等は追加できないことが一般的ですが、例えばMySQLやPostgreSQLと一緒に使えるサービスであれば、PHP側での必要なモジュールはインストールされているのが一般的です。しかしながら、どうしても必要なモジュールが使えない場合には、プロバイダー側に要望を出して、対処してもらうしかないでしょう。　なお、レンタルサーバーの場合、Webサーバーとデータベースサーバーが異なるホスト、あるいは異なるIPアドレスである場合があります。その場合、dsnキーでは、「mysql:host=ホスト名:ポート番号;dbname=データベース名」の形式で指定します。ホスト名やポート番号は必ずサイト等に記載があります。データベースをSQLコマンドを記述したファイルから作成できる場合にはそれを使うのがひとつの方法ですが、myPhpAdminなどの管理ツールを使ってデータベースを定義する必要がある場合もあります。　安価ながら非常に古い時代に構築したままのプロバイダーだと、データベース側の文字コードをUTF-8でうまく扱えない場合もあるかもしれません。INTER-Mediatorではデータベース処理の前後に、SQLコマンドを実行できる機能があり、そのコマンドを実行させることで、正しく文字コードを処理できるような場合もありました。具体的には、MySQLでは以前のバージョンでは「→SET NAMES utf8」というコマンドを実行すれば、UTF-8で処理が行われるといった対処をした時期もあったのですが、あるプロバイダではたまたまMySQLのバージョンが低く、一方でmy.cnfファイルの設定は変更できない事情があってエンコードの指定ができなかったのですが、この方法が使えました。リスト9-2-3は定義ファイルの一部です。コンテキスト定義の→scriptキーは連想配列の配列で指定可能ですが、この設定だと、readつまりデータベースのクエリーにおいて、preつまりはSELECTコマンドを送る前に、definitionで定義したコマンドをMySQLに送ってエンコードの指定をしています。最近はほとんどのプロバイダでこうしたことは不要かもしれませんが、プロバイダあるいはたまたまインストールするサーバーが古いものだったりしたときにはこのような手法も考慮しなければならないでしょう。リスト9-2-3　scriptキーを指定したコンテキスト定義IM_Entry(\n    array(\n        array(\n            'name' =&gt; 'postalcode',\n            'view' =&gt; 'pcode',\n            'script' =&gt; array(\n                array(\n                    \"db-operation\"=&gt;\"read\",\n                    \"situation\"=&gt;\"pre\",\n                    \"definition\"=&gt;\"SET NAMES utf8\"\n                ),\n            ),\n        ),\n    ),\n    null,\n    array('db-class' =&gt; 'PDO'),\n    false\n);→→→PHPのサーバーモード　開発しているPC/Macで手軽にINTER-Mediatorを動作させたい場合の選択肢として、PHPのサーバーモードがあります。ディレクトリにサイトに必要なファイルを作成し、加えて別途データベースサーバーの稼働が必要です。しかしながら、そこまでできていれば、Webサーバーのルートになるディレクトリをカレントディレクトリにして、「→php -S localhost:8000」といったコマンドを入力します。そして、Webブラウザーからは「http://localhost:8000」とアドレス欄に入力します。すると、カレントディレクトリをWebドキュメントのルートとしてWebサーバーが稼働するような動作が行われます。引数のlocalhost:8000は、ループバックのIPアドレスでサーバー動作させて、そのポート番号が8000ということです。8000ではなくても、自由に利用できる適当な番号（9000や18000など）でも構いません。localhostで運用すれば、別のコンピューターから接続されて見えることもありません。　phpコマンドは、通常はPHPのインストール時に一緒に組み込まれます。コマンドがないと言われたら、インストール等で何か足りないのかもしれません。コマンドを起動したら、ターミナルのウインドウにはアクセスログおよびエラーログに相当する表示が行われます。何かエラーがないかを調べたい場合は、ターミナルのウインドウを眺めるなどの作業も行います。サーバー動作を止めるには、ターミナルのウインドウでcontrol+Cのキー操作を行います。なお、何もかもがApacheやIISと同じではありませんので、それぞれの利用環境に応じて読み替えるなどしてください。しかしながら、ブラウザーからページファイルを正しいパスで指定してひらけば、INTER-Mediatorの動作は確認できるはずです。→システムロケールについて　Ver.5.7-devより、→→システムのロケールを利用して、小数点などを取得しています。macOSのようなデスクトップ利用が主体のOSの場合は、当然ながらロケールの設定は各国に対して行われていて、日本語で利用している場合には現在のロケールとして日本語が設定されています。コマンドの「→locale」が現在の設定を表示し、「locale -a」でシステムに登録されているロケールが表示されます。リスト9-2-4　macOSについてのシステムロケールの確認$ locale\nLANG=\"ja_JP.UTF-8\"\nLC_COLLATE=\"ja_JP.UTF-8\"\nLC_CTYPE=\"ja_JP.UTF-8\"\nLC_MESSAGES=\"ja_JP.UTF-8\"\nLC_MONETARY=\"ja_JP.UTF-8\"\nLC_NUMERIC=\"ja_JP.UTF-8\"\nLC_TIME=\"ja_JP.UTF-8\"\nLC_ALL=\n$ locale -a\nen_NZ\nnl_NL.UTF-8\npt_BR.UTF-8\nfr_CH.ISO8859-15\neu_ES.ISO8859-15\nen_US.US-ASCII\naf_ZA\n：　ところが、Linuxの場合だと、ロケールが存在しない場合があります。リスト9-2-5は、Ubuntu 14 Serverの一例ですが、インストール時に英語を指定したので、英語であるen_US.utf8が設定されています。全部のロケールを見ても、他にCやPOSIX等の最低限のものがあるだけです。リスト9-2-5　 Ubuntu 22 Serverでのロケール設定# locale -a\nC\nC.utf8\nPOSIX\n# locale\nLANG=\nLANGUAGE=\nLC_CTYPE=\"POSIX\"\nLC_NUMERIC=\"POSIX\"\nLC_TIME=\"POSIX\"\nLC_COLLATE=\"POSIX\"\nLC_MONETARY=\"POSIX\"\nLC_MESSAGES=\"POSIX\"\nLC_PAPER=\"POSIX\"\nLC_NAME=\"POSIX\"\nLC_ADDRESS=\"POSIX\"\nLC_TELEPHONE=\"POSIX\"\nLC_MEASUREMENT=\"POSIX\"\nLC_IDENTIFICATION=\"POSIX\"\nLC_ALL=　システムがこのような状態であっても、INTER-Mediatorは可能な限り動くようにはなっていますが、できれば、日本語のロケールを追加しましょう。Ubuntuでは、ロケールは存在しないので、以下のようなコマンドを入れて、aptでロケールをインストールし、必要に応じてlocalectlコマンドで設定を行います。なお、Dockerではこのlocalectlコマンドを簡単にセットアップすることができませんので、localedefコマンドを使って設定を行う方法等があります。リスト9-2-6　Ubuntu 22での日本語ロケールの追加sudo apt -y install language-pack-ja-base language-pack-ja\nsudo localectl set-locale LANG=ja_JP.UTF-8\n$ localectl\n   System Locale: LANG=ja_JP.UTF-8\n       VC Keymap: n/a\n      X11 Layout: jp\n       X11 Model: pc105→このセクションのまとめ　WebサーバーとPHPが稼働する状況が、INTER-Mediatorには必要です。OSや稼働環境で色々な状況がありますが、きちんと動作して、かつ、PHPでは必要なモジュールが組み込まれていれば、問題なく利用できるはずです。→9-3FileMakerを巻き込む開発に関してINTER-Mediatorは当初より→FileMaker Serverをサポートしてきましたが、Ver.12より「→ベストエフォート対応」としました。FileMakerを取り巻く現状と、ベストエフォートに至った理由を交えて、FileMaker Serverに関する情報を掲載します。→FileMaker Serverの現状とベストエフォートの意味　FileMaker Serverは、執筆時点ではFileMaker 2023として販売されているVer.20.3.1が最新版になっています。INTER-Mediatorを作り始めた2010年ごろは、XML共有をFX.phpというライブラリで利用するWeb利用が一般的で、INTER-Mediatorもそれらを基盤として作り上げてきました。当初よりの利用方法を「Web共有による」と参照します。FileMaker Serverは一方でWebDirectとして、FileMakerで作ったレイアウトをそのままブラウザで利用できる仕組みも発展させてきました。初期の不安定な動作は今ではかなり洗練されてきており、ひとつの大きな選択肢となっています。しかしながら、Webページ自体をFileMakerで作ることによる制約とスクラッチからHTMLで記述できる方法を天秤にかけて、後者を選ぶ場合も少なくありません。そして、ライセンスに関係のないWeb共有の方が、不特定多数がアクセスする可能性のあるWebサイトでは有利とも考えられて、Web共有も、WebDirectも併存することになりました。　FileMakerはパッケージ販売からライセンス販売に比重が高くなり、さらにはクラウド版も出るなど、製品に変化が出てきました。そのような中、Web共有によるFileMakerの利用は、FileMaker Data APIに置き換わる可能性が高くなりました。Data API自体はWeb APIですが、それをPHPから使いやすくするためのFMDataAPIというライブラリも作成し、INTER-MediatorはFileMaker Data API対応を行なっています。Web共有自体はまだなくなっていないのですが、「いつかは無くなるかもしれない」という危惧があり、Web共有からData APIへのシフトをINTER-Mediatorでは行いました。ところが、FileMaker ServerのLinux版では当初Web共有が利用できなかったものの、その後に利用できるようになるなど、Web共有自体はまだ無くなる気配はないというのが実情です。　Web共有とData APIは全く異なるインターフェースなので、それを利用する側のINTER-Mediatorは「それぞれの手法」に対して対応が必要になります。つまり、メンテナンスタスクがこのように増えたのです。一方で、Web共有時代からの問題点として、高い負荷に対応できないということがあります。少ないアクセスなら良いのですが、アクセスが集中するような場合にサーバが応答しない、そして最悪はサーバが落ちるということがあったのです。加えて、Data APIは無制限に接続できるわけではなく、サーバのライセンス数までしかコネクションは設定できないので、不特定多数が利用し同時アクセスがそこそこあるようなWebサイトにはあまり向かないということもあります。　FileMaker Serverのそうした状況を鑑みると、FileMakerを使いたいけどもWebも重視するという開発は、結果的に→ESSを利用するのが現状の仕組みの上では最適と考えられます。例えば、MySQLやPostgreSQLをバックエンドとして使い、INTER-MediatorつまりWeb側は、これらのオープンソースOSSを使うのです。そして、それらのデータベース側のテーブルやビューをFileMaker Serverで参照して、FileMakerクライアントにサービスを提供できるようにするわけです。全データをMySQL等に置く方法もありますし、必要に応じデータをコピーして運用するなど、ニーズに応じたダブルデータベース運用のための設計は必要ですが、FileMakerにとっても、INTER-Mediatorにとっても、ボトルネックの解消にはなります。もちろん、そうなると、INTER-Mediatorの側はFileMakerを直接利用するのではなく、MySQLやPostgreSQLを使うことになり、結果的にはPDOベースでの運用になります。　このような状況を踏まえ、2023年にVer.12への開発に入る段階で、FileMakerのWeb共有はData APIに対するサポートは「余力の範囲」で行うことにしました。バグ等があれば対応はしますが、新しい機能等への対応や、テスト等へのサポートの優先順位は低くなります。つまり、サポートをやめるわけではありませんが、実運用を行うことまでの配慮は行き届かない可能性が高いというところです。これが、ベストエフォート対応の意味です。→→→FileMaker Serverのインストールと設定　FileMaker Serverは、クラウド版を利用するか、サーバ機にインストールするかの選択肢があります。クラウド版はサーバ管理が不要という一方で、2023年に事実上の値上げがあって、オンプレミスとの価格差が気になるレベルになってしまいました。オンプレミス版はサーバ機を用意し、FileMaker Server自体のインストーラーを使ってインストールすれば基本的にはうまくいくはずです。しかし、インストールしようとするターゲットマシンの状況に応じてさまざまな注意点があります。　FileMaker Serverは、Ver.15や16のあたりは、インストーラの動作が不安定で、インストールに失敗することもよくありました。しかしながら、19あたりから問題点はおおむね解消されています。しかしながら、対応OS等の情報、インストール手順の確認など、バージョンが変われば色々な点が微妙に変わっているので、きちんと調べてからのインストールをお勧めします。　INTER-Mediatorは、FileMaker ServerのカスタムWeb機能のひとつであるXML共有、あるいはFileMaker Data APIを利用します。XML共有はサーバからなくなるのではないかとも目されていますが、一方で、搭載されなかったLinux版のFileMaker Serverでも使えるようになるなど、まだ現役で使える機能との認識はあるでしょう。以前のINTER-Mediatorは、FileMaker Serverとの通信にFX.phpを使用していたためXML共有のみで稼働していました。データベースの利用方法や設定については『2-1　データベースからの取り出し設定』を参照してください。　FileMaker Serverのインストール方法については、マニュアルを参照してください。マニュアルにはしっかり手順は記載されていますし、よくあるトラブルはファイルメーカー社のサイトで検索すれば、見つかります。また、インターネット上での各種コミュニティでも情報があるので、トラブルに対する対処は何らかのヒントはあるはずです。ここ数年の動きで言えば、Linux版のサーバの発売や、Dockerでの稼働が確認されるなど、対応OSの拡大がありました。一方で、Claris Studioを大々的に押し出す一方でなかなか発売されないなど、FileMaker製品のラインナップの将来像がぼやけてしまっているということもあり、判断の難しいプラットフォームになりつつあります。→→FileMaker ServerでのWebサーバーとPHP　FileMaker Serverをインストールするとき、PHPを使用する上で、WebサーバーやPHPをどのようにすればよいかという問合せが多くあります。以前のFileMaker ServerにはPHPがインストールされていて、即座に使える状態ではあったのですが、バージョンの問題などは当時は考慮が必要だったりしました。しかしながら、FileMaker 19の時代に、PHPの組み込みを行わなくなりました。FileMaker Serverが稼働しているサーバ側でどうしてもPHPを動かしたいのであれば、自分でセットアップするしかありません。現状で最も管理がしやすいのは、FileMaker Serverとは別に、PHPとWebサーバが稼働するサーバを立てて、そちらでINTER-Mediatorを稼働させるということです。もちろん、その間は、ネットワークでやり取りをするようにします。FileMaker Serverが稼働するサーバ上でPHPも稼働させる方法は、Claris Communityにある「FileMaker Server インストーラへの PHP 添付の廃止について」というドキュメントで公開されています。→このセクションのまとめ　現状、FileMakerを巻き込む開発で、INTER-Mediatorを利用したWebサイトを統合するには、FileMaker ServerはESSで運用して、実データをMySQLやPostgreSQL等のPDOで対応しているデータベースに置き運用することが、自由度やパフォーマンス等を含めて考えての最適解となります。→9-4INTER-Mediatorを利用する開発プロセスデータベースとWeb/PHPをセットアップした状態で、INTER-Mediatorを利用したソリューションを構築することができるようになります。ページファイルや定義ファイルの作成方法は、本書で説明してきた通りですが、ここでは実際の開発作業に入るまでの設計に関することをまとめておきましょう。→開発プロセスについて　→→システム開発のプロセスは、各社あるいは各自でさまざまな手法が採られていることもあり、一般的には特定のプロセスに依存した仕組みをフレームワークに取り込むということは行わないと思われます。しかしながら、業務分析を行い、システム化する範囲と内容を定め、それを実装できる形式で記述し、実際に実装してテストするという、抽象度の高い世界から実際の開発タスクにまで徐々に抽象度を下げていく手法は、ほとんどの場合踏襲するルールと考えます。その意味で、INTER-Mediatorを使った開発では、どのような流れで進めることができるのかを紹介しましょう。ここで紹介する方法は、エンジニアでないような方が、何かの業務でWebシステムを作りたいと考えたとき、INTER-Mediatorを使えばどのように進めることができるのかを紹介します。想定する開発者は、HTMLでページを作成できるものの、プログラミングについてはちょっとかじった程度とします。つまり、システム設計のプロが行うような本格的・包括的な手法ではなく、普段は会社の業務を行っているような方でも行えるような手法を紹介します。→→→システムへの要求をまとめる　本来はまず業務分析から入ります。業務分析は現実にはかなり困難な作業であり、専門家でなければ十分にこなすことはできません。現場の皆さんの場合は、シンプルに、「誰が」「何をする」ということを、言葉で記述して、明確化することで、システムの要求を記述することから始めましょう。「誰が」「何をする」という考え方と、「誰にとって」「何ができる」という考え方もあります。まずは、やりたいことをリストアップします。ここで重要なことは、「文字として書く」ことです。頭の中で考えたり、話し合ったりするだけではなく、記述をしましょう。そうしないと重要な項目を後から忘れてしまうなど、欠落の多い要求定義しか残りません。　一方で、システム化したい作業があるからシステムを作るということもあります。例えば、部署内で共有化したい情報をExcelのワークシートにしてサーバーに入れて使っているけれども、2人同時に更新したり、手元にコピーを作って作業した場合には古い情報を見て作業することになり、2人の間で情報の不一致が生じてしまう問題などが起こりえます。これをシステム化して問題解決したいということがあるでしょう。その場合、ワークシートが作られているので、業務の分析がすでに行われていて、一定の範囲で電子化されていると言えます。その場合は、「現在、このようなワークシートで作業している」という結果からスタートすることができます。　まずは頑張って思いつく情報を、例えば次のように、「記述」をします。もちろん、必要なら作図をしてもいいでしょう。すでにワークシートができている場合でも、そこで展開されている作業をひとつひとつ洗い出すことで、要求の記述を進めます。現状理解\n時々、部で商品紹介の無料セミナーを開くが、Webで告知はするものの、その参加受付が電話やメールで煩雑になっている。Webで参加申し込みできるようにしたい。当日に、受け付けでは、印刷した参加者一覧を見ながら、参加登録した方かを確認して入場してもらっている。参加者の名刺をいただいていて、後からコンタクトする場合もあるが、輪ゴムで止めて担当者の引き出しに眠っているのが関の山である。\n必要な仕組み\n参加希望者がWebで申し込みできる。その時に、氏名、所属、電話番号、メールアドレスを聞きたい参加希望者には、申し込みを受け付けたことを確認メールで送付したいスタッフが、申し込み状況と申し込み者一覧を随時確認したい。最終的には名前のアイウエオ順で印刷する懸案事項\nコンタクトを取っても良いかどうかをどこでたずねるか？後々の営業を考えれば、属性を聞くべきか？定員を設定して、定員を超えてしまった場合は申込受付を止めるか、補欠として受け付けるようにすべきか？　しかし「誰が」と言われても結構迷います。もちろん、「事務担当の山田さん」「事務担当の田中さん」がいずれも、「入金を受け付けて記録する」という作業をして、この2人が同一の作業を行うような状況では「事務担当者が」「入金を受け付けて記録する」ということを記述するだけで十分かもしれません。つまり、事務の担当者の数だけ要求の項目を書いても無駄なだけです。一方、それだったら、「誰が」というのは、「全部、『従業員が』になる」というは逆に広すぎないかをよく考えましょう。社長から末端の社員まで、皆が同じ作業をしていますか？　していない人、役割が違う人がいるかもしれません。そこに注目して「誰が」をうまくまとめて「何をしている」のかを考えます。　「何をするか」は要求の記述ではさらに難しいものです。しかし、ここは考えすぎず、「なるべくひとつのこと」を「数多くピックアップ」しましょう。「何をする」かについて記述したことは、おそらく分類できるかと思います。つまり、小さな作業に分割されていれば、それをまとめて大きなひとつの作業を定義できるでしょうし、逆に大きさな作業を小さな作業に分割するという流れもあります。これらは、思いついた「何をする」をともかく記述して、分類していく作業を行いましょう。「入金を受け付けて記録する」というのは、もしかして「入金の受付」と「入金の記録」に分離できるかもしれません。入金は、銀行振り込みなら、受付処理は、「通帳記入（オンライン確認）」「前回確認日時以降の入金を調べる」「記録すべき入金かどうかを判断する（判断基準を明示）」などの作業に分解されているでしょう。また、クレジットカードであれば処理が違っているかもしれません。「入金の受付」は、もしかするとシステムを作ってやらないといけないようなものではなく、通帳やオンラインバンキングのアカウントがあればできてしまうかもしれません。しかしながら、その後の「入金の記録」は自社のシステムに記録したいとします。このようなシステム化する業務としない業務を細部で検討が必要になります。ここで、システム化する部分を細かく検討するのは当然ですが、しない部分も検討しつつ、どこかで線をきちんと引かなければなりません。これを大まかに考えるのは間違いの元で、ある箇所をシステム化対象を外してしまったために、別の作業がより大変になってしまうかもしれません。線引きはざっくり考えがちですが、比較的小さな単位に分割して検討をした上で、対象外と決定し、設計期間中は可能な限りその決定が間違っていないのかを検証しながら進めるべきです。　こうした業務の詳細化を進めるとき、「どのような」ということもやはり思いつくでしょう。それも記述しましょう。「どのような」には、「一覧から選択する」といったシステム化に直結するようなものや、「直近の10件の内容を一覧表示する」といった付帯的な表示物を指定するものなどさまざまなものがあります。また、「素早く処理を終える」といったいわゆる非機能要求もあるでしょう。こうした思いを全て記述します。　一般的なモデリングでは「なぜ」を重視します。特に要求を記述するときには、なぜを明確にします。しかしながら、そのレベルでのモデリングは専門家でもなかなか難しいものです。ここでは、要求をまとめる作業をともかく進めていただきたいので、専門家ではない方やモデリングに慣れていない方は、「なぜ」の答えとなる記述を深追いせずに、後回しにしましょう。業務内容を検討する中で、要件がスムーズに列挙でき、記述できる範囲内で、ともかくそれを書き下していくことをお勧めします。　本来、こうして考えた結果は、UMLのユースケース図で記述するのが、業界標準的な手法ではあります。しかしながら、ルールに従ったダイアグラム作成は、やはり専門的な知識とトレーニングが必要です。また、システムに対してさせたいことを記述する「要求」を基にして、システムが何を達成しなければならないのかといった「要件」の記述に進むのが、システム開発の一般的なプロセスでは提唱されています。しかしながら、要件が重要になるのは比較的大きなシステムであり、要件の記述には技術的な知識が必要です。状態遷移を伴うプロセスの場合は、一足飛びに「要求を満たすユーザーインターフェースを作る」ステップに進んだほうが効果的な場合もあります。イメージがつかみやすくなりますし、そのプロセスで必要な要求が明確に見えてくる、といったメリットもあります。例えば、電話番号はハイフンを入れた状態で入力してもらうのか、そうではないのか。もし、ハイフンなしで入れさせるのなら、そのやり方が自明となる入力フィールドの配置はどうすればいいのか、が見えてきます。全ての開発がこうした流れでできるわけではありませんが、それほどの複雑な仕組みは要求されないことも比較的多いので、まずはシンプルな手法を理解するようにしましょう。現場レベルで要求定義の作業においては、やはりExcelのワークシートに、思いついたことをともかく記述する方法が手軽です。ワークシートだと、分類や階層化などのアレンジもしやすいでしょう。また、ともかくキータイプすればいいので、記録もされやすいです。→→→ページ単位の設計　Webサイトは、「ページ」あるいはひとつのHTMLファイルで表現される範囲が、設計上、ひとつの重要な塊になります。前述のシステム要求をまとめるうちに、ある一定の範囲の作業をまとめたひとつのページが見えてくるのが一般的です。ひとつのページには、同時あるいは連続して行う作業を実現するためのテキストフィールドやボタンなどが含まれているというのが一般的な形態でしょう。ただし、1ページ範囲があまりに多い場合には、処理のレベルごとに要求をまとめ、複数のページに展開して実現することになるかもしれません。一方、同一の前提条件で行われる作業は、複数の作業をひとつのページにまとめたほうが分かりやすく、かつ操作しやすくなります。例えば、会員登録ページで住所、氏名、生年月日、電話番号を入れるとともに、本人確認書類をアップロードしてもらいたい場合などが良い例でしょう。住所氏名を入れるページと、本人確認書類のアップロードのページを別々に作ると、入力時の作業も煩雑で分かりにくいものになる上に、それを確認する担当者の作業も煩雑になります。したがって、これら一連の作業をひとつのページにまとめます。つまり、前提条件を揃える仕組みを共通化することで、開発効率を高めたり、ユーザーインターフェースを分かりやすく、かつ使いやすくすることができます。　ページへの分割、あるいは1ページの識別は、画一的に考えないで、柔軟に考える方がいいのですが、こちらは「デザイン」的な意味での慣れは必要です。そして、ペーパープロトタイピングと呼ばれる紙にページのデザインを描いて、実際に指で触れるなどして実感を見ながらページレイアウトを考える方法や、ワイアフレームグラフィックスのツールを使ってページを設計する方法などがあります。さて、INTER-Mediatorでの開発の場合はどうでしょう。この場合はここでページファイルの作成を始めるのが得策です。ただし、最初はデータベースの連動を考える必要はなく、ページにどんな種類の情報が、どんな風に見えてほしいのかということを、形に表すという意味で、ページファイルというよりも実際に画面表示できるHTMLファイルを作り、それを利用者がブラウザーで表示してみて業務の流れを実体験できるようにしてあげましょう。こうすることで、具体的な問題点や、注意すべき点を露わにします。「セミナーの出席者リストを作る」という作例では、例えば、次のようなページをプランすることになるでしょう。ページのデザインを考えながら、ページのデザインに直接出てこない注意点（図中の「郵便番号から自動的にある程度の住所入力を行う」など）は、要件定義と同様にどこかに記述することを心がけましょう。図9-4-1　ページとその要素をページないしはワイアフレームで記述　最近は、→シングルページアプリケーション（SPA）として、見かけ上複数のページに見えるものの、実はひとつのHTMLファイルで実現するような仕組みのアプリケーションがあります。もちろん、INTER-MediatorはSPAの作成に対応しています。SAPは実装の手法のひとつであり、このセクションで説明しているページは、SAPにおける1ファイルの意味ではなく、利用者が見えるページのことです。　ここで、ページ内に配置するそれぞれの要素は、要求定義で抽出した各項目を配置していきます。よく使われる手法のひとつを紹介すると、要求の定義項目が確実に実現されているかをチェックするために、要求の項目に番号をつけて管理する方法があります。ともかく、業務洗い出しで出てきた必要な要素はもれなく配置していきましょう。もし、要求定義にないものがページ上にあった場合は、要求として漏れていたということになります。要求の記述そのものが曖昧なために、ページにできなかったということもあります。可能であれば、要求に戻って気づかなかった要素を追加して改めて検討します。　一方、要求の定義にあるものがページ上で登場しない場合はどうすべきでしょうか？　もちろん、それは何か問題があります。例えば、テキストフィールドを忘れていては、そのデータは変更できません。しかしながら、本質的に実現できない要求を記述している場合もあります。例えば、「荷物が到着したときに日付が自動的に入力される」という要求があったとします。そのためには、例えば宅急便のサイトの情報と連動したり、あるいはサイトから荷物の状況が得られるようにあらかじめ準備すればできると思いがちですが、他のシステムとのやりとりは難易度が高いですし、仮に機能上できるとしても、自分のシステムのデータベース内で整合がとれた状態でデータのやり取りを実現するのはかなり大変です。場合によっては、システム稼働開始前と稼働後ではデータの形式が異なってしまっており、うまく統合できないかもしれません。場合によっては既に大量のデータが蓄積されているかもしれません。そのような場合は無理に自動化、統合化を図ろうとせず、単にテキストフィールドを用意しておいて、手作業で入力していくのが最も確実で早いという結論になるかもしれません。　ページを検討している時には「こういうことをやりたいけれども、ページとしてどうなるのかさっぱり分からない」ということもあるでしょう。この場合は、やはり専門家にまずはヘルプをお願いし、要求の上での過不足を見極めた上で実現可能な手法を考えてもらうのがいいと思われます。業務の流れを変えないと、システムとして実現しづらいということもあるかもしれません。→→→コンテキストの抽出とスキーマ定義　ページファイルを作ると、結果的に、必要なコンテキストは抽出されていると言えます。ユーザーインターフェース上でのデータの塊は、コンテキストに含まれるレコードの現れであると考えることができます。そして、レコードの「繰り返し」になる場所と、レコードと別のコンテキストのレコードが「1対多」になる場所を特定して、ページ内のひとつのコンテキストを展開する場所の割り出しを行います。そして、それに対応するコンテキストを定義しつつ、データベースに必要なテーブルを割り出してスキーマを定義します。　例示している「セミナーの出席者リストを作る」という作例に戻って考えてみましょう。スタッフが参照するページの様子を見ると、「参加者」というテーブルからの複数レコードのコンテキストが表示されているということになります。同様の情報が参加者のページにもあるので、参加者のページも同じテーブルを基にしたコンテキストであれば良いと考えます。そして必要なフィールドは、名前、メールアドレス、会社名など、参加希望の登録フォームのページの項目があれば良さそうです。例えば、一般的なSQLであれば、次のようなCREATE文でテーブルを作れば良いでしょう。そして2つのページとも、このテーブルをコンテキストとして利用するコンテキスト定義を記述することになります。型は可変テキストかTEXT型が無難でしょう。最大桁数がどれくらい必要かは、過去のデータなどから検討します。キャンセルしたかどうかは数値で記録することにし、例えば「1」はチェックボックスがオンでキャンセルしたことにし、そうでないデータならチェックボックスはオフでキャセルしていないことにします。リスト9-4-1　「参加者」を管理するテーブルの例CREATE TABLE attendant (\n\tattendant_id\tINT PRIMARY KEY,\n\tcacel\tINT,\n\tname\tVARCHAR(32),\n\tyomi\tVARCHAR(32),\n\tmail\t\tVARCHAR(64),\n\tcompany\tVARCHAR(64),\n\tsection\t\tVARCHAR(64),\n\ttitle\t\tVARCHAR(64),\n\tzipcode\tVARCHAR(7),\n\taddress\tTEXT,\n\ttel\t\tVARCHAR(20),\n);　このテーブル定義、そして想定しているユーザーインターフェースに限れば、コンテキスト定義として次のようなものを用意すれば目的のものが作成できるのではないかと思われます。参加申し込みのページも、参加者一覧のページも、どちらも同一のコンテキストで可能ではないかと考えられます。スタッフが見る参加者一覧のコンテキストとしては、attendantテーブルを表示しつつ、名前のフリガナでソートされており、さらにキャンセルした参加者が含まれていないようなものとなります。そのため、sortおよびqueryキーによる設定を追加しました。リスト9-4-2　コンテキスト定義の例name:\tattendant\nview:\tattendant\ntable:\tattendant\nsort:\t[field: yomi, direction: ASC]\nquery:\t[field: cancel, operator: !=, value: 1]　通常、専門家がこうした作業を行うときには、業務分析、そして要求に応じて、まずはスキーマを設計します。実はこうした作業はなかなか難しいのですが、専門家がこういったことができるのは、Webページやそこでのコンテキストについて、実物がなくてもおおむね正しい判断ができるスキルを積んでいるからであると考えられます。むしろ、業務と要求が実現できるようなデータ記録の仕組みを抽象的に考えることで、言い換えれば「どんな場面でもうまく動く」ことを目指します。そして、分析がしっかりなされたスキーマは、要求が後から追加されてもそのスキーマで運用できる例もたくさんあります。データベースを定義し、その上で動くプログラムを作るという専門家を投入するワークフローが展開でき、実際にうまく運用できれば効率良くシステム開発が可能です。　しかしながら、専門家ではない方が、いきなりデータベースのスキーマを考えるのはかなり大変です。まずは、ページを考えて、その内容からコンテキストを抽出し、そのコンテキストに必要なテーブルを用意するという流れの方がうまくいくと思います。それでもテーブル設計では難しい問題が頻繁に発生します。専門家ではない方で、自信がない方は、要求定義、ページのモックアップを見せた上で、スキーマとして正しいのかどうかを判定してもらうということも必要かもしれません。→設計内容のレビューとイテレーション　ここまでは、「思いついたことを要求定義として記述」して、それを基に「必要な画面設計」を行い、その結果から「コンテキストとその基となるテーブルの抽出」を行いました。細かなルールは特に定めないで、直感的に作って行った流れかもしれません。しかし、ここで一度、じっくり観察をします。「セミナーの出席者リストを作る」という点ではこれだけでなんとかなりますが、セミナーが終わってしばらくして次のセミナーが開催されたらどうなるでしょうか？　参加者の項目を全部キャンセルして、再度同じことを最初からやり直す、という単純な方法もありますが、これはとても無駄の多いシステムになってしまいます。また、セミナーがたまたま2日連続で発生するようなとき、このシステムはうまく働くでしょうか？　参加者も、スタッフも「どちらのセミナーか」ということをどこでどう区別させるのでしょうか？　ではどうするかというと、結論としては、セミナーの実施日をフィールドとして持つ「セミナー」テーブルを作ることが最良の対策と考えられます。　最初の要件には「セミナーの日程」ということに明確な記述がありません。強いて言えば「当日」などと記述されているあたりが落とし穴だったと思われます。実際こうした要求はシステム化する場合の最もあいまいな「抜け」となってしまいます。このままではデータベースのどこにも日付の情報がありません。つまり、attendantテーブルを探っているとき、ある参加者がいつのセミナーに参加したのが分からないのです。では、attendantテーブルに「セミナー日」のフィールドを追加するだけで問題は解決するでしょうか？　また、シンプルに出席者を集約したいだけであれば、それでも機能しないわけではありませんが、例えば特定の日に実施されたセミナーの参加者をリストアップするのに、検索条件として日付を正確に入力しないといけないなど、使い勝手が悪くなりそうです。そこで、セミナー日や実施時間、あるいは場所なども含めた、「セミナー」という存在を意識します。そうすると、1回のセミナーに複数の参加者が存在することになり、ここでテーブル間の1対多の関係が見えてきます。例えば、テーブルとしては次のようになるでしょう。リスト9-4-3　「セミナー」と「参加者」を管理するテーブルの例CREATE TABLE seminar (\n\tseminar_id\tINT PRIMARY KEY,\n\tthedate\tDATE,\n\tstarttime\tTIME,\n\ttitle\t\tTEXT,\n\tplace\tTEXT,\n\tmemo\tTEXT\n);\nCREATE TABLE attendant (\n\tattendant_id\tINT PRIMARY KEY,\n\tseminar_id\tINT,\n\tcacel\tINT,\n\tname\tVARCHAR(32),\n\tmail\t\tVARCHAR(64),\n\tcompany\tVARCHAR(64),\n\tsection\t\tVARCHAR(64),\n\ttitle\t\tVARCHAR(64),\n\tzipcode\tVARCHAR(7),\n\taddress\tTEXT,\n\ttel\t\tVARCHAR(20)\n);　しかしこうなると、複数のセミナーが存在するということを基にしたページ設計が必要です。スタッフが参照するページは、セミナー自体の選択をして、その参加者一覧が表示されるような、マスター/ディテール形式のユーザーインターフェースが一般的でしょう。そして、参加申し込みで日付が入力される方法を考えなければなりませんが、これは実はビジネスモデルによって大きく変わると思われます。いずれにしても、「セミナーそのものを管理しなければならない」ということを考えれば、ユーザーインターフェースの設計は図9-4-2のようになります。スタッフが見るページがひとつ増えていて、そのセミナーの一覧はseminarテーブルを基にしたコンテキスト定義より作成が可能です。図9-4-2　ページとその要素をページないしはワイアフレームで記述　これでいいでしょうか？　こうして実際に動きそうな画面を見ると、いろいろな要求が欠けていたことが分かります。それらを列挙すると次の通りですが、これらで全てであるかどうかは分かりません。さらに要求が出てくるかもしれません。いずれにしても、これらの要求のひとつひとつについて、要求として記述し、それを元に開発プロセスを回します。ユーザーインターフェースの変更だけで終わるものもありますし、ユーザーインターフェースの追加や新たなコンテキストの識別が発生するでしょう。参加受付のページに名前の読みを入れるフィールドがない。入力を間違えた時の対処はどうする？　メールを見て参加者がメールや電話してくるとしたら、スタッフが個人個人の情報を変更できるようにしておく必要がある。その方法が具体的には記載されていない。新しくセミナーを作った時、日付やタイトルなどを入力するレイアウトができていない。キャンセルをクリックしたら、即座に消えるという動きをしたい。キャンセルを復活するのはどうすればいいか？　これも、おそらくメールや電話で依頼が来ると思われるので、スタッフがキャンセルの復活が可能なユーザーインターフェースがさらに必要である。参加受付は認証なし、しかしながら、スタッフ側のページは、たとえリンクされていないページだとは言え、そのまま公開するのは危ないので、認証ができるようにしたい。そうなると、認証ユーザーの登録ページも欲しい。　開発作業のプロセスとしては、要求定義、ユーザーインターフェースとページファイル、コンテキストの識別、定義ファイルでのコンテキスト定義、スキーマ定義といった流れになりますが、立て板に水を流すかのような一方向の流れで終わるということはありません。ある要件を実現するうちに気付かなかった、つまり明言できなかった要求がどこかの段階で増加し、その結果ユーザーインターフェースを追加したり変更したりすることが必要で、結果的にコンテキストやスキーマ定義への変更も必要です。このように、いくつかの作業をぐるぐると繰り返しながらなるべく完成に近づける作業を「イテレーション」と呼びます。図9-4-3　イテレーションを含む開発プロセスの流れ　いくつかのプロセスが一方向に進められるのは、一般にはひとつのプロセスでの作成結果を変更することに多大なコストがかかる場合に取られる方法です。そのため、時間やコストをかけて、ひとつのプロセスの成果物を出し、その完成度が高いものとして、次のプロセスに引き継がれてプロセスが進行するということになります。しかしながら、ここで紹介したようなイテレーションは、ひとつひとつのプロセスの作業はそれほど重くなく、修正も容易です。むしろひとつひとつのプロセスをじっくりやるよりも、手のつけられるところから進められるという意味ではより気軽な手法と言えるでしょう。また、結果的にINTER-Mediatorを使ったアプリケーションの骨格部分を構築している作業に一部は対応しており、上記の作業は設計でもありますが、構築でもあるのです。　アジャイル開発の原則をシンプルな言葉でまとめた『アジャイルソフトウェア開発宣言』の記述（この段落では「」で記載）と、ここまでに紹介したプロセスの対比をしてみましょう。開発プロセスを一人で行う方もいらしゃるかもしれませんが、職場で作業をするとしたら何人かのスタッフ同士で検討をするでしょう。その結果「個人との対話」が発生します。そして、INTER-Mediatorで作成した場合は、データベース、定義ファイル、ページファイルが揃えば何かしら「動くソフトウェア」ができ上がります。そして、作り込む部分が少ないうちは「変化への対応」も容易です。他に「顧客との協調」という記述がありますが、ここで紹介する手法を顧客あるいは開発者と顧客が取り組むとしたら、まさにそれは協調以外の何物でもありません。このように、INTER-Mediatorを利用した開発プロセスは、アジャイル開発であると言えます。　ちなみに、こうした「まずはHTMLファイルを作って考える」という手法は、アジャイル開発のひとつのプラクティスである「→モックアップ駆動開発（mockup driven development）」として提唱されています（英語で検索するとさまざまな論文が出てきますが日本語だと何も出ません）。HTMLだけだと、手続き的なプログラミングを習得していないような非プログラマーの利用者も作成できますし、さまざまなツールがあってコードを書かないで作り込むこともできるというメリットが大きいでしょう。加えて作成にそれほどの時間がかからないことや修正が容易ということもあり、開発の早い段階で最終的なイメージを見せることができます。その後にデータがそのページに乗るような流れでスムーズに発展させられます。しかしながら、INTER-Mediatorは単なるモックアップ駆動開発ではなく、モックアップが「動作する」ところにひとつの進歩があります。　一方で、「HTMLを作って開発するのは良くない方法である」という論調もあります。このような論調の根底にある原因は、「HTMLにはすべての情報が込められていない」ということに尽きると思います。確かに、単にHTMLをいきなり作るだけでは、実際の表示内容はどうなるのか、きちんと提示できないということもあります。しかしながら、このセクションで説明している方法は、最初に要求を記述して、要求を定義し、何をやりたいのかということが比較的細かなレベルまでも記述されているということがあります。もちろん、読みやすさや記述の的確さなどの要求定義のクオリティの問題もありますが、最初に何ができるようになっているのかという議論を経た上でHTMLでのページのモックアップ（システムの見本）を見ることは、それらの議論がより具体化された結果を見ていることであり、開発フェーズとしては無駄なものではなく、さらに進めた結果を見ていると言えるでしょう。→必要な実装を進める　短期間で設計・テスト・検証・改善というイテレーション作業を繰り返すうちに、次第に定義ファイルやページファイルには詳細な記述が増えることになるでしょう。このとき、要求定義として記述したやりたいことを実際に開発結果に組み込むとき、その処理をINTER-Mediatorが用意しているかどうかで対処が変わります。例えば、記録しているデータを表示するだけならば、単にページファイルにdata-im属性を記述するだけです。データを表示するとき、ちょっと変更して表示したい場合、それが書式設定のような単一のフィールドに関連するものや、同一レコードから求められるものであれば、calculationキーをコンテキストに記述して計算プロパティを定義して、そのプロパティ名をdata-im属性に記述します。一方、ボタンを押したらフィールドの値が更新されるようにしたい場合は、INTER-Mediatorはそのような機能を持ちませんから、通常はJavaScriptでプログラムを書くことになるでしょう。　ここまでで示している「セミナーの出席者リストを作る」という作例で考えていきましょう。まず、参加申し込みを行うページでは、単に申し込みの受付を行うので、これはポストオンリーモードでのページ作成で実現できそうです。ポスト時にバリデーションを行うため、コンテキスト定義にはvalidationの設定を行います。また、このままではデータを誰もが読めてしまいますので、データベース処理のうちレコード作成以外は存在しないグループdummyでしかできないように設定して、事実上誰もレコード作成以外のデータベース処理はできず、レコード作成のみ誰でもができるようにしておきます。また、「申し込む」ボタンをクリックしたあと、ボタンの位置に「お申し込み受付ました。確認のメールをごらんください。」と表示して、再度ボタンが押されないようにしつつ、受け付けられたことを利用者にフィードバックするとします。ページファイルの主要部分をリスト9-4-4、コンテキスト定義をリスト9-4-5に示します。ページファイルにあるseminar_idフィールド向けの隠しフィールドにある「20」という値は、何らかの方法で、参加受付しているセミナーのテーブルの主キー値を得て手作業で記述したものとします。リスト9-4-4　参加申し込みページのページファイルの主要部分&lt;table&gt;\n\t&lt;tbody data-im-control=\"post\"&gt;\n\t&lt;tr&gt;&lt;th&gt;名前&lt;/th&gt;&lt;td&gt;&lt;input type=\"text\" data-im=\"attendingpost@name\"/&gt;&lt;/td&gt;\n\t&lt;tr&gt;&lt;th&gt;メールアドレス&lt;/th&gt;&lt;td&gt;&lt;input type=\"text\" data-im=\"attendingpost@mail\"/&gt;&lt;/td&gt;\n\t\t:\n\t&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;td&gt;\n\t\t&lt;input type=\"hidden\" data-im=\"attendingpost@seminar_id\" value=\"20\"/&gt;\n\t\t&lt;button data-im-control=\"post\"&gt;申し込む&lt;/button&gt;\n\t&lt;/td&gt;\n&lt;/table&gt;リスト9-4-5　コンテキストattendingpostの定義name: attendingpost\nview: attendant\ntable: attendant\nid: attendant_id\nvalidation:\n    [field: name, rule: length(value)&gt;0, message: 入力必須です, notify: inline]\n    [field: mail, rule: length(value)&gt;0, message: 入力必須です, notify: inline]\nauthentication:\n    [read: [group: [dummy]]],\n    [update: [group: [dummy]]],\n    [delete: [group: [dummy]]]\npost-dismiss-message: お申し込み受付ました。確認のメールをごらんください。　同様に、スタッフ側のページも設計を進めるとさまざまな要素が必要になります。ここでは数多くなるので、ポイントだけを示します。まず、セミナー一覧と出席者一覧については、マスターディテール形式の仕組みを利用することにします。ただし、ディテール側はいきなりattendantテーブルを表示するのではなく、seminarテーブルを1レコード配置し、その内部にattendantテーブルのコンテキストを一覧として展開します。これは、参加者リストにもセミナー日やタイトルなどのseminarテーブルの値を表示したいというところから来ています。seminarテーブルは一覧用のseminarlistとディテール領域用のseminardetailの2つのコンテキストとして実現します。セミナー一覧は日付の逆順とするので、sortキーの定義がコンテキスト定義には必要です。出席者一覧では、名前の読みの順でsortキーの定義を記述します。また、出席者一覧では、キャンセルしていない人の一覧を出すためのqueryキーの定義を行います。なお、セミナー一覧上でフィールドの値を変更できるようにINPUTタグにしているので、これで全てのフィールドではありませんが、主要なフィールドの入力はできます。attendantテーブルの方は、このページファイルでは修正はできないので、別途作成することになると思われます。ページファイルの主要部分をリスト9-4-6、コンテキスト定義をリスト9-4-7に示します。なお、定義ファイルの2つ目の引数（オプション指定）において、全てのデータベースアクセスを認証が必要であるように設定するようにします。リスト9-4-6　スタッフ向けページのページファイルの主要部分&lt;table&gt;\n\t&lt;thead&gt;....&lt;/thead&gt;\n\t&lt;tbody&gt;\n\t&lt;tr&gt;\n\t\t&lt;td&gt;&lt;/td&gt;\n\t\t&lt;td&gt;&lt;input type=\"text\" data-im=\"seminarlist@thedate\"&gt;&lt;/td&gt;\n\t\t&lt;td&gt;&lt;input type=\"text\" data-im=\"seminarlist@title\"&gt;&lt;/td&gt;\n\t&lt;/tr&gt;\n&lt;/table&gt;\n&lt;div data-im-control=\"enclosure\"&gt;\n&lt;div data-im-control=\"repeater\"&gt;\n&lt;p&gt;ID：&lt;span data-im=\"seminardetail@seminar_id\"&gt;&lt;span&gt;　\nセミナー実施日：&lt;span data-im=\"seminardetail@thedate\"&gt;&lt;span&gt;&lt;/p&gt;\n&lt;div id=\"IM_NAVIGATOR\"&gt;&lt;/div&gt;\n&lt;table&gt;\n\t&lt;thead&gt;....&lt;/thead&gt;\n\t&lt;tbody&gt;\n\t&lt;tr&gt;\n\t\t&lt;td&gt;&lt;/td&gt;\n\t\t&lt;td data-im=\"attendantlist@name\"&gt;&lt;/td&gt;\n\t\t&lt;td data-im=\"attendantlist@mail\"&gt;&lt;/td&gt;\n\t\t\t\t:\n\t\t&lt;td&gt;&lt;input type=\"checkbox\" data-im=\"attendantlist@cancel\" value=\"1\"/&gt;&lt;/td&gt;\n\t&lt;/tr&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n&lt;/div&gt;リスト9-4-7　スタッフ向けページで利用する3つのコンテキスト定義name: seminarlist\nview: seminar\ntable: seminar\nid: seminar_id\nsort: [field: thedate, direction: DESC]\nrepeat-control: confirm-insert-top, confirm-delete\nnavi-control: master-hide\n\nname: seminardetail\nview: seminar\ntable: dummy\nid: seminar_id\nrecords: 1\nnavi-control: detail\n\nname: seminarlist\nview: attendant\ntable: attendant\nid: attendant_id\npaging: true\nsort: [field: yomi, direction: ASC]\nquery: [field: cancel, operator: !=, value: 1]\nrelation: [foreign-key: seminar_id, join-field: seminar_id, operator: =]　もちろん、これで完成ではありません。まだまだ、積み残した要求があります。実際に業務ができるところまで、要求を実現しなければならないのは言うまでもありませんが、ここでは作業の流れを示したいので、開発作業結果の紹介はここまでとします。　要求を考えるときに「何をする」のかがしっかり抽出されていれば、あとはその機能があるかどうかの判断で、あるのならページファイルや定義ファイルに記述を加えます。ないのであればJavaScriptやPHPでの拡張ポイントを検討して組み込みを行います。しかしながら、実際に組み込みを行うと、要求で考えた以上のことをやらなければならないことが多々あります。それらは頑張って新しい視点で実装をするしかないでしょう。例えば、単にデータやページ上の表示を考えれば、一覧された結果の中のあるフィールド値の合計は簡単に求められそうに見えます。もちろん、単なる合計は、計算プロパティで求めることも可能です。しかしながら、条件付きの集計をしたい場合はどうでしょうか？　別のフィールドの値が一定以上であれば、合計対象に含めても、そうでないなら合計に入れないという仕組みの実装はどうすればいいでしょうか？　これについては、いくつかの答えがあります。SQLデータベースなら、そうした計算処理を組み込んだビューを作っておくことで対処できます。また、エンクロージャーに全てのリピーターが合成された後に呼び出されるメソッドをコンテキスト定義で指定し、JavaScriptのプログラムにおいて、コンテキストの値を参照しながら、自分で繰り返し処理を記述して条件付きの合計計算をするという方法もあります。後者の手法は、ページ合成処理に割り込む処理の記述、コンテキストの取り出し、JavaScriptによる計算処理といった知識が必要になるでしょう。手続き的なプログラミングが必要な拡張点に限っては専門家に作ってもらうという手もあります。　コンピューターでのシステム開発に限らないのかもしれませんが、中間に存在するさまざまな議論をすっ飛ばして最終結果に目が向きがちです。例えば、「○○というフレームワークを使うと良いらしい」という結論ありきで、なぜそのフレームワークが良いのかということを考えていない関係者が散見されます。問いただして出てくる答えも「ブログで偉い人が言っていた」くらいの理由しかありません。どんなフレームワークでも、適用範囲とその利用プロセスが妥当かどうかという判断が先にあるはずです。ここで紹介したプロセスは最初に説明した通り、エンジニアでない人でも頑張ればできる範囲を想定したものです。INTER-Mediatorは、エンジニアでもない人が全てできるとは主張しませんが、エンジニアでない人でも開発作業やメンテナンス作業の一定部分を賄えるというシナリオを描けるという点を理解していただきたいと考えます。　フレームワークを使うとしたら、それをどのようにマスターすればいいのかということに注目が集まるのは世の常です。しかしながら、本当に重要なのは、INTER-Mediatorにタッチするまでの分析にあり、その分析を効率よく進める開発プロセスにあります。分析で俎上に上がったことはなんとかなるものです。しかし、分析で一切気付かないでいたことがシステムに組み込まれるのは奇跡に近い話です。そのため、初期の段階からきちんと記述を残すことを意図した要求のピックアップを重視すべきだと考えます。そして、INTER-Mediatorで利用できる機能で要求が実現できるかどうかを検討し、直接実現できるものはともかく組み込みましょう。場合によっては何段階かの作業が必要なものもあります。しかしながら、手続き的なプログラミングが必要な要求もあるということです。　UMLによる設計記述は、批判も多々あるものの共通のルールでダイアグラムを作成できるメリットは大きいでしょう。一方、「クラス図」「オブジェクト図」とあるように、原則としてオブジェクト指向の考え方が根底にあります。もちろん、ユースケース図やシーケンス図のような、オブジェクト指向という視点ではないものもありますが、UMLの成立過程を見ても、オブジェクト指向開発のひとつの達成点であることは間違いないでしょう。そのため、UMLを使いこなすにはオブジェクト指向プログラミングを基礎として習得している必要があります。しかしながら、INTER-Mediatorのように最終的にクラスを作ることを意図しないようなフレームワークでは、オブジェクト指向的にまとめ上げる必要性はあまりありません。特に最近のWebクライアント系フレームワークは、オブジェクト指向色が少ないこともあり、開発プロセスとしてどのような手法を取り入れていくのかについてのアイデアはこれから出てくるといったところでしょうか。この書籍の最後のセクションを書きながら、筆者はブログ上に記事を書き溜める形式で、現在のクライアントとサーバーを巻き込んだWebシステムのモデリングをどのようにすればいいかを考え始めています。クラスやオブジェクトというより、「やりたいこと」「させたいこと」という要求レベルでの単位をベースに、フレームワークの機能で分解して記述したニーズをまとめ、フレームワーク外の機能を抽出してオブジェクト指向的に手続き的なプログラムを作成するといった流れを想定しています。こちらは時間がかかるかもしれませんが、まとまった結果が出れば、INTER-Mediatorコミュニティには必ず還元できるものが得られると信じています。→データベース→→スキーマを用意する　データベースを利用したアプリケーションでは、データベース設計であるスキーマが肝であることは当然です。データベースの設計がすべての基礎になることはもちろんです。データベース上で想定していないことは、どんなに頑張っても実現できない可能性が高く、「想定されるあらゆる状態を記録できる」ようなスキーマを設計するのが基本であるとも言えます。そのため、SQLの定義言語は実にさまざまな機能があります。　INTER-Mediatorでアプリケーションを作成する場合、どこまでを実際に→→データベースのスキーマとして込めるのかということがあります。機能的には、テーブル定義、フィールド定義、フィールドの型くらいの定義で構いません。ただし、実用的には、主キー設定とユニークなインデックス、検索フィールドに対するインデックスは必要になります。その他の外部キー、初期値あたりは必須ではありませんが、設計時には意識はすることになると思われます。外部キー自体の設定は、relationキーでコンテキストに定義することになりますし、初期値はコンテキストやあるいはJavaScriptで指定するなどさまざまな方法があります。制約をどこで記述したいのかによって記述場所をよく検討しましょう。一般に外部キー制約は、リンクされていないレコードの作成を阻止するなどの目的を持って行われます。　SQLデータベースを利用する場合は、ビューを積極的に活用しましょう。データを取り込んでから処理をプログラムで書くよりも、SQLの段階で集計をしてしまう方が、一般には処理時間が短くなります。また、リレーションシップを適用した後の結果をビューとして取り込む方が、コンテキストの階層化により複数回のサーバーアクセスを行うよりも明らかにスピードアップの効果が出ます。あまりに節操なくビューを作ると何が何だか分からなくなりますので、用途を整理しながらビューを作って、それを元にコンテキストを組み立てるように進めれば良いでしょう。　データベースを作成してユーザーを作り、権限を与えてテーブルを作成するという一連のスキーマ定義コマンドは、INTER-Mediatorフォルダーのdist-docsにある各データベースごとの→→サンプルのスキーマファイルが参考になると思われます。SQLデータベースでの認証関連のテーブルについては、このファイルから必要な箇所をコピー&amp;ペーストすればいいでしょう。また、Samples/templates/least_schema_mysql.sqlというファイルは認証関連のテーブル定義とひとつのサンプルのテーブル定義なので、このファイルを基にして作成してもいいでしょう。　→このセクションのまとめ　一般的なWebアプリケーションフレームワークでは、旧来からの手続き的プログラミングを主体とした開発プロセスを踏襲あるいは改良した手法で語られることが多いでしょう。一方、INTER-Mediatorは、利用開始初期段階では手続き的プログラミングのコードを「書かない」ことを主眼としており、その点では他のフレームワークと大きく異なります。書かないのは存在しないのではなく、フレームワークにいつも最初に書くようなプログラムが内包されていて、アプリケーションを作る人はそのフレームワークに込められた仕組みを再利用しているのです。Webシステムを一般化すれば、ページとデータベースの連携が根底にあり、その仕組みを基礎として自分が必要な仕組みをさまざまな手法で組み込むという考え方でINTER-Mediatorは利用できます。→9-5Web→→アプリケーションの構築作業INTER-Mediatorを使ったWebアプリケーションを実際に作る時のディレクトリ構成や、あるいはフレームワーク自体のセットアップなどを説明します。→→→INTER-Mediatorのセットアップ　INTER-Mediatorは、Ver.6以降、→composerを稼働させることによるセットアップの作業が必要になりました。composerはもちろん、PHPのライブラリをダウンロードしてセットアップする仕組みですが、INTER-Mediatorのセットアップ用ファイルでは、さらにNode.jsもインストールして、npmによるJavaScriptのライブラリのセットアップも行います。原則として、composerに関連するコマンドを入れればあとは自動的に全て行いますが、この辺りの動作について知っておくことで、トラブルシューティング等に強くなれるかと思われますので、手順だけでなく、仕組みについても折に触れて説明します。　まず、INTER-Mediatorの稼働方法とセットアップについては、以下の3通りの動作を想定しています。INTER-Mediatorをダウンロードしてその状態で稼働させる。INTER-Mediatorをアプリケーションの一部としてインストールし稼働させる。INTER-Mediatorをcomposer管理のライブラリとして稼働させる。　最初のセットアップは、INTER-Mediatorそのものをダウンロードして、その中のサンプルなどをとりあえず動かしたいというような場合に相当すると思われます。実用的なアプリケーションは2つ目や3つ目の手法を取ることが一般的と考えます。それぞれの方法を説明します。INTER-Mediatorをダウンロードしてその状態で稼働　この方法では、レポジトリをgit cloneコマンドで取り出したり、あるいはリリースファイルとして配布されているファイルをダウンロードして稼働させる場合が多いでしょう。原則として、PHPが稼働し、何らかのデータベースが稼働する環境を用意した上で、INTER-Mediatorをダウンロードします。そして、ダウンロードして展開したフォルダを「INTER-Mediator」フォルダとすれば、このフォルダをカレントディレクトリとして、以下のようにコマンドを入力します。リスト9-5-1　INTER-Mediatorをセットアップするコマンドcomposer update　この方法では、単にcomposerコマンドを稼働するだけです。サブコマンドはinstallじゃないのかという指摘もあるかもしれませんが、INTER-Mediatorのディストリビューションにはロックファイルもあるので、updateで作業する方が早いと思われます。もっともinstallで作業しても構いません。なお、PHPのバージョンによっては「composer install」とした方が良い場合も過去にはあったのですが、いずれにしても、「composerを動かす」だけです。　これにより、必要なPHPのライブラリが、まずは、INTER-Mediator/vendorフォルダ以下にインストールされます。その作業の中で、Node.jsもインストールをします。Node.jsはバージョンの違いによって色々問題が発生する場合があり、原則としてバージョンを指定しています。その指定は、INTER-Mediatorのレポジトリのルートにあるcomposer.jsonファイルに記載があります。執筆時点では、Ver.18.16.0に固定してあります。　PHPのライブラリのインストール後、自動的に背後でnpmを実行します。そして、INTER-Mediator/node_modulesフォルダに、ライブラリが入ります。INTER-Mediator自体もすでにある程度はライブラリ化しているので、実は、それらがセットアップされていないとINTER-Mediatorは稼働しませんが、いずれにしても、作業としてはcomposer updateをするだけですが、自動的に背後でnpmによるセットアップも動いている点は知っておく必要があります。　この後、INTER-Mediator自体をアップデートしたい場合は、レポジトリのルートで「git pull」などを行います。その後、「composer update」を行い、PHPとJavaScriptのライブラリを更新します。　この状態のINTER-Mediatorを稼働する一番手軽な方法は、INTER-Mediatorディレクトリをカレントにして「php -S localhost:9000」などのPHPのサーバモードを利用することです。INTER-Mediatorをアプリケーションの一部としてインストールし稼働　INTER-Mediatorのアプリケーションを作成する場合、アプリケーションのルートに「lib」ディレクトリ、その中に「src」ディレクトリがあるものと想定しています。そして、srcディレクトリをカレントにして、git cloneで、INTER-Mediatorのレポジトリのクローンを作ります。しかしながら、srcフォルダの中のINTER-Mediatorは稼働用ではありません。逆に、何か変更が必要な場合はこのsrcにあるINTER-Mediatorの修正を行います。　そして、まず、composer updateコマンドを稼働して、srcディレクトリのINTER-Mediatorをセットアップします。その後に、→lib/src/INTER-Mediatorをカレントにして、以下のように「buildup.sh」スクリプトを稼働させるのですが、このスクリプトは「dist-docs」フォルダにあるので、相対パスで指定をしてスクリプトを稼働します。すると、図のように表示されて入力待ちになります。ここでは、1から4のいずれかの数値を入力してリターンキーを押します。通常は、(2)〜(4)のいずれかを選択してセットアップすると思われますが、いずれを選んでも、INTER-MediatorのJavaScriptコードが最小化されてひとつのファイルにまとめられるので、クライアント側からのダウンロードが早くなることが期待できます。リスト9-5-2　→→INTER-Mediatorをセットアップするコマンド% composer update\n% dist-docs/buildup.sh \n=================================================\n Start to build the INTER-Mediator Ver.11\n-------------------------------------------------\n Original: /Users/msyk/Code/INTER-Mediator\n Build to: /Users/msyk/Code/im_build/INTER-Mediator\n Path of minifyer (installed by composer): /Users/msyk/Code/INTER-Mediator/vendor/matthiasmullie/minify\n-------------------------------------------------\nChoose the build result from these:\n (1) Complete (everything contains)\n (2) Core only (the least set to work web applications)\n (3) Core only, and move it to 3-up directory (the ancestor of original INTER-Mediator)\n (4) Core only without Socket-IO, and move it to 3-up directory\nType 1, 2, 3 or 4, and then type return----&gt;　(2)だと、サンプルやテストコードなどがないものを、INTER-Mediatorと同じディレクトリに「im_build」ディレクトリを作り、その中に稼働用のINTER-Mediatorフォルダとレシート（作業報告）となるテキストを用意します。(3)は、「3-up directory」と記述がありますが、これは、lib/src/INTER-Mediatorをカレントにして作業した場合、libの直下に稼働用のINTER-Mediatorフォルダを作ることを意味しています。つまり、src直下にクローンし、スクリプトを動かしてそこからlib直下に稼働用のINTER-Mediatorを作ります。もちろん、フォルダ移動等の手間を省くための方策です。lib直下にすでにINTER-Mediatorディレクトリがある場合、元からあるINTER-Mediatorディレクトリは一旦削除して、新たに生成し直します。(4)は(3)に加えて最小化したJavaScriptコードを作るときにその中にSocketIOを含めないようにしてなるべくコードサイズを小さくする選択肢です。なお、通常は最小化したコードは450KBほどありますが、SocketIOを除くと380KBほどになります（Ver.12の途中の実測値）。　稼働するアプリケーションでは、lib/INTER-Mediator/INTER-Mediator.phpをrequireステートメントで読み込むことで、INTER-Mediatorの利用が可能になります。実際のファイル構成についてはこの後の『サイトのディレクトリ構成』で説明を行います。　なお、buildup.shスクリプトを動かすことで、composer updateや→npm updateが自動的に行われ、lib/INTER-Mediator直下にvendorとnode_modulesディレクトリが作成されてファイルがたくさんそこにコピーされ、さらには最小化されたINTER-Mediatorが用意されます。　この方法でインストールする場合は、→params.phpファイルはlib直下に配置することができます。つまり、INTER-Mediatorディレクトリの外部に配置できるので、その後のINTER-Mediatorの入れ替えはより気軽にできるでしょう。もちろん、INTER-Mediator内にあるparams.phpをコピーしてlib直下に配置し、その後に修正をします。　buildup.shスクリプトを動かせば、その時のカレントディレクトリのINTER-Mediatorディレクトリと同じ場所にim_buildディレクトリを作ります。(3)を選択すると、そのディレクトリにはINTER-Mediatorフォルダは生成しませんが、レシートのテキストファイルは作成します。→→INTER-Mediatorをcomposer管理のライブラリとして稼働　この方法は、INTER-Mediator自体をPHPのライブラリとして扱います。したがって、INTER-Mediator自体の特別なインストール作業は基本的には一切ありませんが、一定のルールに従ってアプリケーションを構築する必要があります。これについては、この後の『INTER-Mediatorによるアプリケーション』で紹介します。→→→サイトのディレクトリ構成　Webサーバの公開ディレクトリ、あるいはその中のディレクトリとして、アプリケーションは展開すると思われます。ここでは、『INTER-Mediatorのセットアップ』の『INTER-Mediatorをアプリケーションの一部としてインストールし稼働』で説明した方法で、INTER-Mediatorを稼働されるとします。　それぞれのページが独立したページファイルと定義ファイルから構成されるのであれば、それらは同一のファイル名にしておくのが一番わかりやすい整理方法でしょう。ごく小規模なサイトの場合、ひとつの定義ファイルに対してページファイルが複数存在することもあるでしょう。そのような状態でも問題はありませんが、定義ファイル名であること識別しやすい名前（例えば「def_file.php」など）にしておくと管理しやすくなります。　ページファイルが数えられる程度なら、ページファイルと定義ファイルを同一のディレクトリに並べても、それなりに管理はできるものです。しかしながら、10種類以上のページファイルがあるような場合には例えば用途ごとにディレクトリに分類した方がいいでしょう。ひとつのディレクトリ内に複数のページファイルや定義ファイルがあってもいいのですが、これも数が増えてくれば、複数のディレクトリにさらに分類します。さらに、JavaScriptのファイルや、PHPの拡張機能として利用するアドバイス定義ファイルについても、ページファイルや定義ファイルと同じディレクトリに入れておくのが混乱のない方法です。なお、INTER-Mediatorやそのほかのライブラリは、ルートにlibなどのディレクトリを作っておいて、そこにまとめて入れておきます。params.phpはルートではなくlibディレクトリの中に作成します。libにはそのほかのライブラリなどを入れてもいいでしょう。そして、lib/src/INTER-Mediatorから、dist-docs/buildup.shスクリプトにより、lib/INTER-Mediatorを生成して利用します。リスト9-5-3　規模の大きなサイトのファイル構成例FuncA\n　└ index.html（ページファイル）\n　└ Page1.php（定義ファイル）\n　└ Page1.js（ページ内の処理を行うJavaScript）\n　└ Page1.js（JavaScriptファイル）\n　└ Extending.php（PHPファイル：アドバイス定義クラスのファイルなど）\n　└ Page2.html（ページファイル）\n　└ Page2.js（ページ内の処理を行うJavaScript）\n　└ Page2.php（定義ファイル）\nFuncB\n　└ index.html（ページファイル）\n　└ Page3.php（定義ファイル）\n　└ Page4.html（ページファイル）\n　└ Page4.php（定義ファイル）\nstart_page.html（ページファイル）\nstart_page.yaml（定義ファイル）\nlib\n　└ INTER-Mediator（src以下のINTER-Mediatorからbuildup.shスクリプトで生成したもの）\n　　　└ INTER-Mediator.php\n　　　└ ...\n　└ params.php（設定ファイル）\n　└ styles.css（CSS定義ファイル）\n　└ src\n　　　└ INTER-Mediator（レポジトリからクローンしたもの）　ページファイルのヘッダー部には、同じディレクトリにある定義ファイルを参照すればいいので、例えばFuncA/index.htmlでは図9-5-1のようにSCRIPTタグでsrc属性に単にファイルを記述すればよいでしょう。定義ファイルでは、図9-5-2のようにINTER-MediatorのルートにあるINTER-Mediator.phpファイルを相対パスで指定して、INTER-Mediator本体を読み込み、IM_Entry関数を利用します。リスト9-5-4　ページファイルのヘッダ部&lt;head&gt;\n&lt;link rel=\"stylesheet\" href=\"../lib/styles.css\"&gt;\n&lt;script type=\"text/javascript\" src=\"Page1.php\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\" src=\"Page1.js\"&gt;&lt;/script&gt;リスト9-5-5　定義ファイルでINTER-Mediatorを読み込む部分&lt;?php\nrequire_once(\"../lib/INTER-Mediator/INTER-Mediator.php\");\nIM_Entry([...], [...], [...], 2);→→→INTER-Mediatorによるアプリケーション　INTER-Mediatorは、composerでインストールされるライブラリとしての動作も可能となっています。ただし、PHPだけでなく、JavaScriptの要素もあるので、単にcomposer.jsonに登録すれば良いということではありません。いくつかの要件を満たさないといけないのですが、その要件を満たすようなアプリケーションのレポジトリを作るためのテンプレートが用意されています。そのテンプレートはGitHubで、https://github.com/INTER-Mediator/IMApp-templateにおいて公開されています。まずは、それを利用したアプリケーション開発方法を説明し、そのテンプレートに備わった機能を説明しましょう。　アプリケーションを作成する手順を以下に示しますが、この順番通りということではなく、スキーマやページのコードは作っては修正等を行うなど、もちろん手順はある程度は行き来はすると思われます。まずは手元の開発用マシンで、PHPが稼働しており、加えて、MySQLないしはPostgreSQLが稼働しているという状況で、以下のように作業を行います。→→テンプレートのレポジトリ「→IMApp-template」を元にアプリケーションのレポジトリを作る。ページ右上にある「Use this template」から「Create a new repository」を選択し、あとは自分のアプリケーション用のレポジトリの名前を指定するなどしてレポジトリを作成する。そのレポジトリを、自身の開発用マシン等にクローンする。→lib/MySQL_Schema、→lib/PosrgreSQL_Schemaにそれぞれいくつかファイルがあるので、そのファイルを修正して、アプリケーションに必要なデータベース設定を用意します。実際の適用は、composerコマンドで実施されます。→lib/params.phpが実際にアプリケーションで利用されるparams.phpファイルです。そこにデータベース接続設定など必要な設定を行います。→lib/doafterinstall.sh、→lib/doafterupdate.shファイルを開き、最初の変数でデータベースの種類とデータベース名を指定します。レポジトリのルートで、「composer install」を入れます。INTER-Mediatorを含むさまざまなPHPおよびJavaScriptのライブラリがインストールされます。レポジトリ内にページファイルや定義ファイルなどのアプリケーション本体を作成する。適当なところでレポジトリにコミットし、pushしてGitHubのレポジトリに更新結果を反映する。　完成したアプリケーションを稼働サーバにセットアップするときは、レポジトリをクローンし、「compser install」を行うだけで良いでしょう。composer installコマンドにより、lib/doafterinstall.shコマンドが実行されてデータベースへのスキーマ適用まで自動的に終わらせるようにしています。　テンプレートにはINTER-Mediatorは存在しませんが、composerにより、vendor/inter-mediator以下に、INTER-Mediator本体がインストールされます。PHPのライブラリは、INTER-Mediator自体が統合可能な状態で作ってあるのでもちろん稼働しますが、JavaScriptのライブラリについては、INTER-Mediatorの内部でnode_modulesディレクトリを用意して、そこにインストールするようになっています。このことを実現するために、ルートにあるcomposer.jsonの中でscripts/post-install-cmdおよびscripts/post-update-cmdの定義で、INTER-Mediatorのルートに移動してnpm install/updateを実施し、加えてINTER-Mediator内部のdist-docs/generateminifyjshere.shスクリプトを稼働して、JavaScriptの最小化コードを作成してあります。したがって、INTER-MediatorによってインストールされたJavaScriptのライブラリは、パスを正しく指定すればアプリケーションで利用できますが、アプリケーションがnpmによるインストールが必要なJavaScriptライブラリを使う場合は、アプリケーションで別途package.jsonファイルを用意して、npm installコマンドを手で入れる必要はあります。あるいはnpm installコマンドを、lib/doafterinstall.shあるいはlib/doafterupdate.shに追加してください。　テンプレートにはサンプルとして簡単な住所録がsample_pageディレクトリにありますが、そこにある定義ファイルのindex_contexts.phpの冒頭では、次のようなrequire_onceステートメントがあって、これにより、composerでインストールしたINTER-Mediatorを使えるようになります。アプリケーションでのPHP形式の定義ファイルについては以下のように、vendor以下のINTER-Mediatorを参照するようにします。また、YAML形式の場合でページファイルと定義ファイルが同一のディレクトリにあって同じファイル名の場合には、INTER-Mediatorのフレークワークのルートにあるindex.phpを参照します。リスト9-5-6　定義ファイルでINTER-Mediatorを読み込む部分// PHPの定義ファイルでINTER-Mediatorを取り込む箇所の記述例\nrequire_once '../vendor/inter-mediator/inter-mediator/INTER-Mediator.php';\n\n// YAMLの定義ファイルをページファイルから参照する場合のコード例\n// ページファイル名と定義ファイル名が同一で同じディレクトリに存在する場合\n&lt;script src=\"/vendor/inter-mediator/inter-mediator/index.php\"&gt;&lt;/script&gt;\n\n// INTER-Mediatorの中でインストールしたJavaScriptコードをページファイルで利用する\n// 以下はJQuery FileUploadを利用する場合の例\n&lt;script src=\"../vendor/inter-mediator/inter-mediator/node_modules/inter-mediator-plugin-jqueryfileupload/index.js\"&gt;&lt;/script&gt;　params.phpについても、composerでインストールした場合は、INTER-Mediatorのルートから2つ上のディレクトリにあるlib以下に存在することを仮定しています。つまり、アプリケーションのルートにvendorディレクトリが作られる前提で、アプリケーションのルートにあるlibの直下にparams.phpを用意しておけば、そのparams.phpファイルが優先的に使われます。→→→テンプレートでのデータベーススキーマ運用　テンプレートのlib/MySQL_Schemaやlib/PosrgreSQL_Schemaには、ディレクトリ名に相当するデータベースのスキーマ定義ファイルが掲載されています。それぞれのディレクトリには、表9-5-1に示すような4つのファイルが用意されています。なお、適用される順序は、表の順序に一致しています。ファイル名InstallUpdate内容→schema_basic.sql適用→→テーブルの定義。INTER-Mediatorの動作に必要なテーブルも定義されている→schema_update.sql適用update時に実行するSQL→schema_views.sql適用適用→→ビューの定義→schema_initial_data.sql適用→初期データ。ログインユーザとサンプルデータがある表9-5-1　スキーマ定義に利用するファイル　composer installをしたときにはテーブル、ビューの定義と初期データの書き込みを行います。composer updateをしたときには、ビューの定義とupdate時専用のファイルを実行します。テーブルとビューの定義や初期データはSQLそのものです。なお、テーブル定義はupdateでは利用されないのですが、ビューの定義は利用します。そのため、CREATE VIEW aview...ではなく、CREATE OR REPLACE VIEW aview...で定義をビュー定義をしてください。そうすると、updateのときにスムーズにビューの更新ができます。　update時の運用について説明をしましょう。例えば、フィールドを追加したという場合、もちろんテーブル定義を書き換えるのが基本ですが、CREATE TABLEをそのまま適用すると、テーブルが一度作成し直されてしまいます。そこで、schema_udate.sqlに「ALTER TABLE ADD COLUMN afield TEXT;」などと記述すれば、composer updateでスキーマの更新もできてしまいます。ただし、2度同じコマンドを実行するとエラーになるので、composer update実行後にschema_update.sqlの中身を消すなどのメンテナンス作業は必要です。ビューについては、composer udateの時に常に適用するようにしているので、ビューの変更はschema_views.sqlを書き直すだけで大丈夫です。　こうしたスキーマの自動適用は、lib/doafterinstall.sh、lib/doafterupdate.shに記載があります。もし、問題があれば、これらのスクリプトを書き直しましょう。例えば、macOSではHomebrewを使い、Linuxではsudo mysqlによってroot利用できることを仮定しています。データベースやサーバのバージョンによっては何かしらの対処は必要になる可能性がありますので、エラーや適用されていないなどの問題があれば、これらのスクリプトをチェックしてください。　初期データの中には、管理者と一般ユーザを想定したadminとuserという2つのアカウントが定義されています。また、ファイルを見れば明白なように、これらで利用するパスワードは「Quahf1fo#」とコメントに記載しています。もちろん、実際に運用する時にはパスワードを違うものにします。もちろん、hashedpasswdフィールドの値を変えるのですが、例えば、以下のようなスクリプトの実行で可能です。以下は、パスワードを1234にした場合例で、実際に利用するパスワードに置き換えてコマンド実行をしてください。出力結果のハッシュ値部分を、schema_initial_data.sqlファイルにコピー&amp;ペーストすれば良いでしょう。リスト9-5-7　パスワードを異なるものにするときのハッシュ値計算% vendor/inter-mediator/inter-mediator/dist-docs/passwdgen.sh -p 1234\n'','1234','3e93a6f1ae544db6b2fa3cc6cae987e158d2b138188f1f643d7db1e6a6ff9e8a456a654a'→テンプレートに含まれるさまざまな仕組み　テンプレートにはサンプルとして簡単な住所録がsample_pageディレクトリにあります。このページファイルでは、→Bootstrapを利用できるようにしてあります。まあ、JQuery FileUploadを使ったファイルをアップロードする仕組みも入っています。加えて、/lib/sticky-header-tableディレクトリにあるスタイルファイルを利用して、リスト表示で→→ヘッダをページ上部に固定する設定もあります。また、/lib/utility-panelディレクトリにあるスタイルやJavaScriptを利用して、→ポップアップパネルを出す仕組みもあります。単にINTER-Mediatorのサンプルというだけでなく、もう少し色々な機能を組み込んでいます。　テンプレートのレポジトリの/Accountsには、→→ユーザ管理のためのページがあります。このページは、adminグループのユーザしかログインできません。既定値ではadminユーザのみが利用できます。このページで、ユーザの追加や削除、パスワードのリセット等が可能です。サンプルの住所録は認証はが必要で、初期状態ではadmin、userどちらも開くことができるようになっています。認証が不要なら、/sample_page/index_contexts.phpを修正します。authemticationキーの値をコメントにすれば良いでしょう。　このアプリケーションを本番サーバで利用するときに懸念されることは、レポジトリの内容が取り出されるということです。レポジトリのルートをWebドキュメントのルートにすると、http://ドメイン名/.git 以下のGitのデータを取り出すことで、レポジトリ全体を取り出されてしまいます。レポジトリをPrivateにしても、このファイルを取り出されると中身は誰でも参照できることになります。そういうこともあって、一般にはレポジトリにはパスワード等は入れないようにということになっていますが、色々な事情でレポジトリの中に入れざるを得ない場合もありますでしょう。その場合は、.gitディレクトリをWebサーバから参照できないようにすれば良いです。その意味では、→Webサーバから参照されたくないファイルはいくつもあります。例えば、YAMLやJSONで定義ファイルを作っていると、これら中身が丸見えになるのはちょっと抵抗があるでしょうし、シェルスクリプトをWeb経由で動かされるのも場合によってはサーバトラブルの原因になります。また、.sqlファイルも見られたくないものです。なお、.phpファイルはPHPが実行できる範囲であれば、大概は問題はないと思います。この対策のために、/lib/for_server/apache-deny-files.confというファイルを用意してあります。内容は執筆時点では以下のとおりです。リスト9-5-8　apache-deny-files.confファイルの内容&lt;FilesMatch \"\\.(yaml|sh|sql|json|lock|md|gitignore)$\"&gt;\n    Order allow,deny\n    Deny from all\n&lt;/FilesMatch&gt;\n&lt;Directorymatch \"/(\\.git|MySQL_Schema|PostgreSQL_Schema)\"&gt;\n    Order allow,deny\n    Deny from all\n&lt;/Directorymatch&gt;　例えば、Ubuntuであれば、このファイルを、/etc/apache2/conf-availableにコピーして、「sudo →a2enconf apache-deny-files」と入力すれば、設定ファイルとしてこの内容が読み込まれます。設定ファイルの内容は特定の拡張子のファイル、そしてWeb経由で読み込まれたくないファイルがあるディレクトリをそれぞれ指定したものです。もちろん、状況に応じて修正してください。また、特定のドメインだけの場合は、サイト用のファイル内に中身を組み入れるなどの対処が必要ですが、これも一種のテンプレートとしてご利用ください。→→→INTER-Mediatorディレクトリを非公開にする　INTER-MediatorディレクトリをWebサーバーの公開ディレクトリに置くのは危険と思われるかもしれませんが、一方で、定義ファイルエディターや、ユーザー管理のアプリケーションなどが最初から稼働しないような仕組みにしてあるので、PHPが動く状態になっていれば問題はないと考えます。params.phpファイルにデータベースのパスワード等を記述しますが、これもPHPが稼働していれば、クライアントにパスワードの文字列が漏洩することはありません。　それでも、やはりINTER-Mediator自体を非公開のディレクトリ（例えば「/usr/local/share」など）に置いて運用したいと思われるかもしれません。しかしながら、現状、一部の機能で、公開ディレクトリに存在することを前提としたものがあります。その機能を使わないのならば、Web公開ディレクトリの外部でも稼働しますが、PHPの設定等の変更は必要になる可能性もあります。→→定義ファイルエディタや→ページファイルエディタを利用する　まず、定義ファイルエディターを使いたい場合には、可能な限り、INTER-Mediator-Server VM上で開発して、完成後に実環境に移動することをお勧めます。もし、どこかのサーバーで定義ファイルエディターを使いたくなった場合には、定義ファイル自体あるいは定義ファイルを保存するディレクトに対して、Webサーバーを稼働しているユーザーにファイル読み書きの権限を厳密に制限してセットしておく必要があります。そして、INTER-Mediatorのルートにあるeditorsフォルダーにある定義ファイルのdefedit.phpの末尾の行にあるコメントを削除してください。リスト9-5-9はdefedit.phpの最後の数行ですが、最後の行の頭にある//を削除してファイルを保存しておいてください。INTER-Mediatorのレポジトリにある定義ファイルエディターの機能は意図的に無効化してあります。有効な状態でファイルをサーバーに登録すると、それはあからさまなセキュリティホールになるからです。ここで有効化した場合は、いったんサイト全体を、Webサーバーの認証機能を利用して、ユーザー名とパスワードを入れないと使えない状態にしておくのがいいでしょう。もちろん、システム完成後はdefedit.phpの最後の行の頭に//を入れて、定義ファイルエディターを無効にしてください。そうしないと、誰もが定義ファイルを参照あるいは変更できる状態になります。定義ファイルエディタやページファイルエディタを起動するURLについては、演習環境で使っているファイル（IMApp_Trialレポジトリのルートにあるindex.phpファイル）を参考にしてください。リスト9-5-9　定義ファイルエディターを利用可能にする/**\n * Don't remove comment slashes below on any 'release.'\n */\n// IM_Entry($defContexts, null, array('db-class' =&gt; 'DefEditor'), false);→このセクションのまとめ　INTER-Mediatorを使ったWebサイトのファイル配備の例や、params.phpファイルで置き換えの必要な箇所、そして、INTER-Mediatorをビルドして、若干の高速化を行う方法などをこのセクションで説明しました。そして、INTER-Mediatorを使ったアプリケーション開発のためのテンプレートレポジトリも紹介しました。\n"
    }
]